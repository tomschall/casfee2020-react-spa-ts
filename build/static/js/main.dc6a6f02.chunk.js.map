{"version":3,"sources":["api/generated/graphql.tsx","components/ApolloWrapper.tsx","theme/theme.tsx","theme/typography.ts","theme/overrides.ts","components/Login.tsx","components/shared/SignIn.tsx","components/shared/NotFound.tsx","components/shared/Loader.tsx","components/PrivateRoute.tsx","atom.js","components/shared/Logo.tsx","components/shared/OnlineUserStatus.tsx","components/chat/AddChannelMembers.tsx","components/chat/AddDirectMessageChannel.tsx","components/shared/UserStatus.tsx","components/chat/ChannelListMessageCounter.tsx","components/shared/ThreadsLink.tsx","components/chat/ChannelList.tsx","components/chat/DirectMessageUserList.tsx","components/Logout.tsx","components/chat/AddChannel.tsx","components/shared/SideBar.tsx","components/chat/threads/ThreadInfo.tsx","components/chat/threads/ThreadDeleteMessage.tsx","components/chat/threads/ThreadMessageList.tsx","components/shared/GiphyCarousel.tsx","components/shared/MenuBarDrawer.tsx","components/adminPollings/ResultGraph.tsx","components/adminPollings/VoteButton.tsx","components/adminPollings/ShowTotalVotes.tsx","components/adminPollings/PublishChannelPolling.tsx","components/adminPollings/PollPopup.tsx","components/chat/MobileMenu.tsx","components/shared/MenuBar.tsx","components/chat/threads/ThreadMessageInput.tsx","components/chat/threads/Thread.tsx","components/chat/threads/ThreadListInputContainer.tsx","components/chat/threads/ThreadList.tsx","components/chat/threads/ThreadMenuBar.tsx","components/chat/threads/ThreadListContainer.tsx","components/chat/threads/ThreadContainer.tsx","components/layout/ThreadBoard.tsx","components/chat/threads/ThreadReply.tsx","components/chat/threads/ThreadReplyIn.tsx","components/chat/UpdateMessage.tsx","components/chat/MessageList.tsx","components/shared/TypingIndicator.tsx","components/chat/MessageInput.tsx","components/chat/Chat.tsx","components/chat/ChatApp.tsx","components/chat/MobileHeaderMenu.tsx","components/chat/ChatContainer.tsx","components/layout/ChatBoard.tsx","components/admin/AdminSidebar.tsx","components/admin/AdminUserList.tsx","components/adminPollings/DeleteQuestion.tsx","components/adminPollings/ShowPollQuestionLockState.tsx","components/adminPollings/GetChannels.tsx","components/adminPollings/GetPollQuestions.tsx","components/adminPollings/AddPollQuestion.tsx","components/adminPollings/PollingDashBoard.tsx","components/adminPollings/GetPollAnswerId.tsx","components/adminPollings/DeleteAnswer.tsx","components/adminPollings/PollAnswerList.tsx","components/adminPollings/SetPollQuestionLockState.tsx","components/adminPollings/PollAnswers.tsx","components/admin/AdminContainer.tsx","components/layout/AdminBoard.tsx","App.tsx","index.tsx"],"names":["AddDirectMessageChannelChannelTypeEnum","MyMutationChannelTypeEnum","ValidateAndAddDirectMessageChannelTypeEnum","Channel_Constraint","Channel_Poll_Constraint","Channel_Poll_Select_Column","Channel_Poll_Update_Column","Channel_Select_Column","Channel_Thread_Constraint","Channel_Thread_Message_Constraint","Channel_Thread_Message_Select_Column","Channel_Thread_Message_Update_Column","Channel_Thread_Select_Column","Channel_Thread_Update_Column","Channel_Type_Constraint","Channel_Type_Enum","Channel_Type_Select_Column","Channel_Type_Update_Column","Channel_Update_Column","Message_Constraint","Message_Cursor_Constraint","Message_Cursor_Select_Column","Message_Cursor_Update_Column","Message_Select_Column","Message_Update_Column","Order_By","Poll_Anwers_Constraint","Poll_Anwers_Select_Column","Poll_Anwers_Update_Column","Poll_Questions_Constraint","Poll_Questions_Select_Column","Poll_Questions_Update_Column","User_Channels_Constraint","User_Channels_Select_Column","User_Channels_Update_Column","User_Constraint","User_Online_Select_Column","User_Select_Column","User_Typing_Select_Column","User_Update_Column","User_Votes_Constraint","User_Votes_Select_Column","User_Votes_Update_Column","ApolloWrapper","children","useAuth0","isAuthenticated","getAccessTokenSilently","getHeaders","a","headers","token","Authorization","authMiddleware","setContext","operation","originalHeaders","wsLinkOptions","uri","process","options","reconnect","lazy","connectionParams","httpLink","createHttpLink","wsLink","WebSocketLink","link","split","query","getMainDefinition","kind","concat","cache","InMemoryCache","client","ApolloClient","theme","createMuiTheme","palette","common","black","white","type","background","paper","default","primary","light","main","dark","contrastText","secondary","error","success","shape","borderRadius","mixins","toolbar","spacing","props","MuiCheckbox","style","fontSize","MuiChip","padding","MuiList","MuiListItemIcon","color","MuiPaper","draggable","elevation","overflow","MuiAppBar","top","bottom","MuiButton","disableElevation","variant","size","disableFocusRipple","disableTouchRipple","typography","body1","body2","fontWeight","button","h1","paddingBottom","h2","marginTop","h3","marginBottom","h4","h5","h6","overrides","MuiCssBaseline","width","height","backgroundColor","textDecoration","MuiPopover","root","MuiBackdrop","MuiFab","boxShadow","label","MuiSpeedDial","direction","directionUp","actions","display","MuiSpeedDialAction","fab","staticTooltip","tooltipOpen","tooltipPlacement","tooltipPlacementLeft","staticTooltipLabel","right","whiteSpace","MuiTableCell","borderBottom","MuiInputBase","MuiContainer","margin","MuiListItemText","MuiDivider","opacity","MuiTypography","contained","MuiIconButton","Login","loginWithRedirect","Button","onClick","useStyles","makeStyles","justifyContent","alignItems","flexDirection","title","textTransform","paddingTop","SignIn","classes","Container","maxWidth","Grid","container","className","item","Box","src","alt","Typography","toolbarIcon","NotFound","Loader","flex","CircularProgress","PrivateRoute","component","args","withAuthenticationRequired","onRedirecting","InsertMessageDocument","gql","useInsertMessageMutation","baseOptions","Apollo","UpdateMessageDocument","SetUserOnlineDocument","useSetUserOnlineMutation","AddChannelDocument","ValidateAndAddDirectMessageChannelDocument","AddChannelUserDocument","SendTypingEventDocument","useSendTypingEventMutation","UpsertMessageCursorDocument","useUpsertMessageCursorMutation","InsertChannelThreadMessageDocument","useInsertChannelThreadMessageMutation","DeleteThreadMessageDocument","InsertChannelThreadDocument","AddPollQuestionDocument","AddAnswerToQuestionDocument","AddPublishPollQuestionToChannelDocument","SetPollAnswerVoteDocument","SetPublishPollQuestionStateDocument","DeletePollQuestionDocument","DeletePollQuestionFromChannelDocument","UpdatePollAnswerTextDocument","DeletePollAnswerIdDocument","SetUserVotePollQuestionDocument","GetUserListDocument","GetChannelByNameDocument","GetChannelThreadDocument","WatchMessagesDocument","useWatchMessagesSubscription","WatchChannelThreadMessagesDocument","useWatchChannelThreadMessagesSubscription","WatchChannelThreadDocument","useWatchChannelThreadSubscription","WatchThreadsDocument","WatchOnlineUsersDocument","useWatchOnlineUsersSubscription","WatchChannelsDocument","WatchDirectMessageChannelsDocument","WatchUsersWhoHaveNotSubscribedToChannelDocument","WatchUsersWhoHaveSubscribedToDirectMessageChannelDocument","GetUserIsTypingDocument","WatchMessageCursorDocument","WatchGetPollQuestionsDocument","WatchGetPollQuestionDocument","useWatchGetPollQuestionSubscription","WatchGetPollAnswersDocument","useWatchGetPollAnswersSubscription","WatchChannelPollQuestionDocument","WatchPollAnswerVotesDocument","WatchGetChannelsDocument","WatchChannelHasActivePollDocument","WatchChannelPollActiveStateDocument","WatchCheckUserHasVotedDocument","atom","key","currentChannelState","getPollQuestionAnswers","giphyState","deletedMessageState","large","backgroundSize","Logo","Avatar","badge","avatar","OnlineUserStatus","user","onlineUsers","data","onlineUsersError","loading","console","log","Alert","severity","ListItemIcon","Badge","invisible","user_id","undefined","onlineUser","users","filter","u","auth0_user_id","length","setOnlineUsersStatus","username","substring","toUpperCase","overflowY","spacer","AddChannelMembers","history","useHistory","useRecoilState","currentChannel","loadingAuth0","isLoading","variables","owner_id","channel_id","id","useAddChannelUserMutation","addChannelUserMutation","addChannelUserError","handleUsersToggle","event","xs","mt","mb","name","Divider","List","aria-label","map","index","ListItem","ListItemText","push","AddDirectMessageChannel","useState","setAnchorEl","setUsers","sub","upsertMessageCursorMutation","upsertMessageError","sendMessage","sendUpdateMessageError","useValidateAndAddDirectMessageChannelMutation","validateAndAddDirectMessageChannelMutation","addDMError","useEffect","checkUserSubscriptions","user_channels","user_channel","channel","check","handleAddUser","dm_user","uuidv4","user_id1","user_id2","message","text","validateAndAddDirectMessageChannel","message_id","UserStatus","usersOnline","justify","Chip","icon","nickname","Tooltip","placement","badgeContent","flexWrap","ChannelListMessageCounter","channelId","auth0Error","count","setCount","fetchPolicy","useWatchMessageCursorData","useWatchMessageCursorLoading","useWatchMessageCursorError","messageId","message_cursor","messageCounterArray","messages","m","Fragment","treeView","ThreadsLink","to","Channels","React","open","setOpen","useMediaQuery","breakpoints","down","channel_type","ChatMessage","Collapse","in","timeout","unmountOnExit","channels","is_private","data-channel-name","nested","paddingLeft","form","flexGrow","submit","itemText","DirectMessageUserList","DirectMessage","up","Logout","logout","IconButton","returnTo","window","localStorage","clear","checkbox","AddChannel","matches","openAlert","setOpenAlert","channelName","setChannelName","channelIsPrivate","setChannelIsPrivate","addChannel","userAuth0","setSnackbarPosition","handleAlert","handleSubmit","e","preventDefault","toLocaleLowerCase","dataAddChannel","insert_channel","returning","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","noValidate","autoComplete","onSubmit","TextField","disabled","value","autoFocus","onChange","target","placeholder","fullWidth","FormControlLabel","control","Checkbox","checked","endIcon","marginRight","marginLeft","paddingRight","branding","logo","SideBar","ChannelList","head","messageText","reply","ThreadInfo","channelThread","vspaceTop","ListItemAvatar","deleted","location","origin","moment","timestamp","fromNow","vspace","vspaceBottom","renderThreadInfo","ThreadDeleteMessage","deleteThreadMessageMutation","delete_channel_thread_message","affected_rows","handleDelete","ThreadMessageList","reverse","image","renderMessage","giphySearchInput","giphyCarousel","giphyFetch","GiphyFetch","GiphyCarousel","hideGiphyCarousel","setGif","giphySearchString","setGiphySearchString","fetchGifs","offset","search","limit","trending","onGifClick","gif","gifHeight","gutter","ev","menuButton","menuButtonHidden","drawerPaper","transition","transitions","create","easing","easeInOut","duration","enteringScreen","drawerPaperClose","overflowX","easeOut","leavingScreen","appBarSpacer","giphyImage","MenuBarDrawer","handleDrawerClose","Drawer","anchor","clsx","Toolbar","position","ResultGraph","answerId","userVote","pollVotes","totalVotes","LinearProgressWithLabel","mr","LinearProgress","toFixed","answerid","pollSubmit","VoteButton","enabled","ShowTotalVotes","pollCard","transform","minWidth","PublishChannelPolling","selectedPollAnswerId","setSelectedPollAnswerId","pollAnswerId","getPollAnswerVotes","getPollAnswerVotesLoading","useWatchChannelPollQuestionSubscription","useSetPollAnswerVoteMutation","setPollAnswerVoteMutation","numbers","getChannelPoll","poll_question","poll_anwers","num","votes","reduce","b","useWatchCheckUserHasVotedSubscription","pollQuestionId","auth0UserId","userVoteLoading","useSetUserVotePollQuestionMutation","userName","setUserVotePollQuestionMutation","handleChange","parseInt","currentPollAnswerVotes","pollAnswerVotes","newVote","user_votes","Paper","channelPoll","sort","poll_answer_id","FormControl","RadioGroup","pollAnswer","Radio","popoverRoot","popupWidth","left","animation","border","content","PollPopUp","currentChannelId","poll_questions","popupId","popupState","bindTrigger","Popover","anchorReference","bindPopover","close","createStyles","speedDial","action","backdrop","MobileMenu","isPrivate","handleDrawerOpen","handleGiphyClick","hidden","state","handleClose","SpeedDial","ariaLabel","SpeedDialIcon","onOpen","SpeedDialAction","tooltipTitle","Backdrop","appBar","sharp","appBarShift","MenuBar","showGiphyCarousel","setShowGiphyCarousel","order","giphyVisible","giphyHidden","messageInput","messageButton","maxHeight","ThreadMessageInput","setText","setdeletedMessage","sendTypingEventMutation","alert","channelThreadId","channel_thread_id","images","fixed_width_small","url","textLength","handleTyping","setTextFieldSize","InputProps","input","InputLabelProps","setButtonSize","Icon","messageContainer","Thread","messagesEndRef","useRef","useParams","getChannelThreadData","getChannelThreadLoading","getChannelThreadError","current","scrollIntoView","scrollToBottom","channel_thread_message","channel_thread","ref","rootSingleChip","floatingLabelFocusStyle","ThreadListInputContainer","bitly_url","ThreadList","ThreadMenuBar","AppBar","disableGutters","clickable","end","ThreadListContainer","channel_thread_messages","sidebar","borderRightWidth","borderRightStyle","borderRightColor","ThreadContainer","ChatBoard","sendUserIsOnline","setInterval","ThreadReply","channelThreadData","channelThreadLoading","channelThreadError","insertChannelThreadMutation","navigateToThreadChannel","handleClick","ThreadReplyIn","pathname","lastReply","UpdateMessage","updateMessageMutation","handleUpdate","_eq","update_message","multiline","rowsMax","cursor","MessageList","lastMessage","preLastMessageId","showUpdate","setShowUpdate","showUpdateMessageId","setShowUpdateMessageId","deletedMessage","useRecoilValue","handleShowUpdate","giphy","i","indicator","TypingIndicator","self_id","user_typing","ChatInput","handleSetLastMessage","focused","zIndex","polling","Chat","channelType","setLastMessage","MessageInput","ChatApp","setCurrentChannel","isLoadingAuth0","channelLoading","channelError","MobileHeaderMenu","minHeight","chatApp","ChatContainer","sm","AdminSidebar","aria-labelledby","subheader","ListSubheader","AdminUserList","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","scope","last_seen","DeleteQuestion","questionId","setActiveState","channelPollState","tobeDeleted","deleteQuestion","handleQuestionDelete","locked","unlocked","ShowPollQuestionLockState","GetChannels","questionIdState","setQuestionIdState","getPollQuestionId","useWatchChannelPollActiveStateSubscription","useAddPublishPollQuestionToChannelMutation","pollQuestionToChannel","useDeletePollQuestionFromChannelMutation","deletePollQuestionFromChannelMutation","deleteError","handlePublishOnChannel","kanalId","channelID","pollQuestionID","handleDeleteQuestionFromChannel","pb","chn","channel_polls","onDelete","play","stop","heading","pxToRem","details","column","flexBasis","helper","borderLeft","divider","GetPollQuestions","setPollQuestion","questions","question","Accordion","defaultExpanded","AccordionSummary","expandIcon","aria-controls","fromDashboard","is_active","created_at","format","AccordionDetails","onMouseEnter","AccordionActions","href","AddPollQuestion","addPollQuestionMutation","pollTitle","setPollTitle","handleAddTitle","FormGroup","required","data-testid","PollingDashBoard","GetPollAnswerId","DeleteAnswer","deletePollAnswerIdMutation","handleDeleteAnswer","PollAnswerList","updateEnabled","setUpdateEnabled","answerTextUpdateId","setAnswerTextUpdateId","answerText","setAnswerText","getPollQuestion","updatePollAnswerTextMutation","handleUpdateAnswerText","Object","values","poll_answers","answer","row","handleAnswerChange","rows","inputProps","maxLength","lock","unlock","SetPollQuestionLockState","readyToPublish","setReadyToPublish","setPollQuestionState","totalAnswers","handleSetPollQuestionPublishState","PollAnswers","answerNewText","setAnswerNewText","currentAnswerId","setCurrentAnswerId","handleAddAnswer","p","handleNewAnswerChange","AdminContainer","md","exact","path","AdminBoard","App","ThemeProvider","CssBaseline","from","ThreadBoard","ReactDOM","render","domain","clientId","redirectUri","onRedirectCallback","appState","replaceState","document","targetUrl","audience","getElementById"],"mappings":"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E,gCAAAA,M,cAyDAC,K,2BAAAA,E,QAAAA,E,uBAAAA,E,YAAAA,E,oBAAAA,M,cA+KAC,K,0DAAAA,E,yCAAAA,M,cAiIAC,K,wDAAAA,M,cAyGAC,K,oCAAAA,E,QAAAA,E,cAAAA,E,kBAAAA,E,sBAAAA,E,kBAAAA,M,cA8EAC,K,oCAAAA,E,QAAAA,E,cAAAA,E,kBAAAA,E,sBAAAA,E,kBAAAA,M,cAuGAC,K,QAAAA,E,wBAAAA,M,cAkEAC,K,QAAAA,E,wBAAAA,M,cA2HAC,K,qCAAAA,M,cAKAC,K,2BAAAA,E,gCAAAA,M,cAoFAC,K,kBAAAA,E,eAAAA,M,cAcAC,K,kBAAAA,E,eAAAA,M,cAQAC,K,2BAAAA,E,QAAAA,E,uBAAAA,E,YAAAA,E,oBAAAA,M,cAyLAC,K,4BAAAA,M,cA4FAC,K,wEAAAA,E,yCAAAA,M,cA4FAC,K,uBAAAA,E,QAAAA,E,uBAAAA,E,kBAAAA,M,cAgFAC,K,uBAAAA,E,QAAAA,E,uBAAAA,E,kBAAAA,M,cAkKAC,K,uBAAAA,E,kBAAAA,E,QAAAA,E,cAAAA,E,YAAAA,E,sBAAAA,E,kBAAAA,M,cAiFAC,K,uBAAAA,E,kBAAAA,E,QAAAA,E,cAAAA,E,YAAAA,E,sBAAAA,E,kBAAAA,M,cA4xBAC,K,UAAAA,E,gCAAAA,E,8BAAAA,E,YAAAA,E,kCAAAA,E,iCAAAA,M,cA+GAC,K,mCAAAA,M,cA8GAC,K,uBAAAA,E,QAAAA,E,yBAAAA,E,YAAAA,E,uBAAAA,E,iBAAAA,E,eAAAA,M,cAyFAC,K,uBAAAA,E,QAAAA,E,yBAAAA,E,YAAAA,E,uBAAAA,E,iBAAAA,E,eAAAA,M,cAuMAC,K,yCAAAA,M,cAoGAC,K,uBAAAA,E,QAAAA,E,qBAAAA,E,mBAAAA,E,YAAAA,E,wBAAAA,M,cAsEAC,K,uBAAAA,E,QAAAA,E,qBAAAA,E,mBAAAA,E,YAAAA,E,wBAAAA,M,cAwuCAC,K,uCAAAA,M,cAiFAC,K,uBAAAA,E,kBAAAA,M,cA0DAC,K,uBAAAA,E,kBAAAA,M,cAyCAC,K,4CAAAA,E,sBAAAA,M,cA0PAC,K,4BAAAA,E,QAAAA,E,qBAAAA,E,uBAAAA,E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","file":"static/js/main.dc6a6f02.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  json: any;\n  timestamptz: any;\n  uuid: any;\n};\n\nexport type AddChannelUserOutput = {\n  __typename?: 'AddChannelUserOutput';\n  affected_rows: Scalars['Int'];\n};\n\nexport type AddChannelUserSubscriptionOutput = {\n  __typename?: 'AddChannelUserSubscriptionOutput';\n  affected_rows: Scalars['Int'];\n};\n\nexport enum AddDirectMessageChannelChannelTypeEnum {\n  /** this channel type is for chat messages in a private or public channel */\n  ChatMessage = 'CHAT_MESSAGE',\n  /** this channel type is for direct messages */\n  DirectMessage = 'DIRECT_MESSAGE'\n}\n\nexport type AddDirectMessageChannelOutput = {\n  __typename?: 'AddDirectMessageChannelOutput';\n  affected_rows: Scalars['Int'];\n};\n\n/** expression to compare columns of type Boolean. All fields are combined with logical 'AND'. */\nexport type Boolean_Comparison_Exp = {\n  _eq?: Maybe<Scalars['Boolean']>;\n  _gt?: Maybe<Scalars['Boolean']>;\n  _gte?: Maybe<Scalars['Boolean']>;\n  _in?: Maybe<Array<Scalars['Boolean']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Boolean']>;\n  _lte?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<Scalars['Boolean']>;\n  _nin?: Maybe<Array<Scalars['Boolean']>>;\n};\n\n/** expression to compare columns of type Int. All fields are combined with logical 'AND'. */\nexport type Int_Comparison_Exp = {\n  _eq?: Maybe<Scalars['Int']>;\n  _gt?: Maybe<Scalars['Int']>;\n  _gte?: Maybe<Scalars['Int']>;\n  _in?: Maybe<Array<Scalars['Int']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Int']>;\n  _lte?: Maybe<Scalars['Int']>;\n  _neq?: Maybe<Scalars['Int']>;\n  _nin?: Maybe<Array<Scalars['Int']>>;\n};\n\nexport type MyMutationBooleanComparisonExp = {\n  _eq?: Maybe<Scalars['Boolean']>;\n  _gt?: Maybe<Scalars['Boolean']>;\n  _gte?: Maybe<Scalars['Boolean']>;\n  _in?: Maybe<Array<Scalars['Boolean']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Boolean']>;\n  _lte?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<Scalars['Boolean']>;\n  _nin?: Maybe<Array<Scalars['Boolean']>>;\n};\n\nexport type MyMutationChannelBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationChannelBoolExp>>>;\n  _not?: Maybe<MyMutationChannelBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationChannelBoolExp>>>;\n  channelTypeByChannelType?: Maybe<MyMutationChannelTypeBoolExp>;\n  channel_polls?: Maybe<MyMutationChannelPollBoolExp>;\n  channel_type?: Maybe<MyMutationChannelTypeEnumComparisonExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  is_private?: Maybe<MyMutationBooleanComparisonExp>;\n  messages?: Maybe<MyMutationMessageBoolExp>;\n  name?: Maybe<MyMutationStringComparisonExp>;\n  owner_id?: Maybe<MyMutationStringComparisonExp>;\n  user?: Maybe<MyMutationUserBoolExp>;\n  user_channels?: Maybe<MyMutationUserChannelsBoolExp>;\n};\n\nexport type MyMutationChannelPollBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationChannelPollBoolExp>>>;\n  _not?: Maybe<MyMutationChannelPollBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationChannelPollBoolExp>>>;\n  channel?: Maybe<MyMutationChannelBoolExp>;\n  channel_id?: Maybe<MyMutationIntComparisonExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  poll_question?: Maybe<MyMutationPollQuestionsBoolExp>;\n  poll_questions?: Maybe<MyMutationIntComparisonExp>;\n};\n\nexport type MyMutationChannelThreadBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationChannelThreadBoolExp>>>;\n  _not?: Maybe<MyMutationChannelThreadBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationChannelThreadBoolExp>>>;\n  channel_thread_messages?: Maybe<MyMutationChannelThreadMessageBoolExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  message?: Maybe<MyMutationMessageBoolExp>;\n  message_id?: Maybe<MyMutationIntComparisonExp>;\n};\n\nexport type MyMutationChannelThreadMessageBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationChannelThreadMessageBoolExp>>>;\n  _not?: Maybe<MyMutationChannelThreadMessageBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationChannelThreadMessageBoolExp>>>;\n  channel_thread?: Maybe<MyMutationChannelThreadBoolExp>;\n  channel_thread_id?: Maybe<MyMutationIntComparisonExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  message?: Maybe<MyMutationStringComparisonExp>;\n  user?: Maybe<MyMutationUserBoolExp>;\n  user_id?: Maybe<MyMutationStringComparisonExp>;\n};\n\nexport type MyMutationChannelTypeBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationChannelTypeBoolExp>>>;\n  _not?: Maybe<MyMutationChannelTypeBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationChannelTypeBoolExp>>>;\n  channels?: Maybe<MyMutationChannelBoolExp>;\n  comment?: Maybe<MyMutationStringComparisonExp>;\n  value?: Maybe<MyMutationStringComparisonExp>;\n};\n\nexport enum MyMutationChannelTypeEnum {\n  /** this channel type is for chat messages in a private or public channel */\n  ChatMessage = 'CHAT_MESSAGE',\n  /** this channel type is for direct messages */\n  DirectMessage = 'DIRECT_MESSAGE'\n}\n\nexport type MyMutationChannelTypeEnumComparisonExp = {\n  _eq?: Maybe<MyMutationChannelTypeEnum>;\n  _in?: Maybe<Array<MyMutationChannelTypeEnum>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<MyMutationChannelTypeEnum>;\n  _nin?: Maybe<Array<MyMutationChannelTypeEnum>>;\n};\n\nexport type MyMutationIntComparisonExp = {\n  _eq?: Maybe<Scalars['Int']>;\n  _gt?: Maybe<Scalars['Int']>;\n  _gte?: Maybe<Scalars['Int']>;\n  _in?: Maybe<Array<Scalars['Int']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Int']>;\n  _lte?: Maybe<Scalars['Int']>;\n  _neq?: Maybe<Scalars['Int']>;\n  _nin?: Maybe<Array<Scalars['Int']>>;\n};\n\nexport type MyMutationMessageBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationMessageBoolExp>>>;\n  _not?: Maybe<MyMutationMessageBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationMessageBoolExp>>>;\n  channel?: Maybe<MyMutationChannelBoolExp>;\n  channel_id?: Maybe<MyMutationIntComparisonExp>;\n  channel_threads?: Maybe<MyMutationChannelThreadBoolExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  text?: Maybe<MyMutationStringComparisonExp>;\n  timestamp?: Maybe<MyMutationTimestamptzComparisonExp>;\n  user?: Maybe<MyMutationUserBoolExp>;\n  user_id?: Maybe<MyMutationStringComparisonExp>;\n};\n\nexport type MyMutationOutput = {\n  __typename?: 'MyMutationOutput';\n  affected_rows: Scalars['Int'];\n};\n\nexport type MyMutationPollAnwersBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationPollAnwersBoolExp>>>;\n  _not?: Maybe<MyMutationPollAnwersBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationPollAnwersBoolExp>>>;\n  created_at?: Maybe<MyMutationTimestamptzComparisonExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  poll_question?: Maybe<MyMutationPollQuestionsBoolExp>;\n  question_id?: Maybe<MyMutationIntComparisonExp>;\n  text?: Maybe<MyMutationStringComparisonExp>;\n  updated_at?: Maybe<MyMutationTimestamptzComparisonExp>;\n  user_id?: Maybe<MyMutationStringComparisonExp>;\n  votes?: Maybe<MyMutationIntComparisonExp>;\n};\n\nexport type MyMutationPollQuestionsBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationPollQuestionsBoolExp>>>;\n  _not?: Maybe<MyMutationPollQuestionsBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationPollQuestionsBoolExp>>>;\n  channel_polls?: Maybe<MyMutationChannelPollBoolExp>;\n  created_at?: Maybe<MyMutationTimestamptzComparisonExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  is_active?: Maybe<MyMutationBooleanComparisonExp>;\n  owner_id?: Maybe<MyMutationStringComparisonExp>;\n  poll_anwers?: Maybe<MyMutationPollAnwersBoolExp>;\n  text?: Maybe<MyMutationStringComparisonExp>;\n  updated_at?: Maybe<MyMutationTimestamptzComparisonExp>;\n};\n\nexport type MyMutationStringComparisonExp = {\n  _eq?: Maybe<Scalars['String']>;\n  _gt?: Maybe<Scalars['String']>;\n  _gte?: Maybe<Scalars['String']>;\n  _ilike?: Maybe<Scalars['String']>;\n  _in?: Maybe<Array<Scalars['String']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _like?: Maybe<Scalars['String']>;\n  _lt?: Maybe<Scalars['String']>;\n  _lte?: Maybe<Scalars['String']>;\n  _neq?: Maybe<Scalars['String']>;\n  _nilike?: Maybe<Scalars['String']>;\n  _nin?: Maybe<Array<Scalars['String']>>;\n  _nlike?: Maybe<Scalars['String']>;\n  _nsimilar?: Maybe<Scalars['String']>;\n  _similar?: Maybe<Scalars['String']>;\n};\n\nexport type MyMutationTimestamptzComparisonExp = {\n  _eq?: Maybe<Scalars['timestamptz']>;\n  _gt?: Maybe<Scalars['timestamptz']>;\n  _gte?: Maybe<Scalars['timestamptz']>;\n  _in?: Maybe<Array<Scalars['timestamptz']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['timestamptz']>;\n  _lte?: Maybe<Scalars['timestamptz']>;\n  _neq?: Maybe<Scalars['timestamptz']>;\n  _nin?: Maybe<Array<Scalars['timestamptz']>>;\n};\n\nexport type MyMutationUserBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationUserBoolExp>>>;\n  _not?: Maybe<MyMutationUserBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationUserBoolExp>>>;\n  auth0_user_id?: Maybe<MyMutationStringComparisonExp>;\n  channel_thread_messages?: Maybe<MyMutationChannelThreadMessageBoolExp>;\n  channels?: Maybe<MyMutationChannelBoolExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  last_seen?: Maybe<MyMutationTimestamptzComparisonExp>;\n  last_typed?: Maybe<MyMutationTimestamptzComparisonExp>;\n  messages?: Maybe<MyMutationMessageBoolExp>;\n  user_channels?: Maybe<MyMutationUserChannelsBoolExp>;\n  username?: Maybe<MyMutationStringComparisonExp>;\n};\n\nexport type MyMutationUserChannelsBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationUserChannelsBoolExp>>>;\n  _not?: Maybe<MyMutationUserChannelsBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationUserChannelsBoolExp>>>;\n  channel?: Maybe<MyMutationChannelBoolExp>;\n  channel_id?: Maybe<MyMutationIntComparisonExp>;\n  user?: Maybe<MyMutationUserBoolExp>;\n  user_id?: Maybe<MyMutationStringComparisonExp>;\n};\n\nexport type SampleInput = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\nexport type SampleOutput = {\n  __typename?: 'SampleOutput';\n  accessToken: Scalars['String'];\n};\n\n/** expression to compare columns of type String. All fields are combined with logical 'AND'. */\nexport type String_Comparison_Exp = {\n  _eq?: Maybe<Scalars['String']>;\n  _gt?: Maybe<Scalars['String']>;\n  _gte?: Maybe<Scalars['String']>;\n  _ilike?: Maybe<Scalars['String']>;\n  _in?: Maybe<Array<Scalars['String']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _like?: Maybe<Scalars['String']>;\n  _lt?: Maybe<Scalars['String']>;\n  _lte?: Maybe<Scalars['String']>;\n  _neq?: Maybe<Scalars['String']>;\n  _nilike?: Maybe<Scalars['String']>;\n  _nin?: Maybe<Array<Scalars['String']>>;\n  _nlike?: Maybe<Scalars['String']>;\n  _nsimilar?: Maybe<Scalars['String']>;\n  _similar?: Maybe<Scalars['String']>;\n};\n\nexport enum ValidateAndAddDirectMessageChannelTypeEnum {\n  /** this channel type is for chat messages in a private or public channel */\n  ChatMessage = 'CHAT_MESSAGE',\n  /** this channel type is for direct messages */\n  DirectMessage = 'DIRECT_MESSAGE'\n}\n\n/** columns and relationships of \"channel\" */\nexport type Channel = {\n  __typename?: 'channel';\n  /** An object relationship */\n  channelTypeByChannelType: Channel_Type;\n  /** An array relationship */\n  channel_polls: Array<Channel_Poll>;\n  /** An aggregated array relationship */\n  channel_polls_aggregate: Channel_Poll_Aggregate;\n  channel_type: Channel_Type_Enum;\n  id: Scalars['Int'];\n  is_private: Scalars['Boolean'];\n  /** An array relationship */\n  messages: Array<Message>;\n  /** An aggregated array relationship */\n  messages_aggregate: Message_Aggregate;\n  name: Scalars['String'];\n  owner_id?: Maybe<Scalars['String']>;\n  /** An object relationship */\n  user?: Maybe<User>;\n  /** An array relationship */\n  user_channels: Array<User_Channels>;\n  /** An aggregated array relationship */\n  user_channels_aggregate: User_Channels_Aggregate;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelChannel_PollsArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelChannel_Polls_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelMessagesArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelMessages_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelUser_ChannelsArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelUser_Channels_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n/** aggregated selection of \"channel\" */\nexport type Channel_Aggregate = {\n  __typename?: 'channel_aggregate';\n  aggregate?: Maybe<Channel_Aggregate_Fields>;\n  nodes: Array<Channel>;\n};\n\n/** aggregate fields of \"channel\" */\nexport type Channel_Aggregate_Fields = {\n  __typename?: 'channel_aggregate_fields';\n  avg?: Maybe<Channel_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Channel_Max_Fields>;\n  min?: Maybe<Channel_Min_Fields>;\n  stddev?: Maybe<Channel_Stddev_Fields>;\n  stddev_pop?: Maybe<Channel_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Channel_Stddev_Samp_Fields>;\n  sum?: Maybe<Channel_Sum_Fields>;\n  var_pop?: Maybe<Channel_Var_Pop_Fields>;\n  var_samp?: Maybe<Channel_Var_Samp_Fields>;\n  variance?: Maybe<Channel_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"channel\" */\nexport type Channel_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Channel_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"channel\" */\nexport type Channel_Aggregate_Order_By = {\n  avg?: Maybe<Channel_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Channel_Max_Order_By>;\n  min?: Maybe<Channel_Min_Order_By>;\n  stddev?: Maybe<Channel_Stddev_Order_By>;\n  stddev_pop?: Maybe<Channel_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Channel_Stddev_Samp_Order_By>;\n  sum?: Maybe<Channel_Sum_Order_By>;\n  var_pop?: Maybe<Channel_Var_Pop_Order_By>;\n  var_samp?: Maybe<Channel_Var_Samp_Order_By>;\n  variance?: Maybe<Channel_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"channel\" */\nexport type Channel_Arr_Rel_Insert_Input = {\n  data: Array<Channel_Insert_Input>;\n  on_conflict?: Maybe<Channel_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Channel_Avg_Fields = {\n  __typename?: 'channel_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"channel\" */\nexport type Channel_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"channel\". All fields are combined with a logical 'AND'. */\nexport type Channel_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Channel_Bool_Exp>>>;\n  _not?: Maybe<Channel_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Channel_Bool_Exp>>>;\n  channelTypeByChannelType?: Maybe<Channel_Type_Bool_Exp>;\n  channel_polls?: Maybe<Channel_Poll_Bool_Exp>;\n  channel_type?: Maybe<Channel_Type_Enum_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  is_private?: Maybe<Boolean_Comparison_Exp>;\n  messages?: Maybe<Message_Bool_Exp>;\n  name?: Maybe<String_Comparison_Exp>;\n  owner_id?: Maybe<String_Comparison_Exp>;\n  user?: Maybe<User_Bool_Exp>;\n  user_channels?: Maybe<User_Channels_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"channel\" */\nexport enum Channel_Constraint {\n  /** unique or primary key constraint */\n  ChannelNameKey = 'channel_name_key',\n  /** unique or primary key constraint */\n  ChannelPkey = 'channel_pkey'\n}\n\n/** input type for incrementing integer column in table \"channel\" */\nexport type Channel_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"channel\" */\nexport type Channel_Insert_Input = {\n  channelTypeByChannelType?: Maybe<Channel_Type_Obj_Rel_Insert_Input>;\n  channel_polls?: Maybe<Channel_Poll_Arr_Rel_Insert_Input>;\n  channel_type?: Maybe<Channel_Type_Enum>;\n  id?: Maybe<Scalars['Int']>;\n  is_private?: Maybe<Scalars['Boolean']>;\n  messages?: Maybe<Message_Arr_Rel_Insert_Input>;\n  name?: Maybe<Scalars['String']>;\n  owner_id?: Maybe<Scalars['String']>;\n  user?: Maybe<User_Obj_Rel_Insert_Input>;\n  user_channels?: Maybe<User_Channels_Arr_Rel_Insert_Input>;\n};\n\n/** aggregate max on columns */\nexport type Channel_Max_Fields = {\n  __typename?: 'channel_max_fields';\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  owner_id?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"channel\" */\nexport type Channel_Max_Order_By = {\n  id?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Channel_Min_Fields = {\n  __typename?: 'channel_min_fields';\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  owner_id?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"channel\" */\nexport type Channel_Min_Order_By = {\n  id?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"channel\" */\nexport type Channel_Mutation_Response = {\n  __typename?: 'channel_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Channel>;\n};\n\n/** input type for inserting object relation for remote table \"channel\" */\nexport type Channel_Obj_Rel_Insert_Input = {\n  data: Channel_Insert_Input;\n  on_conflict?: Maybe<Channel_On_Conflict>;\n};\n\n/** on conflict condition type for table \"channel\" */\nexport type Channel_On_Conflict = {\n  constraint: Channel_Constraint;\n  update_columns: Array<Channel_Update_Column>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"channel\" */\nexport type Channel_Order_By = {\n  channelTypeByChannelType?: Maybe<Channel_Type_Order_By>;\n  channel_polls_aggregate?: Maybe<Channel_Poll_Aggregate_Order_By>;\n  channel_type?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  is_private?: Maybe<Order_By>;\n  messages_aggregate?: Maybe<Message_Aggregate_Order_By>;\n  name?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n  user?: Maybe<User_Order_By>;\n  user_channels_aggregate?: Maybe<User_Channels_Aggregate_Order_By>;\n};\n\n/** primary key columns input for table: \"channel\" */\nexport type Channel_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** columns and relationships of \"channel_poll\" */\nexport type Channel_Poll = {\n  __typename?: 'channel_poll';\n  /** An object relationship */\n  channel: Channel;\n  channel_id: Scalars['Int'];\n  id: Scalars['Int'];\n  is_active?: Maybe<Scalars['Boolean']>;\n  /** An object relationship */\n  poll_question: Poll_Questions;\n  poll_questions: Scalars['Int'];\n};\n\n/** aggregated selection of \"channel_poll\" */\nexport type Channel_Poll_Aggregate = {\n  __typename?: 'channel_poll_aggregate';\n  aggregate?: Maybe<Channel_Poll_Aggregate_Fields>;\n  nodes: Array<Channel_Poll>;\n};\n\n/** aggregate fields of \"channel_poll\" */\nexport type Channel_Poll_Aggregate_Fields = {\n  __typename?: 'channel_poll_aggregate_fields';\n  avg?: Maybe<Channel_Poll_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Channel_Poll_Max_Fields>;\n  min?: Maybe<Channel_Poll_Min_Fields>;\n  stddev?: Maybe<Channel_Poll_Stddev_Fields>;\n  stddev_pop?: Maybe<Channel_Poll_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Channel_Poll_Stddev_Samp_Fields>;\n  sum?: Maybe<Channel_Poll_Sum_Fields>;\n  var_pop?: Maybe<Channel_Poll_Var_Pop_Fields>;\n  var_samp?: Maybe<Channel_Poll_Var_Samp_Fields>;\n  variance?: Maybe<Channel_Poll_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"channel_poll\" */\nexport type Channel_Poll_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Channel_Poll_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"channel_poll\" */\nexport type Channel_Poll_Aggregate_Order_By = {\n  avg?: Maybe<Channel_Poll_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Channel_Poll_Max_Order_By>;\n  min?: Maybe<Channel_Poll_Min_Order_By>;\n  stddev?: Maybe<Channel_Poll_Stddev_Order_By>;\n  stddev_pop?: Maybe<Channel_Poll_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Channel_Poll_Stddev_Samp_Order_By>;\n  sum?: Maybe<Channel_Poll_Sum_Order_By>;\n  var_pop?: Maybe<Channel_Poll_Var_Pop_Order_By>;\n  var_samp?: Maybe<Channel_Poll_Var_Samp_Order_By>;\n  variance?: Maybe<Channel_Poll_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"channel_poll\" */\nexport type Channel_Poll_Arr_Rel_Insert_Input = {\n  data: Array<Channel_Poll_Insert_Input>;\n  on_conflict?: Maybe<Channel_Poll_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Channel_Poll_Avg_Fields = {\n  __typename?: 'channel_poll_avg_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Avg_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"channel_poll\". All fields are combined with a logical 'AND'. */\nexport type Channel_Poll_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Channel_Poll_Bool_Exp>>>;\n  _not?: Maybe<Channel_Poll_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Channel_Poll_Bool_Exp>>>;\n  channel?: Maybe<Channel_Bool_Exp>;\n  channel_id?: Maybe<Int_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  is_active?: Maybe<Boolean_Comparison_Exp>;\n  poll_question?: Maybe<Poll_Questions_Bool_Exp>;\n  poll_questions?: Maybe<Int_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"channel_poll\" */\nexport enum Channel_Poll_Constraint {\n  /** unique or primary key constraint */\n  ChannelPollPkey = 'channel_poll_pkey'\n}\n\n/** input type for incrementing integer column in table \"channel_poll\" */\nexport type Channel_Poll_Inc_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"channel_poll\" */\nexport type Channel_Poll_Insert_Input = {\n  channel?: Maybe<Channel_Obj_Rel_Insert_Input>;\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  is_active?: Maybe<Scalars['Boolean']>;\n  poll_question?: Maybe<Poll_Questions_Obj_Rel_Insert_Input>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Channel_Poll_Max_Fields = {\n  __typename?: 'channel_poll_max_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** order by max() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Max_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Channel_Poll_Min_Fields = {\n  __typename?: 'channel_poll_min_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** order by min() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Min_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"channel_poll\" */\nexport type Channel_Poll_Mutation_Response = {\n  __typename?: 'channel_poll_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Channel_Poll>;\n};\n\n/** input type for inserting object relation for remote table \"channel_poll\" */\nexport type Channel_Poll_Obj_Rel_Insert_Input = {\n  data: Channel_Poll_Insert_Input;\n  on_conflict?: Maybe<Channel_Poll_On_Conflict>;\n};\n\n/** on conflict condition type for table \"channel_poll\" */\nexport type Channel_Poll_On_Conflict = {\n  constraint: Channel_Poll_Constraint;\n  update_columns: Array<Channel_Poll_Update_Column>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"channel_poll\" */\nexport type Channel_Poll_Order_By = {\n  channel?: Maybe<Channel_Order_By>;\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  is_active?: Maybe<Order_By>;\n  poll_question?: Maybe<Poll_Questions_Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"channel_poll\" */\nexport type Channel_Poll_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"channel_poll\" */\nexport enum Channel_Poll_Select_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsActive = 'is_active',\n  /** column name */\n  PollQuestions = 'poll_questions'\n}\n\n/** input type for updating data in table \"channel_poll\" */\nexport type Channel_Poll_Set_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  is_active?: Maybe<Scalars['Boolean']>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Channel_Poll_Stddev_Fields = {\n  __typename?: 'channel_poll_stddev_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Stddev_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Channel_Poll_Stddev_Pop_Fields = {\n  __typename?: 'channel_poll_stddev_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Stddev_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Channel_Poll_Stddev_Samp_Fields = {\n  __typename?: 'channel_poll_stddev_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Stddev_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Channel_Poll_Sum_Fields = {\n  __typename?: 'channel_poll_sum_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Sum_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** update columns of table \"channel_poll\" */\nexport enum Channel_Poll_Update_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsActive = 'is_active',\n  /** column name */\n  PollQuestions = 'poll_questions'\n}\n\n/** aggregate var_pop on columns */\nexport type Channel_Poll_Var_Pop_Fields = {\n  __typename?: 'channel_poll_var_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Var_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Channel_Poll_Var_Samp_Fields = {\n  __typename?: 'channel_poll_var_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Var_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Channel_Poll_Variance_Fields = {\n  __typename?: 'channel_poll_variance_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Variance_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** select columns of table \"channel\" */\nexport enum Channel_Select_Column {\n  /** column name */\n  ChannelType = 'channel_type',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsPrivate = 'is_private',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  OwnerId = 'owner_id'\n}\n\n/** input type for updating data in table \"channel\" */\nexport type Channel_Set_Input = {\n  channel_type?: Maybe<Channel_Type_Enum>;\n  id?: Maybe<Scalars['Int']>;\n  is_private?: Maybe<Scalars['Boolean']>;\n  name?: Maybe<Scalars['String']>;\n  owner_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type Channel_Stddev_Fields = {\n  __typename?: 'channel_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"channel\" */\nexport type Channel_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Channel_Stddev_Pop_Fields = {\n  __typename?: 'channel_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"channel\" */\nexport type Channel_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Channel_Stddev_Samp_Fields = {\n  __typename?: 'channel_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"channel\" */\nexport type Channel_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Channel_Sum_Fields = {\n  __typename?: 'channel_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"channel\" */\nexport type Channel_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"channel_thread\" */\nexport type Channel_Thread = {\n  __typename?: 'channel_thread';\n  /** An array relationship */\n  channel_thread_messages: Array<Channel_Thread_Message>;\n  /** An aggregated array relationship */\n  channel_thread_messages_aggregate: Channel_Thread_Message_Aggregate;\n  id: Scalars['Int'];\n  /** An object relationship */\n  message?: Maybe<Message>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n\n/** columns and relationships of \"channel_thread\" */\nexport type Channel_ThreadChannel_Thread_MessagesArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel_thread\" */\nexport type Channel_ThreadChannel_Thread_Messages_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n/** aggregated selection of \"channel_thread\" */\nexport type Channel_Thread_Aggregate = {\n  __typename?: 'channel_thread_aggregate';\n  aggregate?: Maybe<Channel_Thread_Aggregate_Fields>;\n  nodes: Array<Channel_Thread>;\n};\n\n/** aggregate fields of \"channel_thread\" */\nexport type Channel_Thread_Aggregate_Fields = {\n  __typename?: 'channel_thread_aggregate_fields';\n  avg?: Maybe<Channel_Thread_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Channel_Thread_Max_Fields>;\n  min?: Maybe<Channel_Thread_Min_Fields>;\n  stddev?: Maybe<Channel_Thread_Stddev_Fields>;\n  stddev_pop?: Maybe<Channel_Thread_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Channel_Thread_Stddev_Samp_Fields>;\n  sum?: Maybe<Channel_Thread_Sum_Fields>;\n  var_pop?: Maybe<Channel_Thread_Var_Pop_Fields>;\n  var_samp?: Maybe<Channel_Thread_Var_Samp_Fields>;\n  variance?: Maybe<Channel_Thread_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"channel_thread\" */\nexport type Channel_Thread_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Channel_Thread_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"channel_thread\" */\nexport type Channel_Thread_Aggregate_Order_By = {\n  avg?: Maybe<Channel_Thread_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Channel_Thread_Max_Order_By>;\n  min?: Maybe<Channel_Thread_Min_Order_By>;\n  stddev?: Maybe<Channel_Thread_Stddev_Order_By>;\n  stddev_pop?: Maybe<Channel_Thread_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Channel_Thread_Stddev_Samp_Order_By>;\n  sum?: Maybe<Channel_Thread_Sum_Order_By>;\n  var_pop?: Maybe<Channel_Thread_Var_Pop_Order_By>;\n  var_samp?: Maybe<Channel_Thread_Var_Samp_Order_By>;\n  variance?: Maybe<Channel_Thread_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"channel_thread\" */\nexport type Channel_Thread_Arr_Rel_Insert_Input = {\n  data: Array<Channel_Thread_Insert_Input>;\n  on_conflict?: Maybe<Channel_Thread_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Channel_Thread_Avg_Fields = {\n  __typename?: 'channel_thread_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"channel_thread\". All fields are combined with a logical 'AND'. */\nexport type Channel_Thread_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Channel_Thread_Bool_Exp>>>;\n  _not?: Maybe<Channel_Thread_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Channel_Thread_Bool_Exp>>>;\n  channel_thread_messages?: Maybe<Channel_Thread_Message_Bool_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  message?: Maybe<Message_Bool_Exp>;\n  message_id?: Maybe<Int_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"channel_thread\" */\nexport enum Channel_Thread_Constraint {\n  /** unique or primary key constraint */\n  ChannelThreadMessageIdKey = 'channel_thread_message_id_key',\n  /** unique or primary key constraint */\n  ChannelThreadPkey = 'channel_thread_pkey'\n}\n\n/** input type for incrementing integer column in table \"channel_thread\" */\nexport type Channel_Thread_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"channel_thread\" */\nexport type Channel_Thread_Insert_Input = {\n  channel_thread_messages?: Maybe<Channel_Thread_Message_Arr_Rel_Insert_Input>;\n  id?: Maybe<Scalars['Int']>;\n  message?: Maybe<Message_Obj_Rel_Insert_Input>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Channel_Thread_Max_Fields = {\n  __typename?: 'channel_thread_max_fields';\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by max() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Max_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"channel_thread_message\" */\nexport type Channel_Thread_Message = {\n  __typename?: 'channel_thread_message';\n  /** An object relationship */\n  channel_thread: Channel_Thread;\n  channel_thread_id: Scalars['Int'];\n  id: Scalars['Int'];\n  image?: Maybe<Scalars['String']>;\n  message: Scalars['String'];\n  timestamp: Scalars['timestamptz'];\n  /** An object relationship */\n  user: User;\n  user_id: Scalars['String'];\n};\n\n/** aggregated selection of \"channel_thread_message\" */\nexport type Channel_Thread_Message_Aggregate = {\n  __typename?: 'channel_thread_message_aggregate';\n  aggregate?: Maybe<Channel_Thread_Message_Aggregate_Fields>;\n  nodes: Array<Channel_Thread_Message>;\n};\n\n/** aggregate fields of \"channel_thread_message\" */\nexport type Channel_Thread_Message_Aggregate_Fields = {\n  __typename?: 'channel_thread_message_aggregate_fields';\n  avg?: Maybe<Channel_Thread_Message_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Channel_Thread_Message_Max_Fields>;\n  min?: Maybe<Channel_Thread_Message_Min_Fields>;\n  stddev?: Maybe<Channel_Thread_Message_Stddev_Fields>;\n  stddev_pop?: Maybe<Channel_Thread_Message_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Channel_Thread_Message_Stddev_Samp_Fields>;\n  sum?: Maybe<Channel_Thread_Message_Sum_Fields>;\n  var_pop?: Maybe<Channel_Thread_Message_Var_Pop_Fields>;\n  var_samp?: Maybe<Channel_Thread_Message_Var_Samp_Fields>;\n  variance?: Maybe<Channel_Thread_Message_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"channel_thread_message\" */\nexport type Channel_Thread_Message_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Aggregate_Order_By = {\n  avg?: Maybe<Channel_Thread_Message_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Channel_Thread_Message_Max_Order_By>;\n  min?: Maybe<Channel_Thread_Message_Min_Order_By>;\n  stddev?: Maybe<Channel_Thread_Message_Stddev_Order_By>;\n  stddev_pop?: Maybe<Channel_Thread_Message_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Channel_Thread_Message_Stddev_Samp_Order_By>;\n  sum?: Maybe<Channel_Thread_Message_Sum_Order_By>;\n  var_pop?: Maybe<Channel_Thread_Message_Var_Pop_Order_By>;\n  var_samp?: Maybe<Channel_Thread_Message_Var_Samp_Order_By>;\n  variance?: Maybe<Channel_Thread_Message_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Arr_Rel_Insert_Input = {\n  data: Array<Channel_Thread_Message_Insert_Input>;\n  on_conflict?: Maybe<Channel_Thread_Message_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Channel_Thread_Message_Avg_Fields = {\n  __typename?: 'channel_thread_message_avg_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Avg_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"channel_thread_message\". All fields are combined with a logical 'AND'. */\nexport type Channel_Thread_Message_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Channel_Thread_Message_Bool_Exp>>>;\n  _not?: Maybe<Channel_Thread_Message_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Channel_Thread_Message_Bool_Exp>>>;\n  channel_thread?: Maybe<Channel_Thread_Bool_Exp>;\n  channel_thread_id?: Maybe<Int_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  image?: Maybe<String_Comparison_Exp>;\n  message?: Maybe<String_Comparison_Exp>;\n  timestamp?: Maybe<Timestamptz_Comparison_Exp>;\n  user?: Maybe<User_Bool_Exp>;\n  user_id?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"channel_thread_message\" */\nexport enum Channel_Thread_Message_Constraint {\n  /** unique or primary key constraint */\n  ChannelThreadMessagePkey = 'channel_thread_message_pkey'\n}\n\n/** input type for incrementing integer column in table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Inc_Input = {\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Insert_Input = {\n  channel_thread?: Maybe<Channel_Thread_Obj_Rel_Insert_Input>;\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  message?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user?: Maybe<User_Obj_Rel_Insert_Input>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Channel_Thread_Message_Max_Fields = {\n  __typename?: 'channel_thread_message_max_fields';\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  message?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Max_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  message?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Channel_Thread_Message_Min_Fields = {\n  __typename?: 'channel_thread_message_min_fields';\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  message?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Min_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  message?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Mutation_Response = {\n  __typename?: 'channel_thread_message_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Channel_Thread_Message>;\n};\n\n/** input type for inserting object relation for remote table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Obj_Rel_Insert_Input = {\n  data: Channel_Thread_Message_Insert_Input;\n  on_conflict?: Maybe<Channel_Thread_Message_On_Conflict>;\n};\n\n/** on conflict condition type for table \"channel_thread_message\" */\nexport type Channel_Thread_Message_On_Conflict = {\n  constraint: Channel_Thread_Message_Constraint;\n  update_columns: Array<Channel_Thread_Message_Update_Column>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"channel_thread_message\" */\nexport type Channel_Thread_Message_Order_By = {\n  channel_thread?: Maybe<Channel_Thread_Order_By>;\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  message?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user?: Maybe<User_Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"channel_thread_message\" */\nexport type Channel_Thread_Message_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"channel_thread_message\" */\nexport enum Channel_Thread_Message_Select_Column {\n  /** column name */\n  ChannelThreadId = 'channel_thread_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Image = 'image',\n  /** column name */\n  Message = 'message',\n  /** column name */\n  Timestamp = 'timestamp',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** input type for updating data in table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Set_Input = {\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  message?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type Channel_Thread_Message_Stddev_Fields = {\n  __typename?: 'channel_thread_message_stddev_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Stddev_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Channel_Thread_Message_Stddev_Pop_Fields = {\n  __typename?: 'channel_thread_message_stddev_pop_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Stddev_Pop_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Channel_Thread_Message_Stddev_Samp_Fields = {\n  __typename?: 'channel_thread_message_stddev_samp_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Stddev_Samp_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Channel_Thread_Message_Sum_Fields = {\n  __typename?: 'channel_thread_message_sum_fields';\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Sum_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"channel_thread_message\" */\nexport enum Channel_Thread_Message_Update_Column {\n  /** column name */\n  ChannelThreadId = 'channel_thread_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Image = 'image',\n  /** column name */\n  Message = 'message',\n  /** column name */\n  Timestamp = 'timestamp',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Channel_Thread_Message_Var_Pop_Fields = {\n  __typename?: 'channel_thread_message_var_pop_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Var_Pop_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Channel_Thread_Message_Var_Samp_Fields = {\n  __typename?: 'channel_thread_message_var_samp_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Var_Samp_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Channel_Thread_Message_Variance_Fields = {\n  __typename?: 'channel_thread_message_variance_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Variance_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Channel_Thread_Min_Fields = {\n  __typename?: 'channel_thread_min_fields';\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by min() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Min_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"channel_thread\" */\nexport type Channel_Thread_Mutation_Response = {\n  __typename?: 'channel_thread_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Channel_Thread>;\n};\n\n/** input type for inserting object relation for remote table \"channel_thread\" */\nexport type Channel_Thread_Obj_Rel_Insert_Input = {\n  data: Channel_Thread_Insert_Input;\n  on_conflict?: Maybe<Channel_Thread_On_Conflict>;\n};\n\n/** on conflict condition type for table \"channel_thread\" */\nexport type Channel_Thread_On_Conflict = {\n  constraint: Channel_Thread_Constraint;\n  update_columns: Array<Channel_Thread_Update_Column>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"channel_thread\" */\nexport type Channel_Thread_Order_By = {\n  channel_thread_messages_aggregate?: Maybe<Channel_Thread_Message_Aggregate_Order_By>;\n  id?: Maybe<Order_By>;\n  message?: Maybe<Message_Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"channel_thread\" */\nexport type Channel_Thread_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"channel_thread\" */\nexport enum Channel_Thread_Select_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  MessageId = 'message_id'\n}\n\n/** input type for updating data in table \"channel_thread\" */\nexport type Channel_Thread_Set_Input = {\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Channel_Thread_Stddev_Fields = {\n  __typename?: 'channel_thread_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Channel_Thread_Stddev_Pop_Fields = {\n  __typename?: 'channel_thread_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Channel_Thread_Stddev_Samp_Fields = {\n  __typename?: 'channel_thread_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Channel_Thread_Sum_Fields = {\n  __typename?: 'channel_thread_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"channel_thread\" */\nexport enum Channel_Thread_Update_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  MessageId = 'message_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Channel_Thread_Var_Pop_Fields = {\n  __typename?: 'channel_thread_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Channel_Thread_Var_Samp_Fields = {\n  __typename?: 'channel_thread_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Channel_Thread_Variance_Fields = {\n  __typename?: 'channel_thread_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"channel_type\" */\nexport type Channel_Type = {\n  __typename?: 'channel_type';\n  /** An array relationship */\n  channels: Array<Channel>;\n  /** An aggregated array relationship */\n  channels_aggregate: Channel_Aggregate;\n  comment?: Maybe<Scalars['String']>;\n  value: Scalars['String'];\n};\n\n\n/** columns and relationships of \"channel_type\" */\nexport type Channel_TypeChannelsArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel_type\" */\nexport type Channel_TypeChannels_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n/** aggregated selection of \"channel_type\" */\nexport type Channel_Type_Aggregate = {\n  __typename?: 'channel_type_aggregate';\n  aggregate?: Maybe<Channel_Type_Aggregate_Fields>;\n  nodes: Array<Channel_Type>;\n};\n\n/** aggregate fields of \"channel_type\" */\nexport type Channel_Type_Aggregate_Fields = {\n  __typename?: 'channel_type_aggregate_fields';\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Channel_Type_Max_Fields>;\n  min?: Maybe<Channel_Type_Min_Fields>;\n};\n\n\n/** aggregate fields of \"channel_type\" */\nexport type Channel_Type_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Channel_Type_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"channel_type\" */\nexport type Channel_Type_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<Channel_Type_Max_Order_By>;\n  min?: Maybe<Channel_Type_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"channel_type\" */\nexport type Channel_Type_Arr_Rel_Insert_Input = {\n  data: Array<Channel_Type_Insert_Input>;\n  on_conflict?: Maybe<Channel_Type_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"channel_type\". All fields are combined with a logical 'AND'. */\nexport type Channel_Type_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Channel_Type_Bool_Exp>>>;\n  _not?: Maybe<Channel_Type_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Channel_Type_Bool_Exp>>>;\n  channels?: Maybe<Channel_Bool_Exp>;\n  comment?: Maybe<String_Comparison_Exp>;\n  value?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"channel_type\" */\nexport enum Channel_Type_Constraint {\n  /** unique or primary key constraint */\n  ChannelTypePkey = 'channel_type_pkey'\n}\n\nexport enum Channel_Type_Enum {\n  /** This represents a chat message */\n  ChatMessage = 'CHAT_MESSAGE',\n  /** This represents a direct message */\n  DirectMessage = 'DIRECT_MESSAGE'\n}\n\n/** expression to compare columns of type channel_type_enum. All fields are combined with logical 'AND'. */\nexport type Channel_Type_Enum_Comparison_Exp = {\n  _eq?: Maybe<Channel_Type_Enum>;\n  _in?: Maybe<Array<Channel_Type_Enum>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<Channel_Type_Enum>;\n  _nin?: Maybe<Array<Channel_Type_Enum>>;\n};\n\n/** input type for inserting data into table \"channel_type\" */\nexport type Channel_Type_Insert_Input = {\n  channels?: Maybe<Channel_Arr_Rel_Insert_Input>;\n  comment?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Channel_Type_Max_Fields = {\n  __typename?: 'channel_type_max_fields';\n  comment?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"channel_type\" */\nexport type Channel_Type_Max_Order_By = {\n  comment?: Maybe<Order_By>;\n  value?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Channel_Type_Min_Fields = {\n  __typename?: 'channel_type_min_fields';\n  comment?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"channel_type\" */\nexport type Channel_Type_Min_Order_By = {\n  comment?: Maybe<Order_By>;\n  value?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"channel_type\" */\nexport type Channel_Type_Mutation_Response = {\n  __typename?: 'channel_type_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Channel_Type>;\n};\n\n/** input type for inserting object relation for remote table \"channel_type\" */\nexport type Channel_Type_Obj_Rel_Insert_Input = {\n  data: Channel_Type_Insert_Input;\n  on_conflict?: Maybe<Channel_Type_On_Conflict>;\n};\n\n/** on conflict condition type for table \"channel_type\" */\nexport type Channel_Type_On_Conflict = {\n  constraint: Channel_Type_Constraint;\n  update_columns: Array<Channel_Type_Update_Column>;\n  where?: Maybe<Channel_Type_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"channel_type\" */\nexport type Channel_Type_Order_By = {\n  channels_aggregate?: Maybe<Channel_Aggregate_Order_By>;\n  comment?: Maybe<Order_By>;\n  value?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"channel_type\" */\nexport type Channel_Type_Pk_Columns_Input = {\n  value: Scalars['String'];\n};\n\n/** select columns of table \"channel_type\" */\nexport enum Channel_Type_Select_Column {\n  /** column name */\n  Comment = 'comment',\n  /** column name */\n  Value = 'value'\n}\n\n/** input type for updating data in table \"channel_type\" */\nexport type Channel_Type_Set_Input = {\n  comment?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n};\n\n/** update columns of table \"channel_type\" */\nexport enum Channel_Type_Update_Column {\n  /** column name */\n  Comment = 'comment',\n  /** column name */\n  Value = 'value'\n}\n\n/** update columns of table \"channel\" */\nexport enum Channel_Update_Column {\n  /** column name */\n  ChannelType = 'channel_type',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsPrivate = 'is_private',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  OwnerId = 'owner_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Channel_Var_Pop_Fields = {\n  __typename?: 'channel_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"channel\" */\nexport type Channel_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Channel_Var_Samp_Fields = {\n  __typename?: 'channel_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"channel\" */\nexport type Channel_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Channel_Variance_Fields = {\n  __typename?: 'channel_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"channel\" */\nexport type Channel_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n\n/** expression to compare columns of type json. All fields are combined with logical 'AND'. */\nexport type Json_Comparison_Exp = {\n  _eq?: Maybe<Scalars['json']>;\n  _gt?: Maybe<Scalars['json']>;\n  _gte?: Maybe<Scalars['json']>;\n  _in?: Maybe<Array<Scalars['json']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['json']>;\n  _lte?: Maybe<Scalars['json']>;\n  _neq?: Maybe<Scalars['json']>;\n  _nin?: Maybe<Array<Scalars['json']>>;\n};\n\n/** columns and relationships of \"message\" */\nexport type Message = {\n  __typename?: 'message';\n  /** An object relationship */\n  channel: Channel;\n  channel_id: Scalars['Int'];\n  /** An object relationship */\n  channel_thread?: Maybe<Channel_Thread>;\n  /** An array relationship */\n  channel_threads: Array<Channel_Thread>;\n  /** An aggregated array relationship */\n  channel_threads_aggregate: Channel_Thread_Aggregate;\n  deleted?: Maybe<Scalars['Boolean']>;\n  id: Scalars['Int'];\n  image?: Maybe<Scalars['String']>;\n  text: Scalars['String'];\n  timestamp: Scalars['timestamptz'];\n  /** An object relationship */\n  user: User;\n  user_id: Scalars['String'];\n};\n\n\n/** columns and relationships of \"message\" */\nexport type MessageChannel_ThreadsArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"message\" */\nexport type MessageChannel_Threads_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n/** aggregated selection of \"message\" */\nexport type Message_Aggregate = {\n  __typename?: 'message_aggregate';\n  aggregate?: Maybe<Message_Aggregate_Fields>;\n  nodes: Array<Message>;\n};\n\n/** aggregate fields of \"message\" */\nexport type Message_Aggregate_Fields = {\n  __typename?: 'message_aggregate_fields';\n  avg?: Maybe<Message_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Message_Max_Fields>;\n  min?: Maybe<Message_Min_Fields>;\n  stddev?: Maybe<Message_Stddev_Fields>;\n  stddev_pop?: Maybe<Message_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Message_Stddev_Samp_Fields>;\n  sum?: Maybe<Message_Sum_Fields>;\n  var_pop?: Maybe<Message_Var_Pop_Fields>;\n  var_samp?: Maybe<Message_Var_Samp_Fields>;\n  variance?: Maybe<Message_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"message\" */\nexport type Message_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Message_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"message\" */\nexport type Message_Aggregate_Order_By = {\n  avg?: Maybe<Message_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Message_Max_Order_By>;\n  min?: Maybe<Message_Min_Order_By>;\n  stddev?: Maybe<Message_Stddev_Order_By>;\n  stddev_pop?: Maybe<Message_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Message_Stddev_Samp_Order_By>;\n  sum?: Maybe<Message_Sum_Order_By>;\n  var_pop?: Maybe<Message_Var_Pop_Order_By>;\n  var_samp?: Maybe<Message_Var_Samp_Order_By>;\n  variance?: Maybe<Message_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"message\" */\nexport type Message_Arr_Rel_Insert_Input = {\n  data: Array<Message_Insert_Input>;\n  on_conflict?: Maybe<Message_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Message_Avg_Fields = {\n  __typename?: 'message_avg_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"message\" */\nexport type Message_Avg_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"message\". All fields are combined with a logical 'AND'. */\nexport type Message_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Message_Bool_Exp>>>;\n  _not?: Maybe<Message_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Message_Bool_Exp>>>;\n  channel?: Maybe<Channel_Bool_Exp>;\n  channel_id?: Maybe<Int_Comparison_Exp>;\n  channel_thread?: Maybe<Channel_Thread_Bool_Exp>;\n  channel_threads?: Maybe<Channel_Thread_Bool_Exp>;\n  deleted?: Maybe<Boolean_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  image?: Maybe<String_Comparison_Exp>;\n  text?: Maybe<String_Comparison_Exp>;\n  timestamp?: Maybe<Timestamptz_Comparison_Exp>;\n  user?: Maybe<User_Bool_Exp>;\n  user_id?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"message\" */\nexport enum Message_Constraint {\n  /** unique or primary key constraint */\n  MessagePkey = 'message_pkey'\n}\n\n/** columns and relationships of \"message_cursor\" */\nexport type Message_Cursor = {\n  __typename?: 'message_cursor';\n  channel_id: Scalars['Int'];\n  id: Scalars['Int'];\n  message_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n/** aggregated selection of \"message_cursor\" */\nexport type Message_Cursor_Aggregate = {\n  __typename?: 'message_cursor_aggregate';\n  aggregate?: Maybe<Message_Cursor_Aggregate_Fields>;\n  nodes: Array<Message_Cursor>;\n};\n\n/** aggregate fields of \"message_cursor\" */\nexport type Message_Cursor_Aggregate_Fields = {\n  __typename?: 'message_cursor_aggregate_fields';\n  avg?: Maybe<Message_Cursor_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Message_Cursor_Max_Fields>;\n  min?: Maybe<Message_Cursor_Min_Fields>;\n  stddev?: Maybe<Message_Cursor_Stddev_Fields>;\n  stddev_pop?: Maybe<Message_Cursor_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Message_Cursor_Stddev_Samp_Fields>;\n  sum?: Maybe<Message_Cursor_Sum_Fields>;\n  var_pop?: Maybe<Message_Cursor_Var_Pop_Fields>;\n  var_samp?: Maybe<Message_Cursor_Var_Samp_Fields>;\n  variance?: Maybe<Message_Cursor_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"message_cursor\" */\nexport type Message_Cursor_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Message_Cursor_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"message_cursor\" */\nexport type Message_Cursor_Aggregate_Order_By = {\n  avg?: Maybe<Message_Cursor_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Message_Cursor_Max_Order_By>;\n  min?: Maybe<Message_Cursor_Min_Order_By>;\n  stddev?: Maybe<Message_Cursor_Stddev_Order_By>;\n  stddev_pop?: Maybe<Message_Cursor_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Message_Cursor_Stddev_Samp_Order_By>;\n  sum?: Maybe<Message_Cursor_Sum_Order_By>;\n  var_pop?: Maybe<Message_Cursor_Var_Pop_Order_By>;\n  var_samp?: Maybe<Message_Cursor_Var_Samp_Order_By>;\n  variance?: Maybe<Message_Cursor_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"message_cursor\" */\nexport type Message_Cursor_Arr_Rel_Insert_Input = {\n  data: Array<Message_Cursor_Insert_Input>;\n  on_conflict?: Maybe<Message_Cursor_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Message_Cursor_Avg_Fields = {\n  __typename?: 'message_cursor_avg_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Avg_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"message_cursor\". All fields are combined with a logical 'AND'. */\nexport type Message_Cursor_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Message_Cursor_Bool_Exp>>>;\n  _not?: Maybe<Message_Cursor_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Message_Cursor_Bool_Exp>>>;\n  channel_id?: Maybe<Int_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  message_id?: Maybe<Int_Comparison_Exp>;\n  user_id?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"message_cursor\" */\nexport enum Message_Cursor_Constraint {\n  /** unique or primary key constraint */\n  MessageCursorChannelIdUserIdKey = 'message_cursor_channel_id_user_id_key',\n  /** unique or primary key constraint */\n  MessageCursorPkey = 'message_cursor_pkey'\n}\n\n/** input type for incrementing integer column in table \"message_cursor\" */\nexport type Message_Cursor_Inc_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"message_cursor\" */\nexport type Message_Cursor_Insert_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Message_Cursor_Max_Fields = {\n  __typename?: 'message_cursor_max_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Max_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Message_Cursor_Min_Fields = {\n  __typename?: 'message_cursor_min_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Min_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"message_cursor\" */\nexport type Message_Cursor_Mutation_Response = {\n  __typename?: 'message_cursor_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Message_Cursor>;\n};\n\n/** input type for inserting object relation for remote table \"message_cursor\" */\nexport type Message_Cursor_Obj_Rel_Insert_Input = {\n  data: Message_Cursor_Insert_Input;\n  on_conflict?: Maybe<Message_Cursor_On_Conflict>;\n};\n\n/** on conflict condition type for table \"message_cursor\" */\nexport type Message_Cursor_On_Conflict = {\n  constraint: Message_Cursor_Constraint;\n  update_columns: Array<Message_Cursor_Update_Column>;\n  where?: Maybe<Message_Cursor_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"message_cursor\" */\nexport type Message_Cursor_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"message_cursor\" */\nexport type Message_Cursor_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"message_cursor\" */\nexport enum Message_Cursor_Select_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  MessageId = 'message_id',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** input type for updating data in table \"message_cursor\" */\nexport type Message_Cursor_Set_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type Message_Cursor_Stddev_Fields = {\n  __typename?: 'message_cursor_stddev_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Stddev_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Message_Cursor_Stddev_Pop_Fields = {\n  __typename?: 'message_cursor_stddev_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Stddev_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Message_Cursor_Stddev_Samp_Fields = {\n  __typename?: 'message_cursor_stddev_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Stddev_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Message_Cursor_Sum_Fields = {\n  __typename?: 'message_cursor_sum_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Sum_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"message_cursor\" */\nexport enum Message_Cursor_Update_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  MessageId = 'message_id',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Message_Cursor_Var_Pop_Fields = {\n  __typename?: 'message_cursor_var_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Var_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Message_Cursor_Var_Samp_Fields = {\n  __typename?: 'message_cursor_var_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Var_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Message_Cursor_Variance_Fields = {\n  __typename?: 'message_cursor_variance_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Variance_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** input type for incrementing integer column in table \"message\" */\nexport type Message_Inc_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"message\" */\nexport type Message_Insert_Input = {\n  channel?: Maybe<Channel_Obj_Rel_Insert_Input>;\n  channel_id?: Maybe<Scalars['Int']>;\n  channel_thread?: Maybe<Channel_Thread_Obj_Rel_Insert_Input>;\n  channel_threads?: Maybe<Channel_Thread_Arr_Rel_Insert_Input>;\n  deleted?: Maybe<Scalars['Boolean']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user?: Maybe<User_Obj_Rel_Insert_Input>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Message_Max_Fields = {\n  __typename?: 'message_max_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"message\" */\nexport type Message_Max_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Message_Min_Fields = {\n  __typename?: 'message_min_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"message\" */\nexport type Message_Min_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"message\" */\nexport type Message_Mutation_Response = {\n  __typename?: 'message_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Message>;\n};\n\n/** input type for inserting object relation for remote table \"message\" */\nexport type Message_Obj_Rel_Insert_Input = {\n  data: Message_Insert_Input;\n  on_conflict?: Maybe<Message_On_Conflict>;\n};\n\n/** on conflict condition type for table \"message\" */\nexport type Message_On_Conflict = {\n  constraint: Message_Constraint;\n  update_columns: Array<Message_Update_Column>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"message\" */\nexport type Message_Order_By = {\n  channel?: Maybe<Channel_Order_By>;\n  channel_id?: Maybe<Order_By>;\n  channel_thread?: Maybe<Channel_Thread_Order_By>;\n  channel_threads_aggregate?: Maybe<Channel_Thread_Aggregate_Order_By>;\n  deleted?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user?: Maybe<User_Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"message\" */\nexport type Message_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"message\" */\nexport enum Message_Select_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Deleted = 'deleted',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Image = 'image',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  Timestamp = 'timestamp',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** input type for updating data in table \"message\" */\nexport type Message_Set_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  deleted?: Maybe<Scalars['Boolean']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type Message_Stddev_Fields = {\n  __typename?: 'message_stddev_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"message\" */\nexport type Message_Stddev_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Message_Stddev_Pop_Fields = {\n  __typename?: 'message_stddev_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"message\" */\nexport type Message_Stddev_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Message_Stddev_Samp_Fields = {\n  __typename?: 'message_stddev_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"message\" */\nexport type Message_Stddev_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Message_Sum_Fields = {\n  __typename?: 'message_sum_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"message\" */\nexport type Message_Sum_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"message\" */\nexport enum Message_Update_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Deleted = 'deleted',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Image = 'image',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  Timestamp = 'timestamp',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Message_Var_Pop_Fields = {\n  __typename?: 'message_var_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"message\" */\nexport type Message_Var_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Message_Var_Samp_Fields = {\n  __typename?: 'message_var_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"message\" */\nexport type Message_Var_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Message_Variance_Fields = {\n  __typename?: 'message_variance_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"message\" */\nexport type Message_Variance_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** mutation root */\nexport type Mutation_Root = {\n  __typename?: 'mutation_root';\n  /** perform the action: \"addChannelUser\" */\n  addChannelUser?: Maybe<AddChannelUserOutput>;\n  /** delete data from the table: \"channel\" */\n  delete_channel?: Maybe<Channel_Mutation_Response>;\n  /** delete single row from the table: \"channel\" */\n  delete_channel_by_pk?: Maybe<Channel>;\n  /** delete data from the table: \"channel_poll\" */\n  delete_channel_poll?: Maybe<Channel_Poll_Mutation_Response>;\n  /** delete single row from the table: \"channel_poll\" */\n  delete_channel_poll_by_pk?: Maybe<Channel_Poll>;\n  /** delete data from the table: \"channel_thread\" */\n  delete_channel_thread?: Maybe<Channel_Thread_Mutation_Response>;\n  /** delete single row from the table: \"channel_thread\" */\n  delete_channel_thread_by_pk?: Maybe<Channel_Thread>;\n  /** delete data from the table: \"channel_thread_message\" */\n  delete_channel_thread_message?: Maybe<Channel_Thread_Message_Mutation_Response>;\n  /** delete single row from the table: \"channel_thread_message\" */\n  delete_channel_thread_message_by_pk?: Maybe<Channel_Thread_Message>;\n  /** delete data from the table: \"channel_type\" */\n  delete_channel_type?: Maybe<Channel_Type_Mutation_Response>;\n  /** delete single row from the table: \"channel_type\" */\n  delete_channel_type_by_pk?: Maybe<Channel_Type>;\n  /** delete data from the table: \"message\" */\n  delete_message?: Maybe<Message_Mutation_Response>;\n  /** delete single row from the table: \"message\" */\n  delete_message_by_pk?: Maybe<Message>;\n  /** delete data from the table: \"message_cursor\" */\n  delete_message_cursor?: Maybe<Message_Cursor_Mutation_Response>;\n  /** delete single row from the table: \"message_cursor\" */\n  delete_message_cursor_by_pk?: Maybe<Message_Cursor>;\n  /** delete data from the table: \"poll_anwers\" */\n  delete_poll_anwers?: Maybe<Poll_Anwers_Mutation_Response>;\n  /** delete single row from the table: \"poll_anwers\" */\n  delete_poll_anwers_by_pk?: Maybe<Poll_Anwers>;\n  /** delete data from the table: \"poll_questions\" */\n  delete_poll_questions?: Maybe<Poll_Questions_Mutation_Response>;\n  /** delete single row from the table: \"poll_questions\" */\n  delete_poll_questions_by_pk?: Maybe<Poll_Questions>;\n  /** delete data from the table: \"user\" */\n  delete_user?: Maybe<User_Mutation_Response>;\n  /** delete single row from the table: \"user\" */\n  delete_user_by_pk?: Maybe<User>;\n  /** delete data from the table: \"user_channels\" */\n  delete_user_channels?: Maybe<User_Channels_Mutation_Response>;\n  /** delete single row from the table: \"user_channels\" */\n  delete_user_channels_by_pk?: Maybe<User_Channels>;\n  /** delete data from the table: \"user_online\" */\n  delete_user_online?: Maybe<User_Online_Mutation_Response>;\n  /** delete data from the table: \"user_typing\" */\n  delete_user_typing?: Maybe<User_Typing_Mutation_Response>;\n  /** delete data from the table: \"user_votes\" */\n  delete_user_votes?: Maybe<User_Votes_Mutation_Response>;\n  /** delete single row from the table: \"user_votes\" */\n  delete_user_votes_by_pk?: Maybe<User_Votes>;\n  /** insert data into the table: \"channel\" */\n  insert_channel?: Maybe<Channel_Mutation_Response>;\n  /** insert a single row into the table: \"channel\" */\n  insert_channel_one?: Maybe<Channel>;\n  /** insert data into the table: \"channel_poll\" */\n  insert_channel_poll?: Maybe<Channel_Poll_Mutation_Response>;\n  /** insert a single row into the table: \"channel_poll\" */\n  insert_channel_poll_one?: Maybe<Channel_Poll>;\n  /** insert data into the table: \"channel_thread\" */\n  insert_channel_thread?: Maybe<Channel_Thread_Mutation_Response>;\n  /** insert data into the table: \"channel_thread_message\" */\n  insert_channel_thread_message?: Maybe<Channel_Thread_Message_Mutation_Response>;\n  /** insert a single row into the table: \"channel_thread_message\" */\n  insert_channel_thread_message_one?: Maybe<Channel_Thread_Message>;\n  /** insert a single row into the table: \"channel_thread\" */\n  insert_channel_thread_one?: Maybe<Channel_Thread>;\n  /** insert data into the table: \"channel_type\" */\n  insert_channel_type?: Maybe<Channel_Type_Mutation_Response>;\n  /** insert a single row into the table: \"channel_type\" */\n  insert_channel_type_one?: Maybe<Channel_Type>;\n  /** insert data into the table: \"message\" */\n  insert_message?: Maybe<Message_Mutation_Response>;\n  /** insert data into the table: \"message_cursor\" */\n  insert_message_cursor?: Maybe<Message_Cursor_Mutation_Response>;\n  /** insert a single row into the table: \"message_cursor\" */\n  insert_message_cursor_one?: Maybe<Message_Cursor>;\n  /** insert a single row into the table: \"message\" */\n  insert_message_one?: Maybe<Message>;\n  /** insert data into the table: \"poll_anwers\" */\n  insert_poll_anwers?: Maybe<Poll_Anwers_Mutation_Response>;\n  /** insert a single row into the table: \"poll_anwers\" */\n  insert_poll_anwers_one?: Maybe<Poll_Anwers>;\n  /** insert data into the table: \"poll_questions\" */\n  insert_poll_questions?: Maybe<Poll_Questions_Mutation_Response>;\n  /** insert a single row into the table: \"poll_questions\" */\n  insert_poll_questions_one?: Maybe<Poll_Questions>;\n  /** insert data into the table: \"user\" */\n  insert_user?: Maybe<User_Mutation_Response>;\n  /** insert data into the table: \"user_channels\" */\n  insert_user_channels?: Maybe<User_Channels_Mutation_Response>;\n  /** insert a single row into the table: \"user_channels\" */\n  insert_user_channels_one?: Maybe<User_Channels>;\n  /** insert a single row into the table: \"user\" */\n  insert_user_one?: Maybe<User>;\n  /** insert data into the table: \"user_online\" */\n  insert_user_online?: Maybe<User_Online_Mutation_Response>;\n  /** insert a single row into the table: \"user_online\" */\n  insert_user_online_one?: Maybe<User_Online>;\n  /** insert data into the table: \"user_typing\" */\n  insert_user_typing?: Maybe<User_Typing_Mutation_Response>;\n  /** insert a single row into the table: \"user_typing\" */\n  insert_user_typing_one?: Maybe<User_Typing>;\n  /** insert data into the table: \"user_votes\" */\n  insert_user_votes?: Maybe<User_Votes_Mutation_Response>;\n  /** insert a single row into the table: \"user_votes\" */\n  insert_user_votes_one?: Maybe<User_Votes>;\n  /** update data of the table: \"channel\" */\n  update_channel?: Maybe<Channel_Mutation_Response>;\n  /** update single row of the table: \"channel\" */\n  update_channel_by_pk?: Maybe<Channel>;\n  /** update data of the table: \"channel_poll\" */\n  update_channel_poll?: Maybe<Channel_Poll_Mutation_Response>;\n  /** update single row of the table: \"channel_poll\" */\n  update_channel_poll_by_pk?: Maybe<Channel_Poll>;\n  /** update data of the table: \"channel_thread\" */\n  update_channel_thread?: Maybe<Channel_Thread_Mutation_Response>;\n  /** update single row of the table: \"channel_thread\" */\n  update_channel_thread_by_pk?: Maybe<Channel_Thread>;\n  /** update data of the table: \"channel_thread_message\" */\n  update_channel_thread_message?: Maybe<Channel_Thread_Message_Mutation_Response>;\n  /** update single row of the table: \"channel_thread_message\" */\n  update_channel_thread_message_by_pk?: Maybe<Channel_Thread_Message>;\n  /** update data of the table: \"channel_type\" */\n  update_channel_type?: Maybe<Channel_Type_Mutation_Response>;\n  /** update single row of the table: \"channel_type\" */\n  update_channel_type_by_pk?: Maybe<Channel_Type>;\n  /** update data of the table: \"message\" */\n  update_message?: Maybe<Message_Mutation_Response>;\n  /** update single row of the table: \"message\" */\n  update_message_by_pk?: Maybe<Message>;\n  /** update data of the table: \"message_cursor\" */\n  update_message_cursor?: Maybe<Message_Cursor_Mutation_Response>;\n  /** update single row of the table: \"message_cursor\" */\n  update_message_cursor_by_pk?: Maybe<Message_Cursor>;\n  /** update data of the table: \"poll_anwers\" */\n  update_poll_anwers?: Maybe<Poll_Anwers_Mutation_Response>;\n  /** update single row of the table: \"poll_anwers\" */\n  update_poll_anwers_by_pk?: Maybe<Poll_Anwers>;\n  /** update data of the table: \"poll_questions\" */\n  update_poll_questions?: Maybe<Poll_Questions_Mutation_Response>;\n  /** update single row of the table: \"poll_questions\" */\n  update_poll_questions_by_pk?: Maybe<Poll_Questions>;\n  /** update data of the table: \"user\" */\n  update_user?: Maybe<User_Mutation_Response>;\n  /** update single row of the table: \"user\" */\n  update_user_by_pk?: Maybe<User>;\n  /** update data of the table: \"user_channels\" */\n  update_user_channels?: Maybe<User_Channels_Mutation_Response>;\n  /** update single row of the table: \"user_channels\" */\n  update_user_channels_by_pk?: Maybe<User_Channels>;\n  /** update data of the table: \"user_online\" */\n  update_user_online?: Maybe<User_Online_Mutation_Response>;\n  /** update data of the table: \"user_typing\" */\n  update_user_typing?: Maybe<User_Typing_Mutation_Response>;\n  /** update data of the table: \"user_votes\" */\n  update_user_votes?: Maybe<User_Votes_Mutation_Response>;\n  /** update single row of the table: \"user_votes\" */\n  update_user_votes_by_pk?: Maybe<User_Votes>;\n  /** perform the action: \"validateAndAddDirectMessageChannel\" */\n  validateAndAddDirectMessageChannel?: Maybe<ValidateAndAddDirectMessageChannelOutput>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootAddChannelUserArgs = {\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_ChannelArgs = {\n  where: Channel_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_PollArgs = {\n  where: Channel_Poll_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_Poll_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_ThreadArgs = {\n  where: Channel_Thread_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_Thread_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_Thread_MessageArgs = {\n  where: Channel_Thread_Message_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_Thread_Message_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_TypeArgs = {\n  where: Channel_Type_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_Type_By_PkArgs = {\n  value: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_MessageArgs = {\n  where: Message_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Message_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Message_CursorArgs = {\n  where: Message_Cursor_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Message_Cursor_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Poll_AnwersArgs = {\n  where: Poll_Anwers_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Poll_Anwers_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Poll_QuestionsArgs = {\n  where: Poll_Questions_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Poll_Questions_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_UserArgs = {\n  where: User_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_ChannelsArgs = {\n  where: User_Channels_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_Channels_By_PkArgs = {\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_OnlineArgs = {\n  where: User_Online_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_TypingArgs = {\n  where: User_Typing_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_VotesArgs = {\n  where: User_Votes_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_Votes_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_ChannelArgs = {\n  objects: Array<Channel_Insert_Input>;\n  on_conflict?: Maybe<Channel_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_OneArgs = {\n  object: Channel_Insert_Input;\n  on_conflict?: Maybe<Channel_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_PollArgs = {\n  objects: Array<Channel_Poll_Insert_Input>;\n  on_conflict?: Maybe<Channel_Poll_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_Poll_OneArgs = {\n  object: Channel_Poll_Insert_Input;\n  on_conflict?: Maybe<Channel_Poll_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_ThreadArgs = {\n  objects: Array<Channel_Thread_Insert_Input>;\n  on_conflict?: Maybe<Channel_Thread_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_Thread_MessageArgs = {\n  objects: Array<Channel_Thread_Message_Insert_Input>;\n  on_conflict?: Maybe<Channel_Thread_Message_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_Thread_Message_OneArgs = {\n  object: Channel_Thread_Message_Insert_Input;\n  on_conflict?: Maybe<Channel_Thread_Message_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_Thread_OneArgs = {\n  object: Channel_Thread_Insert_Input;\n  on_conflict?: Maybe<Channel_Thread_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_TypeArgs = {\n  objects: Array<Channel_Type_Insert_Input>;\n  on_conflict?: Maybe<Channel_Type_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_Type_OneArgs = {\n  object: Channel_Type_Insert_Input;\n  on_conflict?: Maybe<Channel_Type_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_MessageArgs = {\n  objects: Array<Message_Insert_Input>;\n  on_conflict?: Maybe<Message_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Message_CursorArgs = {\n  objects: Array<Message_Cursor_Insert_Input>;\n  on_conflict?: Maybe<Message_Cursor_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Message_Cursor_OneArgs = {\n  object: Message_Cursor_Insert_Input;\n  on_conflict?: Maybe<Message_Cursor_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Message_OneArgs = {\n  object: Message_Insert_Input;\n  on_conflict?: Maybe<Message_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Poll_AnwersArgs = {\n  objects: Array<Poll_Anwers_Insert_Input>;\n  on_conflict?: Maybe<Poll_Anwers_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Poll_Anwers_OneArgs = {\n  object: Poll_Anwers_Insert_Input;\n  on_conflict?: Maybe<Poll_Anwers_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Poll_QuestionsArgs = {\n  objects: Array<Poll_Questions_Insert_Input>;\n  on_conflict?: Maybe<Poll_Questions_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Poll_Questions_OneArgs = {\n  object: Poll_Questions_Insert_Input;\n  on_conflict?: Maybe<Poll_Questions_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_UserArgs = {\n  objects: Array<User_Insert_Input>;\n  on_conflict?: Maybe<User_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_ChannelsArgs = {\n  objects: Array<User_Channels_Insert_Input>;\n  on_conflict?: Maybe<User_Channels_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_Channels_OneArgs = {\n  object: User_Channels_Insert_Input;\n  on_conflict?: Maybe<User_Channels_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_OneArgs = {\n  object: User_Insert_Input;\n  on_conflict?: Maybe<User_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_OnlineArgs = {\n  objects: Array<User_Online_Insert_Input>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_Online_OneArgs = {\n  object: User_Online_Insert_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_TypingArgs = {\n  objects: Array<User_Typing_Insert_Input>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_Typing_OneArgs = {\n  object: User_Typing_Insert_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_VotesArgs = {\n  objects: Array<User_Votes_Insert_Input>;\n  on_conflict?: Maybe<User_Votes_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_Votes_OneArgs = {\n  object: User_Votes_Insert_Input;\n  on_conflict?: Maybe<User_Votes_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_ChannelArgs = {\n  _inc?: Maybe<Channel_Inc_Input>;\n  _set?: Maybe<Channel_Set_Input>;\n  where: Channel_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_By_PkArgs = {\n  _inc?: Maybe<Channel_Inc_Input>;\n  _set?: Maybe<Channel_Set_Input>;\n  pk_columns: Channel_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_PollArgs = {\n  _inc?: Maybe<Channel_Poll_Inc_Input>;\n  _set?: Maybe<Channel_Poll_Set_Input>;\n  where: Channel_Poll_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_Poll_By_PkArgs = {\n  _inc?: Maybe<Channel_Poll_Inc_Input>;\n  _set?: Maybe<Channel_Poll_Set_Input>;\n  pk_columns: Channel_Poll_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_ThreadArgs = {\n  _inc?: Maybe<Channel_Thread_Inc_Input>;\n  _set?: Maybe<Channel_Thread_Set_Input>;\n  where: Channel_Thread_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_Thread_By_PkArgs = {\n  _inc?: Maybe<Channel_Thread_Inc_Input>;\n  _set?: Maybe<Channel_Thread_Set_Input>;\n  pk_columns: Channel_Thread_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_Thread_MessageArgs = {\n  _inc?: Maybe<Channel_Thread_Message_Inc_Input>;\n  _set?: Maybe<Channel_Thread_Message_Set_Input>;\n  where: Channel_Thread_Message_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_Thread_Message_By_PkArgs = {\n  _inc?: Maybe<Channel_Thread_Message_Inc_Input>;\n  _set?: Maybe<Channel_Thread_Message_Set_Input>;\n  pk_columns: Channel_Thread_Message_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_TypeArgs = {\n  _set?: Maybe<Channel_Type_Set_Input>;\n  where: Channel_Type_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_Type_By_PkArgs = {\n  _set?: Maybe<Channel_Type_Set_Input>;\n  pk_columns: Channel_Type_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_MessageArgs = {\n  _inc?: Maybe<Message_Inc_Input>;\n  _set?: Maybe<Message_Set_Input>;\n  where: Message_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Message_By_PkArgs = {\n  _inc?: Maybe<Message_Inc_Input>;\n  _set?: Maybe<Message_Set_Input>;\n  pk_columns: Message_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Message_CursorArgs = {\n  _inc?: Maybe<Message_Cursor_Inc_Input>;\n  _set?: Maybe<Message_Cursor_Set_Input>;\n  where: Message_Cursor_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Message_Cursor_By_PkArgs = {\n  _inc?: Maybe<Message_Cursor_Inc_Input>;\n  _set?: Maybe<Message_Cursor_Set_Input>;\n  pk_columns: Message_Cursor_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Poll_AnwersArgs = {\n  _inc?: Maybe<Poll_Anwers_Inc_Input>;\n  _set?: Maybe<Poll_Anwers_Set_Input>;\n  where: Poll_Anwers_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Poll_Anwers_By_PkArgs = {\n  _inc?: Maybe<Poll_Anwers_Inc_Input>;\n  _set?: Maybe<Poll_Anwers_Set_Input>;\n  pk_columns: Poll_Anwers_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Poll_QuestionsArgs = {\n  _inc?: Maybe<Poll_Questions_Inc_Input>;\n  _set?: Maybe<Poll_Questions_Set_Input>;\n  where: Poll_Questions_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Poll_Questions_By_PkArgs = {\n  _inc?: Maybe<Poll_Questions_Inc_Input>;\n  _set?: Maybe<Poll_Questions_Set_Input>;\n  pk_columns: Poll_Questions_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_UserArgs = {\n  _inc?: Maybe<User_Inc_Input>;\n  _set?: Maybe<User_Set_Input>;\n  where: User_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_By_PkArgs = {\n  _inc?: Maybe<User_Inc_Input>;\n  _set?: Maybe<User_Set_Input>;\n  pk_columns: User_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_ChannelsArgs = {\n  _inc?: Maybe<User_Channels_Inc_Input>;\n  _set?: Maybe<User_Channels_Set_Input>;\n  where: User_Channels_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_Channels_By_PkArgs = {\n  _inc?: Maybe<User_Channels_Inc_Input>;\n  _set?: Maybe<User_Channels_Set_Input>;\n  pk_columns: User_Channels_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_OnlineArgs = {\n  _inc?: Maybe<User_Online_Inc_Input>;\n  _set?: Maybe<User_Online_Set_Input>;\n  where: User_Online_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_TypingArgs = {\n  _inc?: Maybe<User_Typing_Inc_Input>;\n  _set?: Maybe<User_Typing_Set_Input>;\n  where: User_Typing_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_VotesArgs = {\n  _inc?: Maybe<User_Votes_Inc_Input>;\n  _set?: Maybe<User_Votes_Set_Input>;\n  where: User_Votes_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_Votes_By_PkArgs = {\n  _inc?: Maybe<User_Votes_Inc_Input>;\n  _set?: Maybe<User_Votes_Set_Input>;\n  pk_columns: User_Votes_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootValidateAndAddDirectMessageChannelArgs = {\n  name: Scalars['String'];\n  user_id1: Scalars['String'];\n  user_id2: Scalars['String'];\n};\n\n/** column ordering options */\nexport enum Order_By {\n  /** in the ascending order, nulls last */\n  Asc = 'asc',\n  /** in the ascending order, nulls first */\n  AscNullsFirst = 'asc_nulls_first',\n  /** in the ascending order, nulls last */\n  AscNullsLast = 'asc_nulls_last',\n  /** in the descending order, nulls first */\n  Desc = 'desc',\n  /** in the descending order, nulls first */\n  DescNullsFirst = 'desc_nulls_first',\n  /** in the descending order, nulls last */\n  DescNullsLast = 'desc_nulls_last'\n}\n\n/** columns and relationships of \"poll_anwers\" */\nexport type Poll_Anwers = {\n  __typename?: 'poll_anwers';\n  created_at: Scalars['timestamptz'];\n  id: Scalars['Int'];\n  /** An object relationship */\n  poll_question: Poll_Questions;\n  question_id: Scalars['Int'];\n  text: Scalars['String'];\n  updated_at: Scalars['timestamptz'];\n  user_id?: Maybe<Scalars['String']>;\n  votes: Scalars['Int'];\n};\n\n/** aggregated selection of \"poll_anwers\" */\nexport type Poll_Anwers_Aggregate = {\n  __typename?: 'poll_anwers_aggregate';\n  aggregate?: Maybe<Poll_Anwers_Aggregate_Fields>;\n  nodes: Array<Poll_Anwers>;\n};\n\n/** aggregate fields of \"poll_anwers\" */\nexport type Poll_Anwers_Aggregate_Fields = {\n  __typename?: 'poll_anwers_aggregate_fields';\n  avg?: Maybe<Poll_Anwers_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Poll_Anwers_Max_Fields>;\n  min?: Maybe<Poll_Anwers_Min_Fields>;\n  stddev?: Maybe<Poll_Anwers_Stddev_Fields>;\n  stddev_pop?: Maybe<Poll_Anwers_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Poll_Anwers_Stddev_Samp_Fields>;\n  sum?: Maybe<Poll_Anwers_Sum_Fields>;\n  var_pop?: Maybe<Poll_Anwers_Var_Pop_Fields>;\n  var_samp?: Maybe<Poll_Anwers_Var_Samp_Fields>;\n  variance?: Maybe<Poll_Anwers_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"poll_anwers\" */\nexport type Poll_Anwers_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"poll_anwers\" */\nexport type Poll_Anwers_Aggregate_Order_By = {\n  avg?: Maybe<Poll_Anwers_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Poll_Anwers_Max_Order_By>;\n  min?: Maybe<Poll_Anwers_Min_Order_By>;\n  stddev?: Maybe<Poll_Anwers_Stddev_Order_By>;\n  stddev_pop?: Maybe<Poll_Anwers_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Poll_Anwers_Stddev_Samp_Order_By>;\n  sum?: Maybe<Poll_Anwers_Sum_Order_By>;\n  var_pop?: Maybe<Poll_Anwers_Var_Pop_Order_By>;\n  var_samp?: Maybe<Poll_Anwers_Var_Samp_Order_By>;\n  variance?: Maybe<Poll_Anwers_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"poll_anwers\" */\nexport type Poll_Anwers_Arr_Rel_Insert_Input = {\n  data: Array<Poll_Anwers_Insert_Input>;\n  on_conflict?: Maybe<Poll_Anwers_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Poll_Anwers_Avg_Fields = {\n  __typename?: 'poll_anwers_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"poll_anwers\". All fields are combined with a logical 'AND'. */\nexport type Poll_Anwers_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Poll_Anwers_Bool_Exp>>>;\n  _not?: Maybe<Poll_Anwers_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Poll_Anwers_Bool_Exp>>>;\n  created_at?: Maybe<Timestamptz_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  poll_question?: Maybe<Poll_Questions_Bool_Exp>;\n  question_id?: Maybe<Int_Comparison_Exp>;\n  text?: Maybe<String_Comparison_Exp>;\n  updated_at?: Maybe<Timestamptz_Comparison_Exp>;\n  user_id?: Maybe<String_Comparison_Exp>;\n  votes?: Maybe<Int_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"poll_anwers\" */\nexport enum Poll_Anwers_Constraint {\n  /** unique or primary key constraint */\n  PollAnwersPkey = 'poll_anwers_pkey'\n}\n\n/** input type for incrementing integer column in table \"poll_anwers\" */\nexport type Poll_Anwers_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  question_id?: Maybe<Scalars['Int']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"poll_anwers\" */\nexport type Poll_Anwers_Insert_Input = {\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_question?: Maybe<Poll_Questions_Obj_Rel_Insert_Input>;\n  question_id?: Maybe<Scalars['Int']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Poll_Anwers_Max_Fields = {\n  __typename?: 'poll_anwers_max_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  question_id?: Maybe<Scalars['Int']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** order by max() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Max_Order_By = {\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Poll_Anwers_Min_Fields = {\n  __typename?: 'poll_anwers_min_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  question_id?: Maybe<Scalars['Int']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** order by min() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Min_Order_By = {\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"poll_anwers\" */\nexport type Poll_Anwers_Mutation_Response = {\n  __typename?: 'poll_anwers_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Poll_Anwers>;\n};\n\n/** input type for inserting object relation for remote table \"poll_anwers\" */\nexport type Poll_Anwers_Obj_Rel_Insert_Input = {\n  data: Poll_Anwers_Insert_Input;\n  on_conflict?: Maybe<Poll_Anwers_On_Conflict>;\n};\n\n/** on conflict condition type for table \"poll_anwers\" */\nexport type Poll_Anwers_On_Conflict = {\n  constraint: Poll_Anwers_Constraint;\n  update_columns: Array<Poll_Anwers_Update_Column>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"poll_anwers\" */\nexport type Poll_Anwers_Order_By = {\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_question?: Maybe<Poll_Questions_Order_By>;\n  question_id?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"poll_anwers\" */\nexport type Poll_Anwers_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"poll_anwers\" */\nexport enum Poll_Anwers_Select_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  QuestionId = 'question_id',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  UpdatedAt = 'updated_at',\n  /** column name */\n  UserId = 'user_id',\n  /** column name */\n  Votes = 'votes'\n}\n\n/** input type for updating data in table \"poll_anwers\" */\nexport type Poll_Anwers_Set_Input = {\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  question_id?: Maybe<Scalars['Int']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Poll_Anwers_Stddev_Fields = {\n  __typename?: 'poll_anwers_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Poll_Anwers_Stddev_Pop_Fields = {\n  __typename?: 'poll_anwers_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Poll_Anwers_Stddev_Samp_Fields = {\n  __typename?: 'poll_anwers_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Poll_Anwers_Sum_Fields = {\n  __typename?: 'poll_anwers_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  question_id?: Maybe<Scalars['Int']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** update columns of table \"poll_anwers\" */\nexport enum Poll_Anwers_Update_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  QuestionId = 'question_id',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  UpdatedAt = 'updated_at',\n  /** column name */\n  UserId = 'user_id',\n  /** column name */\n  Votes = 'votes'\n}\n\n/** aggregate var_pop on columns */\nexport type Poll_Anwers_Var_Pop_Fields = {\n  __typename?: 'poll_anwers_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Poll_Anwers_Var_Samp_Fields = {\n  __typename?: 'poll_anwers_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Poll_Anwers_Variance_Fields = {\n  __typename?: 'poll_anwers_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"poll_questions\" */\nexport type Poll_Questions = {\n  __typename?: 'poll_questions';\n  /** An array relationship */\n  channel_polls: Array<Channel_Poll>;\n  /** An aggregated array relationship */\n  channel_polls_aggregate: Channel_Poll_Aggregate;\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id: Scalars['Int'];\n  is_active: Scalars['Boolean'];\n  owner_id: Scalars['String'];\n  /** An array relationship */\n  poll_anwers: Array<Poll_Anwers>;\n  /** An aggregated array relationship */\n  poll_anwers_aggregate: Poll_Anwers_Aggregate;\n  text: Scalars['String'];\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n\n/** columns and relationships of \"poll_questions\" */\nexport type Poll_QuestionsChannel_PollsArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"poll_questions\" */\nexport type Poll_QuestionsChannel_Polls_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"poll_questions\" */\nexport type Poll_QuestionsPoll_AnwersArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"poll_questions\" */\nexport type Poll_QuestionsPoll_Anwers_AggregateArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n/** aggregated selection of \"poll_questions\" */\nexport type Poll_Questions_Aggregate = {\n  __typename?: 'poll_questions_aggregate';\n  aggregate?: Maybe<Poll_Questions_Aggregate_Fields>;\n  nodes: Array<Poll_Questions>;\n};\n\n/** aggregate fields of \"poll_questions\" */\nexport type Poll_Questions_Aggregate_Fields = {\n  __typename?: 'poll_questions_aggregate_fields';\n  avg?: Maybe<Poll_Questions_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Poll_Questions_Max_Fields>;\n  min?: Maybe<Poll_Questions_Min_Fields>;\n  stddev?: Maybe<Poll_Questions_Stddev_Fields>;\n  stddev_pop?: Maybe<Poll_Questions_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Poll_Questions_Stddev_Samp_Fields>;\n  sum?: Maybe<Poll_Questions_Sum_Fields>;\n  var_pop?: Maybe<Poll_Questions_Var_Pop_Fields>;\n  var_samp?: Maybe<Poll_Questions_Var_Samp_Fields>;\n  variance?: Maybe<Poll_Questions_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"poll_questions\" */\nexport type Poll_Questions_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Poll_Questions_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"poll_questions\" */\nexport type Poll_Questions_Aggregate_Order_By = {\n  avg?: Maybe<Poll_Questions_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Poll_Questions_Max_Order_By>;\n  min?: Maybe<Poll_Questions_Min_Order_By>;\n  stddev?: Maybe<Poll_Questions_Stddev_Order_By>;\n  stddev_pop?: Maybe<Poll_Questions_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Poll_Questions_Stddev_Samp_Order_By>;\n  sum?: Maybe<Poll_Questions_Sum_Order_By>;\n  var_pop?: Maybe<Poll_Questions_Var_Pop_Order_By>;\n  var_samp?: Maybe<Poll_Questions_Var_Samp_Order_By>;\n  variance?: Maybe<Poll_Questions_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"poll_questions\" */\nexport type Poll_Questions_Arr_Rel_Insert_Input = {\n  data: Array<Poll_Questions_Insert_Input>;\n  on_conflict?: Maybe<Poll_Questions_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Poll_Questions_Avg_Fields = {\n  __typename?: 'poll_questions_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"poll_questions\". All fields are combined with a logical 'AND'. */\nexport type Poll_Questions_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Poll_Questions_Bool_Exp>>>;\n  _not?: Maybe<Poll_Questions_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Poll_Questions_Bool_Exp>>>;\n  channel_polls?: Maybe<Channel_Poll_Bool_Exp>;\n  created_at?: Maybe<Timestamptz_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  is_active?: Maybe<Boolean_Comparison_Exp>;\n  owner_id?: Maybe<String_Comparison_Exp>;\n  poll_anwers?: Maybe<Poll_Anwers_Bool_Exp>;\n  text?: Maybe<String_Comparison_Exp>;\n  updated_at?: Maybe<Timestamptz_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"poll_questions\" */\nexport enum Poll_Questions_Constraint {\n  /** unique or primary key constraint */\n  PollQuestionsPkey = 'poll_questions_pkey'\n}\n\n/** input type for incrementing integer column in table \"poll_questions\" */\nexport type Poll_Questions_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"poll_questions\" */\nexport type Poll_Questions_Insert_Input = {\n  channel_polls?: Maybe<Channel_Poll_Arr_Rel_Insert_Input>;\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  is_active?: Maybe<Scalars['Boolean']>;\n  owner_id?: Maybe<Scalars['String']>;\n  poll_anwers?: Maybe<Poll_Anwers_Arr_Rel_Insert_Input>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** aggregate max on columns */\nexport type Poll_Questions_Max_Fields = {\n  __typename?: 'poll_questions_max_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  owner_id?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by max() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Max_Order_By = {\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Poll_Questions_Min_Fields = {\n  __typename?: 'poll_questions_min_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  owner_id?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by min() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Min_Order_By = {\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"poll_questions\" */\nexport type Poll_Questions_Mutation_Response = {\n  __typename?: 'poll_questions_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Poll_Questions>;\n};\n\n/** input type for inserting object relation for remote table \"poll_questions\" */\nexport type Poll_Questions_Obj_Rel_Insert_Input = {\n  data: Poll_Questions_Insert_Input;\n  on_conflict?: Maybe<Poll_Questions_On_Conflict>;\n};\n\n/** on conflict condition type for table \"poll_questions\" */\nexport type Poll_Questions_On_Conflict = {\n  constraint: Poll_Questions_Constraint;\n  update_columns: Array<Poll_Questions_Update_Column>;\n  where?: Maybe<Poll_Questions_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"poll_questions\" */\nexport type Poll_Questions_Order_By = {\n  channel_polls_aggregate?: Maybe<Channel_Poll_Aggregate_Order_By>;\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  is_active?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n  poll_anwers_aggregate?: Maybe<Poll_Anwers_Aggregate_Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"poll_questions\" */\nexport type Poll_Questions_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"poll_questions\" */\nexport enum Poll_Questions_Select_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsActive = 'is_active',\n  /** column name */\n  OwnerId = 'owner_id',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  UpdatedAt = 'updated_at'\n}\n\n/** input type for updating data in table \"poll_questions\" */\nexport type Poll_Questions_Set_Input = {\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  is_active?: Maybe<Scalars['Boolean']>;\n  owner_id?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** aggregate stddev on columns */\nexport type Poll_Questions_Stddev_Fields = {\n  __typename?: 'poll_questions_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Poll_Questions_Stddev_Pop_Fields = {\n  __typename?: 'poll_questions_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Poll_Questions_Stddev_Samp_Fields = {\n  __typename?: 'poll_questions_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Poll_Questions_Sum_Fields = {\n  __typename?: 'poll_questions_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"poll_questions\" */\nexport enum Poll_Questions_Update_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsActive = 'is_active',\n  /** column name */\n  OwnerId = 'owner_id',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  UpdatedAt = 'updated_at'\n}\n\n/** aggregate var_pop on columns */\nexport type Poll_Questions_Var_Pop_Fields = {\n  __typename?: 'poll_questions_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Poll_Questions_Var_Samp_Fields = {\n  __typename?: 'poll_questions_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Poll_Questions_Variance_Fields = {\n  __typename?: 'poll_questions_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** query root */\nexport type Query_Root = {\n  __typename?: 'query_root';\n  /** fetch data from the table: \"channel\" */\n  channel: Array<Channel>;\n  /** fetch aggregated fields from the table: \"channel\" */\n  channel_aggregate: Channel_Aggregate;\n  /** fetch data from the table: \"channel\" using primary key columns */\n  channel_by_pk?: Maybe<Channel>;\n  /** fetch data from the table: \"channel_poll\" */\n  channel_poll: Array<Channel_Poll>;\n  /** fetch aggregated fields from the table: \"channel_poll\" */\n  channel_poll_aggregate: Channel_Poll_Aggregate;\n  /** fetch data from the table: \"channel_poll\" using primary key columns */\n  channel_poll_by_pk?: Maybe<Channel_Poll>;\n  /** fetch data from the table: \"channel_thread\" */\n  channel_thread: Array<Channel_Thread>;\n  /** fetch aggregated fields from the table: \"channel_thread\" */\n  channel_thread_aggregate: Channel_Thread_Aggregate;\n  /** fetch data from the table: \"channel_thread\" using primary key columns */\n  channel_thread_by_pk?: Maybe<Channel_Thread>;\n  /** fetch data from the table: \"channel_thread_message\" */\n  channel_thread_message: Array<Channel_Thread_Message>;\n  /** fetch aggregated fields from the table: \"channel_thread_message\" */\n  channel_thread_message_aggregate: Channel_Thread_Message_Aggregate;\n  /** fetch data from the table: \"channel_thread_message\" using primary key columns */\n  channel_thread_message_by_pk?: Maybe<Channel_Thread_Message>;\n  /** fetch data from the table: \"channel_type\" */\n  channel_type: Array<Channel_Type>;\n  /** fetch aggregated fields from the table: \"channel_type\" */\n  channel_type_aggregate: Channel_Type_Aggregate;\n  /** fetch data from the table: \"channel_type\" using primary key columns */\n  channel_type_by_pk?: Maybe<Channel_Type>;\n  /** fetch data from the table: \"message\" */\n  message: Array<Message>;\n  /** fetch aggregated fields from the table: \"message\" */\n  message_aggregate: Message_Aggregate;\n  /** fetch data from the table: \"message\" using primary key columns */\n  message_by_pk?: Maybe<Message>;\n  /** fetch data from the table: \"message_cursor\" */\n  message_cursor: Array<Message_Cursor>;\n  /** fetch aggregated fields from the table: \"message_cursor\" */\n  message_cursor_aggregate: Message_Cursor_Aggregate;\n  /** fetch data from the table: \"message_cursor\" using primary key columns */\n  message_cursor_by_pk?: Maybe<Message_Cursor>;\n  /** fetch data from the table: \"poll_anwers\" */\n  poll_anwers: Array<Poll_Anwers>;\n  /** fetch aggregated fields from the table: \"poll_anwers\" */\n  poll_anwers_aggregate: Poll_Anwers_Aggregate;\n  /** fetch data from the table: \"poll_anwers\" using primary key columns */\n  poll_anwers_by_pk?: Maybe<Poll_Anwers>;\n  /** fetch data from the table: \"poll_questions\" */\n  poll_questions: Array<Poll_Questions>;\n  /** fetch aggregated fields from the table: \"poll_questions\" */\n  poll_questions_aggregate: Poll_Questions_Aggregate;\n  /** fetch data from the table: \"poll_questions\" using primary key columns */\n  poll_questions_by_pk?: Maybe<Poll_Questions>;\n  /** fetch data from the table: \"user\" */\n  user: Array<User>;\n  /** fetch aggregated fields from the table: \"user\" */\n  user_aggregate: User_Aggregate;\n  /** fetch data from the table: \"user\" using primary key columns */\n  user_by_pk?: Maybe<User>;\n  /** fetch data from the table: \"user_channels\" */\n  user_channels: Array<User_Channels>;\n  /** fetch aggregated fields from the table: \"user_channels\" */\n  user_channels_aggregate: User_Channels_Aggregate;\n  /** fetch data from the table: \"user_channels\" using primary key columns */\n  user_channels_by_pk?: Maybe<User_Channels>;\n  /** fetch data from the table: \"user_online\" */\n  user_online: Array<User_Online>;\n  /** fetch aggregated fields from the table: \"user_online\" */\n  user_online_aggregate: User_Online_Aggregate;\n  /** fetch data from the table: \"user_typing\" */\n  user_typing: Array<User_Typing>;\n  /** fetch aggregated fields from the table: \"user_typing\" */\n  user_typing_aggregate: User_Typing_Aggregate;\n  /** fetch data from the table: \"user_votes\" */\n  user_votes: Array<User_Votes>;\n  /** fetch aggregated fields from the table: \"user_votes\" */\n  user_votes_aggregate: User_Votes_Aggregate;\n  /** fetch data from the table: \"user_votes\" using primary key columns */\n  user_votes_by_pk?: Maybe<User_Votes>;\n};\n\n\n/** query root */\nexport type Query_RootChannelArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootChannel_PollArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Poll_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Poll_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootChannel_ThreadArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Thread_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Thread_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootChannel_Thread_MessageArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Thread_Message_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Thread_Message_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootChannel_TypeArgs = {\n  distinct_on?: Maybe<Array<Channel_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Type_Order_By>>;\n  where?: Maybe<Channel_Type_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Type_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Type_Order_By>>;\n  where?: Maybe<Channel_Type_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Type_By_PkArgs = {\n  value: Scalars['String'];\n};\n\n\n/** query root */\nexport type Query_RootMessageArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootMessage_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootMessage_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootMessage_CursorArgs = {\n  distinct_on?: Maybe<Array<Message_Cursor_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Cursor_Order_By>>;\n  where?: Maybe<Message_Cursor_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootMessage_Cursor_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Cursor_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Cursor_Order_By>>;\n  where?: Maybe<Message_Cursor_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootMessage_Cursor_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootPoll_AnwersArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPoll_Anwers_AggregateArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPoll_Anwers_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootPoll_QuestionsArgs = {\n  distinct_on?: Maybe<Array<Poll_Questions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Questions_Order_By>>;\n  where?: Maybe<Poll_Questions_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPoll_Questions_AggregateArgs = {\n  distinct_on?: Maybe<Array<Poll_Questions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Questions_Order_By>>;\n  where?: Maybe<Poll_Questions_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPoll_Questions_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootUserArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootUser_ChannelsArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Channels_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Channels_By_PkArgs = {\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n\n/** query root */\nexport type Query_RootUser_OnlineArgs = {\n  distinct_on?: Maybe<Array<User_Online_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Online_Order_By>>;\n  where?: Maybe<User_Online_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Online_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Online_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Online_Order_By>>;\n  where?: Maybe<User_Online_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_TypingArgs = {\n  distinct_on?: Maybe<Array<User_Typing_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Typing_Order_By>>;\n  where?: Maybe<User_Typing_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Typing_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Typing_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Typing_Order_By>>;\n  where?: Maybe<User_Typing_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_VotesArgs = {\n  distinct_on?: Maybe<Array<User_Votes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Votes_Order_By>>;\n  where?: Maybe<User_Votes_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Votes_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Votes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Votes_Order_By>>;\n  where?: Maybe<User_Votes_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Votes_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n/** subscription root */\nexport type Subscription_Root = {\n  __typename?: 'subscription_root';\n  /** fetch data from the table: \"channel\" */\n  channel: Array<Channel>;\n  /** fetch aggregated fields from the table: \"channel\" */\n  channel_aggregate: Channel_Aggregate;\n  /** fetch data from the table: \"channel\" using primary key columns */\n  channel_by_pk?: Maybe<Channel>;\n  /** fetch data from the table: \"channel_poll\" */\n  channel_poll: Array<Channel_Poll>;\n  /** fetch aggregated fields from the table: \"channel_poll\" */\n  channel_poll_aggregate: Channel_Poll_Aggregate;\n  /** fetch data from the table: \"channel_poll\" using primary key columns */\n  channel_poll_by_pk?: Maybe<Channel_Poll>;\n  /** fetch data from the table: \"channel_thread\" */\n  channel_thread: Array<Channel_Thread>;\n  /** fetch aggregated fields from the table: \"channel_thread\" */\n  channel_thread_aggregate: Channel_Thread_Aggregate;\n  /** fetch data from the table: \"channel_thread\" using primary key columns */\n  channel_thread_by_pk?: Maybe<Channel_Thread>;\n  /** fetch data from the table: \"channel_thread_message\" */\n  channel_thread_message: Array<Channel_Thread_Message>;\n  /** fetch aggregated fields from the table: \"channel_thread_message\" */\n  channel_thread_message_aggregate: Channel_Thread_Message_Aggregate;\n  /** fetch data from the table: \"channel_thread_message\" using primary key columns */\n  channel_thread_message_by_pk?: Maybe<Channel_Thread_Message>;\n  /** fetch data from the table: \"channel_type\" */\n  channel_type: Array<Channel_Type>;\n  /** fetch aggregated fields from the table: \"channel_type\" */\n  channel_type_aggregate: Channel_Type_Aggregate;\n  /** fetch data from the table: \"channel_type\" using primary key columns */\n  channel_type_by_pk?: Maybe<Channel_Type>;\n  /** fetch data from the table: \"message\" */\n  message: Array<Message>;\n  /** fetch aggregated fields from the table: \"message\" */\n  message_aggregate: Message_Aggregate;\n  /** fetch data from the table: \"message\" using primary key columns */\n  message_by_pk?: Maybe<Message>;\n  /** fetch data from the table: \"message_cursor\" */\n  message_cursor: Array<Message_Cursor>;\n  /** fetch aggregated fields from the table: \"message_cursor\" */\n  message_cursor_aggregate: Message_Cursor_Aggregate;\n  /** fetch data from the table: \"message_cursor\" using primary key columns */\n  message_cursor_by_pk?: Maybe<Message_Cursor>;\n  /** fetch data from the table: \"poll_anwers\" */\n  poll_anwers: Array<Poll_Anwers>;\n  /** fetch aggregated fields from the table: \"poll_anwers\" */\n  poll_anwers_aggregate: Poll_Anwers_Aggregate;\n  /** fetch data from the table: \"poll_anwers\" using primary key columns */\n  poll_anwers_by_pk?: Maybe<Poll_Anwers>;\n  /** fetch data from the table: \"poll_questions\" */\n  poll_questions: Array<Poll_Questions>;\n  /** fetch aggregated fields from the table: \"poll_questions\" */\n  poll_questions_aggregate: Poll_Questions_Aggregate;\n  /** fetch data from the table: \"poll_questions\" using primary key columns */\n  poll_questions_by_pk?: Maybe<Poll_Questions>;\n  /** fetch data from the table: \"user\" */\n  user: Array<User>;\n  /** fetch aggregated fields from the table: \"user\" */\n  user_aggregate: User_Aggregate;\n  /** fetch data from the table: \"user\" using primary key columns */\n  user_by_pk?: Maybe<User>;\n  /** fetch data from the table: \"user_channels\" */\n  user_channels: Array<User_Channels>;\n  /** fetch aggregated fields from the table: \"user_channels\" */\n  user_channels_aggregate: User_Channels_Aggregate;\n  /** fetch data from the table: \"user_channels\" using primary key columns */\n  user_channels_by_pk?: Maybe<User_Channels>;\n  /** fetch data from the table: \"user_online\" */\n  user_online: Array<User_Online>;\n  /** fetch aggregated fields from the table: \"user_online\" */\n  user_online_aggregate: User_Online_Aggregate;\n  /** fetch data from the table: \"user_typing\" */\n  user_typing: Array<User_Typing>;\n  /** fetch aggregated fields from the table: \"user_typing\" */\n  user_typing_aggregate: User_Typing_Aggregate;\n  /** fetch data from the table: \"user_votes\" */\n  user_votes: Array<User_Votes>;\n  /** fetch aggregated fields from the table: \"user_votes\" */\n  user_votes_aggregate: User_Votes_Aggregate;\n  /** fetch data from the table: \"user_votes\" using primary key columns */\n  user_votes_by_pk?: Maybe<User_Votes>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannelArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_PollArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Poll_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Poll_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_ThreadArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Thread_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Thread_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Thread_MessageArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Thread_Message_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Thread_Message_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_TypeArgs = {\n  distinct_on?: Maybe<Array<Channel_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Type_Order_By>>;\n  where?: Maybe<Channel_Type_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Type_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Type_Order_By>>;\n  where?: Maybe<Channel_Type_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Type_By_PkArgs = {\n  value: Scalars['String'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessageArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessage_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessage_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessage_CursorArgs = {\n  distinct_on?: Maybe<Array<Message_Cursor_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Cursor_Order_By>>;\n  where?: Maybe<Message_Cursor_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessage_Cursor_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Cursor_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Cursor_Order_By>>;\n  where?: Maybe<Message_Cursor_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessage_Cursor_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_AnwersArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_Anwers_AggregateArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_Anwers_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_QuestionsArgs = {\n  distinct_on?: Maybe<Array<Poll_Questions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Questions_Order_By>>;\n  where?: Maybe<Poll_Questions_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_Questions_AggregateArgs = {\n  distinct_on?: Maybe<Array<Poll_Questions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Questions_Order_By>>;\n  where?: Maybe<Poll_Questions_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_Questions_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootUserArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_ChannelsArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Channels_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Channels_By_PkArgs = {\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_OnlineArgs = {\n  distinct_on?: Maybe<Array<User_Online_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Online_Order_By>>;\n  where?: Maybe<User_Online_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Online_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Online_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Online_Order_By>>;\n  where?: Maybe<User_Online_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_TypingArgs = {\n  distinct_on?: Maybe<Array<User_Typing_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Typing_Order_By>>;\n  where?: Maybe<User_Typing_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Typing_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Typing_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Typing_Order_By>>;\n  where?: Maybe<User_Typing_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_VotesArgs = {\n  distinct_on?: Maybe<Array<User_Votes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Votes_Order_By>>;\n  where?: Maybe<User_Votes_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Votes_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Votes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Votes_Order_By>>;\n  where?: Maybe<User_Votes_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Votes_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** expression to compare columns of type timestamptz. All fields are combined with logical 'AND'. */\nexport type Timestamptz_Comparison_Exp = {\n  _eq?: Maybe<Scalars['timestamptz']>;\n  _gt?: Maybe<Scalars['timestamptz']>;\n  _gte?: Maybe<Scalars['timestamptz']>;\n  _in?: Maybe<Array<Scalars['timestamptz']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['timestamptz']>;\n  _lte?: Maybe<Scalars['timestamptz']>;\n  _neq?: Maybe<Scalars['timestamptz']>;\n  _nin?: Maybe<Array<Scalars['timestamptz']>>;\n};\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type User = {\n  __typename?: 'user';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  /** An array relationship */\n  channel_thread_messages: Array<Channel_Thread_Message>;\n  /** An aggregated array relationship */\n  channel_thread_messages_aggregate: Channel_Thread_Message_Aggregate;\n  /** An array relationship */\n  channels: Array<Channel>;\n  /** An aggregated array relationship */\n  channels_aggregate: Channel_Aggregate;\n  id: Scalars['Int'];\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  /** An array relationship */\n  messages: Array<Message>;\n  /** An aggregated array relationship */\n  messages_aggregate: Message_Aggregate;\n  /** An array relationship */\n  user_channels: Array<User_Channels>;\n  /** An aggregated array relationship */\n  user_channels_aggregate: User_Channels_Aggregate;\n  username: Scalars['String'];\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserChannel_Thread_MessagesArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserChannel_Thread_Messages_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserChannelsArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserChannels_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserMessagesArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserMessages_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserUser_ChannelsArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserUser_Channels_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n/** aggregated selection of \"user\" */\nexport type User_Aggregate = {\n  __typename?: 'user_aggregate';\n  aggregate?: Maybe<User_Aggregate_Fields>;\n  nodes: Array<User>;\n};\n\n/** aggregate fields of \"user\" */\nexport type User_Aggregate_Fields = {\n  __typename?: 'user_aggregate_fields';\n  avg?: Maybe<User_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<User_Max_Fields>;\n  min?: Maybe<User_Min_Fields>;\n  stddev?: Maybe<User_Stddev_Fields>;\n  stddev_pop?: Maybe<User_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<User_Stddev_Samp_Fields>;\n  sum?: Maybe<User_Sum_Fields>;\n  var_pop?: Maybe<User_Var_Pop_Fields>;\n  var_samp?: Maybe<User_Var_Samp_Fields>;\n  variance?: Maybe<User_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"user\" */\nexport type User_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<User_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"user\" */\nexport type User_Aggregate_Order_By = {\n  avg?: Maybe<User_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<User_Max_Order_By>;\n  min?: Maybe<User_Min_Order_By>;\n  stddev?: Maybe<User_Stddev_Order_By>;\n  stddev_pop?: Maybe<User_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<User_Stddev_Samp_Order_By>;\n  sum?: Maybe<User_Sum_Order_By>;\n  var_pop?: Maybe<User_Var_Pop_Order_By>;\n  var_samp?: Maybe<User_Var_Samp_Order_By>;\n  variance?: Maybe<User_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"user\" */\nexport type User_Arr_Rel_Insert_Input = {\n  data: Array<User_Insert_Input>;\n  on_conflict?: Maybe<User_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type User_Avg_Fields = {\n  __typename?: 'user_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"user\" */\nexport type User_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"user\". All fields are combined with a logical 'AND'. */\nexport type User_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<User_Bool_Exp>>>;\n  _not?: Maybe<User_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<User_Bool_Exp>>>;\n  auth0_user_id?: Maybe<String_Comparison_Exp>;\n  channel_thread_messages?: Maybe<Channel_Thread_Message_Bool_Exp>;\n  channels?: Maybe<Channel_Bool_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  last_seen?: Maybe<Timestamptz_Comparison_Exp>;\n  last_typed?: Maybe<Timestamptz_Comparison_Exp>;\n  last_typed_channel?: Maybe<Int_Comparison_Exp>;\n  messages?: Maybe<Message_Bool_Exp>;\n  user_channels?: Maybe<User_Channels_Bool_Exp>;\n  username?: Maybe<String_Comparison_Exp>;\n};\n\n/** columns and relationships of \"user_channels\" */\nexport type User_Channels = {\n  __typename?: 'user_channels';\n  /** An object relationship */\n  channel: Channel;\n  channel_id: Scalars['Int'];\n  /** An object relationship */\n  user: User;\n  user_id: Scalars['String'];\n};\n\n/** aggregated selection of \"user_channels\" */\nexport type User_Channels_Aggregate = {\n  __typename?: 'user_channels_aggregate';\n  aggregate?: Maybe<User_Channels_Aggregate_Fields>;\n  nodes: Array<User_Channels>;\n};\n\n/** aggregate fields of \"user_channels\" */\nexport type User_Channels_Aggregate_Fields = {\n  __typename?: 'user_channels_aggregate_fields';\n  avg?: Maybe<User_Channels_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<User_Channels_Max_Fields>;\n  min?: Maybe<User_Channels_Min_Fields>;\n  stddev?: Maybe<User_Channels_Stddev_Fields>;\n  stddev_pop?: Maybe<User_Channels_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<User_Channels_Stddev_Samp_Fields>;\n  sum?: Maybe<User_Channels_Sum_Fields>;\n  var_pop?: Maybe<User_Channels_Var_Pop_Fields>;\n  var_samp?: Maybe<User_Channels_Var_Samp_Fields>;\n  variance?: Maybe<User_Channels_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"user_channels\" */\nexport type User_Channels_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<User_Channels_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"user_channels\" */\nexport type User_Channels_Aggregate_Order_By = {\n  avg?: Maybe<User_Channels_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<User_Channels_Max_Order_By>;\n  min?: Maybe<User_Channels_Min_Order_By>;\n  stddev?: Maybe<User_Channels_Stddev_Order_By>;\n  stddev_pop?: Maybe<User_Channels_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<User_Channels_Stddev_Samp_Order_By>;\n  sum?: Maybe<User_Channels_Sum_Order_By>;\n  var_pop?: Maybe<User_Channels_Var_Pop_Order_By>;\n  var_samp?: Maybe<User_Channels_Var_Samp_Order_By>;\n  variance?: Maybe<User_Channels_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"user_channels\" */\nexport type User_Channels_Arr_Rel_Insert_Input = {\n  data: Array<User_Channels_Insert_Input>;\n  on_conflict?: Maybe<User_Channels_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type User_Channels_Avg_Fields = {\n  __typename?: 'user_channels_avg_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"user_channels\" */\nexport type User_Channels_Avg_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"user_channels\". All fields are combined with a logical 'AND'. */\nexport type User_Channels_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<User_Channels_Bool_Exp>>>;\n  _not?: Maybe<User_Channels_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<User_Channels_Bool_Exp>>>;\n  channel?: Maybe<Channel_Bool_Exp>;\n  channel_id?: Maybe<Int_Comparison_Exp>;\n  user?: Maybe<User_Bool_Exp>;\n  user_id?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"user_channels\" */\nexport enum User_Channels_Constraint {\n  /** unique or primary key constraint */\n  UserChannelsPkey = 'user_channels_pkey'\n}\n\n/** input type for incrementing integer column in table \"user_channels\" */\nexport type User_Channels_Inc_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"user_channels\" */\nexport type User_Channels_Insert_Input = {\n  channel?: Maybe<Channel_Obj_Rel_Insert_Input>;\n  channel_id?: Maybe<Scalars['Int']>;\n  user?: Maybe<User_Obj_Rel_Insert_Input>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type User_Channels_Max_Fields = {\n  __typename?: 'user_channels_max_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"user_channels\" */\nexport type User_Channels_Max_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type User_Channels_Min_Fields = {\n  __typename?: 'user_channels_min_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"user_channels\" */\nexport type User_Channels_Min_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"user_channels\" */\nexport type User_Channels_Mutation_Response = {\n  __typename?: 'user_channels_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<User_Channels>;\n};\n\n/** input type for inserting object relation for remote table \"user_channels\" */\nexport type User_Channels_Obj_Rel_Insert_Input = {\n  data: User_Channels_Insert_Input;\n  on_conflict?: Maybe<User_Channels_On_Conflict>;\n};\n\n/** on conflict condition type for table \"user_channels\" */\nexport type User_Channels_On_Conflict = {\n  constraint: User_Channels_Constraint;\n  update_columns: Array<User_Channels_Update_Column>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"user_channels\" */\nexport type User_Channels_Order_By = {\n  channel?: Maybe<Channel_Order_By>;\n  channel_id?: Maybe<Order_By>;\n  user?: Maybe<User_Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"user_channels\" */\nexport type User_Channels_Pk_Columns_Input = {\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n/** select columns of table \"user_channels\" */\nexport enum User_Channels_Select_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** input type for updating data in table \"user_channels\" */\nexport type User_Channels_Set_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type User_Channels_Stddev_Fields = {\n  __typename?: 'user_channels_stddev_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"user_channels\" */\nexport type User_Channels_Stddev_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type User_Channels_Stddev_Pop_Fields = {\n  __typename?: 'user_channels_stddev_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"user_channels\" */\nexport type User_Channels_Stddev_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type User_Channels_Stddev_Samp_Fields = {\n  __typename?: 'user_channels_stddev_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"user_channels\" */\nexport type User_Channels_Stddev_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type User_Channels_Sum_Fields = {\n  __typename?: 'user_channels_sum_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"user_channels\" */\nexport type User_Channels_Sum_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"user_channels\" */\nexport enum User_Channels_Update_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** aggregate var_pop on columns */\nexport type User_Channels_Var_Pop_Fields = {\n  __typename?: 'user_channels_var_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"user_channels\" */\nexport type User_Channels_Var_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type User_Channels_Var_Samp_Fields = {\n  __typename?: 'user_channels_var_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"user_channels\" */\nexport type User_Channels_Var_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type User_Channels_Variance_Fields = {\n  __typename?: 'user_channels_variance_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"user_channels\" */\nexport type User_Channels_Variance_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** unique or primary key constraints on table \"user\" */\nexport enum User_Constraint {\n  /** unique or primary key constraint */\n  UserAuth0UserIdKey = 'user_auth0_user_id_key',\n  /** unique or primary key constraint */\n  UserPkey = 'user_pkey'\n}\n\n/** input type for incrementing integer column in table \"user\" */\nexport type User_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"user\" */\nexport type User_Insert_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  channel_thread_messages?: Maybe<Channel_Thread_Message_Arr_Rel_Insert_Input>;\n  channels?: Maybe<Channel_Arr_Rel_Insert_Input>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  messages?: Maybe<Message_Arr_Rel_Insert_Input>;\n  user_channels?: Maybe<User_Channels_Arr_Rel_Insert_Input>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type User_Max_Fields = {\n  __typename?: 'user_max_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"user\" */\nexport type User_Max_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type User_Min_Fields = {\n  __typename?: 'user_min_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"user\" */\nexport type User_Min_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"user\" */\nexport type User_Mutation_Response = {\n  __typename?: 'user_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<User>;\n};\n\n/** input type for inserting object relation for remote table \"user\" */\nexport type User_Obj_Rel_Insert_Input = {\n  data: User_Insert_Input;\n  on_conflict?: Maybe<User_On_Conflict>;\n};\n\n/** on conflict condition type for table \"user\" */\nexport type User_On_Conflict = {\n  constraint: User_Constraint;\n  update_columns: Array<User_Update_Column>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n/** columns and relationships of \"user_online\" */\nexport type User_Online = {\n  __typename?: 'user_online';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregated selection of \"user_online\" */\nexport type User_Online_Aggregate = {\n  __typename?: 'user_online_aggregate';\n  aggregate?: Maybe<User_Online_Aggregate_Fields>;\n  nodes: Array<User_Online>;\n};\n\n/** aggregate fields of \"user_online\" */\nexport type User_Online_Aggregate_Fields = {\n  __typename?: 'user_online_aggregate_fields';\n  avg?: Maybe<User_Online_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<User_Online_Max_Fields>;\n  min?: Maybe<User_Online_Min_Fields>;\n  stddev?: Maybe<User_Online_Stddev_Fields>;\n  stddev_pop?: Maybe<User_Online_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<User_Online_Stddev_Samp_Fields>;\n  sum?: Maybe<User_Online_Sum_Fields>;\n  var_pop?: Maybe<User_Online_Var_Pop_Fields>;\n  var_samp?: Maybe<User_Online_Var_Samp_Fields>;\n  variance?: Maybe<User_Online_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"user_online\" */\nexport type User_Online_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<User_Online_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"user_online\" */\nexport type User_Online_Aggregate_Order_By = {\n  avg?: Maybe<User_Online_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<User_Online_Max_Order_By>;\n  min?: Maybe<User_Online_Min_Order_By>;\n  stddev?: Maybe<User_Online_Stddev_Order_By>;\n  stddev_pop?: Maybe<User_Online_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<User_Online_Stddev_Samp_Order_By>;\n  sum?: Maybe<User_Online_Sum_Order_By>;\n  var_pop?: Maybe<User_Online_Var_Pop_Order_By>;\n  var_samp?: Maybe<User_Online_Var_Samp_Order_By>;\n  variance?: Maybe<User_Online_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"user_online\" */\nexport type User_Online_Arr_Rel_Insert_Input = {\n  data: Array<User_Online_Insert_Input>;\n};\n\n/** aggregate avg on columns */\nexport type User_Online_Avg_Fields = {\n  __typename?: 'user_online_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"user_online\" */\nexport type User_Online_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"user_online\". All fields are combined with a logical 'AND'. */\nexport type User_Online_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<User_Online_Bool_Exp>>>;\n  _not?: Maybe<User_Online_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<User_Online_Bool_Exp>>>;\n  auth0_user_id?: Maybe<String_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  last_seen?: Maybe<Timestamptz_Comparison_Exp>;\n  last_typed?: Maybe<Timestamptz_Comparison_Exp>;\n  username?: Maybe<String_Comparison_Exp>;\n};\n\n/** input type for incrementing integer column in table \"user_online\" */\nexport type User_Online_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"user_online\" */\nexport type User_Online_Insert_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type User_Online_Max_Fields = {\n  __typename?: 'user_online_max_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"user_online\" */\nexport type User_Online_Max_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type User_Online_Min_Fields = {\n  __typename?: 'user_online_min_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"user_online\" */\nexport type User_Online_Min_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"user_online\" */\nexport type User_Online_Mutation_Response = {\n  __typename?: 'user_online_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<User_Online>;\n};\n\n/** input type for inserting object relation for remote table \"user_online\" */\nexport type User_Online_Obj_Rel_Insert_Input = {\n  data: User_Online_Insert_Input;\n};\n\n/** ordering options when selecting data from \"user_online\" */\nexport type User_Online_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** select columns of table \"user_online\" */\nexport enum User_Online_Select_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  LastSeen = 'last_seen',\n  /** column name */\n  LastTyped = 'last_typed',\n  /** column name */\n  Username = 'username'\n}\n\n/** input type for updating data in table \"user_online\" */\nexport type User_Online_Set_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type User_Online_Stddev_Fields = {\n  __typename?: 'user_online_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"user_online\" */\nexport type User_Online_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type User_Online_Stddev_Pop_Fields = {\n  __typename?: 'user_online_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"user_online\" */\nexport type User_Online_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type User_Online_Stddev_Samp_Fields = {\n  __typename?: 'user_online_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"user_online\" */\nexport type User_Online_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type User_Online_Sum_Fields = {\n  __typename?: 'user_online_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"user_online\" */\nexport type User_Online_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_pop on columns */\nexport type User_Online_Var_Pop_Fields = {\n  __typename?: 'user_online_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"user_online\" */\nexport type User_Online_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type User_Online_Var_Samp_Fields = {\n  __typename?: 'user_online_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"user_online\" */\nexport type User_Online_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type User_Online_Variance_Fields = {\n  __typename?: 'user_online_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"user_online\" */\nexport type User_Online_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** ordering options when selecting data from \"user\" */\nexport type User_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  channel_thread_messages_aggregate?: Maybe<Channel_Thread_Message_Aggregate_Order_By>;\n  channels_aggregate?: Maybe<Channel_Aggregate_Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  messages_aggregate?: Maybe<Message_Aggregate_Order_By>;\n  user_channels_aggregate?: Maybe<User_Channels_Aggregate_Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"user\" */\nexport type User_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"user\" */\nexport enum User_Select_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  LastSeen = 'last_seen',\n  /** column name */\n  LastTyped = 'last_typed',\n  /** column name */\n  LastTypedChannel = 'last_typed_channel',\n  /** column name */\n  Username = 'username'\n}\n\n/** input type for updating data in table \"user\" */\nexport type User_Set_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type User_Stddev_Fields = {\n  __typename?: 'user_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"user\" */\nexport type User_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type User_Stddev_Pop_Fields = {\n  __typename?: 'user_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"user\" */\nexport type User_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type User_Stddev_Samp_Fields = {\n  __typename?: 'user_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"user\" */\nexport type User_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type User_Sum_Fields = {\n  __typename?: 'user_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"user\" */\nexport type User_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"user_typing\" */\nexport type User_Typing = {\n  __typename?: 'user_typing';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregated selection of \"user_typing\" */\nexport type User_Typing_Aggregate = {\n  __typename?: 'user_typing_aggregate';\n  aggregate?: Maybe<User_Typing_Aggregate_Fields>;\n  nodes: Array<User_Typing>;\n};\n\n/** aggregate fields of \"user_typing\" */\nexport type User_Typing_Aggregate_Fields = {\n  __typename?: 'user_typing_aggregate_fields';\n  avg?: Maybe<User_Typing_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<User_Typing_Max_Fields>;\n  min?: Maybe<User_Typing_Min_Fields>;\n  stddev?: Maybe<User_Typing_Stddev_Fields>;\n  stddev_pop?: Maybe<User_Typing_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<User_Typing_Stddev_Samp_Fields>;\n  sum?: Maybe<User_Typing_Sum_Fields>;\n  var_pop?: Maybe<User_Typing_Var_Pop_Fields>;\n  var_samp?: Maybe<User_Typing_Var_Samp_Fields>;\n  variance?: Maybe<User_Typing_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"user_typing\" */\nexport type User_Typing_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<User_Typing_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"user_typing\" */\nexport type User_Typing_Aggregate_Order_By = {\n  avg?: Maybe<User_Typing_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<User_Typing_Max_Order_By>;\n  min?: Maybe<User_Typing_Min_Order_By>;\n  stddev?: Maybe<User_Typing_Stddev_Order_By>;\n  stddev_pop?: Maybe<User_Typing_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<User_Typing_Stddev_Samp_Order_By>;\n  sum?: Maybe<User_Typing_Sum_Order_By>;\n  var_pop?: Maybe<User_Typing_Var_Pop_Order_By>;\n  var_samp?: Maybe<User_Typing_Var_Samp_Order_By>;\n  variance?: Maybe<User_Typing_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"user_typing\" */\nexport type User_Typing_Arr_Rel_Insert_Input = {\n  data: Array<User_Typing_Insert_Input>;\n};\n\n/** aggregate avg on columns */\nexport type User_Typing_Avg_Fields = {\n  __typename?: 'user_typing_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"user_typing\" */\nexport type User_Typing_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"user_typing\". All fields are combined with a logical 'AND'. */\nexport type User_Typing_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<User_Typing_Bool_Exp>>>;\n  _not?: Maybe<User_Typing_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<User_Typing_Bool_Exp>>>;\n  auth0_user_id?: Maybe<String_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  last_seen?: Maybe<Timestamptz_Comparison_Exp>;\n  last_typed?: Maybe<Timestamptz_Comparison_Exp>;\n  last_typed_channel?: Maybe<Int_Comparison_Exp>;\n  username?: Maybe<String_Comparison_Exp>;\n};\n\n/** input type for incrementing integer column in table \"user_typing\" */\nexport type User_Typing_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"user_typing\" */\nexport type User_Typing_Insert_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type User_Typing_Max_Fields = {\n  __typename?: 'user_typing_max_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"user_typing\" */\nexport type User_Typing_Max_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type User_Typing_Min_Fields = {\n  __typename?: 'user_typing_min_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"user_typing\" */\nexport type User_Typing_Min_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"user_typing\" */\nexport type User_Typing_Mutation_Response = {\n  __typename?: 'user_typing_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<User_Typing>;\n};\n\n/** input type for inserting object relation for remote table \"user_typing\" */\nexport type User_Typing_Obj_Rel_Insert_Input = {\n  data: User_Typing_Insert_Input;\n};\n\n/** ordering options when selecting data from \"user_typing\" */\nexport type User_Typing_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** select columns of table \"user_typing\" */\nexport enum User_Typing_Select_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  LastSeen = 'last_seen',\n  /** column name */\n  LastTyped = 'last_typed',\n  /** column name */\n  LastTypedChannel = 'last_typed_channel',\n  /** column name */\n  Username = 'username'\n}\n\n/** input type for updating data in table \"user_typing\" */\nexport type User_Typing_Set_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type User_Typing_Stddev_Fields = {\n  __typename?: 'user_typing_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"user_typing\" */\nexport type User_Typing_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type User_Typing_Stddev_Pop_Fields = {\n  __typename?: 'user_typing_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"user_typing\" */\nexport type User_Typing_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type User_Typing_Stddev_Samp_Fields = {\n  __typename?: 'user_typing_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"user_typing\" */\nexport type User_Typing_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type User_Typing_Sum_Fields = {\n  __typename?: 'user_typing_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"user_typing\" */\nexport type User_Typing_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate var_pop on columns */\nexport type User_Typing_Var_Pop_Fields = {\n  __typename?: 'user_typing_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"user_typing\" */\nexport type User_Typing_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type User_Typing_Var_Samp_Fields = {\n  __typename?: 'user_typing_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"user_typing\" */\nexport type User_Typing_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type User_Typing_Variance_Fields = {\n  __typename?: 'user_typing_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"user_typing\" */\nexport type User_Typing_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** update columns of table \"user\" */\nexport enum User_Update_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  LastSeen = 'last_seen',\n  /** column name */\n  LastTyped = 'last_typed',\n  /** column name */\n  LastTypedChannel = 'last_typed_channel',\n  /** column name */\n  Username = 'username'\n}\n\n/** aggregate var_pop on columns */\nexport type User_Var_Pop_Fields = {\n  __typename?: 'user_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"user\" */\nexport type User_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type User_Var_Samp_Fields = {\n  __typename?: 'user_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"user\" */\nexport type User_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type User_Variance_Fields = {\n  __typename?: 'user_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"user\" */\nexport type User_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"user_votes\" */\nexport type User_Votes = {\n  __typename?: 'user_votes';\n  auth0_user_id: Scalars['String'];\n  id: Scalars['Int'];\n  poll_answer_id: Scalars['Int'];\n  poll_question_id: Scalars['Int'];\n  username: Scalars['String'];\n  voted_at: Scalars['timestamptz'];\n};\n\n/** aggregated selection of \"user_votes\" */\nexport type User_Votes_Aggregate = {\n  __typename?: 'user_votes_aggregate';\n  aggregate?: Maybe<User_Votes_Aggregate_Fields>;\n  nodes: Array<User_Votes>;\n};\n\n/** aggregate fields of \"user_votes\" */\nexport type User_Votes_Aggregate_Fields = {\n  __typename?: 'user_votes_aggregate_fields';\n  avg?: Maybe<User_Votes_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<User_Votes_Max_Fields>;\n  min?: Maybe<User_Votes_Min_Fields>;\n  stddev?: Maybe<User_Votes_Stddev_Fields>;\n  stddev_pop?: Maybe<User_Votes_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<User_Votes_Stddev_Samp_Fields>;\n  sum?: Maybe<User_Votes_Sum_Fields>;\n  var_pop?: Maybe<User_Votes_Var_Pop_Fields>;\n  var_samp?: Maybe<User_Votes_Var_Samp_Fields>;\n  variance?: Maybe<User_Votes_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"user_votes\" */\nexport type User_Votes_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<User_Votes_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"user_votes\" */\nexport type User_Votes_Aggregate_Order_By = {\n  avg?: Maybe<User_Votes_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<User_Votes_Max_Order_By>;\n  min?: Maybe<User_Votes_Min_Order_By>;\n  stddev?: Maybe<User_Votes_Stddev_Order_By>;\n  stddev_pop?: Maybe<User_Votes_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<User_Votes_Stddev_Samp_Order_By>;\n  sum?: Maybe<User_Votes_Sum_Order_By>;\n  var_pop?: Maybe<User_Votes_Var_Pop_Order_By>;\n  var_samp?: Maybe<User_Votes_Var_Samp_Order_By>;\n  variance?: Maybe<User_Votes_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"user_votes\" */\nexport type User_Votes_Arr_Rel_Insert_Input = {\n  data: Array<User_Votes_Insert_Input>;\n  on_conflict?: Maybe<User_Votes_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type User_Votes_Avg_Fields = {\n  __typename?: 'user_votes_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"user_votes\" */\nexport type User_Votes_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"user_votes\". All fields are combined with a logical 'AND'. */\nexport type User_Votes_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<User_Votes_Bool_Exp>>>;\n  _not?: Maybe<User_Votes_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<User_Votes_Bool_Exp>>>;\n  auth0_user_id?: Maybe<String_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  poll_answer_id?: Maybe<Int_Comparison_Exp>;\n  poll_question_id?: Maybe<Int_Comparison_Exp>;\n  username?: Maybe<String_Comparison_Exp>;\n  voted_at?: Maybe<Timestamptz_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"user_votes\" */\nexport enum User_Votes_Constraint {\n  /** unique or primary key constraint */\n  UserVotesPkey = 'user_votes_pkey'\n}\n\n/** input type for incrementing integer column in table \"user_votes\" */\nexport type User_Votes_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"user_votes\" */\nexport type User_Votes_Insert_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n  voted_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** aggregate max on columns */\nexport type User_Votes_Max_Fields = {\n  __typename?: 'user_votes_max_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n  voted_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by max() on columns of table \"user_votes\" */\nexport type User_Votes_Max_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n  voted_at?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type User_Votes_Min_Fields = {\n  __typename?: 'user_votes_min_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n  voted_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by min() on columns of table \"user_votes\" */\nexport type User_Votes_Min_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n  voted_at?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"user_votes\" */\nexport type User_Votes_Mutation_Response = {\n  __typename?: 'user_votes_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<User_Votes>;\n};\n\n/** input type for inserting object relation for remote table \"user_votes\" */\nexport type User_Votes_Obj_Rel_Insert_Input = {\n  data: User_Votes_Insert_Input;\n  on_conflict?: Maybe<User_Votes_On_Conflict>;\n};\n\n/** on conflict condition type for table \"user_votes\" */\nexport type User_Votes_On_Conflict = {\n  constraint: User_Votes_Constraint;\n  update_columns: Array<User_Votes_Update_Column>;\n  where?: Maybe<User_Votes_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"user_votes\" */\nexport type User_Votes_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n  voted_at?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"user_votes\" */\nexport type User_Votes_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"user_votes\" */\nexport enum User_Votes_Select_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  PollAnswerId = 'poll_answer_id',\n  /** column name */\n  PollQuestionId = 'poll_question_id',\n  /** column name */\n  Username = 'username',\n  /** column name */\n  VotedAt = 'voted_at'\n}\n\n/** input type for updating data in table \"user_votes\" */\nexport type User_Votes_Set_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n  voted_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** aggregate stddev on columns */\nexport type User_Votes_Stddev_Fields = {\n  __typename?: 'user_votes_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"user_votes\" */\nexport type User_Votes_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type User_Votes_Stddev_Pop_Fields = {\n  __typename?: 'user_votes_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"user_votes\" */\nexport type User_Votes_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type User_Votes_Stddev_Samp_Fields = {\n  __typename?: 'user_votes_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"user_votes\" */\nexport type User_Votes_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type User_Votes_Sum_Fields = {\n  __typename?: 'user_votes_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"user_votes\" */\nexport type User_Votes_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"user_votes\" */\nexport enum User_Votes_Update_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  PollAnswerId = 'poll_answer_id',\n  /** column name */\n  PollQuestionId = 'poll_question_id',\n  /** column name */\n  Username = 'username',\n  /** column name */\n  VotedAt = 'voted_at'\n}\n\n/** aggregate var_pop on columns */\nexport type User_Votes_Var_Pop_Fields = {\n  __typename?: 'user_votes_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"user_votes\" */\nexport type User_Votes_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type User_Votes_Var_Samp_Fields = {\n  __typename?: 'user_votes_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"user_votes\" */\nexport type User_Votes_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type User_Votes_Variance_Fields = {\n  __typename?: 'user_votes_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"user_votes\" */\nexport type User_Votes_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n\nexport type ValidateAndAddDirectMessageChannelOutput = {\n  __typename?: 'validateAndAddDirectMessageChannelOutput';\n  id: Scalars['Int'];\n  name: Scalars['String'];\n};\n\nexport type InsertMessageMutationVariables = Exact<{\n  message: Message_Insert_Input;\n}>;\n\n\nexport type InsertMessageMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_message?: Maybe<(\n    { __typename?: 'message_mutation_response' }\n    & { returning: Array<(\n      { __typename?: 'message' }\n      & Pick<Message, 'id' | 'timestamp' | 'text'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'username'>\n      ), channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'name'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type UpdateMessageMutationVariables = Exact<{\n  _eq: Scalars['Int'];\n  text: Scalars['String'];\n  deleted?: Maybe<Scalars['Boolean']>;\n}>;\n\n\nexport type UpdateMessageMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_message?: Maybe<(\n    { __typename?: 'message_mutation_response' }\n    & Pick<Message_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type DeleteMessageMutationVariables = Exact<{\n  message_id?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type DeleteMessageMutation = (\n  { __typename?: 'mutation_root' }\n  & { delete_message?: Maybe<(\n    { __typename?: 'message_mutation_response' }\n    & Pick<Message_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type SetUserOnlineMutationVariables = Exact<{\n  user_id: Scalars['String'];\n}>;\n\n\nexport type SetUserOnlineMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_user?: Maybe<(\n    { __typename?: 'user_mutation_response' }\n    & Pick<User_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type AddChannelMutationVariables = Exact<{\n  channel: Channel_Insert_Input;\n}>;\n\n\nexport type AddChannelMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_channel?: Maybe<(\n    { __typename?: 'channel_mutation_response' }\n    & { returning: Array<(\n      { __typename?: 'channel' }\n      & Pick<Channel, 'id' | 'name' | 'owner_id' | 'is_private'>\n    )> }\n  )> }\n);\n\nexport type ValidateAndAddDirectMessageChannelMutationVariables = Exact<{\n  name: Scalars['String'];\n  user_id1: Scalars['String'];\n  user_id2: Scalars['String'];\n}>;\n\n\nexport type ValidateAndAddDirectMessageChannelMutation = (\n  { __typename?: 'mutation_root' }\n  & { validateAndAddDirectMessageChannel?: Maybe<(\n    { __typename?: 'validateAndAddDirectMessageChannelOutput' }\n    & Pick<ValidateAndAddDirectMessageChannelOutput, 'id' | 'name'>\n  )> }\n);\n\nexport type AddChannelUserMutationVariables = Exact<{\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n}>;\n\n\nexport type AddChannelUserMutation = (\n  { __typename?: 'mutation_root' }\n  & { addChannelUser?: Maybe<(\n    { __typename?: 'AddChannelUserOutput' }\n    & Pick<AddChannelUserOutput, 'affected_rows'>\n  )> }\n);\n\nexport type SendTypingEventMutationVariables = Exact<{\n  user_id: Scalars['String'];\n  channel_id: Scalars['Int'];\n}>;\n\n\nexport type SendTypingEventMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_user?: Maybe<(\n    { __typename?: 'user_mutation_response' }\n    & Pick<User_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type UpsertMessageCursorMutationVariables = Exact<{\n  channel_id: Scalars['Int'];\n  message_id: Scalars['Int'];\n  user_id: Scalars['String'];\n}>;\n\n\nexport type UpsertMessageCursorMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_message_cursor?: Maybe<(\n    { __typename?: 'message_cursor_mutation_response' }\n    & { returning: Array<(\n      { __typename?: 'message_cursor' }\n      & Pick<Message_Cursor, 'channel_id' | 'message_id' | 'user_id'>\n    )> }\n  )> }\n);\n\nexport type InsertChannelThreadMessageMutationVariables = Exact<{\n  channel_thread_id: Scalars['Int'];\n  message: Scalars['String'];\n  user_id: Scalars['String'];\n  image?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type InsertChannelThreadMessageMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_channel_thread_message?: Maybe<(\n    { __typename?: 'channel_thread_message_mutation_response' }\n    & Pick<Channel_Thread_Message_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'channel_thread_message' }\n      & Pick<Channel_Thread_Message, 'id' | 'image' | 'message' | 'timestamp' | 'user_id'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'auth0_user_id' | 'username'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type DeleteThreadMessageMutationVariables = Exact<{\n  message_id: Scalars['Int'];\n}>;\n\n\nexport type DeleteThreadMessageMutation = (\n  { __typename?: 'mutation_root' }\n  & { delete_channel_thread_message?: Maybe<(\n    { __typename?: 'channel_thread_message_mutation_response' }\n    & Pick<Channel_Thread_Message_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type InsertChannelThreadMutationVariables = Exact<{\n  message_id: Scalars['Int'];\n}>;\n\n\nexport type InsertChannelThreadMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_channel_thread?: Maybe<(\n    { __typename?: 'channel_thread_mutation_response' }\n    & { returning: Array<(\n      { __typename?: 'channel_thread' }\n      & { message?: Maybe<(\n        { __typename?: 'message' }\n        & Pick<Message, 'image' | 'text' | 'timestamp' | 'id'>\n        & { user: (\n          { __typename?: 'user' }\n          & Pick<User, 'auth0_user_id' | 'id' | 'username'>\n        ) }\n      )> }\n    )> }\n  )> }\n);\n\nexport type AddPollQuestionMutationVariables = Exact<{\n  text?: Maybe<Scalars['String']>;\n  owner_id?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type AddPollQuestionMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_poll_questions?: Maybe<(\n    { __typename?: 'poll_questions_mutation_response' }\n    & Pick<Poll_Questions_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type AddAnswerToQuestionMutationVariables = Exact<{\n  text: Scalars['String'];\n  pollQuestionId: Scalars['Int'];\n}>;\n\n\nexport type AddAnswerToQuestionMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_poll_anwers?: Maybe<(\n    { __typename?: 'poll_anwers_mutation_response' }\n    & Pick<Poll_Anwers_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type AddPublishPollQuestionToChannelMutationVariables = Exact<{\n  channelID: Scalars['Int'];\n  pollQuestionID: Scalars['Int'];\n}>;\n\n\nexport type AddPublishPollQuestionToChannelMutation = (\n  { __typename?: 'mutation_root' }\n  & { channelPoll?: Maybe<(\n    { __typename?: 'channel_poll_mutation_response' }\n    & Pick<Channel_Poll_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'channel_poll' }\n      & Pick<Channel_Poll, 'channel_id' | 'id' | 'poll_questions'>\n    )> }\n  )> }\n);\n\nexport type SetPollAnswerVoteMutationVariables = Exact<{\n  pollAnswerId: Scalars['Int'];\n  newVote: Scalars['Int'];\n}>;\n\n\nexport type SetPollAnswerVoteMutation = (\n  { __typename?: 'mutation_root' }\n  & { updatePollAnswer?: Maybe<(\n    { __typename?: 'poll_anwers_mutation_response' }\n    & Pick<Poll_Anwers_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'poll_anwers' }\n      & Pick<Poll_Anwers, 'votes'>\n    )> }\n  )> }\n);\n\nexport type SetPublishPollQuestionStateMutationVariables = Exact<{\n  pollQuestionId: Scalars['Int'];\n  is_active?: Maybe<Scalars['Boolean']>;\n}>;\n\n\nexport type SetPublishPollQuestionStateMutation = (\n  { __typename?: 'mutation_root' }\n  & { setPollQuestionState?: Maybe<(\n    { __typename?: 'poll_questions_mutation_response' }\n    & Pick<Poll_Questions_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'poll_questions' }\n      & Pick<Poll_Questions, 'is_active'>\n    )> }\n  )> }\n);\n\nexport type DeletePollQuestionMutationVariables = Exact<{\n  pollQuestionId: Scalars['Int'];\n}>;\n\n\nexport type DeletePollQuestionMutation = (\n  { __typename?: 'mutation_root' }\n  & { delete_poll_anwers?: Maybe<(\n    { __typename?: 'poll_anwers_mutation_response' }\n    & Pick<Poll_Anwers_Mutation_Response, 'affected_rows'>\n  )>, deletePollQuestion?: Maybe<(\n    { __typename?: 'poll_questions_mutation_response' }\n    & Pick<Poll_Questions_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type DeletePollQuestionFromChannelMutationVariables = Exact<{\n  pollQuestionId: Scalars['Int'];\n  channelId: Scalars['Int'];\n}>;\n\n\nexport type DeletePollQuestionFromChannelMutation = (\n  { __typename?: 'mutation_root' }\n  & { delete_channel_poll?: Maybe<(\n    { __typename?: 'channel_poll_mutation_response' }\n    & Pick<Channel_Poll_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type UpdatePollAnswerTextMutationVariables = Exact<{\n  text: Scalars['String'];\n  pollAnswerId: Scalars['Int'];\n}>;\n\n\nexport type UpdatePollAnswerTextMutation = (\n  { __typename?: 'mutation_root' }\n  & { pollAnswerText?: Maybe<(\n    { __typename?: 'poll_anwers_mutation_response' }\n    & Pick<Poll_Anwers_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'poll_anwers' }\n      & Pick<Poll_Anwers, 'text'>\n    )> }\n  )> }\n);\n\nexport type DeletePollAnswerIdMutationVariables = Exact<{\n  pollAnswerId: Scalars['Int'];\n}>;\n\n\nexport type DeletePollAnswerIdMutation = (\n  { __typename?: 'mutation_root' }\n  & { delete_poll_anwers?: Maybe<(\n    { __typename?: 'poll_anwers_mutation_response' }\n    & Pick<Poll_Anwers_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type SetUserVotePollQuestionMutationVariables = Exact<{\n  userName?: Maybe<Scalars['String']>;\n  auth0UserId?: Maybe<Scalars['String']>;\n  pollQuestionId?: Maybe<Scalars['Int']>;\n  pollAnswerId?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type SetUserVotePollQuestionMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_user_votes?: Maybe<(\n    { __typename?: 'user_votes_mutation_response' }\n    & Pick<User_Votes_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type GetMessagesQueryVariables = Exact<{\n  last_received_id?: Maybe<Scalars['Int']>;\n  last_received_ts?: Maybe<Scalars['timestamptz']>;\n  channel?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type GetMessagesQuery = (\n  { __typename?: 'query_root' }\n  & { channel: Array<(\n    { __typename?: 'channel' }\n    & { messages: Array<(\n      { __typename?: 'message' }\n      & Pick<Message, 'id' | 'text' | 'timestamp'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'username'>\n      ), channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'name'>\n      ), channel_threads: Array<(\n        { __typename?: 'channel_thread' }\n        & Pick<Channel_Thread, 'id'>\n      )> }\n    )> }\n  )> }\n);\n\nexport type GetMessagesSumQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetMessagesSumQuery = (\n  { __typename?: 'query_root' }\n  & { channel_aggregate: (\n    { __typename?: 'channel_aggregate' }\n    & { nodes: Array<(\n      { __typename?: 'channel' }\n      & { messages: Array<(\n        { __typename?: 'message' }\n        & Pick<Message, 'channel_id'>\n        & { channel: (\n          { __typename?: 'channel' }\n          & Pick<Channel, 'name'>\n        ) }\n      )>, messages_aggregate: (\n        { __typename?: 'message_aggregate' }\n        & { aggregate?: Maybe<(\n          { __typename?: 'message_aggregate_fields' }\n          & Pick<Message_Aggregate_Fields, 'count'>\n        )> }\n      ) }\n    )> }\n  ) }\n);\n\nexport type GetChannelsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetChannelsQuery = (\n  { __typename?: 'query_root' }\n  & { channels: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'name' | 'id' | 'is_private' | 'owner_id'>\n  )> }\n);\n\nexport type GetUserListQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserListQuery = (\n  { __typename?: 'query_root' }\n  & { users: Array<(\n    { __typename?: 'user' }\n    & Pick<User, 'username' | 'id' | 'auth0_user_id' | 'last_seen'>\n  )> }\n);\n\nexport type GetChannelByNameQueryVariables = Exact<{\n  name: Scalars['String'];\n}>;\n\n\nexport type GetChannelByNameQuery = (\n  { __typename?: 'query_root' }\n  & { channel: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'name' | 'id' | 'is_private' | 'owner_id' | 'channel_type'>\n  )> }\n);\n\nexport type GetAuth0UserByIdQueryVariables = Exact<{\n  user_id?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type GetAuth0UserByIdQuery = (\n  { __typename?: 'query_root' }\n  & { user: Array<(\n    { __typename?: 'user' }\n    & Pick<User, 'id' | 'username' | 'auth0_user_id'>\n    & { user_channels: Array<(\n      { __typename?: 'user_channels' }\n      & { channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'name' | 'id' | 'is_private'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type GetChannelThreadIdQueryVariables = Exact<{\n  message_id?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetChannelThreadIdQuery = (\n  { __typename?: 'query_root' }\n  & { channel_thread: Array<(\n    { __typename?: 'channel_thread' }\n    & Pick<Channel_Thread, 'id'>\n  )> }\n);\n\nexport type GetChannelThreadParentMessageQueryVariables = Exact<{\n  limit?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetChannelThreadParentMessageQuery = (\n  { __typename?: 'query_root' }\n  & { channel_thread_message: Array<(\n    { __typename?: 'channel_thread_message' }\n    & Pick<Channel_Thread_Message, 'channel_thread_id' | 'timestamp'>\n    & { channel_thread: (\n      { __typename?: 'channel_thread' }\n      & { message?: Maybe<(\n        { __typename?: 'message' }\n        & Pick<Message, 'text' | 'timestamp' | 'image' | 'id' | 'user_id'>\n        & { user: (\n          { __typename?: 'user' }\n          & Pick<User, 'auth0_user_id' | 'username'>\n        ) }\n      )> }\n    ) }\n  )> }\n);\n\nexport type GetChannelThreadQueryVariables = Exact<{\n  message_id?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetChannelThreadQuery = (\n  { __typename?: 'query_root' }\n  & { channel_thread: Array<(\n    { __typename?: 'channel_thread' }\n    & Pick<Channel_Thread, 'id'>\n    & { message?: Maybe<(\n      { __typename?: 'message' }\n      & Pick<Message, 'id' | 'image' | 'text' | 'deleted' | 'timestamp'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'auth0_user_id' | 'id' | 'username'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type GetPollQuestionsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetPollQuestionsQuery = (\n  { __typename?: 'query_root' }\n  & { questions: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'id' | 'owner_id' | 'text'>\n  )> }\n);\n\nexport type GetPollQuestionAnswersQueryVariables = Exact<{\n  pollQuestionId?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetPollQuestionAnswersQuery = (\n  { __typename?: 'query_root' }\n  & { poll_question: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'id' | 'text' | 'is_active'>\n  )>, poll_answers: Array<(\n    { __typename?: 'poll_anwers' }\n    & Pick<Poll_Anwers, 'question_id' | 'text' | 'id' | 'votes'>\n  )> }\n);\n\nexport type GetPublicChannelsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetPublicChannelsQuery = (\n  { __typename?: 'query_root' }\n  & { channels: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'id' | 'name'>\n    & { channel_polls: Array<(\n      { __typename?: 'channel_poll' }\n      & { poll_question: (\n        { __typename?: 'poll_questions' }\n        & Pick<Poll_Questions, 'is_active'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type GetChannelPollsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetChannelPollsQuery = (\n  { __typename?: 'query_root' }\n  & { channelPoll: Array<(\n    { __typename?: 'channel_poll' }\n    & Pick<Channel_Poll, 'channel_id' | 'id' | 'poll_questions'>\n  )> }\n);\n\nexport type GetChannelPollQuestionQueryVariables = Exact<{\n  channelId?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetChannelPollQuestionQuery = (\n  { __typename?: 'query_root' }\n  & { getChannelPoll: Array<(\n    { __typename?: 'channel_poll' }\n    & Pick<Channel_Poll, 'id'>\n    & { poll_question: (\n      { __typename?: 'poll_questions' }\n      & Pick<Poll_Questions, 'id' | 'text'>\n      & { poll_anwers: Array<(\n        { __typename?: 'poll_anwers' }\n        & Pick<Poll_Anwers, 'text' | 'question_id'>\n      )> }\n    ) }\n  )> }\n);\n\nexport type GetPollAnswerVotesQueryVariables = Exact<{\n  pollAnswerId: Scalars['Int'];\n}>;\n\n\nexport type GetPollAnswerVotesQuery = (\n  { __typename?: 'query_root' }\n  & { poll_anwers: Array<(\n    { __typename?: 'poll_anwers' }\n    & Pick<Poll_Anwers, 'id' | 'votes'>\n  )> }\n);\n\nexport type WatchMessagesSubscriptionVariables = Exact<{\n  channelId: Scalars['Int'];\n  limit?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type WatchMessagesSubscription = (\n  { __typename?: 'subscription_root' }\n  & { messages: Array<(\n    { __typename?: 'message' }\n    & Pick<Message, 'id' | 'text' | 'image' | 'timestamp' | 'deleted'>\n    & { user: (\n      { __typename?: 'user' }\n      & Pick<User, 'username' | 'auth0_user_id'>\n    ), channel: (\n      { __typename?: 'channel' }\n      & Pick<Channel, 'name'>\n    ) }\n  )> }\n);\n\nexport type WatchChannelThreadMessagesSubscriptionVariables = Exact<{\n  limit: Scalars['Int'];\n  message_id: Scalars['Int'];\n}>;\n\n\nexport type WatchChannelThreadMessagesSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channel_thread_message: Array<(\n    { __typename?: 'channel_thread_message' }\n    & Pick<Channel_Thread_Message, 'id' | 'message' | 'image' | 'channel_thread_id' | 'timestamp'>\n    & { user: (\n      { __typename?: 'user' }\n      & Pick<User, 'username' | 'id' | 'auth0_user_id'>\n    ) }\n  )> }\n);\n\nexport type WatchChannelThreadSubscriptionVariables = Exact<{\n  message_id: Scalars['Int'];\n}>;\n\n\nexport type WatchChannelThreadSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channel_thread_message: Array<(\n    { __typename?: 'channel_thread_message' }\n    & Pick<Channel_Thread_Message, 'id' | 'message' | 'channel_thread_id' | 'timestamp'>\n  )> }\n);\n\nexport type WatchThreadsSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchThreadsSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channel_thread: Array<(\n    { __typename?: 'channel_thread' }\n    & Pick<Channel_Thread, 'id' | 'message_id'>\n    & { message?: Maybe<(\n      { __typename?: 'message' }\n      & Pick<Message, 'image' | 'text' | 'deleted' | 'timestamp' | 'id' | 'user_id'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'auth0_user_id' | 'username'>\n      ), channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'id' | 'name'>\n      ) }\n    )>, channel_thread_messages: Array<(\n      { __typename?: 'channel_thread_message' }\n      & Pick<Channel_Thread_Message, 'id' | 'image' | 'message' | 'timestamp' | 'user_id'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'auth0_user_id' | 'username'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type WatchOnlineUsersSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchOnlineUsersSubscription = (\n  { __typename?: 'subscription_root' }\n  & { users: Array<(\n    { __typename?: 'user_online' }\n    & Pick<User_Online, 'id' | 'username' | 'auth0_user_id'>\n  )> }\n);\n\nexport type WatchChannelsSubscriptionVariables = Exact<{\n  channel_type: Channel_Type_Enum;\n}>;\n\n\nexport type WatchChannelsSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channels: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'name' | 'id' | 'is_private' | 'owner_id'>\n  )> }\n);\n\nexport type WatchDirectMessageChannelsSubscriptionVariables = Exact<{\n  channel_type: Channel_Type_Enum;\n  user_id?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type WatchDirectMessageChannelsSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channels: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'name' | 'id' | 'is_private' | 'owner_id'>\n    & { user_channels: Array<(\n      { __typename?: 'user_channels' }\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'username' | 'auth0_user_id'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type WatchUsersSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchUsersSubscription = (\n  { __typename?: 'subscription_root' }\n  & { user: Array<(\n    { __typename?: 'user' }\n    & Pick<User, 'username' | 'auth0_user_id'>\n  )> }\n);\n\nexport type WatchUsersWhoHaveNotSubscribedToChannelSubscriptionVariables = Exact<{\n  user_id: Scalars['String'];\n  channel_id: Scalars['Int'];\n}>;\n\n\nexport type WatchUsersWhoHaveNotSubscribedToChannelSubscription = (\n  { __typename?: 'subscription_root' }\n  & { user: Array<(\n    { __typename?: 'user' }\n    & Pick<User, 'auth0_user_id' | 'username'>\n  )> }\n);\n\nexport type WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscriptionVariables = Exact<{\n  user_id: Scalars['String'];\n}>;\n\n\nexport type WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription = (\n  { __typename?: 'subscription_root' }\n  & { user: Array<(\n    { __typename?: 'user' }\n    & Pick<User, 'auth0_user_id' | 'username'>\n    & { user_channels: Array<(\n      { __typename?: 'user_channels' }\n      & Pick<User_Channels, 'channel_id'>\n      & { channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'name'>\n        & { user_channels: Array<(\n          { __typename?: 'user_channels' }\n          & { user: (\n            { __typename?: 'user' }\n            & Pick<User, 'auth0_user_id' | 'username'>\n          ) }\n        )> }\n      ) }\n    )> }\n  )> }\n);\n\nexport type GetUserIsTypingSubscriptionVariables = Exact<{\n  self_id: Scalars['String'];\n  channel_id: Scalars['Int'];\n}>;\n\n\nexport type GetUserIsTypingSubscription = (\n  { __typename?: 'subscription_root' }\n  & { user_typing: Array<(\n    { __typename?: 'user_typing' }\n    & Pick<User_Typing, 'last_typed' | 'username'>\n  )> }\n);\n\nexport type WatchNewMessagesSubscriptionVariables = Exact<{\n  channelId: Scalars['Int'];\n}>;\n\n\nexport type WatchNewMessagesSubscription = (\n  { __typename?: 'subscription_root' }\n  & { newMessages: Array<(\n    { __typename?: 'message' }\n    & Pick<Message, 'id' | 'text' | 'timestamp'>\n    & { user: (\n      { __typename?: 'user' }\n      & Pick<User, 'username'>\n    ) }\n  )> }\n);\n\nexport type WatchChannelsLastMessageIdSubscriptionVariables = Exact<{\n  channel_type?: Channel_Type_Enum;\n}>;\n\n\nexport type WatchChannelsLastMessageIdSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channels: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'name' | 'id' | 'is_private' | 'owner_id'>\n    & { messages: Array<(\n      { __typename?: 'message' }\n      & Pick<Message, 'id'>\n    )> }\n  )> }\n);\n\nexport type WatchMessageCursorSubscriptionVariables = Exact<{\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n}>;\n\n\nexport type WatchMessageCursorSubscription = (\n  { __typename?: 'subscription_root' }\n  & { message_cursor: Array<(\n    { __typename?: 'message_cursor' }\n    & Pick<Message_Cursor, 'channel_id' | 'message_id' | 'user_id'>\n  )> }\n);\n\nexport type WatchGetPollQuestionsSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchGetPollQuestionsSubscription = (\n  { __typename?: 'subscription_root' }\n  & { questions: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'id' | 'text' | 'created_at' | 'updated_at' | 'owner_id' | 'is_active'>\n    & { channel_polls: Array<(\n      { __typename?: 'channel_poll' }\n      & { channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'name'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type WatchGetChannelPollQuestionPublishStateSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchGetChannelPollQuestionPublishStateSubscription = (\n  { __typename?: 'subscription_root' }\n  & { getChannelPollQuestionPublishState: Array<(\n    { __typename?: 'channel_poll' }\n    & Pick<Channel_Poll, 'channel_id' | 'id' | 'poll_questions'>\n    & { channel: (\n      { __typename?: 'channel' }\n      & Pick<Channel, 'name'>\n    ), poll_question: (\n      { __typename?: 'poll_questions' }\n      & Pick<Poll_Questions, 'text' | 'is_active'>\n    ) }\n  )> }\n);\n\nexport type WatchGetPollQuestionSubscriptionVariables = Exact<{\n  pollQuestionId?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type WatchGetPollQuestionSubscription = (\n  { __typename?: 'subscription_root' }\n  & { poll_question: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'id' | 'text' | 'is_active'>\n  )> }\n);\n\nexport type WatchGetPollAnswersSubscriptionVariables = Exact<{\n  pollQuestionId: Scalars['Int'];\n}>;\n\n\nexport type WatchGetPollAnswersSubscription = (\n  { __typename?: 'subscription_root' }\n  & { poll_answers: Array<(\n    { __typename?: 'poll_anwers' }\n    & Pick<Poll_Anwers, 'question_id' | 'text' | 'id' | 'votes'>\n  )> }\n);\n\nexport type WatchChannelPollQuestionSubscriptionVariables = Exact<{\n  channelId: Scalars['Int'];\n}>;\n\n\nexport type WatchChannelPollQuestionSubscription = (\n  { __typename?: 'subscription_root' }\n  & { getChannelPoll: Array<(\n    { __typename?: 'channel_poll' }\n    & Pick<Channel_Poll, 'id'>\n    & { poll_question: (\n      { __typename?: 'poll_questions' }\n      & Pick<Poll_Questions, 'id' | 'text'>\n      & { poll_anwers: Array<(\n        { __typename?: 'poll_anwers' }\n        & Pick<Poll_Anwers, 'text' | 'votes' | 'id'>\n      )> }\n    ) }\n  )> }\n);\n\nexport type WatchPollAnswerVotesSubscriptionVariables = Exact<{\n  pollAnswerId: Scalars['Int'];\n}>;\n\n\nexport type WatchPollAnswerVotesSubscription = (\n  { __typename?: 'subscription_root' }\n  & { pollAnswerVotes: Array<(\n    { __typename?: 'poll_anwers' }\n    & Pick<Poll_Anwers, 'id' | 'votes'>\n  )> }\n);\n\nexport type GetPollQuestionStateSubscriptionVariables = Exact<{\n  pollQuestionId: Scalars['Int'];\n}>;\n\n\nexport type GetPollQuestionStateSubscription = (\n  { __typename?: 'subscription_root' }\n  & { poll_questions: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'is_active'>\n  )> }\n);\n\nexport type WatchGetChannelsSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchGetChannelsSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channel: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'id' | 'name'>\n    & { channel_polls: Array<(\n      { __typename?: 'channel_poll' }\n      & Pick<Channel_Poll, 'channel_id'>\n      & { poll_question: (\n        { __typename?: 'poll_questions' }\n        & Pick<Poll_Questions, 'id' | 'text'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type WatchChannelHasActivePollSubscriptionVariables = Exact<{\n  currentChannelId: Scalars['Int'];\n}>;\n\n\nexport type WatchChannelHasActivePollSubscription = (\n  { __typename?: 'subscription_root' }\n  & { poll_questions: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'id' | 'text'>\n  )> }\n);\n\nexport type WatchChannelPollActiveStateSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchChannelPollActiveStateSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channel_poll: Array<(\n    { __typename?: 'channel_poll' }\n    & Pick<Channel_Poll, 'id'>\n    & { channel: (\n      { __typename?: 'channel' }\n      & Pick<Channel, 'name'>\n      & { channel_polls: Array<(\n        { __typename?: 'channel_poll' }\n        & { poll_question: (\n          { __typename?: 'poll_questions' }\n          & Pick<Poll_Questions, 'created_at'>\n        ) }\n      )> }\n    ) }\n  )> }\n);\n\nexport type WatchCheckUserHasVotedSubscriptionVariables = Exact<{\n  pollQuestionId?: Maybe<Scalars['Int']>;\n  auth0UserId?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type WatchCheckUserHasVotedSubscription = (\n  { __typename?: 'subscription_root' }\n  & { user_votes: Array<(\n    { __typename?: 'user_votes' }\n    & Pick<User_Votes, 'auth0_user_id' | 'poll_question_id' | 'poll_answer_id'>\n  )> }\n);\n\n\nexport const InsertMessageDocument = gql`\n    mutation insertMessage($message: message_insert_input!) {\n  insert_message(objects: [$message]) {\n    returning {\n      id\n      timestamp\n      text\n      user {\n        username\n      }\n      channel {\n        name\n      }\n    }\n  }\n}\n    `;\nexport type InsertMessageMutationFn = Apollo.MutationFunction<InsertMessageMutation, InsertMessageMutationVariables>;\n\n/**\n * __useInsertMessageMutation__\n *\n * To run a mutation, you first call `useInsertMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useInsertMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [insertMessageMutation, { data, loading, error }] = useInsertMessageMutation({\n *   variables: {\n *      message: // value for 'message'\n *   },\n * });\n */\nexport function useInsertMessageMutation(baseOptions?: Apollo.MutationHookOptions<InsertMessageMutation, InsertMessageMutationVariables>) {\n        return Apollo.useMutation<InsertMessageMutation, InsertMessageMutationVariables>(InsertMessageDocument, baseOptions);\n      }\nexport type InsertMessageMutationHookResult = ReturnType<typeof useInsertMessageMutation>;\nexport type InsertMessageMutationResult = Apollo.MutationResult<InsertMessageMutation>;\nexport type InsertMessageMutationOptions = Apollo.BaseMutationOptions<InsertMessageMutation, InsertMessageMutationVariables>;\nexport const UpdateMessageDocument = gql`\n    mutation updateMessage($_eq: Int!, $text: String!, $deleted: Boolean = false) {\n  update_message(where: {id: {_eq: $_eq}}, _set: {text: $text, deleted: $deleted}) {\n    affected_rows\n  }\n}\n    `;\nexport type UpdateMessageMutationFn = Apollo.MutationFunction<UpdateMessageMutation, UpdateMessageMutationVariables>;\n\n/**\n * __useUpdateMessageMutation__\n *\n * To run a mutation, you first call `useUpdateMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateMessageMutation, { data, loading, error }] = useUpdateMessageMutation({\n *   variables: {\n *      _eq: // value for '_eq'\n *      text: // value for 'text'\n *      deleted: // value for 'deleted'\n *   },\n * });\n */\nexport function useUpdateMessageMutation(baseOptions?: Apollo.MutationHookOptions<UpdateMessageMutation, UpdateMessageMutationVariables>) {\n        return Apollo.useMutation<UpdateMessageMutation, UpdateMessageMutationVariables>(UpdateMessageDocument, baseOptions);\n      }\nexport type UpdateMessageMutationHookResult = ReturnType<typeof useUpdateMessageMutation>;\nexport type UpdateMessageMutationResult = Apollo.MutationResult<UpdateMessageMutation>;\nexport type UpdateMessageMutationOptions = Apollo.BaseMutationOptions<UpdateMessageMutation, UpdateMessageMutationVariables>;\nexport const DeleteMessageDocument = gql`\n    mutation deleteMessage($message_id: Int) {\n  delete_message(where: {id: {_eq: $message_id}}) {\n    affected_rows\n  }\n}\n    `;\nexport type DeleteMessageMutationFn = Apollo.MutationFunction<DeleteMessageMutation, DeleteMessageMutationVariables>;\n\n/**\n * __useDeleteMessageMutation__\n *\n * To run a mutation, you first call `useDeleteMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteMessageMutation, { data, loading, error }] = useDeleteMessageMutation({\n *   variables: {\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useDeleteMessageMutation(baseOptions?: Apollo.MutationHookOptions<DeleteMessageMutation, DeleteMessageMutationVariables>) {\n        return Apollo.useMutation<DeleteMessageMutation, DeleteMessageMutationVariables>(DeleteMessageDocument, baseOptions);\n      }\nexport type DeleteMessageMutationHookResult = ReturnType<typeof useDeleteMessageMutation>;\nexport type DeleteMessageMutationResult = Apollo.MutationResult<DeleteMessageMutation>;\nexport type DeleteMessageMutationOptions = Apollo.BaseMutationOptions<DeleteMessageMutation, DeleteMessageMutationVariables>;\nexport const SetUserOnlineDocument = gql`\n    mutation setUserOnline($user_id: String!) {\n  update_user(_set: {last_seen: \"now()\"}, where: {auth0_user_id: {_eq: $user_id}}) {\n    affected_rows\n  }\n}\n    `;\nexport type SetUserOnlineMutationFn = Apollo.MutationFunction<SetUserOnlineMutation, SetUserOnlineMutationVariables>;\n\n/**\n * __useSetUserOnlineMutation__\n *\n * To run a mutation, you first call `useSetUserOnlineMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetUserOnlineMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setUserOnlineMutation, { data, loading, error }] = useSetUserOnlineMutation({\n *   variables: {\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useSetUserOnlineMutation(baseOptions?: Apollo.MutationHookOptions<SetUserOnlineMutation, SetUserOnlineMutationVariables>) {\n        return Apollo.useMutation<SetUserOnlineMutation, SetUserOnlineMutationVariables>(SetUserOnlineDocument, baseOptions);\n      }\nexport type SetUserOnlineMutationHookResult = ReturnType<typeof useSetUserOnlineMutation>;\nexport type SetUserOnlineMutationResult = Apollo.MutationResult<SetUserOnlineMutation>;\nexport type SetUserOnlineMutationOptions = Apollo.BaseMutationOptions<SetUserOnlineMutation, SetUserOnlineMutationVariables>;\nexport const AddChannelDocument = gql`\n    mutation addChannel($channel: channel_insert_input!) {\n  insert_channel(objects: [$channel]) {\n    returning {\n      id\n      name\n      owner_id\n      is_private\n    }\n  }\n}\n    `;\nexport type AddChannelMutationFn = Apollo.MutationFunction<AddChannelMutation, AddChannelMutationVariables>;\n\n/**\n * __useAddChannelMutation__\n *\n * To run a mutation, you first call `useAddChannelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddChannelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addChannelMutation, { data, loading, error }] = useAddChannelMutation({\n *   variables: {\n *      channel: // value for 'channel'\n *   },\n * });\n */\nexport function useAddChannelMutation(baseOptions?: Apollo.MutationHookOptions<AddChannelMutation, AddChannelMutationVariables>) {\n        return Apollo.useMutation<AddChannelMutation, AddChannelMutationVariables>(AddChannelDocument, baseOptions);\n      }\nexport type AddChannelMutationHookResult = ReturnType<typeof useAddChannelMutation>;\nexport type AddChannelMutationResult = Apollo.MutationResult<AddChannelMutation>;\nexport type AddChannelMutationOptions = Apollo.BaseMutationOptions<AddChannelMutation, AddChannelMutationVariables>;\nexport const ValidateAndAddDirectMessageChannelDocument = gql`\n    mutation validateAndAddDirectMessageChannel($name: String!, $user_id1: String!, $user_id2: String!) {\n  validateAndAddDirectMessageChannel(name: $name, user_id1: $user_id1, user_id2: $user_id2) {\n    id\n    name\n  }\n}\n    `;\nexport type ValidateAndAddDirectMessageChannelMutationFn = Apollo.MutationFunction<ValidateAndAddDirectMessageChannelMutation, ValidateAndAddDirectMessageChannelMutationVariables>;\n\n/**\n * __useValidateAndAddDirectMessageChannelMutation__\n *\n * To run a mutation, you first call `useValidateAndAddDirectMessageChannelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useValidateAndAddDirectMessageChannelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [validateAndAddDirectMessageChannelMutation, { data, loading, error }] = useValidateAndAddDirectMessageChannelMutation({\n *   variables: {\n *      name: // value for 'name'\n *      user_id1: // value for 'user_id1'\n *      user_id2: // value for 'user_id2'\n *   },\n * });\n */\nexport function useValidateAndAddDirectMessageChannelMutation(baseOptions?: Apollo.MutationHookOptions<ValidateAndAddDirectMessageChannelMutation, ValidateAndAddDirectMessageChannelMutationVariables>) {\n        return Apollo.useMutation<ValidateAndAddDirectMessageChannelMutation, ValidateAndAddDirectMessageChannelMutationVariables>(ValidateAndAddDirectMessageChannelDocument, baseOptions);\n      }\nexport type ValidateAndAddDirectMessageChannelMutationHookResult = ReturnType<typeof useValidateAndAddDirectMessageChannelMutation>;\nexport type ValidateAndAddDirectMessageChannelMutationResult = Apollo.MutationResult<ValidateAndAddDirectMessageChannelMutation>;\nexport type ValidateAndAddDirectMessageChannelMutationOptions = Apollo.BaseMutationOptions<ValidateAndAddDirectMessageChannelMutation, ValidateAndAddDirectMessageChannelMutationVariables>;\nexport const AddChannelUserDocument = gql`\n    mutation addChannelUser($channel_id: Int!, $user_id: String!) {\n  addChannelUser(user_id: $user_id, channel_id: $channel_id) {\n    affected_rows\n  }\n}\n    `;\nexport type AddChannelUserMutationFn = Apollo.MutationFunction<AddChannelUserMutation, AddChannelUserMutationVariables>;\n\n/**\n * __useAddChannelUserMutation__\n *\n * To run a mutation, you first call `useAddChannelUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddChannelUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addChannelUserMutation, { data, loading, error }] = useAddChannelUserMutation({\n *   variables: {\n *      channel_id: // value for 'channel_id'\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useAddChannelUserMutation(baseOptions?: Apollo.MutationHookOptions<AddChannelUserMutation, AddChannelUserMutationVariables>) {\n        return Apollo.useMutation<AddChannelUserMutation, AddChannelUserMutationVariables>(AddChannelUserDocument, baseOptions);\n      }\nexport type AddChannelUserMutationHookResult = ReturnType<typeof useAddChannelUserMutation>;\nexport type AddChannelUserMutationResult = Apollo.MutationResult<AddChannelUserMutation>;\nexport type AddChannelUserMutationOptions = Apollo.BaseMutationOptions<AddChannelUserMutation, AddChannelUserMutationVariables>;\nexport const SendTypingEventDocument = gql`\n    mutation sendTypingEvent($user_id: String!, $channel_id: Int!) {\n  update_user(_set: {last_typed: \"now()\", last_typed_channel: $channel_id}, where: {auth0_user_id: {_eq: $user_id}}) {\n    affected_rows\n  }\n}\n    `;\nexport type SendTypingEventMutationFn = Apollo.MutationFunction<SendTypingEventMutation, SendTypingEventMutationVariables>;\n\n/**\n * __useSendTypingEventMutation__\n *\n * To run a mutation, you first call `useSendTypingEventMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSendTypingEventMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [sendTypingEventMutation, { data, loading, error }] = useSendTypingEventMutation({\n *   variables: {\n *      user_id: // value for 'user_id'\n *      channel_id: // value for 'channel_id'\n *   },\n * });\n */\nexport function useSendTypingEventMutation(baseOptions?: Apollo.MutationHookOptions<SendTypingEventMutation, SendTypingEventMutationVariables>) {\n        return Apollo.useMutation<SendTypingEventMutation, SendTypingEventMutationVariables>(SendTypingEventDocument, baseOptions);\n      }\nexport type SendTypingEventMutationHookResult = ReturnType<typeof useSendTypingEventMutation>;\nexport type SendTypingEventMutationResult = Apollo.MutationResult<SendTypingEventMutation>;\nexport type SendTypingEventMutationOptions = Apollo.BaseMutationOptions<SendTypingEventMutation, SendTypingEventMutationVariables>;\nexport const UpsertMessageCursorDocument = gql`\n    mutation upsertMessageCursor($channel_id: Int!, $message_id: Int!, $user_id: String!) {\n  insert_message_cursor(objects: {channel_id: $channel_id, message_id: $message_id, user_id: $user_id}, on_conflict: {constraint: message_cursor_channel_id_user_id_key, update_columns: message_id}) {\n    returning {\n      channel_id\n      message_id\n      user_id\n    }\n  }\n}\n    `;\nexport type UpsertMessageCursorMutationFn = Apollo.MutationFunction<UpsertMessageCursorMutation, UpsertMessageCursorMutationVariables>;\n\n/**\n * __useUpsertMessageCursorMutation__\n *\n * To run a mutation, you first call `useUpsertMessageCursorMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpsertMessageCursorMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [upsertMessageCursorMutation, { data, loading, error }] = useUpsertMessageCursorMutation({\n *   variables: {\n *      channel_id: // value for 'channel_id'\n *      message_id: // value for 'message_id'\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useUpsertMessageCursorMutation(baseOptions?: Apollo.MutationHookOptions<UpsertMessageCursorMutation, UpsertMessageCursorMutationVariables>) {\n        return Apollo.useMutation<UpsertMessageCursorMutation, UpsertMessageCursorMutationVariables>(UpsertMessageCursorDocument, baseOptions);\n      }\nexport type UpsertMessageCursorMutationHookResult = ReturnType<typeof useUpsertMessageCursorMutation>;\nexport type UpsertMessageCursorMutationResult = Apollo.MutationResult<UpsertMessageCursorMutation>;\nexport type UpsertMessageCursorMutationOptions = Apollo.BaseMutationOptions<UpsertMessageCursorMutation, UpsertMessageCursorMutationVariables>;\nexport const InsertChannelThreadMessageDocument = gql`\n    mutation insertChannelThreadMessage($channel_thread_id: Int!, $message: String!, $user_id: String!, $image: String) {\n  insert_channel_thread_message(objects: {user_id: $user_id, channel_thread_id: $channel_thread_id, message: $message, image: $image}) {\n    affected_rows\n    returning {\n      id\n      image\n      message\n      timestamp\n      user_id\n      user {\n        auth0_user_id\n        username\n      }\n    }\n  }\n}\n    `;\nexport type InsertChannelThreadMessageMutationFn = Apollo.MutationFunction<InsertChannelThreadMessageMutation, InsertChannelThreadMessageMutationVariables>;\n\n/**\n * __useInsertChannelThreadMessageMutation__\n *\n * To run a mutation, you first call `useInsertChannelThreadMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useInsertChannelThreadMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [insertChannelThreadMessageMutation, { data, loading, error }] = useInsertChannelThreadMessageMutation({\n *   variables: {\n *      channel_thread_id: // value for 'channel_thread_id'\n *      message: // value for 'message'\n *      user_id: // value for 'user_id'\n *      image: // value for 'image'\n *   },\n * });\n */\nexport function useInsertChannelThreadMessageMutation(baseOptions?: Apollo.MutationHookOptions<InsertChannelThreadMessageMutation, InsertChannelThreadMessageMutationVariables>) {\n        return Apollo.useMutation<InsertChannelThreadMessageMutation, InsertChannelThreadMessageMutationVariables>(InsertChannelThreadMessageDocument, baseOptions);\n      }\nexport type InsertChannelThreadMessageMutationHookResult = ReturnType<typeof useInsertChannelThreadMessageMutation>;\nexport type InsertChannelThreadMessageMutationResult = Apollo.MutationResult<InsertChannelThreadMessageMutation>;\nexport type InsertChannelThreadMessageMutationOptions = Apollo.BaseMutationOptions<InsertChannelThreadMessageMutation, InsertChannelThreadMessageMutationVariables>;\nexport const DeleteThreadMessageDocument = gql`\n    mutation deleteThreadMessage($message_id: Int!) {\n  delete_channel_thread_message(where: {id: {_eq: $message_id}}) {\n    affected_rows\n  }\n}\n    `;\nexport type DeleteThreadMessageMutationFn = Apollo.MutationFunction<DeleteThreadMessageMutation, DeleteThreadMessageMutationVariables>;\n\n/**\n * __useDeleteThreadMessageMutation__\n *\n * To run a mutation, you first call `useDeleteThreadMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteThreadMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteThreadMessageMutation, { data, loading, error }] = useDeleteThreadMessageMutation({\n *   variables: {\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useDeleteThreadMessageMutation(baseOptions?: Apollo.MutationHookOptions<DeleteThreadMessageMutation, DeleteThreadMessageMutationVariables>) {\n        return Apollo.useMutation<DeleteThreadMessageMutation, DeleteThreadMessageMutationVariables>(DeleteThreadMessageDocument, baseOptions);\n      }\nexport type DeleteThreadMessageMutationHookResult = ReturnType<typeof useDeleteThreadMessageMutation>;\nexport type DeleteThreadMessageMutationResult = Apollo.MutationResult<DeleteThreadMessageMutation>;\nexport type DeleteThreadMessageMutationOptions = Apollo.BaseMutationOptions<DeleteThreadMessageMutation, DeleteThreadMessageMutationVariables>;\nexport const InsertChannelThreadDocument = gql`\n    mutation insertChannelThread($message_id: Int!) {\n  insert_channel_thread(objects: {message_id: $message_id}) {\n    returning {\n      message {\n        image\n        text\n        timestamp\n        id\n        user {\n          auth0_user_id\n          id\n          username\n        }\n      }\n    }\n  }\n}\n    `;\nexport type InsertChannelThreadMutationFn = Apollo.MutationFunction<InsertChannelThreadMutation, InsertChannelThreadMutationVariables>;\n\n/**\n * __useInsertChannelThreadMutation__\n *\n * To run a mutation, you first call `useInsertChannelThreadMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useInsertChannelThreadMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [insertChannelThreadMutation, { data, loading, error }] = useInsertChannelThreadMutation({\n *   variables: {\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useInsertChannelThreadMutation(baseOptions?: Apollo.MutationHookOptions<InsertChannelThreadMutation, InsertChannelThreadMutationVariables>) {\n        return Apollo.useMutation<InsertChannelThreadMutation, InsertChannelThreadMutationVariables>(InsertChannelThreadDocument, baseOptions);\n      }\nexport type InsertChannelThreadMutationHookResult = ReturnType<typeof useInsertChannelThreadMutation>;\nexport type InsertChannelThreadMutationResult = Apollo.MutationResult<InsertChannelThreadMutation>;\nexport type InsertChannelThreadMutationOptions = Apollo.BaseMutationOptions<InsertChannelThreadMutation, InsertChannelThreadMutationVariables>;\nexport const AddPollQuestionDocument = gql`\n    mutation addPollQuestion($text: String, $owner_id: String) {\n  insert_poll_questions(objects: {text: $text, owner_id: $owner_id}) {\n    affected_rows\n  }\n}\n    `;\nexport type AddPollQuestionMutationFn = Apollo.MutationFunction<AddPollQuestionMutation, AddPollQuestionMutationVariables>;\n\n/**\n * __useAddPollQuestionMutation__\n *\n * To run a mutation, you first call `useAddPollQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddPollQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addPollQuestionMutation, { data, loading, error }] = useAddPollQuestionMutation({\n *   variables: {\n *      text: // value for 'text'\n *      owner_id: // value for 'owner_id'\n *   },\n * });\n */\nexport function useAddPollQuestionMutation(baseOptions?: Apollo.MutationHookOptions<AddPollQuestionMutation, AddPollQuestionMutationVariables>) {\n        return Apollo.useMutation<AddPollQuestionMutation, AddPollQuestionMutationVariables>(AddPollQuestionDocument, baseOptions);\n      }\nexport type AddPollQuestionMutationHookResult = ReturnType<typeof useAddPollQuestionMutation>;\nexport type AddPollQuestionMutationResult = Apollo.MutationResult<AddPollQuestionMutation>;\nexport type AddPollQuestionMutationOptions = Apollo.BaseMutationOptions<AddPollQuestionMutation, AddPollQuestionMutationVariables>;\nexport const AddAnswerToQuestionDocument = gql`\n    mutation addAnswerToQuestion($text: String!, $pollQuestionId: Int!) {\n  insert_poll_anwers(objects: {question_id: $pollQuestionId, text: $text}) {\n    affected_rows\n  }\n}\n    `;\nexport type AddAnswerToQuestionMutationFn = Apollo.MutationFunction<AddAnswerToQuestionMutation, AddAnswerToQuestionMutationVariables>;\n\n/**\n * __useAddAnswerToQuestionMutation__\n *\n * To run a mutation, you first call `useAddAnswerToQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddAnswerToQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addAnswerToQuestionMutation, { data, loading, error }] = useAddAnswerToQuestionMutation({\n *   variables: {\n *      text: // value for 'text'\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useAddAnswerToQuestionMutation(baseOptions?: Apollo.MutationHookOptions<AddAnswerToQuestionMutation, AddAnswerToQuestionMutationVariables>) {\n        return Apollo.useMutation<AddAnswerToQuestionMutation, AddAnswerToQuestionMutationVariables>(AddAnswerToQuestionDocument, baseOptions);\n      }\nexport type AddAnswerToQuestionMutationHookResult = ReturnType<typeof useAddAnswerToQuestionMutation>;\nexport type AddAnswerToQuestionMutationResult = Apollo.MutationResult<AddAnswerToQuestionMutation>;\nexport type AddAnswerToQuestionMutationOptions = Apollo.BaseMutationOptions<AddAnswerToQuestionMutation, AddAnswerToQuestionMutationVariables>;\nexport const AddPublishPollQuestionToChannelDocument = gql`\n    mutation addPublishPollQuestionToChannel($channelID: Int!, $pollQuestionID: Int!) {\n  channelPoll: insert_channel_poll(objects: {channel_id: $channelID, poll_questions: $pollQuestionID, id: $channelID}, on_conflict: {constraint: channel_poll_pkey, update_columns: poll_questions, where: {id: {_eq: $channelID}}}) {\n    affected_rows\n    returning {\n      channel_id\n      id\n      poll_questions\n    }\n  }\n}\n    `;\nexport type AddPublishPollQuestionToChannelMutationFn = Apollo.MutationFunction<AddPublishPollQuestionToChannelMutation, AddPublishPollQuestionToChannelMutationVariables>;\n\n/**\n * __useAddPublishPollQuestionToChannelMutation__\n *\n * To run a mutation, you first call `useAddPublishPollQuestionToChannelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddPublishPollQuestionToChannelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addPublishPollQuestionToChannelMutation, { data, loading, error }] = useAddPublishPollQuestionToChannelMutation({\n *   variables: {\n *      channelID: // value for 'channelID'\n *      pollQuestionID: // value for 'pollQuestionID'\n *   },\n * });\n */\nexport function useAddPublishPollQuestionToChannelMutation(baseOptions?: Apollo.MutationHookOptions<AddPublishPollQuestionToChannelMutation, AddPublishPollQuestionToChannelMutationVariables>) {\n        return Apollo.useMutation<AddPublishPollQuestionToChannelMutation, AddPublishPollQuestionToChannelMutationVariables>(AddPublishPollQuestionToChannelDocument, baseOptions);\n      }\nexport type AddPublishPollQuestionToChannelMutationHookResult = ReturnType<typeof useAddPublishPollQuestionToChannelMutation>;\nexport type AddPublishPollQuestionToChannelMutationResult = Apollo.MutationResult<AddPublishPollQuestionToChannelMutation>;\nexport type AddPublishPollQuestionToChannelMutationOptions = Apollo.BaseMutationOptions<AddPublishPollQuestionToChannelMutation, AddPublishPollQuestionToChannelMutationVariables>;\nexport const SetPollAnswerVoteDocument = gql`\n    mutation setPollAnswerVote($pollAnswerId: Int!, $newVote: Int!) {\n  updatePollAnswer: update_poll_anwers(where: {id: {_eq: $pollAnswerId}}, _set: {votes: $newVote}) {\n    affected_rows\n    returning {\n      votes\n    }\n  }\n}\n    `;\nexport type SetPollAnswerVoteMutationFn = Apollo.MutationFunction<SetPollAnswerVoteMutation, SetPollAnswerVoteMutationVariables>;\n\n/**\n * __useSetPollAnswerVoteMutation__\n *\n * To run a mutation, you first call `useSetPollAnswerVoteMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetPollAnswerVoteMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setPollAnswerVoteMutation, { data, loading, error }] = useSetPollAnswerVoteMutation({\n *   variables: {\n *      pollAnswerId: // value for 'pollAnswerId'\n *      newVote: // value for 'newVote'\n *   },\n * });\n */\nexport function useSetPollAnswerVoteMutation(baseOptions?: Apollo.MutationHookOptions<SetPollAnswerVoteMutation, SetPollAnswerVoteMutationVariables>) {\n        return Apollo.useMutation<SetPollAnswerVoteMutation, SetPollAnswerVoteMutationVariables>(SetPollAnswerVoteDocument, baseOptions);\n      }\nexport type SetPollAnswerVoteMutationHookResult = ReturnType<typeof useSetPollAnswerVoteMutation>;\nexport type SetPollAnswerVoteMutationResult = Apollo.MutationResult<SetPollAnswerVoteMutation>;\nexport type SetPollAnswerVoteMutationOptions = Apollo.BaseMutationOptions<SetPollAnswerVoteMutation, SetPollAnswerVoteMutationVariables>;\nexport const SetPublishPollQuestionStateDocument = gql`\n    mutation setPublishPollQuestionState($pollQuestionId: Int!, $is_active: Boolean = false) {\n  setPollQuestionState: update_poll_questions(where: {id: {_eq: $pollQuestionId}}, _set: {is_active: $is_active}) {\n    affected_rows\n    returning {\n      is_active\n    }\n  }\n}\n    `;\nexport type SetPublishPollQuestionStateMutationFn = Apollo.MutationFunction<SetPublishPollQuestionStateMutation, SetPublishPollQuestionStateMutationVariables>;\n\n/**\n * __useSetPublishPollQuestionStateMutation__\n *\n * To run a mutation, you first call `useSetPublishPollQuestionStateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetPublishPollQuestionStateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setPublishPollQuestionStateMutation, { data, loading, error }] = useSetPublishPollQuestionStateMutation({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *      is_active: // value for 'is_active'\n *   },\n * });\n */\nexport function useSetPublishPollQuestionStateMutation(baseOptions?: Apollo.MutationHookOptions<SetPublishPollQuestionStateMutation, SetPublishPollQuestionStateMutationVariables>) {\n        return Apollo.useMutation<SetPublishPollQuestionStateMutation, SetPublishPollQuestionStateMutationVariables>(SetPublishPollQuestionStateDocument, baseOptions);\n      }\nexport type SetPublishPollQuestionStateMutationHookResult = ReturnType<typeof useSetPublishPollQuestionStateMutation>;\nexport type SetPublishPollQuestionStateMutationResult = Apollo.MutationResult<SetPublishPollQuestionStateMutation>;\nexport type SetPublishPollQuestionStateMutationOptions = Apollo.BaseMutationOptions<SetPublishPollQuestionStateMutation, SetPublishPollQuestionStateMutationVariables>;\nexport const DeletePollQuestionDocument = gql`\n    mutation deletePollQuestion($pollQuestionId: Int!) {\n  delete_poll_anwers(where: {question_id: {_eq: $pollQuestionId}}) {\n    affected_rows\n  }\n  deletePollQuestion: delete_poll_questions(where: {id: {_eq: $pollQuestionId}, is_active: {_neq: true}}) {\n    affected_rows\n  }\n}\n    `;\nexport type DeletePollQuestionMutationFn = Apollo.MutationFunction<DeletePollQuestionMutation, DeletePollQuestionMutationVariables>;\n\n/**\n * __useDeletePollQuestionMutation__\n *\n * To run a mutation, you first call `useDeletePollQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePollQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePollQuestionMutation, { data, loading, error }] = useDeletePollQuestionMutation({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useDeletePollQuestionMutation(baseOptions?: Apollo.MutationHookOptions<DeletePollQuestionMutation, DeletePollQuestionMutationVariables>) {\n        return Apollo.useMutation<DeletePollQuestionMutation, DeletePollQuestionMutationVariables>(DeletePollQuestionDocument, baseOptions);\n      }\nexport type DeletePollQuestionMutationHookResult = ReturnType<typeof useDeletePollQuestionMutation>;\nexport type DeletePollQuestionMutationResult = Apollo.MutationResult<DeletePollQuestionMutation>;\nexport type DeletePollQuestionMutationOptions = Apollo.BaseMutationOptions<DeletePollQuestionMutation, DeletePollQuestionMutationVariables>;\nexport const DeletePollQuestionFromChannelDocument = gql`\n    mutation deletePollQuestionFromChannel($pollQuestionId: Int!, $channelId: Int!) {\n  delete_channel_poll(where: {poll_questions: {_eq: $pollQuestionId}, channel_id: {_eq: $channelId}}) {\n    affected_rows\n  }\n}\n    `;\nexport type DeletePollQuestionFromChannelMutationFn = Apollo.MutationFunction<DeletePollQuestionFromChannelMutation, DeletePollQuestionFromChannelMutationVariables>;\n\n/**\n * __useDeletePollQuestionFromChannelMutation__\n *\n * To run a mutation, you first call `useDeletePollQuestionFromChannelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePollQuestionFromChannelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePollQuestionFromChannelMutation, { data, loading, error }] = useDeletePollQuestionFromChannelMutation({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useDeletePollQuestionFromChannelMutation(baseOptions?: Apollo.MutationHookOptions<DeletePollQuestionFromChannelMutation, DeletePollQuestionFromChannelMutationVariables>) {\n        return Apollo.useMutation<DeletePollQuestionFromChannelMutation, DeletePollQuestionFromChannelMutationVariables>(DeletePollQuestionFromChannelDocument, baseOptions);\n      }\nexport type DeletePollQuestionFromChannelMutationHookResult = ReturnType<typeof useDeletePollQuestionFromChannelMutation>;\nexport type DeletePollQuestionFromChannelMutationResult = Apollo.MutationResult<DeletePollQuestionFromChannelMutation>;\nexport type DeletePollQuestionFromChannelMutationOptions = Apollo.BaseMutationOptions<DeletePollQuestionFromChannelMutation, DeletePollQuestionFromChannelMutationVariables>;\nexport const UpdatePollAnswerTextDocument = gql`\n    mutation updatePollAnswerText($text: String!, $pollAnswerId: Int!) {\n  pollAnswerText: update_poll_anwers(where: {id: {_eq: $pollAnswerId}}, _set: {text: $text}) {\n    affected_rows\n    returning {\n      text\n    }\n  }\n}\n    `;\nexport type UpdatePollAnswerTextMutationFn = Apollo.MutationFunction<UpdatePollAnswerTextMutation, UpdatePollAnswerTextMutationVariables>;\n\n/**\n * __useUpdatePollAnswerTextMutation__\n *\n * To run a mutation, you first call `useUpdatePollAnswerTextMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePollAnswerTextMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePollAnswerTextMutation, { data, loading, error }] = useUpdatePollAnswerTextMutation({\n *   variables: {\n *      text: // value for 'text'\n *      pollAnswerId: // value for 'pollAnswerId'\n *   },\n * });\n */\nexport function useUpdatePollAnswerTextMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePollAnswerTextMutation, UpdatePollAnswerTextMutationVariables>) {\n        return Apollo.useMutation<UpdatePollAnswerTextMutation, UpdatePollAnswerTextMutationVariables>(UpdatePollAnswerTextDocument, baseOptions);\n      }\nexport type UpdatePollAnswerTextMutationHookResult = ReturnType<typeof useUpdatePollAnswerTextMutation>;\nexport type UpdatePollAnswerTextMutationResult = Apollo.MutationResult<UpdatePollAnswerTextMutation>;\nexport type UpdatePollAnswerTextMutationOptions = Apollo.BaseMutationOptions<UpdatePollAnswerTextMutation, UpdatePollAnswerTextMutationVariables>;\nexport const DeletePollAnswerIdDocument = gql`\n    mutation deletePollAnswerId($pollAnswerId: Int!) {\n  delete_poll_anwers(where: {id: {_eq: $pollAnswerId}}) {\n    affected_rows\n  }\n}\n    `;\nexport type DeletePollAnswerIdMutationFn = Apollo.MutationFunction<DeletePollAnswerIdMutation, DeletePollAnswerIdMutationVariables>;\n\n/**\n * __useDeletePollAnswerIdMutation__\n *\n * To run a mutation, you first call `useDeletePollAnswerIdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePollAnswerIdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePollAnswerIdMutation, { data, loading, error }] = useDeletePollAnswerIdMutation({\n *   variables: {\n *      pollAnswerId: // value for 'pollAnswerId'\n *   },\n * });\n */\nexport function useDeletePollAnswerIdMutation(baseOptions?: Apollo.MutationHookOptions<DeletePollAnswerIdMutation, DeletePollAnswerIdMutationVariables>) {\n        return Apollo.useMutation<DeletePollAnswerIdMutation, DeletePollAnswerIdMutationVariables>(DeletePollAnswerIdDocument, baseOptions);\n      }\nexport type DeletePollAnswerIdMutationHookResult = ReturnType<typeof useDeletePollAnswerIdMutation>;\nexport type DeletePollAnswerIdMutationResult = Apollo.MutationResult<DeletePollAnswerIdMutation>;\nexport type DeletePollAnswerIdMutationOptions = Apollo.BaseMutationOptions<DeletePollAnswerIdMutation, DeletePollAnswerIdMutationVariables>;\nexport const SetUserVotePollQuestionDocument = gql`\n    mutation setUserVotePollQuestion($userName: String, $auth0UserId: String, $pollQuestionId: Int, $pollAnswerId: Int) {\n  insert_user_votes(objects: {username: $userName, auth0_user_id: $auth0UserId, poll_question_id: $pollQuestionId, poll_answer_id: $pollAnswerId}) {\n    affected_rows\n  }\n}\n    `;\nexport type SetUserVotePollQuestionMutationFn = Apollo.MutationFunction<SetUserVotePollQuestionMutation, SetUserVotePollQuestionMutationVariables>;\n\n/**\n * __useSetUserVotePollQuestionMutation__\n *\n * To run a mutation, you first call `useSetUserVotePollQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetUserVotePollQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setUserVotePollQuestionMutation, { data, loading, error }] = useSetUserVotePollQuestionMutation({\n *   variables: {\n *      userName: // value for 'userName'\n *      auth0UserId: // value for 'auth0UserId'\n *      pollQuestionId: // value for 'pollQuestionId'\n *      pollAnswerId: // value for 'pollAnswerId'\n *   },\n * });\n */\nexport function useSetUserVotePollQuestionMutation(baseOptions?: Apollo.MutationHookOptions<SetUserVotePollQuestionMutation, SetUserVotePollQuestionMutationVariables>) {\n        return Apollo.useMutation<SetUserVotePollQuestionMutation, SetUserVotePollQuestionMutationVariables>(SetUserVotePollQuestionDocument, baseOptions);\n      }\nexport type SetUserVotePollQuestionMutationHookResult = ReturnType<typeof useSetUserVotePollQuestionMutation>;\nexport type SetUserVotePollQuestionMutationResult = Apollo.MutationResult<SetUserVotePollQuestionMutation>;\nexport type SetUserVotePollQuestionMutationOptions = Apollo.BaseMutationOptions<SetUserVotePollQuestionMutation, SetUserVotePollQuestionMutationVariables>;\nexport const GetMessagesDocument = gql`\n    query getMessages($last_received_id: Int, $last_received_ts: timestamptz, $channel: String) {\n  channel(where: {name: {_eq: $channel}}) {\n    messages(order_by: {timestamp: asc}, where: {_and: {id: {_neq: $last_received_id}, timestamp: {_gte: $last_received_ts}}}) {\n      id\n      text\n      timestamp\n      user {\n        username\n      }\n      channel {\n        name\n      }\n      channel_threads {\n        id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetMessagesQuery__\n *\n * To run a query within a React component, call `useGetMessagesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMessagesQuery({\n *   variables: {\n *      last_received_id: // value for 'last_received_id'\n *      last_received_ts: // value for 'last_received_ts'\n *      channel: // value for 'channel'\n *   },\n * });\n */\nexport function useGetMessagesQuery(baseOptions?: Apollo.QueryHookOptions<GetMessagesQuery, GetMessagesQueryVariables>) {\n        return Apollo.useQuery<GetMessagesQuery, GetMessagesQueryVariables>(GetMessagesDocument, baseOptions);\n      }\nexport function useGetMessagesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMessagesQuery, GetMessagesQueryVariables>) {\n          return Apollo.useLazyQuery<GetMessagesQuery, GetMessagesQueryVariables>(GetMessagesDocument, baseOptions);\n        }\nexport type GetMessagesQueryHookResult = ReturnType<typeof useGetMessagesQuery>;\nexport type GetMessagesLazyQueryHookResult = ReturnType<typeof useGetMessagesLazyQuery>;\nexport type GetMessagesQueryResult = Apollo.QueryResult<GetMessagesQuery, GetMessagesQueryVariables>;\nexport const GetMessagesSumDocument = gql`\n    query getMessagesSum {\n  channel_aggregate(where: {channel_type: {_eq: CHAT_MESSAGE}}, order_by: {name: asc}) {\n    nodes {\n      messages(distinct_on: channel_id) {\n        channel_id\n        channel {\n          name\n        }\n      }\n      messages_aggregate {\n        aggregate {\n          count\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetMessagesSumQuery__\n *\n * To run a query within a React component, call `useGetMessagesSumQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMessagesSumQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMessagesSumQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetMessagesSumQuery(baseOptions?: Apollo.QueryHookOptions<GetMessagesSumQuery, GetMessagesSumQueryVariables>) {\n        return Apollo.useQuery<GetMessagesSumQuery, GetMessagesSumQueryVariables>(GetMessagesSumDocument, baseOptions);\n      }\nexport function useGetMessagesSumLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMessagesSumQuery, GetMessagesSumQueryVariables>) {\n          return Apollo.useLazyQuery<GetMessagesSumQuery, GetMessagesSumQueryVariables>(GetMessagesSumDocument, baseOptions);\n        }\nexport type GetMessagesSumQueryHookResult = ReturnType<typeof useGetMessagesSumQuery>;\nexport type GetMessagesSumLazyQueryHookResult = ReturnType<typeof useGetMessagesSumLazyQuery>;\nexport type GetMessagesSumQueryResult = Apollo.QueryResult<GetMessagesSumQuery, GetMessagesSumQueryVariables>;\nexport const GetChannelsDocument = gql`\n    query getChannels {\n  channels: channel {\n    name\n    id\n    is_private\n    owner_id\n  }\n}\n    `;\n\n/**\n * __useGetChannelsQuery__\n *\n * To run a query within a React component, call `useGetChannelsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetChannelsQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelsQuery, GetChannelsQueryVariables>) {\n        return Apollo.useQuery<GetChannelsQuery, GetChannelsQueryVariables>(GetChannelsDocument, baseOptions);\n      }\nexport function useGetChannelsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelsQuery, GetChannelsQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelsQuery, GetChannelsQueryVariables>(GetChannelsDocument, baseOptions);\n        }\nexport type GetChannelsQueryHookResult = ReturnType<typeof useGetChannelsQuery>;\nexport type GetChannelsLazyQueryHookResult = ReturnType<typeof useGetChannelsLazyQuery>;\nexport type GetChannelsQueryResult = Apollo.QueryResult<GetChannelsQuery, GetChannelsQueryVariables>;\nexport const GetUserListDocument = gql`\n    query getUserList {\n  users: user {\n    username\n    id\n    auth0_user_id\n    last_seen\n  }\n}\n    `;\n\n/**\n * __useGetUserListQuery__\n *\n * To run a query within a React component, call `useGetUserListQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserListQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserListQuery(baseOptions?: Apollo.QueryHookOptions<GetUserListQuery, GetUserListQueryVariables>) {\n        return Apollo.useQuery<GetUserListQuery, GetUserListQueryVariables>(GetUserListDocument, baseOptions);\n      }\nexport function useGetUserListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserListQuery, GetUserListQueryVariables>) {\n          return Apollo.useLazyQuery<GetUserListQuery, GetUserListQueryVariables>(GetUserListDocument, baseOptions);\n        }\nexport type GetUserListQueryHookResult = ReturnType<typeof useGetUserListQuery>;\nexport type GetUserListLazyQueryHookResult = ReturnType<typeof useGetUserListLazyQuery>;\nexport type GetUserListQueryResult = Apollo.QueryResult<GetUserListQuery, GetUserListQueryVariables>;\nexport const GetChannelByNameDocument = gql`\n    query getChannelByName($name: String!) {\n  channel(where: {name: {_eq: $name}}) {\n    name\n    id\n    is_private\n    owner_id\n    channel_type\n  }\n}\n    `;\n\n/**\n * __useGetChannelByNameQuery__\n *\n * To run a query within a React component, call `useGetChannelByNameQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelByNameQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelByNameQuery({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useGetChannelByNameQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelByNameQuery, GetChannelByNameQueryVariables>) {\n        return Apollo.useQuery<GetChannelByNameQuery, GetChannelByNameQueryVariables>(GetChannelByNameDocument, baseOptions);\n      }\nexport function useGetChannelByNameLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelByNameQuery, GetChannelByNameQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelByNameQuery, GetChannelByNameQueryVariables>(GetChannelByNameDocument, baseOptions);\n        }\nexport type GetChannelByNameQueryHookResult = ReturnType<typeof useGetChannelByNameQuery>;\nexport type GetChannelByNameLazyQueryHookResult = ReturnType<typeof useGetChannelByNameLazyQuery>;\nexport type GetChannelByNameQueryResult = Apollo.QueryResult<GetChannelByNameQuery, GetChannelByNameQueryVariables>;\nexport const GetAuth0UserByIdDocument = gql`\n    query getAuth0UserById($user_id: String) {\n  user(where: {auth0_user_id: {_eq: $user_id}}) {\n    id\n    username\n    auth0_user_id\n    user_channels {\n      channel {\n        name\n        id\n        is_private\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetAuth0UserByIdQuery__\n *\n * To run a query within a React component, call `useGetAuth0UserByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAuth0UserByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAuth0UserByIdQuery({\n *   variables: {\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useGetAuth0UserByIdQuery(baseOptions?: Apollo.QueryHookOptions<GetAuth0UserByIdQuery, GetAuth0UserByIdQueryVariables>) {\n        return Apollo.useQuery<GetAuth0UserByIdQuery, GetAuth0UserByIdQueryVariables>(GetAuth0UserByIdDocument, baseOptions);\n      }\nexport function useGetAuth0UserByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAuth0UserByIdQuery, GetAuth0UserByIdQueryVariables>) {\n          return Apollo.useLazyQuery<GetAuth0UserByIdQuery, GetAuth0UserByIdQueryVariables>(GetAuth0UserByIdDocument, baseOptions);\n        }\nexport type GetAuth0UserByIdQueryHookResult = ReturnType<typeof useGetAuth0UserByIdQuery>;\nexport type GetAuth0UserByIdLazyQueryHookResult = ReturnType<typeof useGetAuth0UserByIdLazyQuery>;\nexport type GetAuth0UserByIdQueryResult = Apollo.QueryResult<GetAuth0UserByIdQuery, GetAuth0UserByIdQueryVariables>;\nexport const GetChannelThreadIdDocument = gql`\n    query getChannelThreadId($message_id: Int) {\n  channel_thread(where: {message_id: {_eq: $message_id}}) {\n    id\n  }\n}\n    `;\n\n/**\n * __useGetChannelThreadIdQuery__\n *\n * To run a query within a React component, call `useGetChannelThreadIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelThreadIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelThreadIdQuery({\n *   variables: {\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useGetChannelThreadIdQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelThreadIdQuery, GetChannelThreadIdQueryVariables>) {\n        return Apollo.useQuery<GetChannelThreadIdQuery, GetChannelThreadIdQueryVariables>(GetChannelThreadIdDocument, baseOptions);\n      }\nexport function useGetChannelThreadIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelThreadIdQuery, GetChannelThreadIdQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelThreadIdQuery, GetChannelThreadIdQueryVariables>(GetChannelThreadIdDocument, baseOptions);\n        }\nexport type GetChannelThreadIdQueryHookResult = ReturnType<typeof useGetChannelThreadIdQuery>;\nexport type GetChannelThreadIdLazyQueryHookResult = ReturnType<typeof useGetChannelThreadIdLazyQuery>;\nexport type GetChannelThreadIdQueryResult = Apollo.QueryResult<GetChannelThreadIdQuery, GetChannelThreadIdQueryVariables>;\nexport const GetChannelThreadParentMessageDocument = gql`\n    query getChannelThreadParentMessage($limit: Int, $message_id: Int) {\n  channel_thread_message(limit: $limit, order_by: {id: asc}, where: {channel_thread: {message_id: {_eq: $message_id}}}) {\n    channel_thread_id\n    timestamp\n    channel_thread {\n      message {\n        text\n        timestamp\n        image\n        id\n        user_id\n        user {\n          auth0_user_id\n          username\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetChannelThreadParentMessageQuery__\n *\n * To run a query within a React component, call `useGetChannelThreadParentMessageQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelThreadParentMessageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelThreadParentMessageQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useGetChannelThreadParentMessageQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelThreadParentMessageQuery, GetChannelThreadParentMessageQueryVariables>) {\n        return Apollo.useQuery<GetChannelThreadParentMessageQuery, GetChannelThreadParentMessageQueryVariables>(GetChannelThreadParentMessageDocument, baseOptions);\n      }\nexport function useGetChannelThreadParentMessageLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelThreadParentMessageQuery, GetChannelThreadParentMessageQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelThreadParentMessageQuery, GetChannelThreadParentMessageQueryVariables>(GetChannelThreadParentMessageDocument, baseOptions);\n        }\nexport type GetChannelThreadParentMessageQueryHookResult = ReturnType<typeof useGetChannelThreadParentMessageQuery>;\nexport type GetChannelThreadParentMessageLazyQueryHookResult = ReturnType<typeof useGetChannelThreadParentMessageLazyQuery>;\nexport type GetChannelThreadParentMessageQueryResult = Apollo.QueryResult<GetChannelThreadParentMessageQuery, GetChannelThreadParentMessageQueryVariables>;\nexport const GetChannelThreadDocument = gql`\n    query getChannelThread($message_id: Int) {\n  channel_thread(where: {message_id: {_eq: $message_id}}) {\n    id\n    message {\n      id\n      image\n      text\n      deleted\n      timestamp\n      user {\n        auth0_user_id\n        id\n        username\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetChannelThreadQuery__\n *\n * To run a query within a React component, call `useGetChannelThreadQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelThreadQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelThreadQuery({\n *   variables: {\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useGetChannelThreadQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelThreadQuery, GetChannelThreadQueryVariables>) {\n        return Apollo.useQuery<GetChannelThreadQuery, GetChannelThreadQueryVariables>(GetChannelThreadDocument, baseOptions);\n      }\nexport function useGetChannelThreadLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelThreadQuery, GetChannelThreadQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelThreadQuery, GetChannelThreadQueryVariables>(GetChannelThreadDocument, baseOptions);\n        }\nexport type GetChannelThreadQueryHookResult = ReturnType<typeof useGetChannelThreadQuery>;\nexport type GetChannelThreadLazyQueryHookResult = ReturnType<typeof useGetChannelThreadLazyQuery>;\nexport type GetChannelThreadQueryResult = Apollo.QueryResult<GetChannelThreadQuery, GetChannelThreadQueryVariables>;\nexport const GetPollQuestionsDocument = gql`\n    query getPollQuestions {\n  questions: poll_questions {\n    id\n    owner_id\n    text\n  }\n}\n    `;\n\n/**\n * __useGetPollQuestionsQuery__\n *\n * To run a query within a React component, call `useGetPollQuestionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPollQuestionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPollQuestionsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetPollQuestionsQuery(baseOptions?: Apollo.QueryHookOptions<GetPollQuestionsQuery, GetPollQuestionsQueryVariables>) {\n        return Apollo.useQuery<GetPollQuestionsQuery, GetPollQuestionsQueryVariables>(GetPollQuestionsDocument, baseOptions);\n      }\nexport function useGetPollQuestionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPollQuestionsQuery, GetPollQuestionsQueryVariables>) {\n          return Apollo.useLazyQuery<GetPollQuestionsQuery, GetPollQuestionsQueryVariables>(GetPollQuestionsDocument, baseOptions);\n        }\nexport type GetPollQuestionsQueryHookResult = ReturnType<typeof useGetPollQuestionsQuery>;\nexport type GetPollQuestionsLazyQueryHookResult = ReturnType<typeof useGetPollQuestionsLazyQuery>;\nexport type GetPollQuestionsQueryResult = Apollo.QueryResult<GetPollQuestionsQuery, GetPollQuestionsQueryVariables>;\nexport const GetPollQuestionAnswersDocument = gql`\n    query getPollQuestionAnswers($pollQuestionId: Int) {\n  poll_question: poll_questions(where: {id: {_eq: $pollQuestionId}}) {\n    id\n    text\n    is_active\n  }\n  poll_answers: poll_anwers(where: {poll_question: {id: {_eq: $pollQuestionId}}}) {\n    question_id\n    text\n    id\n    votes\n  }\n}\n    `;\n\n/**\n * __useGetPollQuestionAnswersQuery__\n *\n * To run a query within a React component, call `useGetPollQuestionAnswersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPollQuestionAnswersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPollQuestionAnswersQuery({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useGetPollQuestionAnswersQuery(baseOptions?: Apollo.QueryHookOptions<GetPollQuestionAnswersQuery, GetPollQuestionAnswersQueryVariables>) {\n        return Apollo.useQuery<GetPollQuestionAnswersQuery, GetPollQuestionAnswersQueryVariables>(GetPollQuestionAnswersDocument, baseOptions);\n      }\nexport function useGetPollQuestionAnswersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPollQuestionAnswersQuery, GetPollQuestionAnswersQueryVariables>) {\n          return Apollo.useLazyQuery<GetPollQuestionAnswersQuery, GetPollQuestionAnswersQueryVariables>(GetPollQuestionAnswersDocument, baseOptions);\n        }\nexport type GetPollQuestionAnswersQueryHookResult = ReturnType<typeof useGetPollQuestionAnswersQuery>;\nexport type GetPollQuestionAnswersLazyQueryHookResult = ReturnType<typeof useGetPollQuestionAnswersLazyQuery>;\nexport type GetPollQuestionAnswersQueryResult = Apollo.QueryResult<GetPollQuestionAnswersQuery, GetPollQuestionAnswersQueryVariables>;\nexport const GetPublicChannelsDocument = gql`\n    query getPublicChannels {\n  channels: channel(where: {is_private: {_neq: true}}) {\n    id\n    name\n    channel_polls(where: {poll_question: {is_active: {_eq: true}}}) {\n      poll_question {\n        is_active\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetPublicChannelsQuery__\n *\n * To run a query within a React component, call `useGetPublicChannelsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPublicChannelsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPublicChannelsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetPublicChannelsQuery(baseOptions?: Apollo.QueryHookOptions<GetPublicChannelsQuery, GetPublicChannelsQueryVariables>) {\n        return Apollo.useQuery<GetPublicChannelsQuery, GetPublicChannelsQueryVariables>(GetPublicChannelsDocument, baseOptions);\n      }\nexport function useGetPublicChannelsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPublicChannelsQuery, GetPublicChannelsQueryVariables>) {\n          return Apollo.useLazyQuery<GetPublicChannelsQuery, GetPublicChannelsQueryVariables>(GetPublicChannelsDocument, baseOptions);\n        }\nexport type GetPublicChannelsQueryHookResult = ReturnType<typeof useGetPublicChannelsQuery>;\nexport type GetPublicChannelsLazyQueryHookResult = ReturnType<typeof useGetPublicChannelsLazyQuery>;\nexport type GetPublicChannelsQueryResult = Apollo.QueryResult<GetPublicChannelsQuery, GetPublicChannelsQueryVariables>;\nexport const GetChannelPollsDocument = gql`\n    query getChannelPolls {\n  channelPoll: channel_poll {\n    channel_id\n    id\n    poll_questions\n  }\n}\n    `;\n\n/**\n * __useGetChannelPollsQuery__\n *\n * To run a query within a React component, call `useGetChannelPollsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelPollsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelPollsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetChannelPollsQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelPollsQuery, GetChannelPollsQueryVariables>) {\n        return Apollo.useQuery<GetChannelPollsQuery, GetChannelPollsQueryVariables>(GetChannelPollsDocument, baseOptions);\n      }\nexport function useGetChannelPollsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelPollsQuery, GetChannelPollsQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelPollsQuery, GetChannelPollsQueryVariables>(GetChannelPollsDocument, baseOptions);\n        }\nexport type GetChannelPollsQueryHookResult = ReturnType<typeof useGetChannelPollsQuery>;\nexport type GetChannelPollsLazyQueryHookResult = ReturnType<typeof useGetChannelPollsLazyQuery>;\nexport type GetChannelPollsQueryResult = Apollo.QueryResult<GetChannelPollsQuery, GetChannelPollsQueryVariables>;\nexport const GetChannelPollQuestionDocument = gql`\n    query getChannelPollQuestion($channelId: Int) {\n  getChannelPoll: channel_poll(where: {channel_id: {_eq: $channelId}, is_active: {_eq: true}}) {\n    id\n    poll_question {\n      id\n      text\n      poll_anwers(where: {poll_question: {}}) {\n        text\n        question_id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetChannelPollQuestionQuery__\n *\n * To run a query within a React component, call `useGetChannelPollQuestionQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelPollQuestionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelPollQuestionQuery({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useGetChannelPollQuestionQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelPollQuestionQuery, GetChannelPollQuestionQueryVariables>) {\n        return Apollo.useQuery<GetChannelPollQuestionQuery, GetChannelPollQuestionQueryVariables>(GetChannelPollQuestionDocument, baseOptions);\n      }\nexport function useGetChannelPollQuestionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelPollQuestionQuery, GetChannelPollQuestionQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelPollQuestionQuery, GetChannelPollQuestionQueryVariables>(GetChannelPollQuestionDocument, baseOptions);\n        }\nexport type GetChannelPollQuestionQueryHookResult = ReturnType<typeof useGetChannelPollQuestionQuery>;\nexport type GetChannelPollQuestionLazyQueryHookResult = ReturnType<typeof useGetChannelPollQuestionLazyQuery>;\nexport type GetChannelPollQuestionQueryResult = Apollo.QueryResult<GetChannelPollQuestionQuery, GetChannelPollQuestionQueryVariables>;\nexport const GetPollAnswerVotesDocument = gql`\n    query getPollAnswerVotes($pollAnswerId: Int!) {\n  poll_anwers(where: {id: {_eq: $pollAnswerId}}) {\n    id\n    votes\n  }\n}\n    `;\n\n/**\n * __useGetPollAnswerVotesQuery__\n *\n * To run a query within a React component, call `useGetPollAnswerVotesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPollAnswerVotesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPollAnswerVotesQuery({\n *   variables: {\n *      pollAnswerId: // value for 'pollAnswerId'\n *   },\n * });\n */\nexport function useGetPollAnswerVotesQuery(baseOptions?: Apollo.QueryHookOptions<GetPollAnswerVotesQuery, GetPollAnswerVotesQueryVariables>) {\n        return Apollo.useQuery<GetPollAnswerVotesQuery, GetPollAnswerVotesQueryVariables>(GetPollAnswerVotesDocument, baseOptions);\n      }\nexport function useGetPollAnswerVotesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPollAnswerVotesQuery, GetPollAnswerVotesQueryVariables>) {\n          return Apollo.useLazyQuery<GetPollAnswerVotesQuery, GetPollAnswerVotesQueryVariables>(GetPollAnswerVotesDocument, baseOptions);\n        }\nexport type GetPollAnswerVotesQueryHookResult = ReturnType<typeof useGetPollAnswerVotesQuery>;\nexport type GetPollAnswerVotesLazyQueryHookResult = ReturnType<typeof useGetPollAnswerVotesLazyQuery>;\nexport type GetPollAnswerVotesQueryResult = Apollo.QueryResult<GetPollAnswerVotesQuery, GetPollAnswerVotesQueryVariables>;\nexport const WatchMessagesDocument = gql`\n    subscription watchMessages($channelId: Int!, $limit: Int) {\n  messages: message(order_by: {timestamp: desc}, limit: $limit, where: {channel: {id: {_eq: $channelId}}}) {\n    id\n    text\n    image\n    timestamp\n    deleted\n    user {\n      username\n      auth0_user_id\n    }\n    channel {\n      name\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchMessagesSubscription__\n *\n * To run a query within a React component, call `useWatchMessagesSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchMessagesSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchMessagesSubscription({\n *   variables: {\n *      channelId: // value for 'channelId'\n *      limit: // value for 'limit'\n *   },\n * });\n */\nexport function useWatchMessagesSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchMessagesSubscription, WatchMessagesSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchMessagesSubscription, WatchMessagesSubscriptionVariables>(WatchMessagesDocument, baseOptions);\n      }\nexport type WatchMessagesSubscriptionHookResult = ReturnType<typeof useWatchMessagesSubscription>;\nexport type WatchMessagesSubscriptionResult = Apollo.SubscriptionResult<WatchMessagesSubscription>;\nexport const WatchChannelThreadMessagesDocument = gql`\n    subscription watchChannelThreadMessages($limit: Int!, $message_id: Int!) {\n  channel_thread_message(limit: $limit, order_by: {id: desc}, where: {channel_thread: {message_id: {_eq: $message_id}}}) {\n    id\n    message\n    image\n    user {\n      username\n      id\n      auth0_user_id\n    }\n    channel_thread_id\n    timestamp\n  }\n}\n    `;\n\n/**\n * __useWatchChannelThreadMessagesSubscription__\n *\n * To run a query within a React component, call `useWatchChannelThreadMessagesSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelThreadMessagesSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelThreadMessagesSubscription({\n *   variables: {\n *      limit: // value for 'limit'\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useWatchChannelThreadMessagesSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelThreadMessagesSubscription, WatchChannelThreadMessagesSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelThreadMessagesSubscription, WatchChannelThreadMessagesSubscriptionVariables>(WatchChannelThreadMessagesDocument, baseOptions);\n      }\nexport type WatchChannelThreadMessagesSubscriptionHookResult = ReturnType<typeof useWatchChannelThreadMessagesSubscription>;\nexport type WatchChannelThreadMessagesSubscriptionResult = Apollo.SubscriptionResult<WatchChannelThreadMessagesSubscription>;\nexport const WatchChannelThreadDocument = gql`\n    subscription watchChannelThread($message_id: Int!) {\n  channel_thread_message(order_by: {id: desc}, where: {channel_thread: {message_id: {_eq: $message_id}}}) {\n    id\n    message\n    channel_thread_id\n    timestamp\n  }\n}\n    `;\n\n/**\n * __useWatchChannelThreadSubscription__\n *\n * To run a query within a React component, call `useWatchChannelThreadSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelThreadSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelThreadSubscription({\n *   variables: {\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useWatchChannelThreadSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelThreadSubscription, WatchChannelThreadSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelThreadSubscription, WatchChannelThreadSubscriptionVariables>(WatchChannelThreadDocument, baseOptions);\n      }\nexport type WatchChannelThreadSubscriptionHookResult = ReturnType<typeof useWatchChannelThreadSubscription>;\nexport type WatchChannelThreadSubscriptionResult = Apollo.SubscriptionResult<WatchChannelThreadSubscription>;\nexport const WatchThreadsDocument = gql`\n    subscription watchThreads {\n  channel_thread(order_by: {id: desc}) {\n    id\n    message_id\n    message {\n      image\n      text\n      deleted\n      timestamp\n      id\n      user {\n        auth0_user_id\n        username\n      }\n      user_id\n      channel {\n        id\n        name\n      }\n    }\n    channel_thread_messages {\n      id\n      image\n      message\n      timestamp\n      user_id\n      user {\n        auth0_user_id\n        username\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchThreadsSubscription__\n *\n * To run a query within a React component, call `useWatchThreadsSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchThreadsSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchThreadsSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchThreadsSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchThreadsSubscription, WatchThreadsSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchThreadsSubscription, WatchThreadsSubscriptionVariables>(WatchThreadsDocument, baseOptions);\n      }\nexport type WatchThreadsSubscriptionHookResult = ReturnType<typeof useWatchThreadsSubscription>;\nexport type WatchThreadsSubscriptionResult = Apollo.SubscriptionResult<WatchThreadsSubscription>;\nexport const WatchOnlineUsersDocument = gql`\n    subscription watchOnlineUsers {\n  users: user_online(order_by: {username: asc}) {\n    id\n    username\n    auth0_user_id\n  }\n}\n    `;\n\n/**\n * __useWatchOnlineUsersSubscription__\n *\n * To run a query within a React component, call `useWatchOnlineUsersSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchOnlineUsersSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchOnlineUsersSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchOnlineUsersSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchOnlineUsersSubscription, WatchOnlineUsersSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchOnlineUsersSubscription, WatchOnlineUsersSubscriptionVariables>(WatchOnlineUsersDocument, baseOptions);\n      }\nexport type WatchOnlineUsersSubscriptionHookResult = ReturnType<typeof useWatchOnlineUsersSubscription>;\nexport type WatchOnlineUsersSubscriptionResult = Apollo.SubscriptionResult<WatchOnlineUsersSubscription>;\nexport const WatchChannelsDocument = gql`\n    subscription watchChannels($channel_type: channel_type_enum!) {\n  channels: channel(where: {channel_type: {_eq: $channel_type}}, order_by: {name: asc, is_private: asc}) {\n    name\n    id\n    is_private\n    owner_id\n  }\n}\n    `;\n\n/**\n * __useWatchChannelsSubscription__\n *\n * To run a query within a React component, call `useWatchChannelsSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelsSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelsSubscription({\n *   variables: {\n *      channel_type: // value for 'channel_type'\n *   },\n * });\n */\nexport function useWatchChannelsSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelsSubscription, WatchChannelsSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelsSubscription, WatchChannelsSubscriptionVariables>(WatchChannelsDocument, baseOptions);\n      }\nexport type WatchChannelsSubscriptionHookResult = ReturnType<typeof useWatchChannelsSubscription>;\nexport type WatchChannelsSubscriptionResult = Apollo.SubscriptionResult<WatchChannelsSubscription>;\nexport const WatchDirectMessageChannelsDocument = gql`\n    subscription watchDirectMessageChannels($channel_type: channel_type_enum!, $user_id: String) {\n  channels: channel(where: {channel_type: {_eq: $channel_type}, _and: {user_channels: {user_id: {_eq: $user_id}}}}) {\n    name\n    id\n    is_private\n    owner_id\n    user_channels(where: {user_id: {_neq: $user_id}}) {\n      user {\n        username\n        auth0_user_id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchDirectMessageChannelsSubscription__\n *\n * To run a query within a React component, call `useWatchDirectMessageChannelsSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchDirectMessageChannelsSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchDirectMessageChannelsSubscription({\n *   variables: {\n *      channel_type: // value for 'channel_type'\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useWatchDirectMessageChannelsSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchDirectMessageChannelsSubscription, WatchDirectMessageChannelsSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchDirectMessageChannelsSubscription, WatchDirectMessageChannelsSubscriptionVariables>(WatchDirectMessageChannelsDocument, baseOptions);\n      }\nexport type WatchDirectMessageChannelsSubscriptionHookResult = ReturnType<typeof useWatchDirectMessageChannelsSubscription>;\nexport type WatchDirectMessageChannelsSubscriptionResult = Apollo.SubscriptionResult<WatchDirectMessageChannelsSubscription>;\nexport const WatchUsersDocument = gql`\n    subscription watchUsers {\n  user(order_by: {username: asc}) {\n    username\n    auth0_user_id\n  }\n}\n    `;\n\n/**\n * __useWatchUsersSubscription__\n *\n * To run a query within a React component, call `useWatchUsersSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchUsersSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchUsersSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchUsersSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchUsersSubscription, WatchUsersSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchUsersSubscription, WatchUsersSubscriptionVariables>(WatchUsersDocument, baseOptions);\n      }\nexport type WatchUsersSubscriptionHookResult = ReturnType<typeof useWatchUsersSubscription>;\nexport type WatchUsersSubscriptionResult = Apollo.SubscriptionResult<WatchUsersSubscription>;\nexport const WatchUsersWhoHaveNotSubscribedToChannelDocument = gql`\n    subscription watchUsersWhoHaveNotSubscribedToChannel($user_id: String!, $channel_id: Int!) {\n  user(where: {_not: {user_channels: {channel_id: {_eq: $channel_id}}}, auth0_user_id: {_neq: $user_id}}, order_by: {username: asc}) {\n    auth0_user_id\n    username\n  }\n}\n    `;\n\n/**\n * __useWatchUsersWhoHaveNotSubscribedToChannelSubscription__\n *\n * To run a query within a React component, call `useWatchUsersWhoHaveNotSubscribedToChannelSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchUsersWhoHaveNotSubscribedToChannelSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchUsersWhoHaveNotSubscribedToChannelSubscription({\n *   variables: {\n *      user_id: // value for 'user_id'\n *      channel_id: // value for 'channel_id'\n *   },\n * });\n */\nexport function useWatchUsersWhoHaveNotSubscribedToChannelSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchUsersWhoHaveNotSubscribedToChannelSubscription, WatchUsersWhoHaveNotSubscribedToChannelSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchUsersWhoHaveNotSubscribedToChannelSubscription, WatchUsersWhoHaveNotSubscribedToChannelSubscriptionVariables>(WatchUsersWhoHaveNotSubscribedToChannelDocument, baseOptions);\n      }\nexport type WatchUsersWhoHaveNotSubscribedToChannelSubscriptionHookResult = ReturnType<typeof useWatchUsersWhoHaveNotSubscribedToChannelSubscription>;\nexport type WatchUsersWhoHaveNotSubscribedToChannelSubscriptionResult = Apollo.SubscriptionResult<WatchUsersWhoHaveNotSubscribedToChannelSubscription>;\nexport const WatchUsersWhoHaveSubscribedToDirectMessageChannelDocument = gql`\n    subscription watchUsersWhoHaveSubscribedToDirectMessageChannel($user_id: String!) {\n  user(where: {auth0_user_id: {_neq: $user_id}}, order_by: {username: asc}) {\n    auth0_user_id\n    username\n    user_channels(where: {channel: {channel_type: {_eq: DIRECT_MESSAGE}}}) {\n      channel_id\n      channel {\n        name\n        user_channels(where: {user: {auth0_user_id: {_eq: $user_id}}}) {\n          user {\n            auth0_user_id\n            username\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription__\n *\n * To run a query within a React component, call `useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription({\n *   variables: {\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription, WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription, WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscriptionVariables>(WatchUsersWhoHaveSubscribedToDirectMessageChannelDocument, baseOptions);\n      }\nexport type WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscriptionHookResult = ReturnType<typeof useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription>;\nexport type WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscriptionResult = Apollo.SubscriptionResult<WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription>;\nexport const GetUserIsTypingDocument = gql`\n    subscription getUserIsTyping($self_id: String!, $channel_id: Int!) {\n  user_typing(where: {auth0_user_id: {_neq: $self_id}, _and: {last_typed_channel: {_eq: $channel_id}}}, limit: 1, order_by: {last_typed: desc}) {\n    last_typed\n    username\n  }\n}\n    `;\n\n/**\n * __useGetUserIsTypingSubscription__\n *\n * To run a query within a React component, call `useGetUserIsTypingSubscription` and pass it any options that fit your needs.\n * When your component renders, `useGetUserIsTypingSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserIsTypingSubscription({\n *   variables: {\n *      self_id: // value for 'self_id'\n *      channel_id: // value for 'channel_id'\n *   },\n * });\n */\nexport function useGetUserIsTypingSubscription(baseOptions?: Apollo.SubscriptionHookOptions<GetUserIsTypingSubscription, GetUserIsTypingSubscriptionVariables>) {\n        return Apollo.useSubscription<GetUserIsTypingSubscription, GetUserIsTypingSubscriptionVariables>(GetUserIsTypingDocument, baseOptions);\n      }\nexport type GetUserIsTypingSubscriptionHookResult = ReturnType<typeof useGetUserIsTypingSubscription>;\nexport type GetUserIsTypingSubscriptionResult = Apollo.SubscriptionResult<GetUserIsTypingSubscription>;\nexport const WatchNewMessagesDocument = gql`\n    subscription watchNewMessages($channelId: Int!) {\n  newMessages: message(order_by: {id: desc}, limit: 1, where: {channel: {id: {_eq: $channelId}}}) {\n    id\n    text\n    timestamp\n    user {\n      username\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchNewMessagesSubscription__\n *\n * To run a query within a React component, call `useWatchNewMessagesSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchNewMessagesSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchNewMessagesSubscription({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useWatchNewMessagesSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchNewMessagesSubscription, WatchNewMessagesSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchNewMessagesSubscription, WatchNewMessagesSubscriptionVariables>(WatchNewMessagesDocument, baseOptions);\n      }\nexport type WatchNewMessagesSubscriptionHookResult = ReturnType<typeof useWatchNewMessagesSubscription>;\nexport type WatchNewMessagesSubscriptionResult = Apollo.SubscriptionResult<WatchNewMessagesSubscription>;\nexport const WatchChannelsLastMessageIdDocument = gql`\n    subscription watchChannelsLastMessageId($channel_type: channel_type_enum! = CHAT_MESSAGE) {\n  channels: channel(where: {channel_type: {_eq: $channel_type}}, order_by: {name: asc, is_private: asc}) {\n    name\n    id\n    is_private\n    owner_id\n    messages(order_by: {id: desc}, limit: 1) {\n      id\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchChannelsLastMessageIdSubscription__\n *\n * To run a query within a React component, call `useWatchChannelsLastMessageIdSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelsLastMessageIdSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelsLastMessageIdSubscription({\n *   variables: {\n *      channel_type: // value for 'channel_type'\n *   },\n * });\n */\nexport function useWatchChannelsLastMessageIdSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelsLastMessageIdSubscription, WatchChannelsLastMessageIdSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelsLastMessageIdSubscription, WatchChannelsLastMessageIdSubscriptionVariables>(WatchChannelsLastMessageIdDocument, baseOptions);\n      }\nexport type WatchChannelsLastMessageIdSubscriptionHookResult = ReturnType<typeof useWatchChannelsLastMessageIdSubscription>;\nexport type WatchChannelsLastMessageIdSubscriptionResult = Apollo.SubscriptionResult<WatchChannelsLastMessageIdSubscription>;\nexport const WatchMessageCursorDocument = gql`\n    subscription watchMessageCursor($channel_id: Int!, $user_id: String!) {\n  message_cursor(where: {user_id: {_eq: $user_id}, _and: {channel_id: {_eq: $channel_id}}}) {\n    channel_id\n    message_id\n    user_id\n  }\n}\n    `;\n\n/**\n * __useWatchMessageCursorSubscription__\n *\n * To run a query within a React component, call `useWatchMessageCursorSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchMessageCursorSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchMessageCursorSubscription({\n *   variables: {\n *      channel_id: // value for 'channel_id'\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useWatchMessageCursorSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchMessageCursorSubscription, WatchMessageCursorSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchMessageCursorSubscription, WatchMessageCursorSubscriptionVariables>(WatchMessageCursorDocument, baseOptions);\n      }\nexport type WatchMessageCursorSubscriptionHookResult = ReturnType<typeof useWatchMessageCursorSubscription>;\nexport type WatchMessageCursorSubscriptionResult = Apollo.SubscriptionResult<WatchMessageCursorSubscription>;\nexport const WatchGetPollQuestionsDocument = gql`\n    subscription WatchGetPollQuestions {\n  questions: poll_questions {\n    id\n    text\n    created_at\n    updated_at\n    owner_id\n    is_active\n    channel_polls {\n      channel {\n        name\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchGetPollQuestionsSubscription__\n *\n * To run a query within a React component, call `useWatchGetPollQuestionsSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchGetPollQuestionsSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchGetPollQuestionsSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchGetPollQuestionsSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchGetPollQuestionsSubscription, WatchGetPollQuestionsSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchGetPollQuestionsSubscription, WatchGetPollQuestionsSubscriptionVariables>(WatchGetPollQuestionsDocument, baseOptions);\n      }\nexport type WatchGetPollQuestionsSubscriptionHookResult = ReturnType<typeof useWatchGetPollQuestionsSubscription>;\nexport type WatchGetPollQuestionsSubscriptionResult = Apollo.SubscriptionResult<WatchGetPollQuestionsSubscription>;\nexport const WatchGetChannelPollQuestionPublishStateDocument = gql`\n    subscription watchGetChannelPollQuestionPublishState {\n  getChannelPollQuestionPublishState: channel_poll {\n    channel_id\n    id\n    poll_questions\n    channel {\n      name\n    }\n    poll_question {\n      text\n      is_active\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchGetChannelPollQuestionPublishStateSubscription__\n *\n * To run a query within a React component, call `useWatchGetChannelPollQuestionPublishStateSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchGetChannelPollQuestionPublishStateSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchGetChannelPollQuestionPublishStateSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchGetChannelPollQuestionPublishStateSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchGetChannelPollQuestionPublishStateSubscription, WatchGetChannelPollQuestionPublishStateSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchGetChannelPollQuestionPublishStateSubscription, WatchGetChannelPollQuestionPublishStateSubscriptionVariables>(WatchGetChannelPollQuestionPublishStateDocument, baseOptions);\n      }\nexport type WatchGetChannelPollQuestionPublishStateSubscriptionHookResult = ReturnType<typeof useWatchGetChannelPollQuestionPublishStateSubscription>;\nexport type WatchGetChannelPollQuestionPublishStateSubscriptionResult = Apollo.SubscriptionResult<WatchGetChannelPollQuestionPublishStateSubscription>;\nexport const WatchGetPollQuestionDocument = gql`\n    subscription watchGetPollQuestion($pollQuestionId: Int) {\n  poll_question: poll_questions(where: {id: {_eq: $pollQuestionId}}) {\n    id\n    text\n    is_active\n  }\n}\n    `;\n\n/**\n * __useWatchGetPollQuestionSubscription__\n *\n * To run a query within a React component, call `useWatchGetPollQuestionSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchGetPollQuestionSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchGetPollQuestionSubscription({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useWatchGetPollQuestionSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchGetPollQuestionSubscription, WatchGetPollQuestionSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchGetPollQuestionSubscription, WatchGetPollQuestionSubscriptionVariables>(WatchGetPollQuestionDocument, baseOptions);\n      }\nexport type WatchGetPollQuestionSubscriptionHookResult = ReturnType<typeof useWatchGetPollQuestionSubscription>;\nexport type WatchGetPollQuestionSubscriptionResult = Apollo.SubscriptionResult<WatchGetPollQuestionSubscription>;\nexport const WatchGetPollAnswersDocument = gql`\n    subscription watchGetPollAnswers($pollQuestionId: Int!) {\n  poll_answers: poll_anwers(where: {poll_question: {id: {_eq: $pollQuestionId}}}) {\n    question_id\n    text\n    id\n    votes\n  }\n}\n    `;\n\n/**\n * __useWatchGetPollAnswersSubscription__\n *\n * To run a query within a React component, call `useWatchGetPollAnswersSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchGetPollAnswersSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchGetPollAnswersSubscription({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useWatchGetPollAnswersSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchGetPollAnswersSubscription, WatchGetPollAnswersSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchGetPollAnswersSubscription, WatchGetPollAnswersSubscriptionVariables>(WatchGetPollAnswersDocument, baseOptions);\n      }\nexport type WatchGetPollAnswersSubscriptionHookResult = ReturnType<typeof useWatchGetPollAnswersSubscription>;\nexport type WatchGetPollAnswersSubscriptionResult = Apollo.SubscriptionResult<WatchGetPollAnswersSubscription>;\nexport const WatchChannelPollQuestionDocument = gql`\n    subscription watchChannelPollQuestion($channelId: Int!) {\n  getChannelPoll: channel_poll(where: {channel_id: {_eq: $channelId}, poll_question: {is_active: {_eq: true}}}) {\n    id\n    poll_question {\n      id\n      text\n      poll_anwers(where: {poll_question: {channel_polls: {channel_id: {_eq: $channelId}}}}) {\n        text\n        votes\n        id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchChannelPollQuestionSubscription__\n *\n * To run a query within a React component, call `useWatchChannelPollQuestionSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelPollQuestionSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelPollQuestionSubscription({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useWatchChannelPollQuestionSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelPollQuestionSubscription, WatchChannelPollQuestionSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelPollQuestionSubscription, WatchChannelPollQuestionSubscriptionVariables>(WatchChannelPollQuestionDocument, baseOptions);\n      }\nexport type WatchChannelPollQuestionSubscriptionHookResult = ReturnType<typeof useWatchChannelPollQuestionSubscription>;\nexport type WatchChannelPollQuestionSubscriptionResult = Apollo.SubscriptionResult<WatchChannelPollQuestionSubscription>;\nexport const WatchPollAnswerVotesDocument = gql`\n    subscription watchPollAnswerVotes($pollAnswerId: Int!) {\n  pollAnswerVotes: poll_anwers(where: {id: {_eq: $pollAnswerId}}) {\n    id\n    votes\n  }\n}\n    `;\n\n/**\n * __useWatchPollAnswerVotesSubscription__\n *\n * To run a query within a React component, call `useWatchPollAnswerVotesSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchPollAnswerVotesSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchPollAnswerVotesSubscription({\n *   variables: {\n *      pollAnswerId: // value for 'pollAnswerId'\n *   },\n * });\n */\nexport function useWatchPollAnswerVotesSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchPollAnswerVotesSubscription, WatchPollAnswerVotesSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchPollAnswerVotesSubscription, WatchPollAnswerVotesSubscriptionVariables>(WatchPollAnswerVotesDocument, baseOptions);\n      }\nexport type WatchPollAnswerVotesSubscriptionHookResult = ReturnType<typeof useWatchPollAnswerVotesSubscription>;\nexport type WatchPollAnswerVotesSubscriptionResult = Apollo.SubscriptionResult<WatchPollAnswerVotesSubscription>;\nexport const GetPollQuestionStateDocument = gql`\n    subscription getPollQuestionState($pollQuestionId: Int!) {\n  poll_questions(where: {id: {_eq: $pollQuestionId}}) {\n    is_active\n  }\n}\n    `;\n\n/**\n * __useGetPollQuestionStateSubscription__\n *\n * To run a query within a React component, call `useGetPollQuestionStateSubscription` and pass it any options that fit your needs.\n * When your component renders, `useGetPollQuestionStateSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPollQuestionStateSubscription({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useGetPollQuestionStateSubscription(baseOptions?: Apollo.SubscriptionHookOptions<GetPollQuestionStateSubscription, GetPollQuestionStateSubscriptionVariables>) {\n        return Apollo.useSubscription<GetPollQuestionStateSubscription, GetPollQuestionStateSubscriptionVariables>(GetPollQuestionStateDocument, baseOptions);\n      }\nexport type GetPollQuestionStateSubscriptionHookResult = ReturnType<typeof useGetPollQuestionStateSubscription>;\nexport type GetPollQuestionStateSubscriptionResult = Apollo.SubscriptionResult<GetPollQuestionStateSubscription>;\nexport const WatchGetChannelsDocument = gql`\n    subscription watchGetChannels {\n  channel(where: {is_private: {_eq: false}}) {\n    id\n    name\n    channel_polls {\n      channel_id\n      poll_question {\n        id\n        text\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchGetChannelsSubscription__\n *\n * To run a query within a React component, call `useWatchGetChannelsSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchGetChannelsSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchGetChannelsSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchGetChannelsSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchGetChannelsSubscription, WatchGetChannelsSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchGetChannelsSubscription, WatchGetChannelsSubscriptionVariables>(WatchGetChannelsDocument, baseOptions);\n      }\nexport type WatchGetChannelsSubscriptionHookResult = ReturnType<typeof useWatchGetChannelsSubscription>;\nexport type WatchGetChannelsSubscriptionResult = Apollo.SubscriptionResult<WatchGetChannelsSubscription>;\nexport const WatchChannelHasActivePollDocument = gql`\n    subscription watchChannelHasActivePoll($currentChannelId: Int!) {\n  poll_questions(where: {channel_polls: {channel_id: {_eq: $currentChannelId}}, _and: {is_active: {_eq: true}}}) {\n    id\n    text\n  }\n}\n    `;\n\n/**\n * __useWatchChannelHasActivePollSubscription__\n *\n * To run a query within a React component, call `useWatchChannelHasActivePollSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelHasActivePollSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelHasActivePollSubscription({\n *   variables: {\n *      currentChannelId: // value for 'currentChannelId'\n *   },\n * });\n */\nexport function useWatchChannelHasActivePollSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelHasActivePollSubscription, WatchChannelHasActivePollSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelHasActivePollSubscription, WatchChannelHasActivePollSubscriptionVariables>(WatchChannelHasActivePollDocument, baseOptions);\n      }\nexport type WatchChannelHasActivePollSubscriptionHookResult = ReturnType<typeof useWatchChannelHasActivePollSubscription>;\nexport type WatchChannelHasActivePollSubscriptionResult = Apollo.SubscriptionResult<WatchChannelHasActivePollSubscription>;\nexport const WatchChannelPollActiveStateDocument = gql`\n    subscription watchChannelPollActiveState {\n  channel_poll {\n    id\n    channel {\n      name\n      channel_polls {\n        poll_question {\n          created_at\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchChannelPollActiveStateSubscription__\n *\n * To run a query within a React component, call `useWatchChannelPollActiveStateSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelPollActiveStateSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelPollActiveStateSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchChannelPollActiveStateSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelPollActiveStateSubscription, WatchChannelPollActiveStateSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelPollActiveStateSubscription, WatchChannelPollActiveStateSubscriptionVariables>(WatchChannelPollActiveStateDocument, baseOptions);\n      }\nexport type WatchChannelPollActiveStateSubscriptionHookResult = ReturnType<typeof useWatchChannelPollActiveStateSubscription>;\nexport type WatchChannelPollActiveStateSubscriptionResult = Apollo.SubscriptionResult<WatchChannelPollActiveStateSubscription>;\nexport const WatchCheckUserHasVotedDocument = gql`\n    subscription watchCheckUserHasVoted($pollQuestionId: Int, $auth0UserId: String) {\n  user_votes(where: {poll_question_id: {_eq: $pollQuestionId}, auth0_user_id: {_eq: $auth0UserId}}) {\n    auth0_user_id\n    poll_question_id\n    poll_answer_id\n  }\n}\n    `;\n\n/**\n * __useWatchCheckUserHasVotedSubscription__\n *\n * To run a query within a React component, call `useWatchCheckUserHasVotedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchCheckUserHasVotedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchCheckUserHasVotedSubscription({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *      auth0UserId: // value for 'auth0UserId'\n *   },\n * });\n */\nexport function useWatchCheckUserHasVotedSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchCheckUserHasVotedSubscription, WatchCheckUserHasVotedSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchCheckUserHasVotedSubscription, WatchCheckUserHasVotedSubscriptionVariables>(WatchCheckUserHasVotedDocument, baseOptions);\n      }\nexport type WatchCheckUserHasVotedSubscriptionHookResult = ReturnType<typeof useWatchCheckUserHasVotedSubscription>;\nexport type WatchCheckUserHasVotedSubscriptionResult = Apollo.SubscriptionResult<WatchCheckUserHasVotedSubscription>;","import React from 'react';\nimport { ApolloProvider, HttpOptions } from '@apollo/react-hooks';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  createHttpLink,\n  split,\n} from '@apollo/client';\nimport { WebSocketLink, WebSocketParams } from '@apollo/client/link/ws';\nimport { setContext } from '@apollo/client/link/context';\n\ninterface Definition {\n  kind: string;\n  operation?: string;\n}\n\nexport type ApolloHeadersType = {\n  Authorization: string;\n};\n\nconst ApolloWrapper: React.FC<any> = ({ children }) => {\n  const { isAuthenticated, getAccessTokenSilently } = useAuth0();\n\n  const getHeaders = async () => {\n    const headers = {} as ApolloHeadersType;\n    if (isAuthenticated) {\n      const token = await getAccessTokenSilently();\n      //console.log('token', token);\n      headers.Authorization = `Bearer ${token}`;\n    }\n    return headers;\n  };\n\n  const authMiddleware = setContext(async (operation, { originalHeaders }) => {\n    return {\n      headers: {\n        ...originalHeaders,\n        ...(await getHeaders()),\n      },\n    };\n  });\n\n  const httpLinkOptions: HttpOptions = {\n    uri: process.env.REACT_APP_HTTP_BACKEND_LINK,\n  };\n\n  const wsLinkOptions: WebSocketParams = {\n    uri: process.env.REACT_APP_WS_BACKEND_LINK || '',\n    options: {\n      reconnect: true,\n      lazy: true,\n      connectionParams: async () => {\n        return { headers: await getHeaders() };\n      },\n    },\n  };\n\n  const httpLink = createHttpLink(httpLinkOptions);\n  const wsLink = new WebSocketLink(wsLinkOptions);\n\n  const link = split(\n    // split based on operation type\n    ({ query }) => {\n      const { kind, operation }: Definition = getMainDefinition(query);\n      return kind === 'OperationDefinition' && operation === 'subscription';\n    },\n    wsLink,\n    authMiddleware.concat(httpLink),\n  );\n\n  /* Set up local cache */\n  const cache = new InMemoryCache();\n\n  /* Create Apollo Client */\n  const client = new ApolloClient({ link, cache });\n\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n};\n\nexport default ApolloWrapper;\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport typography from './typography';\nimport overrides from './overrides';\n\nexport const theme = createMuiTheme({\n  palette: {\n    common: {\n      black: '#000000',\n      white: '#f9cd8b',\n    },\n    type: 'dark',\n    background: {\n      paper: '#070922',\n      default: '#070922',\n    },\n    primary: {\n      light: '#81D4FA',\n      main: '#0288D1',\n      dark: 'rgba(255, 255, 255, 0.1)',\n      contrastText: '#EF6C00',\n    },\n    secondary: {\n      light: '#FFA726',\n      main: '#f57c00',\n      dark: '#EF6C00',\n      contrastText: '#ffffff',\n    },\n    error: {\n      light: '#E91E63',\n      main: '#AD1457',\n      dark: '#880E4F',\n    },\n    success: {\n      light: '#0f5',\n      main: '#0f0',\n      dark: '#222',\n    },\n  },\n\n  shape: {\n    borderRadius: 2,\n  },\n  mixins: {\n    toolbar: {\n      // backgroundColor: '#151c66',\n    },\n  },\n  spacing: 0,\n  props: {\n    MuiCheckbox: {\n      style: {\n        fontSize: 10,\n      },\n    },\n    MuiChip: {\n      style: {\n        padding: 3,\n      },\n    },\n    MuiList: {\n      style: {\n        padding: 0,\n      },\n    },\n    MuiListItemIcon: {\n      style: {\n        color: '#0288D1',\n      },\n    },\n    MuiPaper: {\n      draggable: false,\n      elevation: 0,\n      style: {\n        overflow: 'hidden',\n      },\n    },\n    MuiAppBar: {\n      style: {\n        top: 'auto',\n        bottom: 0,\n      },\n    },\n    MuiButton: {\n      disableElevation: false,\n      color: 'secondary',\n      variant: 'outlined',\n      size: 'small',\n      disableFocusRipple: false,\n      disableTouchRipple: false,\n    },\n  },\n  typography,\n  overrides,\n});\n","export default {\n  fontSize: 14,\n  body1: {\n    fontSize: 16,\n    color: '#0288D1',\n  },\n  body2: {\n    fontSize: 16,\n    fontWeight: 500,\n    // color: '#f9cd8b',\n  },\n  button: {\n    fontSize: 12,\n    fontWeight: 400,\n  },\n  h1: {\n    fontWeight: 700,\n    fontSize: 20,\n    paddingBottom: 16,\n  },\n  h2: {\n    fontWeight: 700,\n    fontSize: 18,\n    marginTop: 16,\n  },\n  h3: {\n    fontWeight: 700,\n    fontSize: 16,\n    marginTop: 16,\n    marginBottom: 16,\n  },\n  h4: {\n    fontWeight: 700,\n    fontSize: 14,\n    marginTop: 16,\n  },\n  h5: {\n    fontWeight: 700,\n    fontSize: 12,\n    marginTop: 16,\n  },\n  h6: {\n    fontWeight: 700,\n    fontSize: 10,\n    color: '#0288D1',\n  },\n};\n","import { theme } from './theme';\nexport default {\n  MuiCssBaseline: {\n    '@global': {\n      '*': {\n        'scrollbar-width': '1rem',\n      },\n      '*::-webkit-scrollbar': {\n        width: '.5rem',\n        height: '1rem',\n      },\n      '*::-webkit-scrollbar-track': {\n        '-webkit-box-shadow': 'inset 0 0 6px rgba(0,0,0,0.00)',\n      },\n      '*::-webkit-scrollbar-thumb': {\n        backgroundColor: 'rgb(245 124 0)',\n        borderRadius: 0,\n      },\n      a: {\n        textDecoration: 'none',\n      },\n    },\n  },\n  MuiPopover: {\n    root: {\n      background: 'rgba(245, 122, 0, .7)',\n    },\n  },\n  MuiBackdrop: {\n    root: {\n      backgroundColor: 'rgba(0, 0, 0, .95)',\n    },\n  },\n  MuiFab: {\n    root: {\n      borderRadius: 0,\n    },\n    primary: {\n      color: '#fff',\n      // backgroundColor: 'rgba(255, 255, 255, .1)',\n      boxShadow: 'none',\n    },\n    label: {},\n  },\n  MuiSpeedDial: {\n    direction: 'left',\n    directionUp: { marginBottom: 0 },\n    actions: {\n      display: 'unset',\n      backgroundColor: 'transparent',\n    },\n  },\n  MuiSpeedDialAction: {\n    fab: {\n      backgroundColor: 'transparent',\n      '&:hover': {\n        borderRadius: 3,\n        padding: 10,\n      },\n    },\n    staticTooltip: {\n      // opacity: 1,\n    },\n    tooltipOpen: true,\n    tooltipPlacement: 'top-end',\n    tooltipPlacementLeft: {},\n    staticTooltipLabel: {\n      right: '100%',\n      whiteSpace: 'nowrap',\n    },\n  },\n  MuiTableCell: {\n    root: {\n      borderBottom: 'none',\n    },\n  },\n  MuiInputBase: {\n    root: {},\n  },\n  MuiList: {\n    root: {\n      '&:hover': {\n        // backgroundColor: 'red',\n      },\n    },\n  },\n  MuiListItemIcon: {\n    root: {\n      '& :hover': {\n        color: '#F57C00',\n      },\n    },\n  },\n  MuiContainer: {\n    root: {\n      padding: 0,\n      margin: 0,\n    },\n  },\n  MuiListItemText: {\n    root: {\n      padding: 0,\n      margin: 0,\n      '& span': {\n        padding: 0,\n        fontSize: '.875rem',\n      },\n      '& h6': {\n        fontSize: '.857rem',\n      },\n      '& a': {\n        color: '#fff',\n      },\n      '& a:hover': {\n        color: 'yellow',\n      },\n    },\n  },\n  MuiDivider: {\n    root: {\n      margin: 10,\n      opacity: 0.3,\n    },\n  },\n  MuiTypography: {},\n  MuiButton: {\n    contained: {\n      boxShadow: 'none',\n    },\n  },\n  MuiIconButton: {\n    root: {\n      padding: '3px',\n    },\n  },\n};\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport Button from '@material-ui/core/Button';\n\nconst Login: React.FC<any> = () => {\n  const { loginWithRedirect } = useAuth0();\n\n  const checkAndLogin = () => {\n    loginWithRedirect();\n  };\n\n  return (\n    <>\n      <Button\n        size=\"large\"\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={checkAndLogin}\n      >\n        Login\n      </Button>\n    </>\n  );\n};\n\nexport default Login;\n","import React from 'react';\nimport { Box, Container, Grid, Typography } from '@material-ui/core';\nimport Login from '../Login';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column',\n    height: '100vh',\n  },\n  title: {\n    fontSize: '2rem',\n    fontWeight: 700,\n    textTransform: 'uppercase',\n    paddingTop: theme.spacing(5),\n  },\n}));\n\nconst SignIn: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Grid container className={classes.root}>\n        <Grid item>\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n            <img src=\"/logo-chicken-chat.png\" alt=\"Chicken Chat\" />\n          </Box>\n          <Typography className={classes.title} variant=\"h2\">\n            Welcome to Chicken Chat\n          </Typography>\n          <Typography color=\"textPrimary\" variant=\"body1\">\n            Please register or login. Lets go an cackle your nonsense!\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Login />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default SignIn;\n","import React from 'react';\nimport { Box } from '@material-ui/core';\nimport AvatarGroup from '@material-ui/lab/AvatarGroup';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  toolbarIcon: {\n    ...theme.mixins.toolbar,\n  },\n}));\n\nconst NotFound: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.root}>\n      <h2>Upppsss ....! Something went wrong!</h2>\n    </Box>\n  );\n};\n\nexport default NotFound;\n","import React from 'react';\nimport { Box, CircularProgress } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: theme.spacing(0),\n    width: '100%',\n    // height: '100vh',\n  },\n}));\n\nconst Loader = () => {\n  const classes = useStyles();\n\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      flexDirection=\"column\"\n      flex={1}\n    >\n      <CircularProgress\n        color=\"secondary\"\n        size={20}\n        style={{ margin: '10px' }}\n      />\n    </Box>\n  );\n};\n\nexport default Loader;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { Box, Typography } from '@material-ui/core';\nimport { withAuthenticationRequired } from '@auth0/auth0-react';\nimport Loader from './shared/Loader';\n\ninterface PrivateRouteProps {\n  component: any;\n  path: any;\n}\n\nconst PrivateRoute: React.FC<PrivateRouteProps> = ({ component, ...args }) => {\n  return (\n    <Route\n      component={withAuthenticationRequired(component, {\n        onRedirecting: () => (\n          <>\n            <Loader />\n          </>\n        ),\n      })}\n      {...args}\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import { atom } from 'recoil';\n\nexport const testState = atom({\n  key: 'testState',\n});\n\nexport const currentChannelState = atom({\n  key: 'currentChannelState',\n});\n\nexport const getPollQuestionAnswers = atom({\n  key: 'getPollQuestionAnswersState',\n  default: 1,\n});\n\nexport const giphyState = atom({\n  key: 'giphyState',\n});\n\nexport const deletedMessageState = atom({\n  key: 'deletedMessageState',\n  default: false,\n});\n\nexport const deletedThreadMessageState = atom({\n  key: 'deletedThreadMessageState',\n  default: false,\n});\n","import React from 'react';\nimport { Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  large: {\n    backgroundSize: 'cover',\n    marginTop: theme.spacing(2),\n    width: theme.spacing(10),\n    height: theme.spacing(10),\n  },\n}));\n\nconst Logo = () => {\n  const classes = useStyles();\n\n  return (\n    <Avatar\n      className={classes.large}\n      alt=\"Chicken Fest\"\n      src=\"/chicken-chat-logo.svg\"\n    />\n  );\n};\n\nexport default Logo;\n","import React from 'react';\nimport { Avatar, Badge, Box, ListItemIcon } from '@material-ui/core';\nimport AvatarGroup from '@material-ui/lab/AvatarGroup';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useWatchOnlineUsersSubscription } from '../../api/generated/graphql';\nimport Alert from '@material-ui/lab/Alert';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  toolbarIcon: {\n    ...theme.mixins.toolbar,\n  },\n  badge: {\n    backgroundColor: '#0f0',\n  },\n  avatar: {\n    backgroundColor: '#000000',\n    color: '#F57C00',\n  },\n}));\n\ninterface OnlineUserStatusProps {\n  user: any;\n}\n\nconst OnlineUserStatus: React.FC<OnlineUserStatusProps> = ({ user }) => {\n  const classes = useStyles();\n\n  const {\n    data: onlineUsers,\n    loading: onlineUsersLoading,\n    error: onlineUsersError,\n  } = useWatchOnlineUsersSubscription();\n\n  if (onlineUsersError) {\n    console.log('onlineUsersError', onlineUsersError);\n    return (\n      <Alert severity=\"error\">A DirectMessageUserListError occured.</Alert>\n    );\n  }\n\n  const setOnlineUsersStatus = (user_id: string) => {\n    if (user_id === undefined) return true;\n\n    const onlineUser = onlineUsers?.users.filter((u) => {\n      return user_id === u.auth0_user_id ? true : false;\n    });\n\n    return onlineUser?.length ? false : true;\n  };\n\n  return (\n    <ListItemIcon>\n      <Badge\n        classes={{ badge: classes.badge }}\n        variant=\"dot\"\n        invisible={setOnlineUsersStatus(user.auth0_user_id)}\n      >\n        <Avatar className={classes.avatar}>\n          {user.username.substring(0, 2).toUpperCase()}\n        </Avatar>\n      </Badge>\n    </ListItemIcon>\n  );\n};\n\nexport default OnlineUserStatus;\n","import React from 'react';\nimport { Alert } from '@material-ui/lab';\nimport {\n  Avatar,\n  Badge,\n  Box,\n  Button,\n  Container,\n  Divider,\n  Grid,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Typography,\n} from '@material-ui/core';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport {\n  useWatchUsersWhoHaveNotSubscribedToChannelSubscription,\n  useAddChannelUserMutation,\n} from '../../api/generated/graphql';\nimport { useRecoilState } from 'recoil';\nimport { currentChannelState } from '../../atom';\nimport { useHistory } from 'react-router-dom';\nimport Loader from '../shared/Loader';\nimport Logo from '../shared/Logo';\nimport { makeStyles } from '@material-ui/core/';\nimport OnlineUserStatus from '../shared/OnlineUserStatus';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    overflowY: 'scroll',\n  },\n  avatar: {\n    backgroundColor: '#000000',\n    color: '#F57C00',\n  },\n  spacer: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nconst AddChannelMembers: React.FC = () => {\n  const classes = useStyles();\n\n  let history = useHistory();\n\n  const [currentChannel, setCurrentChannel] = useRecoilState<any>(\n    currentChannelState,\n  );\n\n  const { isLoading: loadingAuth0 } = useAuth0();\n\n  const {\n    data: users,\n    loading,\n    error,\n  } = useWatchUsersWhoHaveNotSubscribedToChannelSubscription({\n    variables: {\n      user_id: currentChannel.owner_id,\n      channel_id: currentChannel.id,\n    },\n  });\n\n  const [\n    addChannelUserMutation,\n    {\n      data: addChannelUserData,\n      loading: addChannelUserLoading,\n      error: addChannelUserError,\n    },\n  ] = useAddChannelUserMutation();\n\n  const handleUsersToggle = async (event: any, user_id: string) => {\n    await addChannelUserMutation({\n      variables: {\n        channel_id: currentChannel.id,\n        user_id,\n      },\n    });\n  };\n\n  const handleClick = () => {\n    history.push(`/channel/${currentChannel.name}`);\n  };\n\n  if (error || addChannelUserError)\n    console.log('error on user subscription', error);\n\n  return (\n    <>\n      <Container maxWidth=\"sm\" className={classes.root}>\n        <Grid item xs={12}>\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n            <Logo />\n          </Box>\n          <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            flexDirection=\"column\"\n            mt={0}\n            mb={5}\n          >\n            <Typography id=\"simple-modal-title\" variant=\"h2\">\n              Add users to {currentChannel.name}\n            </Typography>\n            <Typography\n              color=\"secondary\"\n              variant=\"caption\"\n              id=\"simple-modal-description\"\n            >\n              {users && users.user.length > 0\n                ? 'Select users that you wanna add to this channel.'\n                : 'All users have subscribed to this channel.'}\n            </Typography>\n          </Box>\n          <Box>\n            {error && (\n              <Alert severity={'error'}>\n                Error - something weird happened...\n              </Alert>\n            )}\n\n            {(loadingAuth0 || loading) && <Loader />}\n\n            {!(loadingAuth0 || loading || error) && (\n              <>\n                <Divider className={classes.spacer} />\n                <List\n                  component=\"nav\"\n                  aria-label=\"secondary mailbox folders\"\n                  className={classes.spacer}\n                >\n                  {users &&\n                    users.user.map((u: any, index) => {\n                      return (\n                        <ListItem\n                          button\n                          key={index}\n                          onClick={(event) =>\n                            handleUsersToggle(event, u.auth0_user_id)\n                          }\n                        >\n                          <OnlineUserStatus user={u} />\n                          <ListItemText primary={u.username} />\n                        </ListItem>\n                      );\n                    })}\n                </List>\n                <Divider className={classes.spacer} />\n              </>\n            )}\n          </Box>\n        </Grid>\n        <Grid item xs={12}>\n          <Box display=\"flex\" justifyContent=\"center\" mt={5}>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              size=\"large\"\n              onClick={handleClick}\n            >\n              Back to channel\n            </Button>\n          </Box>\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default AddChannelMembers;\n","import React, { useEffect, useState } from 'react';\nimport {\n  Avatar,\n  Badge,\n  Box,\n  Button,\n  Container,\n  Divider,\n  Grid,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport {\n  useValidateAndAddDirectMessageChannelMutation,\n  useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription,\n  useUpsertMessageCursorMutation,\n  useInsertMessageMutation,\n} from '../../api/generated/graphql';\nimport { Alert } from '@material-ui/lab';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useHistory } from 'react-router';\nimport Loader from '../shared/Loader';\nimport Logo from '../shared/Logo';\nimport { makeStyles } from '@material-ui/core/styles';\nimport OnlineUserStatus from '../shared/OnlineUserStatus';\n\nconst useStyles = makeStyles((theme) => ({\n  avatar: {\n    backgroundColor: '#000000',\n    color: '#F57C00',\n  },\n  spacer: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nconst AddDirectMessageChannel: React.FC = () => {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = useState(null);\n  const { user } = useAuth0();\n\n  const [users, setUsers] = useState<any>(null);\n\n  const user_id = user.sub;\n\n  let history = useHistory();\n\n  const {\n    data,\n    loading,\n    error,\n  } = useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription({\n    variables: {\n      user_id,\n    },\n  });\n\n  const [\n    upsertMessageCursorMutation,\n    { error: upsertMessageError },\n  ] = useUpsertMessageCursorMutation();\n\n  const [\n    sendMessage,\n    { error: sendUpdateMessageError },\n  ] = useInsertMessageMutation();\n\n  const [\n    validateAndAddDirectMessageChannelMutation,\n    { error: addDMError },\n  ] = useValidateAndAddDirectMessageChannelMutation();\n\n  useEffect(() => {\n    const checkUserSubscriptions = async () => {\n      return data?.user.filter((u) => {\n        return (\n          u.user_channels.filter((user_channel) => {\n            return user_channel.channel.user_channels.length === 1;\n          }).length === 0\n        );\n      });\n    };\n    const check = async () => {\n      const users = await checkUserSubscriptions();\n      setUsers(users);\n    };\n    check();\n  }, [data]);\n\n  if (error || addDMError || upsertMessageError || sendUpdateMessageError) {\n    console.log('error', addDMError);\n    return <Alert severity=\"error\">Fetching users error...</Alert>;\n  }\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  const handleAddUser = async (user_id: string, dm_user: string) => {\n    setAnchorEl(null);\n    const { data } = await validateAndAddDirectMessageChannelMutation({\n      variables: {\n        name: uuidv4(),\n        user_id1: user_id,\n        user_id2: dm_user,\n      },\n    });\n\n    await sendMessage({\n      variables: {\n        message: {\n          user_id: 'admin',\n          text: `Welcome to your new direct message channel`,\n          channel_id: data?.validateAndAddDirectMessageChannel?.id,\n        },\n      },\n    });\n\n    if (\n      data?.validateAndAddDirectMessageChannel?.id &&\n      data?.validateAndAddDirectMessageChannel?.id > 0\n    )\n      upsertMessageCursorMutation({\n        variables: {\n          channel_id: data?.validateAndAddDirectMessageChannel?.id,\n          message_id: 1,\n          user_id: dm_user,\n        },\n      });\n\n    history.push(`/channel/${data?.validateAndAddDirectMessageChannel?.name}`);\n    // TODO: add backend_only flag for addDirectMessageChannel mutation to hasura\n  };\n\n  const handleClick = () => {\n    history.push(`/channel/general`);\n  };\n\n  return (\n    <>\n      <Container maxWidth=\"sm\">\n        <Grid item xs={12}>\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n            <Logo />\n          </Box>\n          <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            flexDirection=\"column\"\n            mb={5}\n          >\n            <Typography variant=\"h2\">Add a user</Typography>\n            <Typography\n              color=\"secondary\"\n              variant=\"caption\"\n              id=\"simple-modal-description\"\n            >\n              {users?.length\n                ? 'Select users that you wanna send direct messages to.'\n                : ''}\n            </Typography>\n          </Box>\n          <Box mb={5}>\n            <Divider className={classes.spacer} />\n            {users?.length ? (\n              <List className={classes.spacer}>\n                {users?.map((dm_user: any, index: any) => {\n                  return (\n                    <ListItem\n                      button\n                      key={index}\n                      onClick={() =>\n                        handleAddUser(user_id, dm_user.auth0_user_id)\n                      }\n                    >\n                      <OnlineUserStatus user={dm_user} />\n                      <ListItemText primary={dm_user.username} />\n                    </ListItem>\n                  );\n                })}\n              </List>\n            ) : (\n              <Alert severity={'success'}>\n                All users have been added. U can send a message, by clicking on\n                the user in the menu sidebar in direct messages.\n              </Alert>\n            )}\n            <Divider className={classes.spacer} />\n          </Box>\n        </Grid>\n        <Grid item xs={12}>\n          <Box display=\"flex\" justifyContent=\"center\" mt={5}>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              size=\"large\"\n              onClick={handleClick}\n            >\n              Back to Channel\n            </Button>\n          </Box>\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default AddDirectMessageChannel;\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Badge, Chip, Container, Grid, Tooltip } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport PeopleIcon from '@material-ui/icons/People';\nimport FaceIcon from '@material-ui/icons/Face';\nimport Loader from './Loader';\nimport { useWatchOnlineUsersSubscription } from '../../api/generated/graphql';\n\ninterface OnlineUsersProps {\n  user_id: string;\n}\n\nconst UserStatus: React.FC<OnlineUsersProps> = ({ user_id }) => {\n  const { data, loading, error } = useWatchOnlineUsersSubscription();\n  const { user } = useAuth0();\n  const usersOnline = data?.users.length ?? 0;\n\n  if (error) {\n    return <Alert severity=\"error\">Online users could not be loaded.</Alert>;\n  }\n\n  return (\n    <>\n      <Container>\n        {!loading ? (\n          <Grid container justify=\"space-between\">\n            <Grid item>\n              <Chip\n                variant=\"outlined\"\n                color=\"primary\"\n                size=\"small\"\n                icon={<FaceIcon />}\n                label={user.nickname}\n              />\n            </Grid>\n            <Grid item>\n              <Tooltip\n                title=\"Users online\"\n                aria-label=\"Unsers online\"\n                placement=\"top\"\n              >\n                <Badge color=\"secondary\" badgeContent={usersOnline}>\n                  <PeopleIcon color=\"primary\" />\n                </Badge>\n              </Tooltip>\n            </Grid>\n          </Grid>\n        ) : (\n          <Grid container justify=\"center\">\n            <Loader />\n          </Grid>\n        )}\n      </Container>\n    </>\n  );\n};\n\nexport default UserStatus;\n","import React, { useState, useEffect } from 'react';\nimport {\n  useWatchMessagesSubscription,\n  useWatchMessageCursorSubscription,\n} from '../../api/generated/graphql';\nimport { useRecoilState } from 'recoil';\nimport { currentChannelState } from '../../atom';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport Alert from '@material-ui/lab/Alert';\nimport { Chip } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    '& > *': {\n      margin: theme.spacing(0.5),\n    },\n  },\n  item: {\n    height: '16px',\n  },\n}));\n\ninterface ChannelListMessageCounterProps {\n  channelId: number;\n}\n\nconst ChannelListMessageCounter: React.FC<ChannelListMessageCounterProps> = ({\n  channelId,\n}) => {\n  const classes = useStyles();\n  const { user, error: auth0Error } = useAuth0();\n  const [count, setCount] = useState<number | undefined>(0);\n\n  const { data, loading, error } = useWatchMessagesSubscription({\n    variables: {\n      channelId,\n    },\n    fetchPolicy: 'network-only',\n  });\n\n  const {\n    data: useWatchMessageCursorData,\n    loading: useWatchMessageCursorLoading,\n    error: useWatchMessageCursorError,\n  } = useWatchMessageCursorSubscription({\n    variables: {\n      user_id: user.sub,\n      channel_id: channelId,\n    },\n  });\n\n  useEffect(() => {\n    let messageId =\n      useWatchMessageCursorData?.message_cursor[0]?.message_id ?? undefined;\n\n    let messageCounterArray = data?.messages.filter((m) => {\n      if (messageId === undefined) return false;\n      return m.id > messageId;\n    });\n\n    setCount(messageCounterArray?.length);\n  }, [data, useWatchMessageCursorData]);\n\n  if (error || useWatchMessageCursorError || auth0Error) {\n    console.log(\n      'Error in ChannelListMessageCounter Component',\n      error,\n      useWatchMessageCursorError,\n      auth0Error,\n    );\n  }\n\n  if (loading || useWatchMessageCursorLoading) {\n    return <React.Fragment></React.Fragment>;\n  }\n\n  return (\n    <>\n      {count && count !== undefined ? (\n        <div className={classes.root}>\n          <Chip\n            variant=\"outlined\"\n            size=\"small\"\n            label={count}\n            color=\"secondary\"\n            className={classes.item}\n          />\n        </div>\n      ) : (\n        ''\n      )}\n    </>\n  );\n};\n\nexport default ChannelListMessageCounter;\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport {\n  Badge,\n  Box,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport ForumOutlinedIcon from '@material-ui/icons/ForumOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  treeView: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  badge: {\n    backgroundColor: '#0f0',\n  },\n}));\n\nconst ThreadsLink: React.FC<any> = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <ListItem button>\n        <ListItemIcon>\n          <ForumOutlinedIcon />\n        </ListItemIcon>\n        <ListItemText>\n          <Link to=\"/channel/threads\">\n            <Typography variant=\"h6\">Threads</Typography>\n          </Link>\n        </ListItemText>\n      </ListItem>\n    </>\n  );\n};\n\nexport default ThreadsLink;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { theme } from '../../theme/theme';\nimport { useWatchChannelsSubscription } from '../../api/generated/graphql';\nimport { Channel_Type_Enum } from '../../api/generated/graphql';\nimport { useRecoilState } from 'recoil';\nimport { currentChannelState } from '../../atom';\nimport {\n  Collapse,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport Loader from '../shared/Loader';\nimport PeopleIcon from '@material-ui/icons/People';\nimport PeopleOutlineIcon from '@material-ui/icons/PeopleOutline';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport EnhancedEncryptionOutlinedIcon from '@material-ui/icons/EnhancedEncryptionOutlined';\nimport ChannelListMessageCounter from './ChannelListMessageCounter';\nimport ThreadsLink from '../shared/ThreadsLink';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  treeView: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  badge: {\n    backgroundColor: '#0f0',\n  },\n}));\n\nconst Channels: React.FC<any> = () => {\n  const classes = useStyles();\n  const [currentChannel] = useRecoilState<any>(currentChannelState);\n  const [open, setOpen] = React.useState(true);\n  const matches = useMediaQuery(theme.breakpoints.down('md'));\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  const { data, loading, error } = useWatchChannelsSubscription({\n    variables: {\n      channel_type: Channel_Type_Enum.ChatMessage,\n    },\n  });\n\n  if (error) {\n    return <Alert severity=\"error\">Channels could not be loaded.</Alert>;\n  }\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      <List className={classes.root}>\n        <ThreadsLink />\n        <ListItem button onClick={handleClick}>\n          <ListItemIcon>\n            <PeopleOutlineIcon />\n          </ListItemIcon>\n          <ListItemText>\n            <Typography variant=\"h6\">Channels</Typography>\n          </ListItemText>\n          {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <List component=\"div\">\n            {data?.channels?.map((data: any) => (\n              <ListItem key={data.id} button>\n                {data?.name === currentChannel?.name ? (\n                  <ListItemIcon>\n                    {data.is_private === true ? (\n                      <EnhancedEncryptionOutlinedIcon color=\"secondary\" />\n                    ) : (\n                      <PeopleIcon color=\"secondary\" />\n                    )}\n                  </ListItemIcon>\n                ) : (\n                  <ListItemIcon>\n                    {data.is_private === true ? (\n                      <EnhancedEncryptionOutlinedIcon />\n                    ) : (\n                      <PeopleIcon />\n                    )}\n                  </ListItemIcon>\n                )}\n                {data?.name === currentChannel?.name ? (\n                  <ListItemText>\n                    <Link\n                      data-channel-name={data.name}\n                      to={'/channel/' + data.name}\n                    >\n                      <Typography variant=\"h6\" color=\"secondary\">\n                        {data.name}\n                      </Typography>\n                    </Link>\n                  </ListItemText>\n                ) : (\n                  <React.Fragment>\n                    <Link\n                      to={'/channel/' + data.name}\n                      data-channel-name={data.name}\n                    >\n                      <ListItemText primary={data?.name} />\n                    </Link>\n                    <ChannelListMessageCounter channelId={data.id} />\n                  </React.Fragment>\n                )}\n              </ListItem>\n            ))}\n          </List>\n        </Collapse>\n      </List>\n    </>\n  );\n};\n\nexport default Channels;\n","import React from 'react';\nimport {\n  Collapse,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport Alert from '@material-ui/lab/Alert';\nimport PersonIcon from '@material-ui/icons/Person';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Loader from '../shared/Loader';\nimport { Link, useHistory } from 'react-router-dom';\nimport { useWatchDirectMessageChannelsSubscription } from '../../api/generated/graphql';\nimport { Channel_Type_Enum } from '../../api/generated/graphql';\nimport ChannelListMessageCounter from './ChannelListMessageCounter';\nimport { makeStyles } from '@material-ui/core/styles';\nimport OnlineUserStatus from '../shared/OnlineUserStatus';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  nested: {\n    paddingLeft: theme.spacing(0),\n  },\n  form: {\n    flexGrow: 1,\n    margin: theme.spacing(2),\n  },\n  submit: {\n    marginTop: theme.spacing(2),\n  },\n  itemText: {\n    color: theme.palette.primary.light,\n    fontWeight: 700,\n  },\n  link: {\n    color: '#f9cd8b',\n  },\n}));\n\ninterface DirectMessageUserListProps {\n  user_id: string;\n}\n\nconst DirectMessageUserList: React.FC<DirectMessageUserListProps> = ({\n  user_id,\n}) => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n  let history = useHistory();\n\n  const { data, loading, error } = useWatchDirectMessageChannelsSubscription({\n    variables: {\n      channel_type: Channel_Type_Enum.DirectMessage,\n      user_id,\n    },\n  });\n\n  if (error) {\n    console.log('error', error);\n    return (\n      <Alert severity=\"error\">A DirectMessageUserListError occured.</Alert>\n    );\n  }\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  const navigateToAddDirectMessageChannelMembers = () => {\n    history.push(`/addDirectMessageChannelMembers`);\n  };\n\n  return (\n    <>\n      <List className={classes.root}>\n        <ListItem button onClick={handleClick}>\n          <ListItemIcon>\n            <PersonIcon />\n          </ListItemIcon>\n          <ListItemText>\n            <Typography variant=\"h6\">Direct Messages</Typography>\n          </ListItemText>\n          <ListItemIcon>\n            <AddCircleOutlineIcon\n              color=\"secondary\"\n              onClick={navigateToAddDirectMessageChannelMembers}\n            />\n          </ListItemIcon>\n          {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <List component=\"div\">\n            {data?.channels.map((data: any) => (\n              <ListItem button key={data.id}>\n                <ChannelListMessageCounter channelId={data.id} />\n                <ListItemText\n                  primary={\n                    <React.Fragment>\n                      <Link\n                        className={classes.link}\n                        to={'/channel/' + data.name}\n                      >\n                        {data.user_channels[0]?.user.username}\n                      </Link>\n                    </React.Fragment>\n                  }\n                />\n                <OnlineUserStatus user={data.user_channels[0]?.user} />\n              </ListItem>\n            ))}\n          </List>\n        </Collapse>\n      </List>\n    </>\n  );\n};\n\nexport default DirectMessageUserList;\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { IconButton } from '@material-ui/core';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    [theme.breakpoints.down('md')]: {\n      // width: '100%',\n    },\n    [theme.breakpoints.up('md')]: {\n      // width: 'auto',\n    },\n  },\n}));\n\nconst Logout: React.FC = () => {\n  const classes = useStyles();\n  const { logout } = useAuth0();\n\n  return (\n    <>\n      <IconButton\n        color=\"primary\"\n        size=\"small\"\n        className={classes.button}\n        onClick={() => {\n          logout({\n            returnTo: process.env.REACT_APP_AUTH0_LOGOUT_URL,\n          });\n          window.localStorage.clear();\n        }}\n      >\n        <ExitToAppIcon />\n      </IconButton>\n    </>\n  );\n};\n\nexport default Logout;\n","import React, { useState } from 'react';\nimport { Alert } from '@material-ui/lab';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport {\n  useAddChannelMutation,\n  useInsertMessageMutation,\n  Channel_Type_Enum,\n} from '../../api/generated/graphql';\nimport Loader from '../shared/Loader';\nimport {\n  Button,\n  Checkbox,\n  Collapse,\n  FormControlLabel,\n  Grid,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  TextField,\n  Typography,\n  Snackbar,\n} from '@material-ui/core';\nimport { theme } from '../../theme/theme';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\nimport GroupAddOutlinedIcon from '@material-ui/icons/GroupAddOutlined';\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\nimport { useHistory } from 'react-router';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  nested: {\n    paddingLeft: theme.spacing(0),\n  },\n  form: {\n    flexGrow: 1,\n    margin: theme.spacing(2),\n    marginTop: theme.spacing(0),\n  },\n  checkbox: {\n    color: theme.palette.primary.dark,\n  },\n  submit: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst AddChannel: React.FC = () => {\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n  const [open, setOpen] = React.useState(false);\n  const [openAlert, setOpenAlert] = React.useState(true);\n  const [channelName, setChannelName] = useState('');\n  const [channelIsPrivate, setChannelIsPrivate] = useState(false);\n  const { user } = useAuth0();\n  const classes = useStyles();\n\n  const [addChannel, { data, loading, error }] = useAddChannelMutation();\n\n  const [\n    sendMessage,\n    { data: sendUpdateMessageData },\n  ] = useInsertMessageMutation();\n\n  const { user: userAuth0, isLoading: loadingAuth0 } = useAuth0();\n  let history = useHistory();\n\n  const setSnackbarPosition = () => {\n    switch (matches) {\n      case true:\n        return 'right';\n      case false:\n        return 'center';\n\n      default:\n        return 'right';\n    }\n  };\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  const handleAlert = () => {\n    setOpenAlert(!openAlert);\n  };\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!channelName) return;\n    setOpenAlert(true);\n\n    const dataAddChannel = await addChannel({\n      variables: {\n        channel: {\n          owner_id: userAuth0.sub,\n          name: channelName.toLocaleLowerCase(),\n          is_private: channelIsPrivate,\n          channel_type: Channel_Type_Enum.ChatMessage,\n        },\n      },\n    });\n\n    await sendMessage({\n      variables: {\n        message: {\n          user_id: 'admin',\n          text: `Welcome to channel ${dataAddChannel.data?.insert_channel?.returning[0]?.name}`,\n          channel_id: dataAddChannel.data?.insert_channel?.returning[0]?.id,\n        },\n      },\n    });\n\n    setOpen(false);\n    setChannelName('');\n\n    history.push(`/channel/${channelName.toLocaleLowerCase()}`);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setChannelName(e.target.value);\n  };\n\n  const handleIsPrivateChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setChannelIsPrivate(e.target.checked);\n  };\n\n  if (error) {\n    console.log('error mutation', error);\n  }\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <List className={classes.root}>\n      <ListItem button onClick={handleClick}>\n        <ListItemIcon>\n          {open ? <GroupAddIcon /> : <GroupAddOutlinedIcon />}\n        </ListItemIcon>\n        <ListItemText primary=\"Add Channel\" />\n        {open ? (\n          <RemoveCircleIcon fontSize=\"small\" />\n        ) : (\n          <AddCircle color=\"secondary\" fontSize=\"small\" />\n        )}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        {(loadingAuth0 || loading) && <Loader />}\n        <List component=\"div\">\n          {error && (\n            <ListItem className={classes.nested}>\n              <Snackbar\n                open={openAlert}\n                autoHideDuration={5000}\n                onClose={handleAlert}\n                anchorOrigin={{\n                  vertical: 'top',\n                  horizontal: setSnackbarPosition(),\n                }}\n              >\n                <Alert severity={'error'} onClose={handleAlert}>\n                  You can not use this name as it is already taken.\n                </Alert>\n              </Snackbar>\n            </ListItem>\n          )}\n          {data && (\n            <ListItem className={classes.nested}>\n              <Snackbar\n                open={openAlert}\n                autoHideDuration={5000}\n                onClose={handleAlert}\n                anchorOrigin={{\n                  vertical: 'top',\n                  horizontal: setSnackbarPosition(),\n                }}\n              >\n                <Alert severity={'success'} onClose={handleAlert}>\n                  Channel has been added.\n                </Alert>\n              </Snackbar>\n            </ListItem>\n          )}\n          <ListItem className={classes.nested}>\n            <Grid container>\n              <form\n                className={classes.form}\n                noValidate\n                autoComplete=\"off\"\n                onSubmit={handleSubmit}\n              >\n                <Grid item xs={12}>\n                  <TextField\n                    disabled={loadingAuth0 || loading}\n                    value={channelName}\n                    autoFocus={false}\n                    onChange={handleChange}\n                    autoComplete=\"off\"\n                    placeholder=\"Your channel name\"\n                    id=\"add-channel-input\"\n                    label=\"Add a new channel\"\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={channelIsPrivate}\n                        onChange={handleIsPrivateChange}\n                        color=\"secondary\"\n                        name=\"private\"\n                        className={classes.checkbox}\n                      />\n                    }\n                    label={\n                      <Typography variant=\"caption\" color=\"textSecondary\">\n                        Private Channel\n                      </Typography>\n                    }\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Button\n                    disabled={loadingAuth0 || loading}\n                    type=\"submit\"\n                    value=\"Submit\"\n                    endIcon={<AddCircle />}\n                    className={classes.submit}\n                    variant=\"outlined\"\n                  >\n                    Add new channel\n                  </Button>\n                </Grid>\n              </form>\n            </Grid>\n          </ListItem>\n        </List>\n      </Collapse>\n    </List>\n  );\n};\n\nexport default AddChannel;\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Box, Divider, Grid } from '@material-ui/core';\nimport UserStatus from './UserStatus';\nimport ChannelList from '../chat/ChannelList';\nimport DirectMessageUserList from '../chat/DirectMessageUserList';\nimport Logout from '../Logout';\nimport AddChannel from '../chat/AddChannel';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    [theme.breakpoints.up('sm')]: {\n      marginRight: theme.spacing(5),\n      marginLeft: theme.spacing(5),\n      marginTop: theme.spacing(0),\n      marginBottom: theme.spacing(5),\n    },\n    [theme.breakpoints.down('md')]: {\n      padding: theme.spacing(2),\n      margin: theme.spacing(0),\n      paddingTop: theme.spacing(2),\n    },\n    [theme.breakpoints.down('sm')]: {\n      padding: theme.spacing(1),\n      margin: theme.spacing(0),\n      paddingTop: theme.spacing(5),\n    },\n  },\n  treeView: {\n    marginRight: theme.spacing(0),\n    marginLeft: theme.spacing(0),\n    paddingRight: theme.spacing(0),\n  },\n  branding: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  logo: {\n    [theme.breakpoints.down('md')]: {\n      width: '150px',\n    },\n    [theme.breakpoints.up('md')]: {\n      width: '200px',\n    },\n  },\n}));\n\nconst SideBar: React.FC<any> = () => {\n  const { user } = useAuth0();\n  const classes = useStyles();\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        flex=\"1\"\n        className={classes.root}\n      >\n        <Grid container>\n          <Grid item xs={12} className={classes.branding}>\n            <img\n              alt=\"The Great Chicken Fest\"\n              src=\"/the-great-chicken-fest.svg\"\n              className={classes.logo}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <UserStatus user_id={user.sub} />\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <AddChannel />\n          <Box className={classes.treeView}>\n            <Divider />\n            <ChannelList />\n            <Divider />\n            <DirectMessageUserList user_id={user.sub} />\n            <Divider />\n            <Box\n              display=\"flex\"\n              justifyContent=\"flex-end\"\n              alignItems=\"flex-end\"\n              style={{ marginRight: '16px' }}\n            >\n              <Logout />\n            </Box>\n          </Box>\n        </Grid>\n      </Box>\n    </>\n  );\n};\n\nexport default SideBar;\n","import React from 'react';\nimport moment from 'moment';\nimport { ThreadMessage } from '../../../interfaces/message.interface';\nimport {\n  Avatar,\n  Badge,\n  Box,\n  Divider,\n  ListItem,\n  ListItemAvatar,\n  ListItemIcon,\n  Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  head: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    padding: theme.spacing(0),\n  },\n  root: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    padding: theme.spacing(2),\n  },\n  [theme.breakpoints.up('md')]: {\n    messageText: {\n      paddingBottom: '1rem',\n    },\n    reply: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n      color: '#ffffff',\n    },\n  },\n  [theme.breakpoints.down('md')]: {\n    messageText: {\n      fontSize: 14,\n      paddingBottom: '1rem',\n    },\n    reply: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n      color: '#ffffff',\n    },\n  },\n  [theme.breakpoints.down('sm')]: {\n    messageText: {\n      fontSize: 12,\n      paddingBottom: '1rem',\n    },\n    reply: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n      color: '#ffffff',\n    },\n  },\n  vspace: {\n    marginBottom: theme.spacing(1),\n  },\n  vspaceTop: {\n    marginBottom: theme.spacing(3),\n  },\n  vspaceBottom: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(0),\n  },\n  image: {\n    paddingBottom: '0.5rem',\n  },\n  avatar: {\n    backgroundColor: '#000000',\n    color: '#F57C00',\n  },\n}));\n\ninterface ThreadInfoProps {\n  messages: ThreadMessage[];\n  channelThread: any;\n  currentChannel: any;\n}\n\nconst ThreadInfo: React.FC<ThreadInfoProps> = ({\n  messages,\n  channelThread,\n  currentChannel,\n}) => {\n  const classes = useStyles();\n\n  const renderThreadInfo = (channelThread: any) => {\n    return (\n      <React.Fragment>\n        <Box>\n          <Typography variant=\"caption\">\n            <strong>Thread - {currentChannel.name} </strong>\n          </Typography>\n        </Box>\n        <Divider className={classes.vspaceTop} />\n        <ListItem key={channelThread.message.id} className={classes.head}>\n          <Box\n            display=\"flex\"\n            justifyContent=\"flex-start\"\n            alignItems=\"flex-start\"\n          >\n            <ListItemAvatar>\n              <ListItemIcon>\n                <Badge variant=\"dot\">\n                  {!channelThread.message.deleted ? (\n                    <Avatar className={classes.avatar}>\n                      {channelThread.message.user.username\n                        .substring(0, 2)\n                        .toUpperCase()}\n                    </Avatar>\n                  ) : (\n                    <Avatar\n                      alt=\"Message has been removed\"\n                      src={`${window.location.origin}/deleted.png`}\n                    />\n                  )}\n                </Badge>\n              </ListItemIcon>\n            </ListItemAvatar>\n          </Box>\n          <Box component=\"div\" display=\"flex\" flexDirection=\"column\" flex=\"1\">\n            <Box\n              display=\"flex\"\n              justifyContent=\"space-between\"\n              alignItems=\"flex-start\"\n            >\n              <Box\n                display=\"flex\"\n                justifyContent=\"flex-start\"\n                alignItems=\"flex-start\"\n              >\n                <Typography variant=\"caption\">\n                  {!channelThread.message.deleted ? (\n                    <>\n                      <strong>{channelThread.message.user.username} </strong>\n                      <i>{moment(channelThread.message.timestamp).fromNow()}</i>\n                    </>\n                  ) : (\n                    <strong>Oh sorry it seems...</strong>\n                  )}\n                </Typography>\n                <Divider className={classes.vspace} />\n              </Box>\n            </Box>\n            <Typography component=\"div\" className={classes.messageText}>\n              {channelThread.message.text}\n            </Typography>\n          </Box>\n        </ListItem>\n        <Box className={classes.vspaceBottom}>\n          <Typography component=\"div\" className={classes.reply}>\n            {messages?.length}\n            {messages?.length === 1 ? ' reply' : ' replies'}\n          </Typography>\n        </Box>\n      </React.Fragment>\n    );\n  };\n\n  return <>{channelThread ? renderThreadInfo(channelThread) : ''}</>;\n};\n\nexport default ThreadInfo;\n","import React from 'react';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport { IconButton, CircularProgress } from '@material-ui/core';\nimport { useDeleteThreadMessageMutation } from '../../../api/generated/graphql';\nimport { Alert } from '@material-ui/lab';\n\ninterface ThreadDeleteMessageProps {\n  messageId: number;\n}\n\nconst ThreadDeleteMessage: React.FC<ThreadDeleteMessageProps> = ({\n  messageId,\n}) => {\n  const [\n    deleteThreadMessageMutation,\n    { data, error },\n  ] = useDeleteThreadMessageMutation();\n\n  const handleDelete = (messageId: number) => {\n    deleteThreadMessageMutation({\n      variables: {\n        message_id: messageId,\n      },\n    });\n  };\n\n  if (\n    error ||\n    (data?.delete_channel_thread_message?.affected_rows !== undefined &&\n      data?.delete_channel_thread_message?.affected_rows === 0)\n  ) {\n    return <Alert severity=\"error\">Message could not get deleted...</Alert>;\n  }\n\n  return (\n    <IconButton onClick={() => handleDelete(messageId)}>\n      <HighlightOffIcon color=\"primary\" fontSize=\"small\" />\n    </IconButton>\n  );\n};\n\nexport default ThreadDeleteMessage;\n","import React from 'react';\nimport moment from 'moment';\nimport { ThreadMessage } from '../../../interfaces/message.interface';\nimport ThreadInfo from './ThreadInfo';\nimport ThreadDeleteMessage from './ThreadDeleteMessage';\nimport {\n  Avatar,\n  Badge,\n  Box,\n  Divider,\n  ListItem,\n  ListItemAvatar,\n  ListItemIcon,\n  Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme) => ({\n  head: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    padding: theme.spacing(0),\n  },\n  root: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    padding: theme.spacing(2),\n  },\n  [theme.breakpoints.up('md')]: {\n    messageText: {\n      paddingBottom: '1rem',\n    },\n    reply: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n      color: '#ffffff',\n    },\n  },\n  [theme.breakpoints.down('md')]: {\n    messageText: {\n      fontSize: 14,\n      paddingBottom: '1rem',\n    },\n    reply: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n      color: '#ffffff',\n    },\n  },\n  [theme.breakpoints.down('sm')]: {\n    messageText: {\n      fontSize: 12,\n      paddingBottom: '1rem',\n    },\n    reply: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n      color: '#ffffff',\n    },\n  },\n  vspace: {\n    marginBottom: theme.spacing(1),\n  },\n  vspaceTop: {\n    marginBottom: theme.spacing(3),\n  },\n  vspaceBottom: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(0),\n  },\n  image: {\n    paddingBottom: '0.5rem',\n  },\n  avatar: {\n    backgroundColor: '#000000',\n    color: '#F57C00',\n  },\n}));\n\ninterface ThreadMessageListProps {\n  messages: ThreadMessage[];\n  user: any;\n  channelThread: any;\n  currentChannel: any;\n}\n\nconst ThreadMessageList: React.FC<ThreadMessageListProps> = ({\n  messages,\n  user,\n  channelThread,\n  currentChannel,\n}) => {\n  const classes = useStyles();\n\n  const renderMessage = (message: ThreadMessage) => {\n    return (\n      <ListItem key={message.id} className={classes.root}>\n        <Box display=\"flex\" justifyContent=\"flex-start\" alignItems=\"flex-start\">\n          <ListItemAvatar>\n            <ListItemIcon>\n              <Badge variant=\"dot\">\n                <Avatar className={classes.avatar}>\n                  {message.user.username.substring(0, 2).toUpperCase()}\n                </Avatar>\n              </Badge>\n            </ListItemIcon>\n          </ListItemAvatar>\n        </Box>\n        <Box component=\"div\" display=\"flex\" flexDirection=\"column\" flex=\"1\">\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"flex-start\"\n          >\n            <Box\n              display=\"flex\"\n              justifyContent=\"flex-start\"\n              alignItems=\"flex-start\"\n            >\n              <Typography variant=\"caption\">\n                <strong>{message.user.username} </strong>\n                <i>{moment(message.timestamp).fromNow()}</i>\n              </Typography>\n              <Divider className={classes.vspace} />\n            </Box>\n            <Box>\n              <Typography variant=\"caption\">\n                {user.sub === message.user.auth0_user_id ? (\n                  <ThreadDeleteMessage messageId={message.id} />\n                ) : (\n                  ''\n                )}\n              </Typography>\n            </Box>\n          </Box>\n          <Typography component=\"div\" className={classes.messageText}>\n            {message.message}\n          </Typography>\n          {message.image ? (\n            <Box className={classes.image}>\n              <img src={message.image} />\n            </Box>\n          ) : (\n            ''\n          )}\n          <Divider className={classes.vspace} />\n        </Box>\n      </ListItem>\n    );\n  };\n\n  return (\n    <>\n      <ThreadInfo\n        messages={messages}\n        channelThread={channelThread}\n        currentChannel={currentChannel}\n      />\n      {messages\n        ? [...messages]\n            ?.reverse()\n            ?.map((message: ThreadMessage) => renderMessage(message))\n        : ''}\n    </>\n  );\n};\n\nexport default ThreadMessageList;\n","import React, { useState } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { GiphyFetch } from '@giphy/js-fetch-api';\nimport { giphyState } from '../../atom';\nimport { Box, TextField } from '@material-ui/core';\nimport { Carousel } from '@giphy/react-components';\nimport { IGif } from '@giphy/js-types';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  giphySearchInput: {\n    display: 'flex',\n    flex: 1,\n    paddingBottom: theme.spacing(2),\n    marginTop: theme.spacing(1),\n    [theme.breakpoints.down('md')]: {\n      marginTop: theme.spacing(1),\n    },\n  },\n  giphyCarousel: {\n    display: 'flex',\n    padding: theme.spacing(3),\n  },\n}));\n\nconst giphyFetch = new GiphyFetch('gNDqYmKTip2mgTRqQbS5BwslaLM8Jdq0');\n\ninterface GiphyCarouselProps {\n  hideGiphyCarousel: Function;\n}\n\nconst GiphyCarousel: React.FC<GiphyCarouselProps> = ({ hideGiphyCarousel }) => {\n  const classes = useStyles();\n  const [gif, setGif] = useRecoilState<IGif | null>(giphyState);\n  const [giphySearchString, setGiphySearchString] = useState('');\n\n  const onGifClick = (\n    gif: IGif,\n    e: React.SyntheticEvent<HTMLElement, Event>,\n  ) => {\n    e.preventDefault();\n    setGif(gif);\n    hideGiphyCarousel();\n  };\n\n  const handleOnChange = (ev: any) => {\n    setGiphySearchString(ev.target.value);\n  };\n\n  const fetchGifs = (offset: number) => {\n    return giphySearchString\n      ? giphyFetch.search(giphySearchString, { offset, limit: 5 })\n      : giphyFetch.trending({ offset, limit: 5 });\n  };\n\n  return (\n    <>\n      <Box display=\"flex\" flexDirection=\"column\" style={{ maxWidth: '100%' }}>\n        <Carousel\n          key={giphySearchString}\n          fetchGifs={fetchGifs}\n          onGifClick={onGifClick}\n          gifHeight={50}\n          gutter={6}\n        />\n        <TextField\n          className={classes.giphySearchInput}\n          size=\"small\"\n          label=\"Search giphy ...\"\n          variant=\"standard\"\n          onChange={handleOnChange}\n        />\n      </Box>\n    </>\n  );\n};\n\nexport default GiphyCarousel;\n","import React from 'react';\nimport clsx from 'clsx';\nimport {\n  Box,\n  Container,\n  Drawer,\n  IconButton,\n  makeStyles,\n  Toolbar,\n} from '@material-ui/core';\nimport SideBar from './SideBar';\nimport ArrowForwardIos from '@material-ui/icons/ArrowForwardIos';\nimport { theme } from '../../theme/theme';\n\nconst drawerWidth = '100%';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  toolbar: {\n    [theme.breakpoints.up('md')]: {\n      paddingTop: theme.spacing(0),\n      paddingBottom: theme.spacing(5),\n    },\n    [theme.breakpoints.down('md')]: {\n      paddingTop: theme.spacing(0),\n      paddingLeft: theme.spacing(0),\n      paddingRight: theme.spacing(0),\n      paddingBottom: theme.spacing(2),\n    },\n    borderTop: 1,\n    borderTopStyle: 'solid',\n    borderTopColor: theme.palette.primary.dark,\n  },\n  menuButton: {\n    width: 30,\n    height: 30,\n    marginLeft: theme.spacing(3),\n    '& .MuiIconButton-label': {\n      marginLeft: theme.spacing(1),\n    },\n    justifyContent: 'flex-end',\n    marginTop: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  menuButtonHidden: {\n    display: 'none',\n  },\n  drawerPaper: {\n    height: '100vh',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.easeInOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: drawerWidth,\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  fab: {\n    margin: theme.spacing(2),\n  },\n  giphyImage: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\ninterface MenuBarDrawerProps {\n  open: boolean;\n  handleDrawerClose: any;\n}\n\nconst MenuBarDrawer: React.FC<MenuBarDrawerProps> = ({\n  open,\n  handleDrawerClose,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Drawer\n      variant=\"temporary\"\n      elevation={10}\n      anchor=\"left\"\n      classes={{\n        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n      }}\n      open={open}\n    >\n      <Toolbar className={classes.toolbar}>\n        <Box\n          display=\"flex\"\n          justifyContent=\"space-between\"\n          flexDirection=\"column\"\n          width={1}\n        >\n          <Box\n            display=\"flex\"\n            justifyContent=\"flex-start\"\n            alignItems=\"center\"\n            style={{\n              position: 'fixed',\n              width: '100%',\n              top: 0,\n            }}\n          >\n            <IconButton\n              aria-label=\"open drawer\"\n              onClick={handleDrawerClose}\n              color=\"inherit\"\n              className={clsx(classes.menuButton, open)}\n            >\n              <ArrowForwardIos />\n            </IconButton>\n          </Box>\n          <SideBar />\n        </Box>\n      </Toolbar>\n    </Drawer>\n  );\n};\n\nexport default MenuBarDrawer;\n","import React from 'react';\nimport { theme } from '../../theme/theme';\nimport { Box, Chip, LinearProgress, Typography } from '@material-ui/core';\nimport FaceIcon from '@material-ui/icons/Face';\nimport GroupIcon from '@material-ui/icons/Group';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  text: {\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '.875rem',\n    },\n  },\n}));\n\ninterface ResultGraphProps {\n  answerId: number;\n  userVote: number | undefined;\n  pollVotes: number;\n  text: string;\n  totalVotes: any;\n}\n\nconst ResultGraph: React.FC<ResultGraphProps> = ({\n  answerId,\n  userVote,\n  pollVotes,\n  text,\n  totalVotes,\n}) => {\n  const classes = useStyles();\n  const LinearProgressWithLabel = (props: any) => {\n    return (\n      <Box\n        width=\"100%\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        flexDirection=\"row\"\n      >\n        <Box width=\"100%\" mr={1}>\n          <LinearProgress\n            id={answerId}\n            color={userVote === answerId ? 'secondary' : 'primary'}\n            variant=\"determinate\"\n            {...props}\n          />\n        </Box>\n        <Box\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          flexDirection=\"row-reverse\"\n        >\n          <Chip\n            size=\"small\"\n            color={userVote === answerId ? 'secondary' : 'primary'}\n            variant={userVote === answerId ? 'default' : 'outlined'}\n            label={`${pollVotes} / ${props.value.toFixed(1)}%`}\n            icon={userVote === answerId ? <FaceIcon /> : <GroupIcon />}\n          />\n        </Box>\n      </Box>\n    );\n  };\n\n  return (\n    <Box\n      key={answerId}\n      width=\"100%\"\n      display=\"flex\"\n      alignItems=\"flex-start\"\n      flexDirection=\"column\"\n      mb={2}\n    >\n      <Typography variant=\"body1\" className={classes.text}>\n        {text}\n      </Typography>\n      <LinearProgressWithLabel\n        value={(100 * pollVotes) / totalVotes}\n        answerid={answerId}\n      />\n    </Box>\n  );\n};\n\nexport default ResultGraph;\n","import React, { useEffect } from 'react';\nimport { Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  pollSubmit: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\ninterface VoteButtonProps {\n  enabled: boolean;\n}\n\nconst VoteButton: React.FC<VoteButtonProps> = ({ enabled }) => {\n  const classes = useStyles();\n  return (\n    <>\n      <Button\n        type=\"submit\"\n        variant=\"contained\"\n        color=\"secondary\"\n        className={classes.pollSubmit}\n        disabled={enabled}\n      >\n        {enabled ? 'Choose Your Answer' : 'Vote'}\n      </Button>\n    </>\n  );\n};\n\nexport default VoteButton;\n","import React, { useEffect } from 'react';\nimport { Chip } from '@material-ui/core';\n\ninterface ShowTotalVotesProps {\n  totalVotes: number;\n}\n\nconst ShowTotalVotes: React.FC<ShowTotalVotesProps> = ({ totalVotes }) => {\n  return (\n    <>\n      <Chip\n        color=\"primary\"\n        variant=\"outlined\"\n        size=\"small\"\n        label={`Total votes: ${totalVotes}`}\n        style={{ marginLeft: 8 }}\n      />\n    </>\n  );\n};\n\nexport default ShowTotalVotes;\n","import React, { useEffect } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { currentChannelState } from '../../atom.js';\nimport ResultGraph from './ResultGraph';\nimport VoteButton from './VoteButton';\nimport ShowTotalVotes from './ShowTotalVotes';\nimport Loader from '../shared/Loader';\nimport {\n  Box,\n  Radio,\n  RadioGroup,\n  FormControlLabel,\n  FormControl,\n  Paper,\n  Typography,\n} from '@material-ui/core';\nimport {\n  useWatchChannelPollQuestionSubscription,\n  useWatchPollAnswerVotesSubscription,\n  useWatchCheckUserHasVotedSubscription,\n  useSetPollAnswerVoteMutation,\n  useSetUserVotePollQuestionMutation,\n} from '../../api/generated/graphql';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  pollCard: {\n    width: '100%',\n    padding: theme.spacing(5),\n    [theme.breakpoints.down('md')]: {\n      transform: 'scale(50%)',\n      padding: theme.spacing(2),\n      minWidth: '100%',\n    },\n  },\n  text: {\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '.875rem',\n    },\n  },\n}));\n\nconst PublishChannelPolling: React.FC = () => {\n  const classes = useStyles();\n  const { user } = useAuth0();\n  const [currentChannel, setCurrentChannelState] = useRecoilState(\n    currentChannelState,\n  );\n  const [selectedPollAnswerId, setSelectedPollAnswerId] = React.useState<\n    number | null\n  >(null);\n\n  const {\n    data: getPollAnswerVotes,\n    loading: getPollAnswerVotesLoading,\n  } = useWatchPollAnswerVotesSubscription({\n    variables: {\n      pollAnswerId: selectedPollAnswerId ?? 0,\n    },\n  });\n\n  const { data, loading, error } = useWatchChannelPollQuestionSubscription({\n    variables: {\n      channelId: currentChannel.id,\n    },\n  });\n\n  const [setPollAnswerVoteMutation] = useSetPollAnswerVoteMutation();\n\n  const totalVotes = () => {\n    let numbers: Array<any> = data?.getChannelPoll[0]?.poll_question\n      ?.poll_anwers!;\n    const count: any = [];\n    if (numbers !== undefined) {\n      numbers.map((num: any) => count.push(num.votes));\n      const result = count.reduce((a: number, b: number) => a + b);\n      return result;\n    } else {\n      return <Loader />;\n    }\n  };\n\n  const {\n    data: userVote,\n    loading: userVoteLoading,\n  } = useWatchCheckUserHasVotedSubscription({\n    variables: {\n      pollQuestionId: data?.getChannelPoll[0]?.poll_question?.id,\n      auth0UserId: user.sub,\n    },\n  });\n\n  const [setUserVotePollQuestionMutation] = useSetUserVotePollQuestionMutation({\n    variables: {\n      userName: user.username,\n      auth0UserId: user.sub,\n      pollQuestionId: data?.getChannelPoll[0]?.poll_question?.id,\n      pollAnswerId: selectedPollAnswerId,\n    },\n  });\n\n  const handleChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedPollAnswerId(parseInt(e.target.value));\n  };\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (selectedPollAnswerId === null) return;\n\n    console.log('inside', selectedPollAnswerId);\n\n    let currentPollAnswerVotes = getPollAnswerVotes?.pollAnswerVotes[0].votes;\n\n    if (currentPollAnswerVotes !== undefined) {\n      currentPollAnswerVotes++;\n    }\n\n    if (currentPollAnswerVotes === undefined) return;\n    await setPollAnswerVoteMutation({\n      variables: {\n        pollAnswerId: selectedPollAnswerId,\n        newVote: currentPollAnswerVotes,\n      },\n    });\n\n    await setUserVotePollQuestionMutation({\n      variables: {\n        userName: user.nickname,\n        auth0UserId: user.sub,\n        pollQuestionId: data?.getChannelPoll[0]?.poll_question?.id,\n        pollAnswerId: selectedPollAnswerId,\n      },\n    });\n  };\n\n  if (loading || error || getPollAnswerVotesLoading || userVoteLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      {userVote?.user_votes?.length ? (\n        <Paper className={classes.pollCard}>\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            flexDirection=\"row\"\n            mb={3}\n          >\n            <Box>\n              <Typography variant=\"caption\">Anonymous poll</Typography>\n              {data?.getChannelPoll.map((channelPoll) => (\n                <Typography\n                  key={channelPoll.id}\n                  color=\"secondary\"\n                  variant=\"h2\"\n                  style={{ marginTop: 0 }}\n                >\n                  {channelPoll?.poll_question?.text}\n                </Typography>\n              ))}\n            </Box>\n            <ShowTotalVotes totalVotes={totalVotes()} />\n          </Box>\n\n          {data?.getChannelPoll[0]?.poll_question?.poll_anwers\n            .sort((a, b) => (a.id > b.id ? 1 : -1))\n            .map((pollVotes) => (\n              <ResultGraph\n                key={pollVotes.id}\n                answerId={pollVotes.id}\n                userVote={userVote?.user_votes[0]?.poll_answer_id}\n                pollVotes={pollVotes.votes}\n                text={pollVotes.text}\n                totalVotes={totalVotes()}\n              />\n            ))}\n        </Paper>\n      ) : (\n        <Paper className={classes.pollCard}>\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"flex-end\"\n            flexDirection=\"row\"\n            mb={3}\n          >\n            <Box>\n              <Typography variant=\"caption\">Anonymous poll</Typography>\n              <Typography variant=\"h2\" style={{ marginTop: 0 }}>\n                {data?.getChannelPoll[0]\n                  ? data?.getChannelPoll[0].poll_question?.text\n                  : 'no value'}\n              </Typography>\n            </Box>\n            <ShowTotalVotes totalVotes={totalVotes()} />\n          </Box>\n\n          <form onSubmit={handleSubmit}>\n            <FormControl component=\"fieldset\">\n              <RadioGroup\n                aria-label=\"poll\"\n                name=\"poll\"\n                value={selectedPollAnswerId}\n                onChange={handleChange}\n              >\n                {data?.getChannelPoll[0]?.poll_question?.poll_anwers\n                  .sort((a, b) => (a.id > b.id ? 1 : -1))\n                  .map((pollAnswer) => (\n                    <FormControlLabel\n                      key={pollAnswer.id}\n                      value={pollAnswer.id}\n                      control={\n                        <Radio\n                          value={pollAnswer.id}\n                          checked={selectedPollAnswerId === pollAnswer.id}\n                          onChange={handleChange}\n                        />\n                      }\n                      label={\n                        <Typography variant=\"body2\" className={classes.text}>\n                          {pollAnswer.text}\n                        </Typography>\n                      }\n                    />\n                  ))}\n              </RadioGroup>\n              <VoteButton enabled={false} />\n            </FormControl>\n          </form>\n        </Paper>\n      )}\n    </>\n  );\n};\n\nexport default PublishChannelPolling;\n","import React from 'react';\nimport { Badge, Box, Button, Popover } from '@material-ui/core';\nimport { useWatchChannelHasActivePollSubscription } from '../../api/generated/graphql';\nimport PopupState, { bindPopover } from 'material-ui-popup-state';\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\nimport Loader from '../shared/Loader';\nimport PublishChannelPolling from '../adminPollings/PublishChannelPolling';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { bindTrigger } from 'material-ui-popup-state/hooks';\nimport Logo from '../shared/Logo';\n\nconst useStyles = makeStyles((theme) => ({\n  popoverRoot: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  popupWidth: {\n    width: '40vw',\n    minWidth: '40vw',\n    maxWidth: '50vw',\n    padding: theme.spacing(5),\n    [theme.breakpoints.up('sm')]: {\n      padding: theme.spacing(3),\n      minWidth: '50vw',\n      maxWidth: '60vw',\n      width: '50vw',\n    },\n    [theme.breakpoints.down('sm')]: {\n      padding: theme.spacing(3),\n      minWidth: '90vw',\n      width: '90vw',\n    },\n  },\n  badge: {\n    backgroundColor: '#44b700',\n    color: '#44b700',\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n    '&::after': {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      borderRadius: '50%',\n      animation: '$ripple 1.2s infinite ease-in-out',\n      border: '1px solid currentColor',\n      content: '\"\"',\n    },\n  },\n  '@keyframes ripple': {\n    '0%': {\n      transform: 'scale(.8)',\n      opacity: 1,\n    },\n    '100%': {\n      transform: 'scale(2.4)',\n      opacity: 0,\n    },\n  },\n}));\n\ninterface PollPopUpProps {\n  channelId: number;\n}\n\nconst PollPopUp: React.FC<PollPopUpProps> = ({ channelId }) => {\n  const classes = useStyles();\n  const { data, loading } = useWatchChannelHasActivePollSubscription({\n    variables: {\n      currentChannelId: channelId,\n    },\n  });\n\n  if (loading) {\n    return <Loader />;\n  }\n  return (\n    <>\n      {data?.poll_questions?.length === 1 ? (\n        <PopupState variant=\"popover\" popupId=\"pollingPopOver\">\n          {(popupState) => (\n            <>\n              <Badge variant=\"dot\" classes={{ badge: classes.badge }}>\n                <HowToVoteIcon color=\"primary\" {...bindTrigger(popupState)} />\n              </Badge>\n              <Popover\n                anchorReference={'none'} // set popup center window\n                classes={{\n                  root: classes.popoverRoot,\n                }}\n                {...bindPopover(popupState)}\n              >\n                <Box\n                  display=\"flex\"\n                  justifyContent=\"center\"\n                  alignItems=\"center\"\n                  flexDirection=\"column\"\n                  className={classes.popupWidth}\n                >\n                  <Logo />\n\n                  <PublishChannelPolling />\n                  <Button\n                    aria-label=\"close\"\n                    onClick={popupState.close}\n                    style={{ maxWidth: '10vw' }}\n                  >\n                    Close\n                  </Button>\n                </Box>\n              </Popover>\n            </>\n          )}\n        </PopupState>\n      ) : (\n        false\n      )}\n    </>\n  );\n};\n\nexport default PollPopUp;\n","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Backdrop } from '@material-ui/core';\nimport SpeedDial from '@material-ui/lab/SpeedDial';\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\nimport AddGif from '@material-ui/icons/Gif';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport People from '@material-ui/icons/People';\nimport Person from '@material-ui/icons/Person';\nimport EnhancedEncryptionOutlinedIcon from '@material-ui/icons/EnhancedEncryptionOutlined';\nimport PollPopUp from '../../components/adminPollings/PollPopup';\nimport { unstable_batchedUpdates } from 'react-dom';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      transform: 'translateZ(0)',\n      flexGrow: 1,\n      [theme.breakpoints.up('md')]: {\n        '& #ChickenfestNavi-action-4': {\n          display: 'none',\n        },\n      },\n    },\n    speedDial: {\n      position: 'absolute',\n      '&.MuiSpeedDial-directionUp, &.MuiSpeedDial-directionLeft': {\n        bottom: '-10px',\n        right: theme.spacing(1),\n      },\n      [theme.breakpoints.down('sm')]: {\n        marginRight: theme.spacing(0),\n        marginBottom: '12px',\n        height: 38,\n      },\n      [theme.breakpoints.up('md')]: {\n        marginRight: theme.spacing(0),\n        marginBottom: '75px',\n      },\n    },\n    action: {\n      backgroundColor: '#0f1448',\n    },\n    backdrop: {\n      [theme.breakpoints.up('md')]: {},\n    },\n  }),\n);\n\ninterface MobileMenuProps {\n  nickname: string;\n  channelName: string;\n  isPrivate: boolean;\n  // pollQuestion: string;\n  channelId: number;\n  handleDrawerOpen: () => void;\n  handleGiphyClick: () => void;\n}\n\nconst MobileMenu: React.FC<MobileMenuProps> = ({\n  nickname,\n  channelName,\n  isPrivate,\n  // pollQuestion,\n  channelId,\n  handleDrawerOpen,\n  handleGiphyClick,\n}) => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [hidden, setHidden] = React.useState(false);\n  const actions = [\n    {\n      icon: isPrivate ? (\n        <EnhancedEncryptionOutlinedIcon color=\"secondary\" />\n      ) : (\n        <People style={{ color: '#4CAF50' }} />\n      ),\n      type: 'channel',\n      state: true,\n      name: `${channelName}`,\n    },\n    { icon: <Person />, type: 'user', name: `${nickname}` },\n    {\n      icon: <PollPopUp channelId={channelId} />,\n      type: 'poll',\n      state: true,\n      name: 'Admin Polling',\n    },\n    {\n      icon: <AddGif onClick={handleGiphyClick} />,\n      type: 'giphy',\n      state: true,\n      name: `+Giphy`,\n    },\n    {\n      icon: <MenuIcon onClick={handleDrawerOpen} />,\n      type: 'menu',\n      state: true,\n      name: `Menu`,\n    },\n  ];\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  return (\n    <>\n      <div className={classes.root}>\n        <SpeedDial\n          ariaLabel=\"Chickenfest Navi\"\n          className={classes.speedDial}\n          hidden={hidden}\n          icon={<SpeedDialIcon />}\n          onClose={handleClose}\n          onOpen={handleOpen}\n          open={open}\n          direction=\"up\"\n        >\n          {actions.map((action) => (\n            <SpeedDialAction\n              tooltipOpen\n              key={action.type}\n              icon={action.icon}\n              tooltipTitle={action.name}\n              onClick={(e) => {\n                handleClose();\n              }}\n              className={classes.action}\n            />\n          ))}\n        </SpeedDial>\n      </div>\n      <Backdrop open={open} className={classes.backdrop} />\n    </>\n  );\n};\n\nexport default MobileMenu;\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport clsx from 'clsx';\nimport { theme } from '../../theme/theme';\nimport { useRecoilState } from 'recoil';\nimport { currentChannelState } from '../../atom';\nimport { Box } from '@material-ui/core';\nimport GiphyCarousel from './GiphyCarousel';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport MenuBarDrawer from './MenuBarDrawer';\nimport MobileMenu from '../chat/MobileMenu';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst drawerWidth = '100%';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  toolbar: {\n    [theme.breakpoints.up('md')]: {\n      paddingTop: theme.spacing(5),\n      paddingBottom: theme.spacing(3),\n    },\n    [theme.breakpoints.down('md')]: {\n      paddingLeft: theme.spacing(1),\n      paddingRight: theme.spacing(1),\n      paddingTop: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n    },\n    borderTop: 1,\n    borderTopStyle: 'solid',\n    borderTopColor: theme.palette.primary.dark,\n  },\n  appBar: {\n    backgroundColor: theme.palette.background.default,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginTop: theme.spacing(5),\n    flex: '1',\n  },\n  menuButtonHidden: {\n    display: 'none',\n  },\n  drawerPaper: {\n    height: '100vh',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.easeInOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: drawerWidth,\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  fab: {\n    margin: theme.spacing(2),\n  },\n  giphyImage: {\n    padding: theme.spacing(1),\n    marginTop: theme.spacing(2),\n  },\n  popoverRoot: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n}));\n\ninterface MenuBarProps {\n  children: any;\n  channelId: number;\n}\n\nconst MenuBar: React.FC<MenuBarProps> = ({ children, channelId }) => {\n  const { user } = useAuth0();\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n  const [currentChannel, setCurrentChannel] = useRecoilState<any>(\n    currentChannelState,\n  );\n  const [open, setOpen] = React.useState(false); // Sidebar default state\n\n  const [showGiphyCarousel, setShowGiphyCarousel] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handleGiphyClick = () => {\n    setShowGiphyCarousel(!showGiphyCarousel);\n  };\n\n  const hideGiphyCarousel = () => {\n    setShowGiphyCarousel(false);\n  };\n\n  return (\n    <>\n      {children}\n      <MobileMenu\n        nickname={user.nickname}\n        channelName={currentChannel.name}\n        isPrivate={currentChannel?.is_private}\n        handleDrawerOpen={handleDrawerOpen}\n        handleGiphyClick={handleGiphyClick}\n        channelId={channelId}\n      />\n\n      <Box\n        style={{ display: showGiphyCarousel ? 'block' : 'none' }}\n        className={classes.giphyImage}\n        order={1}\n        flex=\"1\"\n        justifyContent=\"flex-start\"\n        alignItems=\"center\"\n      >\n        <GiphyCarousel hideGiphyCarousel={() => hideGiphyCarousel()} />\n      </Box>\n\n      <MenuBarDrawer open={open} handleDrawerClose={handleDrawerClose} />\n    </>\n  );\n};\n\nexport default MenuBar;\n","import React, { useState } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { TextField, Button, Box } from '@material-ui/core';\nimport { theme } from '../../../theme/theme';\nimport Icon from '@material-ui/core/Icon';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport {\n  useInsertChannelThreadMessageMutation,\n  useSendTypingEventMutation,\n} from '../../../api/generated/graphql';\nimport { useRecoilState } from 'recoil';\nimport { giphyState, deletedMessageState } from '../../../atom';\nimport { IGif } from '@giphy/js-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GiphyCarousel from '../../shared/GiphyCarousel';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  giphyVisible: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    justifyContent: 'flex-start',\n  },\n  giphyHidden: {\n    display: 'none',\n    marginTop: theme.spacing(0),\n  },\n  giphyImage: {\n    marginTop: theme.spacing(0),\n  },\n  form: {\n    display: 'flex',\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(8),\n    flexDirection: 'column',\n    flexGrow: 1,\n    [theme.breakpoints.down('md')]: {\n      marginTop: theme.spacing(0.2),\n    },\n    [theme.breakpoints.up('md')]: {\n      marginTop: theme.spacing(0),\n    },\n  },\n  messageInput: {\n    [theme.breakpoints.down('md')]: {\n      fontSize: '.9rem',\n    },\n  },\n  messageButton: {\n    [theme.breakpoints.down('sm')]: {\n      display: 'none',\n    },\n    [theme.breakpoints.up('md')]: {\n      size: 'large',\n      width: '25%',\n    },\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(0),\n    backgroundColor: theme.palette.primary.dark,\n  },\n  image: {\n    [theme.breakpoints.up('md')]: {\n      maxHeight: 55,\n    },\n    [theme.breakpoints.down('md')]: {\n      maxHeight: 40,\n    },\n    paddingRight: theme.spacing(1),\n  },\n}));\n\ninterface ThreadMessageInputProps {\n  channelId: number;\n  channelThreadId: number | undefined;\n}\n\nconst ThreadMessageInput: React.FC<ThreadMessageInputProps> = (props) => {\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n\n  const setTextFieldSize = () => {\n    switch (matches) {\n      case true:\n        return 'medium';\n      case false:\n        return 'small';\n\n      default:\n        return 'small';\n    }\n  };\n\n  const setButtonSize = () => {\n    switch (matches) {\n      case true:\n        return 'large';\n      case false:\n        return 'small';\n\n      default:\n        return 'small';\n    }\n  };\n\n  const { user } = useAuth0();\n  const [text, setText] = useState('');\n  const [gif, setGif] = useRecoilState<IGif | null>(giphyState);\n  const [deletedMessage, setdeletedMessage] = useRecoilState<boolean>(\n    deletedMessageState,\n  );\n\n  const [showGiphyCarousel, setShowGiphyCarousel] = React.useState(false);\n\n  const channelId = props.channelId;\n\n  const [\n    sendTypingEventMutation,\n    { data, loading, error },\n  ] = useSendTypingEventMutation({\n    variables: {\n      user_id: user.sub,\n      channel_id: channelId,\n    },\n  });\n\n  const handleTyping = (text: string) => {\n    const textLength = text.length;\n    if ((textLength !== 0 && textLength % 5 === 0) || textLength === 1) {\n      sendTypingEventMutation();\n    }\n    setText(text);\n  };\n\n  const [\n    sendMessage,\n    { data: sendUpdateMessageData },\n  ] = useInsertChannelThreadMessageMutation();\n\n  const handleSubmit = async (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    if (text === '' && gif === null) {\n      return;\n    }\n\n    if (text.length > 2000) {\n      alert('Your text limit has reached the limit of 2000 characters');\n      return;\n    }\n\n    if (props.channelThreadId === undefined) {\n      return;\n    }\n\n    await sendMessage({\n      variables: {\n        channel_thread_id: props.channelThreadId,\n        message: text,\n        image: gif?.images?.fixed_width_small?.url,\n        user_id: user.sub,\n      },\n    });\n\n    setText('');\n    setGif(null);\n    setdeletedMessage(false);\n  };\n\n  const hideGiphyCarousel = () => {\n    setShowGiphyCarousel(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Box className={gif ? classes.giphyImage : ''}>\n        {gif && (\n          <img\n            className={classes.image}\n            src={gif?.images?.fixed_width_small?.url}\n            onClick={() => setGif(null)}\n          />\n        )}\n      </Box>\n      <Box>\n        <Box\n          className={\n            showGiphyCarousel ? classes.giphyVisible : classes.giphyHidden\n          }\n          order={1}\n        >\n          <GiphyCarousel hideGiphyCarousel={() => hideGiphyCarousel()} />\n        </Box>\n      </Box>\n      <form\n        noValidate\n        autoComplete=\"off\"\n        className={classes.form}\n        onSubmit={handleSubmit}\n      >\n        <TextField\n          value={text}\n          autoFocus={false}\n          onChange={(e) => {\n            handleTyping(e.target.value);\n          }}\n          size={setTextFieldSize()}\n          variant=\"outlined\"\n          color=\"secondary\"\n          autoComplete=\"off\"\n          placeholder=\"Type your message here ...\"\n          id={`chat-message-input-${props.channelThreadId}`}\n          label={'Crackle your message here ...'}\n          // fullWidth\n          InputProps={{\n            classes: {\n              input: classes.messageInput,\n            },\n          }}\n          InputLabelProps={{\n            className: classes.messageInput,\n          }}\n        />\n\n        <Button\n          id={`chat-message-button-${props.channelThreadId}`}\n          size={setButtonSize()}\n          variant=\"contained\"\n          endIcon={<Icon>send</Icon>}\n          className={classes.messageButton}\n          type=\"submit\"\n        >\n          Send\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default ThreadMessageInput;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Grid, List } from '@material-ui/core';\nimport { Box } from '@material-ui/core';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useRecoilState } from 'recoil';\nimport { currentChannelState } from '../../../atom';\nimport {\n  useWatchChannelThreadMessagesSubscription,\n  useGetChannelThreadQuery,\n} from '../../../api/generated/graphql';\nimport ThreadMessageList from './ThreadMessageList';\nimport Loader from '../../shared/Loader';\nimport { Alert } from '@material-ui/lab';\nimport { ThreadMessage } from '../../../interfaces/message.interface';\nimport { ThreadParams } from '../../../interfaces/param.interface';\nimport MenuBar from '../../shared/MenuBar';\nimport ThreadMessageInput from './ThreadMessageInput';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    overflowY: 'scroll',\n    height: '80vh',\n    maxHeight: '80vh',\n    marginTop: theme.spacing(5),\n    padding: theme.spacing(3),\n  },\n  messageContainer: {\n    [theme.breakpoints.up('lg')]: {\n      padding: theme.spacing(10),\n      paddingTop: theme.spacing(5),\n      paddingBottom: theme.spacing(0),\n    },\n    [theme.breakpoints.down('md')]: {\n      padding: theme.spacing(3),\n      paddingTop: theme.spacing(3),\n      paddingBottom: theme.spacing(0),\n    },\n    [theme.breakpoints.down('sm')]: {\n      padding: theme.spacing(0),\n      paddingTop: theme.spacing(0),\n      paddingBottom: theme.spacing(0),\n    },\n  },\n}));\n\nconst Thread: React.FC = () => {\n  const classes = useStyles();\n  const [limit, setLimit] = useState(20);\n  const { user, error: auth0Error } = useAuth0();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const [currentChannel, setCurrentChannel] = useRecoilState<any>(\n    currentChannelState,\n  );\n  let history = useHistory();\n\n  const { messageId, channel } = useParams<ThreadParams>();\n\n  const { data, loading, error } = useWatchChannelThreadMessagesSubscription({\n    variables: {\n      limit,\n      message_id: parseInt(messageId),\n    },\n    fetchPolicy: 'network-only',\n  });\n\n  const {\n    data: getChannelThreadData,\n    loading: getChannelThreadLoading,\n    error: getChannelThreadError,\n  } = useGetChannelThreadQuery({\n    variables: {\n      message_id: parseInt(messageId),\n    },\n  });\n\n  const handleIncreaseLimit = () => {\n    setLimit(limit + 20);\n  };\n\n  const scrollToBottom = () => {\n    if (typeof messagesEndRef === 'object') {\n      messagesEndRef?.current?.scrollIntoView();\n    }\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [data]);\n\n  useEffect(() => {\n    if (currentChannel?.id === undefined) history.push(`/channel/${channel}`);\n  }, []);\n\n  if (loading || getChannelThreadLoading) return <Loader />;\n\n  if (error || getChannelThreadError) {\n    console.log('error', error);\n    return <Alert severity=\"error\">Thread Error</Alert>;\n  }\n\n  return (\n    <>\n      <div className={classes.root}>\n        <Grid container>\n          <Grid item xs={12} className={classes.messageContainer}>\n            <List id=\"message-list\">\n              <ThreadMessageList\n                messages={data?.channel_thread_message as ThreadMessage[]}\n                user={user}\n                channelThread={getChannelThreadData?.channel_thread[0]}\n                currentChannel={currentChannel}\n              />\n            </List>\n            <div ref={messagesEndRef} />\n          </Grid>\n          <Box maxWidth=\"xl\" component=\"nav\">\n            <MenuBar channelId={currentChannel?.id}>\n              <ThreadMessageInput\n                channelId={currentChannel?.id}\n                channelThreadId={getChannelThreadData?.channel_thread[0]?.id}\n              />\n            </MenuBar>\n          </Box>\n        </Grid>\n      </div>\n    </>\n  );\n};\n\nexport default Thread;\n","import React, { useState } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport {\n  TextField,\n  Button,\n  Box,\n  Chip,\n  Container,\n  Grid,\n} from '@material-ui/core';\nimport { theme } from '../../../theme/theme';\nimport Icon from '@material-ui/core/Icon';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport {\n  useInsertChannelThreadMessageMutation,\n  useSendTypingEventMutation,\n} from '../../../api/generated/graphql';\nimport { useRecoilState } from 'recoil';\nimport { giphyState, deletedMessageState } from '../../../atom';\nimport { IGif } from '@giphy/js-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GiphyCarousel from '../../shared/GiphyCarousel';\nimport AddGif from '@material-ui/icons/Gif';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  rootSingleChip: {\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1,\n  },\n  giphyVisible: {\n    marginTop: theme.spacing(2),\n  },\n  giphyHidden: {\n    display: 'none',\n    marginTop: theme.spacing(2),\n  },\n  giphyImage: {\n    marginTop: theme.spacing(2),\n  },\n  form: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n  },\n  messageInput: {\n    floatingLabelFocusStyle: {\n      color: theme.palette.secondary.dark,\n    },\n  },\n  messageButton: {\n    [theme.breakpoints.down('md')]: {\n      display: 'none',\n    },\n    [theme.breakpoints.up('md')]: {\n      size: 'large',\n      width: '25%',\n    },\n    marginTop: theme.spacing(2),\n    marginLeft: theme.spacing(0),\n    backgroundColor: theme.palette.primary.dark,\n  },\n  image: {\n    maxHeight: 55,\n    paddingRight: theme.spacing(1),\n  },\n  toolbar: {\n    [theme.breakpoints.up('md')]: {\n      paddingTop: theme.spacing(5),\n      paddingBottom: theme.spacing(5),\n    },\n    [theme.breakpoints.down('md')]: {\n      paddingLeft: theme.spacing(1),\n      paddingRight: theme.spacing(1),\n      paddingTop: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n    },\n    borderTop: 1,\n    borderTopStyle: 'solid',\n    borderTopColor: theme.palette.primary.dark,\n  },\n}));\n\ninterface ThreadListInputContainerProps {\n  channelId: number;\n  channelThreadId: number | undefined;\n}\n\nconst ThreadListInputContainer: React.FC<ThreadListInputContainerProps> = (\n  props,\n) => {\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n\n  const setTextFieldSize = () => {\n    switch (matches) {\n      case true:\n        return 'medium';\n      case false:\n        return 'small';\n\n      default:\n        return 'small';\n    }\n  };\n\n  const setButtonSize = () => {\n    switch (matches) {\n      case true:\n        return 'large';\n      case false:\n        return 'small';\n\n      default:\n        return 'small';\n    }\n  };\n\n  const { user } = useAuth0();\n  const [text, setText] = useState('');\n  const [gif, setGif] = useRecoilState<IGif | null>(giphyState);\n  const [deletedMessage, setdeletedMessage] = useRecoilState<boolean>(\n    deletedMessageState,\n  );\n\n  const [showGiphyCarousel, setShowGiphyCarousel] = React.useState(false);\n\n  const channelId = props.channelId;\n\n  const [\n    sendTypingEventMutation,\n    { data, loading, error },\n  ] = useSendTypingEventMutation({\n    variables: {\n      user_id: user.sub,\n      channel_id: channelId,\n    },\n  });\n\n  const handleTyping = (text: string) => {\n    const textLength = text.length;\n    if ((textLength !== 0 && textLength % 5 === 0) || textLength === 1) {\n      sendTypingEventMutation();\n    }\n    setText(text);\n  };\n\n  const [\n    sendMessage,\n    { data: sendUpdateMessageData },\n  ] = useInsertChannelThreadMessageMutation();\n\n  const handleSubmit = async (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    if (text === '' && gif === null) {\n      return;\n    }\n\n    if (text.length > 2000) {\n      alert('Your text limit has reached the limit of 2000 characters');\n      return;\n    }\n\n    if (props.channelThreadId === undefined) {\n      return;\n    }\n\n    await sendMessage({\n      variables: {\n        channel_thread_id: props.channelThreadId,\n        message: text,\n        image: gif?.images?.fixed_width_small?.url,\n        user_id: user.sub,\n      },\n    });\n\n    setText('');\n    setGif(null);\n    setdeletedMessage(false);\n  };\n\n  const handleGiphyClick = () => {\n    setShowGiphyCarousel(!showGiphyCarousel);\n  };\n\n  const hideGiphyCarousel = () => {\n    setShowGiphyCarousel(false);\n  };\n\n  return (\n    <>\n      <li>\n        <Container maxWidth=\"lg\">\n          <Grid item xs={12}>\n            <Chip\n              variant=\"outlined\"\n              color=\"primary\"\n              size=\"small\"\n              icon={<AddGif />}\n              label=\"+Gif\"\n              onClick={handleGiphyClick}\n            />\n          </Grid>\n          <Grid item xs={12} className={gif ? classes.giphyImage : ''}>\n            {gif && (\n              <img\n                className={classes.image}\n                alt={gif?.bitly_url}\n                src={gif?.images?.fixed_width_small?.url}\n                onClick={() => setGif(null)}\n              />\n            )}\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            className={\n              showGiphyCarousel ? classes.giphyVisible : classes.giphyHidden\n            }\n          >\n            <GiphyCarousel hideGiphyCarousel={() => hideGiphyCarousel()} />\n          </Grid>\n          <Grid item xs={12}>\n            <form\n              noValidate\n              autoComplete=\"off\"\n              className={classes.form}\n              onSubmit={handleSubmit}\n            >\n              <TextField\n                value={text}\n                autoFocus={false}\n                onChange={(e) => {\n                  handleTyping(e.target.value);\n                }}\n                size={setTextFieldSize()}\n                variant=\"outlined\"\n                color=\"secondary\"\n                autoComplete=\"off\"\n                placeholder=\"Type your message here ...\"\n                id={`chat-message-input-${props.channelThreadId}`}\n                label={'Crackle your message here ...'}\n                // fullWidth\n                InputProps={{\n                  classes: {\n                    input: classes.messageInput,\n                  },\n                }}\n                InputLabelProps={{\n                  className: classes.messageInput,\n                }}\n              />\n\n              <Button\n                id={`chat-message-button-${props.channelThreadId}`}\n                size={setButtonSize()}\n                variant=\"contained\"\n                endIcon={<Icon>send</Icon>}\n                className={classes.messageButton}\n                type=\"submit\"\n              >\n                Send\n              </Button>\n            </form>\n          </Grid>\n        </Container>\n      </li>\n    </>\n  );\n};\n\nexport default ThreadListInputContainer;\n","import React, { useState } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useWatchChannelThreadMessagesSubscription } from '../../../api/generated/graphql';\nimport ThreadMessageList from './ThreadMessageList';\nimport { Alert } from '@material-ui/lab';\nimport { ThreadMessage } from '../../../interfaces/message.interface';\nimport ThreadListInputContainer from './ThreadListInputContainer';\nimport { List } from '@material-ui/core';\n\ninterface ThreadListProps {\n  channelThread: any;\n}\n\nconst ThreadList: React.FC<ThreadListProps> = ({ channelThread }) => {\n  const [limit, setLimit] = useState(20);\n\n  const { user, error: auth0Error } = useAuth0();\n\n  const { data, error } = useWatchChannelThreadMessagesSubscription({\n    variables: {\n      limit,\n      message_id: channelThread.message_id,\n    },\n  });\n\n  if (error || auth0Error) {\n    console.log('error', error);\n    return <Alert severity=\"error\">Thread Error</Alert>;\n  }\n\n  const handleIncreaseLimit = () => {\n    setLimit(limit + 20);\n  };\n\n  return (\n    <>\n      <List>\n        <ThreadMessageList\n          messages={data?.channel_thread_message as ThreadMessage[]}\n          user={user}\n          channelThread={channelThread}\n          currentChannel={channelThread.message.channel}\n        />\n        <ThreadListInputContainer\n          channelId={channelThread.message?.id}\n          channelThreadId={channelThread.id}\n        />\n      </List>\n    </>\n  );\n};\n\nexport default ThreadList;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { theme } from '../../../theme/theme';\nimport { AppBar, Box, Container, Chip, Grid, Toolbar } from '@material-ui/core';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MenuBarDrawer from '../../shared/MenuBarDrawer';\n\nconst drawerWidth = '100%';\n\nconst useStyles = makeStyles((theme) => ({\n  toolbar: {\n    [theme.breakpoints.up('md')]: {\n      paddingTop: theme.spacing(3),\n      paddingBottom: theme.spacing(3),\n    },\n    [theme.breakpoints.down('md')]: {\n      paddingLeft: theme.spacing(1),\n      paddingRight: theme.spacing(1),\n      paddingTop: theme.spacing(3),\n      paddingBottom: theme.spacing(3),\n    },\n    borderTop: 1,\n    borderTopStyle: 'solid',\n    borderTopColor: theme.palette.primary.dark,\n  },\n  appBar: {\n    backgroundColor: theme.palette.background.default,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n}));\n\ninterface ThreadMenuBarProps {\n  channelThreadId?: number | undefined;\n}\n\nconst ThreadMenuBar: React.FC<ThreadMenuBarProps> = ({ channelThreadId }) => {\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <AppBar\n      elevation={0}\n      position=\"fixed\"\n      className={clsx(classes.appBar, open && classes.appBarShift)}\n    >\n      <Toolbar className={classes.toolbar}>\n        <Container maxWidth=\"xl\" disableGutters>\n          <Grid container>\n            <Grid item style={{ flex: 1 }}>\n              {matches === false && (\n                <Box\n                  order={1}\n                  display=\"flex\"\n                  flex=\"1\"\n                  justifyContent=\"flex-end\"\n                  alignItems=\"flex-end\"\n                >\n                  <Chip\n                    variant=\"default\"\n                    aria-label=\"open drawer\"\n                    onClick={handleDrawerOpen}\n                    label=\"Menu\"\n                    clickable\n                    size=\"small\"\n                    color=\"secondary\"\n                    icon={<ExpandLess />}\n                  />\n                </Box>\n              )}\n            </Grid>\n          </Grid>\n        </Container>\n      </Toolbar>\n      <MenuBarDrawer open={open} handleDrawerClose={handleDrawerClose} />\n    </AppBar>\n  );\n};\n\nexport default ThreadMenuBar;\n","import React from 'react';\nimport { useWatchThreadsSubscription } from '../../../api/generated/graphql';\nimport ThreadList from './ThreadList';\nimport { Alert } from '@material-ui/lab';\nimport { Box, Grid, makeStyles } from '@material-ui/core';\nimport ThreadMenuBar from './ThreadMenuBar';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    overflowY: 'scroll',\n    height: '90vh',\n    marginTop: theme.spacing(5),\n    marginBottom: theme.spacing(5),\n  },\n  end: {\n    marginBottom: '2rem',\n  },\n  messageContainer: {\n    [theme.breakpoints.up('lg')]: {\n      padding: theme.spacing(10),\n      paddingTop: theme.spacing(5),\n      paddingBottom: theme.spacing(0),\n    },\n    [theme.breakpoints.down('md')]: {\n      padding: theme.spacing(3),\n      paddingTop: theme.spacing(3),\n      paddingBottom: theme.spacing(0),\n    },\n    [theme.breakpoints.down('sm')]: {\n      padding: theme.spacing(1),\n    },\n  },\n}));\n\nconst ThreadListContainer: React.FC = () => {\n  const { data, error } = useWatchThreadsSubscription();\n  const classes = useStyles();\n\n  if (error) {\n    console.log('error', error);\n    return <Alert severity=\"error\">Thread Error</Alert>;\n  }\n\n  return (\n    <>\n      <div className={classes.root}>\n        <Grid container>\n          {data?.channel_thread?.map((channelThread, index) => {\n            if (channelThread.channel_thread_messages.length)\n              return (\n                <Grid\n                  key={index}\n                  item\n                  xs={12}\n                  className={classes.messageContainer}\n                >\n                  <ThreadList channelThread={channelThread} />\n                </Grid>\n              );\n          })}\n          <Box className={classes.end}>&nbsp;</Box>\n          <Box maxWidth=\"xl\" component=\"nav\">\n            <ThreadMenuBar />\n          </Box>\n        </Grid>\n      </div>\n    </>\n  );\n};\n\nexport default ThreadListContainer;\n","import React from 'react';\nimport { Grid, Container, useMediaQuery } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SideBar from '../../shared/SideBar';\nimport { theme } from '../../../theme/theme';\nimport Thread from './Thread';\nimport ThreadListContainer from './ThreadListContainer';\nimport { useParams } from 'react-router';\nimport { ThreadParams } from '../../../interfaces/param.interface';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    margin: 0,\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    overflowX: 'hidden',\n    overflowY: 'hidden',\n  },\n  sidebar: {\n    height: '100vh',\n    maxHeight: '100vh',\n    display: 'flex',\n    alignItems: 'flex-start',\n    paddingTop: theme.spacing(5),\n    borderRightWidth: 1,\n    borderRightStyle: 'solid',\n    borderRightColor: theme.palette.primary.dark,\n  },\n}));\n\nconst ThreadContainer: React.FC = () => {\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n  const { channel } = useParams<ThreadParams>();\n\n  return (\n    <>\n      <Container\n        component=\"main\"\n        maxWidth=\"xl\"\n        disableGutters\n        className={classes.container}\n      >\n        {matches === true && (\n          <Grid item xs={5} className={classes.sidebar}>\n            <SideBar />\n          </Grid>\n        )}\n        <Grid item xs={12}>\n          {channel ? <Thread /> : <ThreadListContainer />}\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default ThreadContainer;\n","import React, { useEffect } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Container } from '@material-ui/core';\nimport { useSetUserOnlineMutation } from '../../api/generated/graphql';\nimport ThreadContainer from '../chat/threads/ThreadContainer';\n\nconst ChatBoard: React.FC = () => {\n  const { user } = useAuth0();\n\n  const user_id = user.sub;\n\n  const [sendUserIsOnline] = useSetUserOnlineMutation({\n    variables: { user_id },\n  });\n\n  useEffect(() => {\n    setInterval(() => {\n      if (user.sub !== undefined) {\n        sendUserIsOnline();\n      }\n    }, 9000);\n  }, []);\n\n  return (\n    <Container maxWidth=\"xl\" disableGutters>\n      <ThreadContainer />\n    </Container>\n  );\n};\n\nexport default ChatBoard;\n","import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport ReplyIcon from '@material-ui/icons/Reply';\nimport { useHistory } from 'react-router';\nimport {\n  useInsertChannelThreadMutation,\n  useWatchChannelThreadSubscription,\n} from '../../../api/generated/graphql';\nimport { Alert } from '@material-ui/lab';\nimport { Message } from '../../../interfaces/message.interface';\n\ninterface ThreadReplyProps {\n  channelName: string;\n  message: Message;\n}\n\nconst ThreadReply: React.FC<ThreadReplyProps> = (props) => {\n  const history = useHistory();\n\n  const {\n    data: channelThreadData,\n    loading: channelThreadLoading,\n    error: channelThreadError,\n  } = useWatchChannelThreadSubscription({\n    variables: {\n      message_id: props.message?.id,\n    },\n  });\n\n  const [\n    insertChannelThreadMutation,\n    { error },\n  ] = useInsertChannelThreadMutation({\n    variables: {\n      message_id: props.message?.id,\n    },\n  });\n\n  const navigateToThreadChannel = () => {\n    history.push(`/channel/${props.channelName}/thread/${props.message?.id}`);\n  };\n\n  const handleClick = async () => {\n    await insertChannelThreadMutation();\n    navigateToThreadChannel();\n  };\n\n  if (error || channelThreadError) return <Alert>Error in Thread Reply</Alert>;\n\n  if (channelThreadLoading)\n    return (\n      <div>\n        <IconButton>\n          <ReplyIcon\n            color=\"primary\"\n            fontSize=\"small\"\n            style={{ transform: 'scaleX(-1)' }}\n          />\n        </IconButton>\n      </div>\n    );\n\n  if (channelThreadData?.channel_thread_message?.length) {\n    return (\n      <div>\n        <IconButton onClick={() => navigateToThreadChannel()}>\n          <ReplyIcon\n            color=\"primary\"\n            fontSize=\"small\"\n            style={{ transform: 'scaleX(-1)' }}\n          />\n        </IconButton>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <IconButton onClick={handleClick}>\n        <ReplyIcon\n          color=\"primary\"\n          fontSize=\"small\"\n          style={{ transform: 'scaleX(-1)' }}\n        />\n      </IconButton>\n    </div>\n  );\n};\n\nexport default ThreadReply;\n","import React from 'react';\nimport {\n  Typography,\n  makeStyles,\n  Box,\n  CircularProgress,\n} from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport { Message } from '../../../interfaces/message.interface';\nimport { useWatchChannelThreadSubscription } from '../../../api/generated/graphql';\n\nconst useStyles = makeStyles((theme) => ({\n  [theme.breakpoints.up('md')]: {\n    messageText: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n    },\n  },\n  [theme.breakpoints.down('md')]: {\n    messageText: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n    },\n  },\n  [theme.breakpoints.down('sm')]: {\n    messageText: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n    },\n  },\n  link: {\n    color: '#ffffff',\n  },\n}));\n\ninterface ThreadReplyInProps {\n  channelName: string;\n  message: Message;\n}\n\nconst ThreadReplyIn: React.FC<ThreadReplyInProps> = ({\n  channelName,\n  message,\n}) => {\n  const classes = useStyles();\n\n  const {\n    data: channelThreadData,\n    loading: channelThreadLoading,\n    error: channelThreadError,\n  } = useWatchChannelThreadSubscription({\n    variables: {\n      message_id: message?.id,\n    },\n  });\n\n  return (\n    <>\n      {channelThreadData?.channel_thread_message?.length ? (\n        <Typography component=\"div\" className={classes.messageText}>\n          <Link\n            className={classes.link}\n            to={{\n              pathname: `/channel/${channelName}/thread/${message?.id}`,\n            }}\n          >\n            {`${channelThreadData?.channel_thread_message?.length} ${\n              channelThreadData?.channel_thread_message?.length === 1\n                ? 'reply'\n                : 'replies'\n            } `}\n          </Link>\n          <i className={classes.lastReply}>\n            {`Last reply ${moment(\n              channelThreadData?.channel_thread_message[0]?.timestamp,\n            ).fromNow()}`}\n          </i>\n        </Typography>\n      ) : (\n        ''\n      )}\n    </>\n  );\n};\n\nexport default ThreadReplyIn;\n","import React, { useState, useEffect } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { TextField, Button, Icon } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { useSetRecoilState } from 'recoil';\nimport { Message } from '../../interfaces/message.interface';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useUpdateMessageMutation } from '../../api/generated/graphql';\nimport Loader from '../shared/Loader';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  form: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n  },\n  messageButton: {\n    [theme.breakpoints.down('md')]: {\n      width: '100%',\n      size: 'small',\n    },\n    [theme.breakpoints.up('md')]: {\n      size: 'large',\n      width: '25%',\n    },\n    marginTop: theme.spacing(2),\n    marginLeft: theme.spacing(0),\n    backgroundColor: theme.palette.primary.dark,\n  },\n}));\n\ninterface UpdateMessageProps {\n  message: Message;\n}\n\nconst UpdateMessage: React.FC<UpdateMessageProps> = ({ message }) => {\n  const classes = useStyles();\n  const { user } = useAuth0();\n  const [text, setText] = useState<string>('');\n\n  useEffect(() => {\n    setText(message.text);\n  }, [message]);\n\n  const [\n    updateMessageMutation,\n    { data, loading, error },\n  ] = useUpdateMessageMutation();\n\n  const handleUpdate = async (e: React.SyntheticEvent) => {\n    e.preventDefault();\n    if (text === '') return;\n    await updateMessageMutation({\n      variables: {\n        _eq: message.id,\n        text,\n      },\n    });\n  };\n\n  const handleTyping = (text: string) => {\n    setText(text);\n  };\n\n  if (loading) {\n    return (\n      <>\n        <Loader />\n      </>\n    );\n  }\n\n  if (\n    error ||\n    (data?.update_message?.affected_rows !== undefined &&\n      data?.update_message?.affected_rows === 0)\n  ) {\n    return <Alert severity=\"error\">Message could not get deleted...</Alert>;\n  }\n\n  return (\n    <div className={classes.root}>\n      <form noValidate autoComplete=\"off\" className={classes.form}>\n        <TextField\n          value={text}\n          autoFocus={true}\n          onChange={(e) => {\n            handleTyping(e.target.value);\n          }}\n          variant=\"outlined\"\n          color=\"secondary\"\n          autoComplete=\"off\"\n          multiline\n          rowsMax={4}\n          id=\"update-chat-message-input\"\n          label={'Update message...'}\n        />\n\n        <Button\n          id=\"update-chat-message-button\"\n          variant=\"contained\"\n          endIcon={<Icon>send</Icon>}\n          className={classes.messageButton}\n          onClick={(e) => handleUpdate(e)}\n          type=\"button\"\n        >\n          Save\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default UpdateMessage;\n","import React, { useEffect, useRef, useState } from 'react';\nimport moment from 'moment';\nimport { Message } from '../../interfaces/message.interface';\nimport ThreadReply from './threads/ThreadReply';\nimport ThreadReplyIn from './threads/ThreadReplyIn';\nimport DeleteMessage from './DeleteMessage';\nimport UpdateMessage from './UpdateMessage';\nimport ReplaceMessage from './ReplaceMessage';\nimport {\n  Avatar,\n  Badge,\n  Box,\n  Divider,\n  ListItem,\n  ListItemAvatar,\n  ListItemIcon,\n  Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useRecoilValue } from 'recoil';\nimport { deletedMessageState } from '../../atom';\nimport { useParams } from 'react-router';\nimport { ChatParams } from '../../interfaces/param.interface';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    padding: theme.spacing(2),\n\n    [theme.breakpoints.down('md')]: {\n      paddingTop: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      paddingLeft: theme.spacing(2),\n      paddingBottom: theme.spacing(0),\n    },\n  },\n  [theme.breakpoints.up('md')]: {\n    messageText: {\n      padding: '1rem',\n      '&:hover': {\n        backgroundColor: '#0f1448',\n        cursor: 'pointer',\n      },\n    },\n  },\n  [theme.breakpoints.down('md')]: {\n    messageText: {\n      paddingBottom: '.3rem',\n    },\n  },\n  vspace: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(1),\n\n    [theme.breakpoints.down('sm')]: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(0),\n    },\n  },\n  image: {\n    paddingBottom: '0.5rem',\n  },\n  giphy: {\n    [theme.breakpoints.down('sm')]: {\n      width: '100%',\n    },\n    [theme.breakpoints.up('md')]: {\n      width: '25%',\n    },\n  },\n  avatar: {\n    backgroundColor: '#ed1859',\n    color: 'white',\n    fontSize: 12,\n  },\n}));\n\ninterface MessageProps {\n  messages: Message[];\n  lastMessage: any;\n  preLastMessageId: number;\n  user: any;\n}\n\nconst MessageList: React.FC<MessageProps> = ({\n  messages,\n  lastMessage,\n  preLastMessageId,\n  user,\n}) => {\n  const classes = useStyles();\n  const [showUpdate, setShowUpdate] = useState<boolean>(false);\n  const [showUpdateMessageId, setShowUpdateMessageId] = useState<number | null>(\n    null,\n  );\n\n  const { channel: channelName } = useParams<ChatParams>();\n\n  const deletedMessage = useRecoilValue<boolean>(deletedMessageState);\n\n  const handleShowUpdate = (message: Message) => {\n    if (message.user.auth0_user_id !== user.sub) return;\n    setShowUpdateMessageId(message.id);\n    setShowUpdate(!showUpdate);\n  };\n\n  const renderMessage = (message: Message) => {\n    return (\n      <ListItem key={message.id} className={classes.root}>\n        <ListItemAvatar>\n          <ListItemIcon>\n            <Badge variant=\"dot\">\n              {!message.deleted ? (\n                <Avatar className={classes.avatar}>\n                  {message.user.username.substring(0, 2).toUpperCase()}\n                </Avatar>\n              ) : (\n                <Avatar\n                  alt=\"Message has been removed\"\n                  src={`${window.location.origin}/deleted.png`}\n                />\n              )}\n            </Badge>\n          </ListItemIcon>\n        </ListItemAvatar>\n\n        <Box component=\"div\" display=\"flex\" flexDirection=\"column\" flex=\"1\">\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n          >\n            <Box\n              component=\"div\"\n              display=\"flex\"\n              justifyContent=\"space-between\"\n              flexGrow=\"1\"\n              style={{ marginRight: 16 }}\n            >\n              <Typography color=\"secondary\" variant=\"caption\">\n                {!message.deleted ? (\n                  <>\n                    <strong>{message.user.username} </strong>\n                  </>\n                ) : (\n                  <strong>Oh sorry it seems...</strong>\n                )}\n              </Typography>\n              <Typography\n                variant=\"caption\"\n                color=\"primary\"\n                style={{ marginLeft: '8px' }}\n              >\n                {moment(message.timestamp).fromNow()}\n              </Typography>\n            </Box>\n            <Box>\n              <Box\n                display=\"flex\"\n                justifyContent=\"flex-start\"\n                alignItems=\"flex-start\"\n              >\n                <Typography variant=\"caption\">\n                  <ThreadReply message={message} channelName={channelName} />\n                </Typography>\n                {/* {!message.deleted ? (\n                  <React.Fragment>\n                    {user.sub === message.user.auth0_user_id && (\n                      <Typography variant=\"caption\">\n                        {!(\n                          showUpdate && showUpdateMessageId === message.id\n                        ) && (\n                          <>\n                            {message.channel_thread?.channel_thread_messages\n                              ?.length ? (\n                              <ReplaceMessage messageId={message.id} />\n                            ) : (\n                              <DeleteMessage messageId={message.id} />\n                            )}\n                          </>\n                        )}\n                      </Typography>\n                    )}\n                  </React.Fragment>\n                ) : (\n                  ''\n                )} */}\n              </Box>\n            </Box>\n          </Box>\n\n          <Typography\n            component=\"p\"\n            color=\"textSecondary\"\n            className={classes.messageText}\n            onClick={() => handleShowUpdate(message)}\n          >\n            {showUpdate &&\n            showUpdateMessageId === message.id &&\n            user.sub === message.user.auth0_user_id &&\n            message.deleted === false ? (\n              <UpdateMessage message={message} />\n            ) : (\n              message.text\n            )}\n          </Typography>\n          {message?.image ? (\n            <Box className={classes.image}>\n              <img src={message.image} className={classes.giphy} />\n            </Box>\n          ) : (\n            ''\n          )}\n          <Box>\n            <ThreadReplyIn message={message} channelName={channelName} />\n          </Box>\n          <Divider className={classes.vspace} />\n        </Box>\n      </ListItem>\n    );\n  };\n\n  return (\n    <>\n      {[...messages]?.reverse()?.map((message, i) => renderMessage(message))}\n\n      {!deletedMessage &&\n      lastMessage &&\n      preLastMessageId !== 0 &&\n      preLastMessageId < lastMessage.id\n        ? renderMessage(lastMessage)\n        : ''}\n    </>\n  );\n};\n\nexport default MessageList;\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Box } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { useGetUserIsTypingSubscription } from '../../api/generated/graphql';\nimport { useRecoilState } from 'recoil';\nimport { currentChannelState } from '../../atom';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  indicator: {\n    color: '#f9cd8b',\n    fontSize: '10px',\n    fontWeight: 700,\n  },\n}));\n\nconst TypingIndicator: React.FC = () => {\n  const classes = useStyles();\n  const { user } = useAuth0();\n  const [currentChannel, setCurrentChannel] = useRecoilState<any>(\n    currentChannelState,\n  );\n  const { data, loading, error } = useGetUserIsTypingSubscription({\n    variables: {\n      self_id: user.sub,\n      channel_id: currentChannel.id,\n    },\n  });\n\n  if (error) {\n    return <Alert severity=\"error\">Typing Indicator Error...</Alert>;\n  }\n\n  return (\n    <>\n      {!loading && data?.user_typing[0]?.username\n        ? `${data.user_typing[0].username} is typing ...`\n        : 'Type your message here ...'}\n    </>\n  );\n};\n\nexport default TypingIndicator;\n","import React, { useState, useRef } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { TextField, Button, Box } from '@material-ui/core';\nimport { theme } from '../../theme/theme';\nimport Icon from '@material-ui/core/Icon';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport {\n  useInsertMessageMutation,\n  useSendTypingEventMutation,\n} from '../../api/generated/graphql';\nimport TypingIndicator from '../shared/TypingIndicator';\nimport { useRecoilState } from 'recoil';\nimport { giphyState, deletedMessageState } from '../../atom';\nimport { IGif } from '@giphy/js-types';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n  },\n  giphyImage: {\n    marginTop: theme.spacing(0),\n  },\n  form: {\n    display: 'flex',\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    flexDirection: 'column',\n    flexGrow: 1,\n    [theme.breakpoints.down('md')]: {\n      marginTop: theme.spacing(1),\n    },\n    [theme.breakpoints.up('md')]: {\n      marginTop: theme.spacing(0),\n    },\n  },\n  messageInput: {\n    [theme.breakpoints.down('md')]: {\n      fontSize: '.9rem',\n    },\n    '&.MuiFormLabel-root.Mui-focused': {\n      color: theme.palette.secondary.main,\n    },\n  },\n  messageButton: {\n    [theme.breakpoints.down('sm')]: {\n      display: 'none',\n    },\n    [theme.breakpoints.up('md')]: {\n      size: 'large',\n      width: '25%',\n    },\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(0),\n    backgroundColor: theme.palette.primary.dark,\n  },\n  image: {\n    [theme.breakpoints.up('md')]: {\n      maxHeight: 55,\n    },\n    [theme.breakpoints.down('md')]: {\n      maxHeight: 40,\n    },\n    paddingRight: theme.spacing(1),\n  },\n}));\n\ninterface ChatInputProps {\n  channelId: number;\n  handleSetLastMessage: Function;\n  preLastMessageId: number;\n}\n\nconst ChatInput: React.FC<ChatInputProps> = (props) => {\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n\n  const setTextFieldSize = () => {\n    switch (matches) {\n      case true:\n        return 'medium';\n\n      case false:\n        return 'small';\n\n      default:\n        return 'small';\n    }\n  };\n\n  const setButtonSize = () => {\n    switch (matches) {\n      case true:\n        return 'large';\n      case false:\n        return 'small';\n\n      default:\n        return 'small';\n    }\n  };\n\n  const { user } = useAuth0();\n  const [text, setText] = useState('');\n  const [gif, setGif] = useRecoilState<IGif | null>(giphyState);\n  const [deletedMessage, setdeletedMessage] = useRecoilState<boolean>(\n    deletedMessageState,\n  );\n\n  const channelId = props.channelId;\n\n  const [\n    sendTypingEventMutation,\n    { data, loading, error },\n  ] = useSendTypingEventMutation({\n    variables: {\n      user_id: user.sub,\n      channel_id: channelId,\n    },\n  });\n\n  const handleTyping = (text: string) => {\n    const textLength = text.length;\n    if ((textLength !== 0 && textLength % 5 === 0) || textLength === 1) {\n      sendTypingEventMutation();\n    }\n    setText(text);\n  };\n\n  const [\n    sendMessage,\n    { data: sendUpdateMessageData },\n  ] = useInsertMessageMutation();\n\n  const handleSubmit = async (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    if (text === '' && gif === null) {\n      return;\n    }\n\n    if (text.length > 2000) {\n      alert('Your text limit has reached the limit of 2000 characters');\n      return;\n    }\n\n    props.handleSetLastMessage({\n      id: props.preLastMessageId + 1,\n      user: {\n        username: user.nickname,\n      },\n      user_id: user.sub,\n      text: text,\n      image: gif?.images?.fixed_width_small?.url,\n      channel_id: channelId,\n    });\n\n    await sendMessage({\n      variables: {\n        message: {\n          user_id: user.sub,\n          text: text,\n          image: gif?.images?.fixed_width_small?.url,\n          channel_id: channelId,\n        },\n      },\n    });\n\n    setText('');\n    setGif(null);\n    setdeletedMessage(false);\n  };\n\n  return (\n    <Box className={classes.root}>\n      <Box className={classes.giphyImage}>\n        {gif && (\n          <img\n            className={classes.image}\n            alt=\"Giphy\"\n            src={gif?.images?.fixed_width_small?.url}\n            onClick={() => setGif(null)}\n          />\n        )}\n      </Box>\n      <form\n        noValidate\n        autoComplete=\"off\"\n        className={classes.form}\n        onSubmit={handleSubmit}\n      >\n        <TextField\n          value={text}\n          autoFocus={false}\n          onChange={(e) => {\n            handleTyping(e.target.value);\n          }}\n          focused\n          size={setTextFieldSize()}\n          variant=\"outlined\"\n          color=\"primary\"\n          autoComplete=\"off\"\n          placeholder=\"...\"\n          id=\"chat-message-input\"\n          label={<TypingIndicator />}\n          InputProps={{\n            classes: {\n              input: classes.messageInput,\n            },\n          }}\n          InputLabelProps={{\n            className: classes.messageInput,\n          }}\n        />\n\n        <Button\n          id=\"chat-message-button\"\n          size={setButtonSize()}\n          variant=\"contained\"\n          endIcon={<Icon>send</Icon>}\n          className={classes.messageButton}\n          type=\"submit\"\n        >\n          Send\n        </Button>\n      </form>\n    </Box>\n  );\n};\n\nexport default ChatInput;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Box, Button, Grid, List } from '@material-ui/core';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport { Message } from '../../interfaces/message.interface';\nimport {\n  useWatchMessagesSubscription,\n  Channel_Type_Enum,\n  useUpsertMessageCursorMutation,\n} from '../../api/generated/graphql';\n\nimport Alert from '@material-ui/lab/Alert';\nimport MenuBar from '../shared/MenuBar';\nimport Logo from '../shared/Logo';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { useHistory } from 'react-router-dom';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    overflowY: 'scroll',\n    maxHeight: '100vh',\n    marginTop: theme.spacing(0),\n    paddingBottom: theme.spacing(0),\n    [theme.breakpoints.up('lg')]: {\n      padding: theme.spacing(3),\n      paddingTop: theme.spacing(7),\n      paddingBottom: theme.spacing(20),\n    },\n    [theme.breakpoints.down('md')]: {\n      padding: theme.spacing(1),\n      paddingTop: theme.spacing(8),\n      paddingBottom: theme.spacing(9),\n    },\n    [theme.breakpoints.down('sm')]: {\n      padding: theme.spacing(0),\n      paddingTop: theme.spacing(8),\n      paddingBottom: theme.spacing(9),\n    },\n  },\n  messageInput: {\n    position: 'fixed',\n    bottom: 0,\n    padding: theme.spacing(2),\n    background: theme.palette.background.default,\n    zIndex: 1000,\n    [theme.breakpoints.up('sm')]: {\n      width: '75vw',\n    },\n    [theme.breakpoints.down('sm')]: {\n      width: '100vw',\n    },\n  },\n\n  polling: {\n    position: 'fixed',\n    overflow: 'hidden',\n    flex: 1,\n  },\n}));\n\ninterface ChatProps {\n  channelId: number;\n  isPrivate: boolean;\n  channelType: Channel_Type_Enum;\n}\n\nconst Chat: React.FC<ChatProps> = ({ channelId, isPrivate, channelType }) => {\n  const classes = useStyles();\n  const [limit, setLimit] = useState(20);\n  const [lastMessage, setLastMessage] = useState({});\n  const { user, error: auth0Error } = useAuth0();\n  let history = useHistory();\n\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  let preLastMessageId = 0;\n\n  const { data, loading, error } = useWatchMessagesSubscription({\n    variables: {\n      channelId: channelId,\n      limit: limit,\n    },\n    fetchPolicy: 'network-only',\n  });\n\n  const [\n    upsertMessageCursorMutation,\n    {\n      data: upsertMessageData,\n      loading: upsertMessageLoading,\n      error: upsertMessageError,\n    },\n  ] = useUpsertMessageCursorMutation();\n\n  const scrollToBottom = () => {\n    if (typeof messagesEndRef === 'object') {\n      messagesEndRef?.current?.scrollIntoView();\n    }\n  };\n\n  useEffect(() => {\n    if (data?.messages[0]?.id)\n      upsertMessageCursorMutation({\n        variables: {\n          channel_id: channelId,\n          message_id: data?.messages[0]?.id,\n          user_id: user.sub,\n        },\n      });\n    scrollToBottom();\n  }, [data]);\n\n  if (error) {\n    return <Alert severity=\"error\">Messages could not be loaded.</Alert>;\n  }\n\n  if (loading) {\n    return (\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        flexDirection=\"column\"\n        style={{ height: '100vh' }}\n      >\n        <Box>\n          <Logo />\n          <LinearProgress color=\"secondary\" style={{ marginTop: '8px' }} />\n        </Box>\n      </Box>\n    );\n  }\n\n  if (data) {\n    preLastMessageId = data?.messages[0]?.id;\n  }\n\n  const handleIncreaseLimit = () => {\n    setLimit(limit + 20);\n  };\n\n  const handleSetLastMessage = (lastMessage: Message) => {\n    setLastMessage(lastMessage);\n  };\n\n  const navigateToAddChannelMembers = () => {\n    history.push(`/addChannelMembers`);\n  };\n\n  return (\n    <>\n      <Box className={classes.root}>\n        {isPrivate && channelType !== Channel_Type_Enum.DirectMessage && (\n          <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            style={{ marginBottom: '20px' }}\n          >\n            <Button\n              color=\"secondary\"\n              variant=\"contained\"\n              type=\"button\"\n              onClick={navigateToAddChannelMembers}\n            >\n              Add users to channel\n            </Button>\n          </Box>\n        )}\n        <List id=\"message-list\">\n          <MessageList\n            messages={data?.messages as Message[]}\n            lastMessage={lastMessage}\n            preLastMessageId={preLastMessageId}\n            user={user}\n          />\n        </List>\n        <div ref={messagesEndRef} />\n      </Box>\n      <Box className={classes.messageInput}>\n        <MenuBar channelId={channelId}>\n          <MessageInput\n            channelId={channelId}\n            handleSetLastMessage={handleSetLastMessage}\n            preLastMessageId={preLastMessageId}\n          />\n        </MenuBar>\n      </Box>\n    </>\n  );\n};\n\nexport default Chat;\n","import React from 'react';\nimport { useParams } from 'react-router';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useRecoilState } from 'recoil';\nimport { useGetChannelByNameQuery } from '../../api/generated/graphql';\nimport { currentChannelState } from '../../atom';\nimport Chat from './Chat';\nimport Loader from '../shared/Loader';\nimport { ChatParams } from '../../interfaces/param.interface';\n\nconst ChatApp: React.FC = () => {\n  const [currentChannel, setCurrentChannel] = useRecoilState<any>(\n    currentChannelState,\n  );\n\n  const { isAuthenticated, isLoading: isLoadingAuth0, error } = useAuth0();\n  const { channel: channelName } = useParams<ChatParams>();\n\n  const {\n    data,\n    loading: channelLoading,\n    error: channelError,\n  } = useGetChannelByNameQuery({\n    variables: {\n      name: channelName,\n    },\n  });\n\n  if (isLoadingAuth0 || channelLoading) {\n    return <Loader />;\n  }\n\n  if (\n    !currentChannel ||\n    (currentChannel && currentChannel.name !== channelName)\n  ) {\n    setCurrentChannel(data?.channel[0]);\n  }\n\n  if (error || channelError) {\n    return <>Error: {error}</>;\n  }\n\n  return (\n    <>\n      {isAuthenticated && (\n        <>\n          <Chat\n            channelId={currentChannel?.id}\n            isPrivate={currentChannel?.is_private}\n            channelType={currentChannel?.channel_type}\n          />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default ChatApp;\n","import React from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { theme } from '../../theme/theme';\nimport { useRecoilState } from 'recoil';\nimport { Box, Button, IconButton } from '@material-ui/core';\nimport { currentChannelState } from '../../atom';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport PollPopUp from '../../components/adminPollings/PollPopup';\n\nimport Logout from '../Logout';\nimport MenuBarDrawer from '../shared/MenuBarDrawer';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.default,\n    marginTop: theme.spacing(0),\n    paddingTop: theme.spacing(2),\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    zIndex: 1000,\n    [theme.breakpoints.down('md')]: {\n      position: 'fixed',\n    },\n    [theme.breakpoints.up('md')]: {\n      position: 'fixed',\n      width: '75vw',\n    },\n  },\n  menuButton: {\n    width: 30,\n    height: 30,\n    marginLeft: theme.spacing(1),\n    '& .MuiIconButton-label': {\n      marginLeft: theme.spacing(1),\n    },\n  },\n}));\n\ninterface MobileHeaderMenuProps {\n  channelName: string;\n}\n\nconst MobileHeaderMenu: React.FC<MobileHeaderMenuProps> = ({ channelName }) => {\n  const classes = useStyles();\n\n  const [currentChannel] = useRecoilState<any>(currentChannelState);\n\n  console.log(currentChannel);\n\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n\n  const [open, setOpen] = React.useState(false); // Sidebar default state\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        flexDirection=\"row\"\n        width={1}\n        className={classes.root}\n      >\n        {matches === false && (\n          <IconButton\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n          >\n            <ArrowBackIosIcon />\n          </IconButton>\n        )}\n        <Button variant=\"text\">{channelName}</Button>\n        <PollPopUp channelId={currentChannel?.id} />\n        <Logout />\n      </Box>\n      <MenuBarDrawer open={open} handleDrawerClose={handleDrawerClose} />\n    </>\n  );\n};\n\nexport default MobileHeaderMenu;\n","import React from 'react';\nimport { useParams } from 'react-router';\nimport { theme } from '../../theme/theme';\nimport { Container, Grid } from '@material-ui/core/';\nimport { makeStyles } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { ChatParams } from '../../interfaces/param.interface';\nimport SideBar from '../shared/SideBar';\nimport ChatApp from './ChatApp';\nimport MobileHeaderMenu from '../chat/MobileHeaderMenu';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    margin: 0,\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    overflowX: 'hidden',\n    overflowY: 'hidden',\n  },\n  sidebar: {\n    height: '100vh',\n    minHeight: '100vh',\n    overflowY: 'scroll',\n    display: 'flex',\n    alignItems: 'flex-start',\n    paddingTop: theme.spacing(5),\n    borderRightWidth: 1,\n    borderRightStyle: 'solid',\n    borderRightColor: theme.palette.primary.dark,\n  },\n  chatApp: {\n    height: '100vh',\n    overflow: 'hidden',\n  },\n}));\n\nconst ChatContainer: React.FC = () => {\n  const classes = useStyles();\n  const { channel: channelName } = useParams<ChatParams>();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n\n  return (\n    <Container\n      component=\"main\"\n      disableGutters\n      maxWidth=\"xl\"\n      className={classes.container}\n    >\n      {matches === true && (\n        <Grid item xs={5} sm={4} className={classes.sidebar}>\n          <SideBar />\n        </Grid>\n      )}\n      <Grid item xs={12} className={classes.chatApp}>\n        <MobileHeaderMenu channelName={channelName} />\n        <ChatApp />\n      </Grid>\n    </Container>\n  );\n};\n\nexport default ChatContainer;\n","import React, { useEffect } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport ChatContainer from '../chat/ChatContainer';\nimport { Container } from '@material-ui/core';\nimport { useSetUserOnlineMutation } from '../../api/generated/graphql';\n\nconst ChatBoard: React.FC = () => {\n  const { user } = useAuth0();\n\n  const user_id = user.sub;\n\n  const [sendUserIsOnline] = useSetUserOnlineMutation({\n    variables: { user_id },\n  });\n\n  useEffect(() => {\n    setInterval(() => {\n      if (user.sub !== undefined) {\n        sendUserIsOnline();\n      }\n    }, 9000);\n  }, [sendUserIsOnline, user.sub]);\n\n  return <ChatContainer />;\n};\n\nexport default ChatBoard;\n","import React from 'react';\nimport { Link as Linky } from 'react-router-dom';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport {\n  Box,\n  Divider,\n  Grid,\n  List,\n  ListSubheader,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport PeopleOutlineIcon from '@material-ui/icons/PeopleOutline';\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\nimport UserStatus from '../shared/UserStatus';\nimport Logout from '../Logout';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    [theme.breakpoints.up('sm')]: {\n      marginRight: theme.spacing(5),\n      marginLeft: theme.spacing(5),\n      marginTop: theme.spacing(0),\n      marginBottom: theme.spacing(5),\n    },\n    [theme.breakpoints.down('md')]: {\n      padding: theme.spacing(2),\n      margin: theme.spacing(0),\n      paddingTop: theme.spacing(2),\n    },\n    [theme.breakpoints.down('sm')]: {\n      padding: theme.spacing(0),\n      margin: theme.spacing(0),\n      paddingTop: theme.spacing(2),\n    },\n  },\n  treeView: {\n    overflowY: 'hidden',\n    maxHeight: '50vh',\n    marginRight: theme.spacing(0),\n    marginLeft: theme.spacing(0),\n    paddingRight: theme.spacing(0),\n  },\n  branding: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n}));\n\nconst AdminSidebar: React.FC<any> = () => {\n  const classes = useStyles();\n  const { user } = useAuth0();\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        flex=\"1\"\n        className={classes.root}\n      >\n        <Grid container>\n          <Grid item xs={12}>\n            <UserStatus user_id={user.sub} />\n          </Grid>\n          <Grid item xs={12} className={classes.branding}>\n            <img\n              alt=\"The Great Chicken Fest\"\n              src=\"/the-great-chicken-fest.svg\"\n              width=\"300\"\n            />\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Box className={classes.treeView}>\n            <Divider />\n            <List\n              component=\"nav\"\n              aria-labelledby=\"nested-list-subheader\"\n              subheader={\n                <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n                  Administration\n                </ListSubheader>\n              }\n              className={classes.root}\n            >\n              <ListItem button>\n                <ListItemIcon>\n                  <PeopleOutlineIcon />\n                </ListItemIcon>\n                <ListItemText>\n                  <Linky to={'/dashboard/users'}>\n                    <Typography variant=\"h6\" color=\"secondary\">\n                      Users\n                    </Typography>\n                  </Linky>\n                </ListItemText>\n              </ListItem>\n              <ListItem button>\n                <ListItemIcon>\n                  <HowToVoteIcon />\n                </ListItemIcon>\n                <ListItemText>\n                  <Linky to={'/dashboard/pollings'}>\n                    <Typography variant=\"h6\" color=\"secondary\">\n                      Pollings\n                    </Typography>\n                  </Linky>\n                </ListItemText>\n              </ListItem>\n            </List>\n            <Divider />\n            <Box display=\"flex\" justifyContent=\"flex-end\" alignItems=\"flex-end\">\n              <Logout />\n            </Box>\n          </Box>\n        </Grid>\n      </Box>\n    </>\n  );\n};\n\nexport default AdminSidebar;\n","import React from 'react';\nimport {\n  Avatar,\n  Box,\n  Paper,\n  Table,\n  TableBody,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableCell,\n  Typography,\n  CircularProgress,\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { useGetUserListQuery } from '../../api/generated/graphql';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n}));\n\nconst AdminUserList: React.FC = () => {\n  const classes = useStyles();\n  const { data, loading, error } = useGetUserListQuery({\n    variables: {},\n  });\n\n  if (loading) {\n    return <CircularProgress />;\n  }\n\n  if (error) {\n    return <Alert severity=\"error\">Users could not be loaded.</Alert>;\n  }\n\n  return (\n    <Box className={classes.root}>\n      <h2>Userlist</h2>\n      <p>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Tempore, quos\n        sunt magni natus suscipit nesciunt. Nostrum voluptatum suscipit\n        assumenda officia in! Incidunt similique a adipisci facere neque, cum\n        nesciunt reprehenderit.\n      </p>\n      {data && (\n        <TableContainer component={Paper}>\n          <Table aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Avatar</TableCell>\n                <TableCell>Username</TableCell>\n                <TableCell align=\"right\">UserId</TableCell>\n                <TableCell align=\"left\">Auth0</TableCell>\n                <TableCell align=\"left\">Last seen</TableCell>\n              </TableRow>\n            </TableHead>\n            {data.users.map((user) => (\n              <TableBody>\n                <TableRow key={user.id}>\n                  <TableCell>\n                    <Avatar\n                      alt={user.username}\n                      src=\"https://api.adorable.io/avatars/173/abott@adorable.png\"\n                    />\n                  </TableCell>\n                  <TableCell component=\"th\" scope=\"row\">\n                    <Typography variant=\"body2\">{user.username}</Typography>\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    <Typography variant=\"caption\">{user.id}</Typography>\n                  </TableCell>\n                  <TableCell align=\"left\">\n                    <Typography variant=\"body2\">\n                      {user.auth0_user_id}\n                    </Typography>\n                  </TableCell>\n                  <TableCell align=\"left\">\n                    {user.last_seen ? user.last_seen : 'Has not logged in yet.'}\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            ))}\n          </Table>\n        </TableContainer>\n      )}\n    </Box>\n  );\n};\n\nexport default AdminUserList;\n","import React, { useEffect } from 'react';\nimport { useDeletePollQuestionMutation } from '../../api/generated/graphql';\nimport { Button } from '@material-ui/core';\n\ninterface DeleteAnswerProps {\n  questionId: number;\n  setActiveState: boolean;\n  channelPollState?: Array<any>;\n}\n\nconst DeleteQuestion: React.FC<DeleteAnswerProps> = ({\n  questionId,\n  setActiveState,\n  channelPollState,\n}) => {\n  const [tobeDeleted, setToBeDeleted] = React.useState(setActiveState);\n  const [deleteQuestion, { error }] = useDeletePollQuestionMutation({\n    variables: {\n      pollQuestionId: questionId,\n    },\n  });\n\n  useEffect(() => {}, [tobeDeleted]);\n\n  const handleQuestionDelete = async (questionId: number) => {\n    if (!questionId) return;\n\n    await deleteQuestion({\n      variables: {\n        pollQuestionId: questionId,\n      },\n    });\n  };\n\n  if (error) {\n    console.log(`Error on delete question ${questionId}`);\n  }\n\n  return (\n    <>\n      {tobeDeleted ? (\n        <Button variant=\"outlined\" size=\"small\" color=\"secondary\" disabled>\n          Active poll\n        </Button>\n      ) : (\n        <Button\n          variant=\"contained\"\n          size=\"small\"\n          color=\"secondary\"\n          onClick={() => {\n            handleQuestionDelete(questionId);\n          }}\n        >\n          Delete\n        </Button>\n      )}\n    </>\n  );\n};\n\nexport default DeleteQuestion;\n","import React, { useEffect } from 'react';\nimport { Chip, ListItemIcon } from '@material-ui/core';\nimport LockIcon from '@material-ui/icons/Lock';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  locked: {\n    color: theme.palette.error.main,\n  },\n  unlocked: {\n    color: theme.palette.success.main,\n  },\n}));\n\ninterface ShowPollQuestionLockStateProps {\n  setActiveState: boolean;\n}\n\nconst ShowPollQuestionLockState: React.FC<ShowPollQuestionLockStateProps> = ({\n  setActiveState,\n}) => {\n  const classes = useStyles();\n\n  useEffect(() => {}, []);\n\n  return (\n    <>\n      <Chip\n        size=\"small\"\n        variant=\"outlined\"\n        color=\"primary\"\n        icon={\n          setActiveState ? (\n            <LockIcon className={classes.locked} />\n          ) : (\n            <LockOpenIcon className={classes.unlocked} />\n          )\n        }\n        label={setActiveState ? 'locked' : 'unlocked'}\n      />\n    </>\n  );\n};\n\nexport default ShowPollQuestionLockState;\n","import React, { useState, useEffect } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { getPollQuestionAnswers } from '../../atom';\nimport {\n  useWatchGetChannelsSubscription,\n  useWatchChannelPollActiveStateSubscription,\n  useAddPublishPollQuestionToChannelMutation,\n  useDeletePollQuestionFromChannelMutation,\n} from '../../api/generated/graphql';\nimport { Box, Chip, Typography } from '@material-ui/core';\nimport Loader from '../../components/shared/Loader';\n\ninterface GetChannelsProps {\n  questionId: number;\n}\n\nconst GetChannels: React.FC<GetChannelsProps> = ({ questionId }) => {\n  const [questionIdState, setQuestionIdState] = React.useState(questionId);\n  const getPollQuestionId = useRecoilValue<number>(getPollQuestionAnswers);\n  const [channelId, setChannelID] = useState<string>('');\n  const { data, loading, error } = useWatchGetChannelsSubscription();\n  const {\n    data: checkActiveChannelState,\n  } = useWatchChannelPollActiveStateSubscription({\n    variables: {},\n  });\n\n  console.log('GETPOLLQUESTIONID', getPollQuestionId, questionId);\n\n  const [pollQuestionToChannel] = useAddPublishPollQuestionToChannelMutation();\n  const [\n    deletePollQuestionFromChannelMutation,\n    { error: deleteError },\n  ] = useDeletePollQuestionFromChannelMutation({\n    variables: {\n      pollQuestionId: getPollQuestionId,\n      channelId: parseInt(channelId),\n    },\n  });\n\n  useEffect(() => {\n    setQuestionIdState(questionId);\n  }, [questionId, questionIdState]);\n\n  if (loading) {\n    return (\n      <Box\n        width=\"100%\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <Loader />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return <p>Error loading.</p>;\n  }\n\n  const handlePublishOnChannel = async (kanalId: number) => {\n    await pollQuestionToChannel({\n      variables: {\n        channelID: kanalId,\n        pollQuestionID: getPollQuestionId,\n      },\n    });\n  };\n\n  const handleDeleteQuestionFromChannel = async (kanalId: number) => {\n    if (kanalId === undefined) return;\n\n    await deletePollQuestionFromChannelMutation({\n      variables: {\n        pollQuestionId: getPollQuestionId,\n        channelId: kanalId,\n      },\n    });\n\n    if (deleteError) {\n      console.log('error on delete question from channel');\n    }\n  };\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        justifyContent=\"flex-start\"\n        alignItems=\"flex-start\"\n        flexDirection=\"column\"\n        pb={1}\n      >\n        <Typography variant=\"h3\">Channels with active polls:</Typography>\n        <Typography variant=\"caption\">\n          Click on chip to set actual question to channel:\n        </Typography>\n        {data?.channel\n          .sort((a, b) => a.id - b.id)\n          .map((chn, index) => (\n            <Box\n              key={index}\n              display=\"flex\"\n              justifyContent=\"flex-start\"\n              alignItems=\"flex-start\"\n            >\n              <Chip\n                disabled={\n                  chn.channel_polls[0]?.poll_question?.id !== questionIdState &&\n                  chn.channel_polls[0]?.poll_question?.id !== undefined\n                    ? true\n                    : false\n                }\n                onClick={() => handlePublishOnChannel(chn.id)}\n                onDelete={() => handleDeleteQuestionFromChannel(chn.id)}\n                style={{ marginTop: 8, marginRight: 8 }}\n                variant=\"outlined\"\n                size=\"small\"\n                color={\n                  chn.channel_polls[0]?.channel_id === chn.id\n                    ? 'secondary'\n                    : 'primary'\n                }\n                label={chn.name}\n              />\n              <Chip\n                variant={\n                  chn.channel_polls[0]?.poll_question?.text\n                    ? 'default'\n                    : 'outlined'\n                }\n                color={\n                  chn.channel_polls[0]?.poll_question?.text\n                    ? 'secondary'\n                    : 'primary'\n                }\n                label={\n                  chn.channel_polls[0]?.poll_question?.text\n                    ? chn.channel_polls[0]?.poll_question?.text\n                    : 'No poll set.'\n                }\n                style={{ marginTop: 8, marginRight: 8 }}\n                size=\"small\"\n              />\n            </Box>\n          ))}\n      </Box>\n    </>\n  );\n};\n\nexport default GetChannels;\n","import React, { useEffect } from 'react';\nimport moment from 'moment';\nimport clsx from 'clsx';\nimport { Link } from 'react-router-dom';\nimport { useRecoilState } from 'recoil';\nimport {\n  Accordion,\n  AccordionActions,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Button,\n  Chip,\n  Divider,\n  Typography,\n} from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport NotFound from '../shared/NotFound';\nimport { useWatchGetPollQuestionsSubscription } from '../../api/generated/graphql';\nimport { getPollQuestionAnswers } from '../../atom';\nimport DeleteQuestion from './DeleteQuestion';\nimport ShowPollQuestionLockState from './ShowPollQuestionLockState';\nimport GetChannels from './GetChannels';\nimport Loader from '../shared/Loader';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  play: {\n    color: theme.palette.error.main,\n  },\n  stop: {\n    color: theme.palette.success.main,\n  },\n\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n\n  details: {\n    alignItems: 'flex-start',\n  },\n  column: {\n    flexBasis: '100%',\n  },\n  helper: {\n    borderLeft: `2px solid ${theme.palette.divider}`,\n    padding: theme.spacing(1, 2),\n  },\n}));\n\nconst GetPollQuestions: React.FC = () => {\n  const classes = useStyles();\n  const { data, loading, error } = useWatchGetPollQuestionsSubscription({\n    variables: {},\n  });\n  const [pollQuestion, setPollQuestion] = useRecoilState<any>(\n    getPollQuestionAnswers,\n  );\n\n  const handleClick = (questionId: number) => {\n    setPollQuestion(questionId);\n  };\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  if (error) {\n    return <NotFound />;\n  }\n\n  return (\n    <>\n      <div className={classes.root}>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Typography variant=\"h3\">Poll list overview:</Typography>\n          <Chip\n            variant=\"outlined\"\n            size=\"small\"\n            color=\"primary\"\n            label={'Total polls: ' + data?.questions.length}\n          />\n        </Box>\n\n        {data?.questions.length === 0 ? (\n          <Alert severity=\"info\">Please add a new question.</Alert>\n        ) : (\n          data?.questions\n            .sort((a, b) => a.id + b.id)\n            .map((question) => (\n              <Accordion key={question.id} defaultExpanded={false}>\n                <AccordionSummary\n                  expandIcon={<ExpandMoreIcon />}\n                  aria-controls={question.text}\n                  id={question.text}\n                >\n                  <Box\n                    display=\"flex\"\n                    justifyContent=\"flex-start\"\n                    alignItems=\"center\"\n                    className={classes.column}\n                  >\n                    <Chip\n                      variant=\"outlined\"\n                      size=\"small\"\n                      color=\"primary\"\n                      label={question.id}\n                    />\n                    {question?.channel_polls.length > 0 ? (\n                      <HowToVoteIcon color=\"secondary\" />\n                    ) : (\n                      <HowToVoteIcon />\n                    )}\n\n                    <Link\n                      onClick={() => {\n                        handleClick(question.id);\n                      }}\n                      to={{\n                        pathname:\n                          '/dashboard/pollings/edit/question/' + question.id,\n                        state: { fromDashboard: true },\n                      }}\n                    >\n                      <Typography\n                        style={{ marginLeft: 16 }}\n                        className={classes.heading}\n                      >\n                        {question.text}\n                      </Typography>\n                    </Link>\n                  </Box>\n                  <Box\n                    display=\"flex\"\n                    justifyContent=\"flex-end\"\n                    alignItems=\"center\"\n                    className={classes.column}\n                  >\n                    <ShowPollQuestionLockState\n                      setActiveState={question.is_active}\n                    />\n                    <Chip\n                      variant=\"outlined\"\n                      color=\"primary\"\n                      size=\"small\"\n                      label={`Created at | ${moment(question.created_at).format(\n                        'DD-MM-YYYY | hh:mm:ss',\n                      )}`}\n                    />\n                  </Box>\n                </AccordionSummary>\n                <AccordionDetails className={classes.details}>\n                  <div className={classes.column}>\n                    <Typography\n                      variant=\"caption\"\n                      style={{ display: 'flex', width: '100%' }}\n                    >\n                      This poll is published on:\n                    </Typography>\n                    {question?.channel_polls.map((chn, index) => (\n                      <Chip\n                        key={chn.channel.name + index}\n                        style={{ marginTop: 8, marginRight: 8 }}\n                        variant=\"outlined\"\n                        size=\"small\"\n                        color=\"secondary\"\n                        label={chn.channel.name}\n                      />\n                    ))}\n                  </div>\n                  <div\n                    className={clsx(classes.column, classes.helper)}\n                    onMouseEnter={() => {\n                      handleClick(question.id);\n                    }}\n                  >\n                    <Typography variant=\"caption\">\n                      Where you want to publish this poll? Orange colored\n                      channels has an active poll.\n                    </Typography>\n                    <GetChannels questionId={question.id} />\n                  </div>\n                </AccordionDetails>\n                <Divider />\n                <AccordionActions>\n                  <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    href={`/dashboard/pollings/edit/question/${question.id}`}\n                  >\n                    Edit\n                  </Button>\n\n                  <DeleteQuestion\n                    questionId={question.id}\n                    setActiveState={question.is_active}\n                  />\n                </AccordionActions>\n              </Accordion>\n            ))\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default GetPollQuestions;\n","import React, { useEffect } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useAddPollQuestionMutation } from '../../api/generated/graphql';\nimport {\n  Box,\n  Button,\n  FormGroup,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  form: {},\n  messageInput: {\n    floatingLabelFocusStyle: {\n      color: theme.palette.secondary.dark,\n    },\n  },\n  messageButton: {\n    [theme.breakpoints.down('md')]: {\n      width: '100%',\n      size: 'small',\n    },\n    [theme.breakpoints.up('md')]: {\n      size: 'large',\n      width: '25%',\n    },\n    marginTop: theme.spacing(2),\n    marginLeft: theme.spacing(0),\n    backgroundColor: theme.palette.primary.dark,\n  },\n}));\n\nconst AddPollQuestion: React.FC = () => {\n  const classes = useStyles();\n  const { user: userAuth0 } = useAuth0();\n  const [addPollQuestionMutation] = useAddPollQuestionMutation();\n  const [pollTitle, setPollTitle] = React.useState<{ title: string }>({\n    title: '',\n  });\n\n  const handleChange = (e: any) => {\n    setPollTitle({ ...pollTitle, [e.target.id]: e.target.value });\n  };\n\n  const handleAddTitle = async (e: any) => {\n    e.preventDefault();\n\n    if (pollTitle.title === '') return;\n\n    await addPollQuestionMutation({\n      variables: {\n        text: pollTitle.title,\n        owner_id: userAuth0.sub,\n      },\n    });\n\n    setPollTitle({ title: '' });\n  };\n\n  useEffect(() => {}, [pollTitle]);\n\n  return (\n    <>\n      <Box className={classes.root} mt={5} mb={3}>\n        <Typography variant=\"h2\">Add a new poll</Typography>\n      </Box>\n      <form\n        className={classes.form}\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={handleAddTitle}\n      >\n        <FormGroup>\n          <TextField\n            id=\"title\"\n            required\n            value={pollTitle.title}\n            onChange={handleChange}\n            size=\"medium\"\n            variant=\"outlined\"\n            color=\"secondary\"\n            autoComplete=\"off\"\n            placeholder=\"Type your question here ...\"\n            label=\"Add a meaningful question\"\n            fullWidth\n            data-testid=\"pollquestion_title\"\n            InputProps={{\n              classes: {\n                input: classes.messageInput,\n              },\n            }}\n            InputLabelProps={{\n              className: classes.messageInput,\n            }}\n          />\n          <Button\n            type=\"submit\"\n            value=\"Add poll title\"\n            size=\"medium\"\n            variant=\"contained\"\n            endIcon={<HowToVoteIcon />}\n            className={classes.messageButton}\n          >\n            Add poll\n          </Button>\n        </FormGroup>\n      </form>\n    </>\n  );\n};\n\nexport default AddPollQuestion;\n","import React from 'react';\nimport { Divider, Grid } from '@material-ui/core';\n\nimport GetPollQuestions from './GetPollQuestions';\nimport AddPollQuestion from './AddPollQuestion';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  divider: {\n    marginTop: theme.spacing(5),\n    marginBottom: theme.spacing(5),\n  },\n}));\n\nconst PollingDashBoard: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Grid item xs={12}>\n        <AddPollQuestion />\n        <Divider className={classes.divider} />\n      </Grid>\n      <Grid item xs={12}>\n        <GetPollQuestions />\n      </Grid>\n    </>\n  );\n};\n\nexport default PollingDashBoard;\n","import React, { useEffect } from 'react';\nimport { Chip } from '@material-ui/core';\n\ninterface GetPollAnswerIdProps {\n  pollQuestionId: number;\n}\n\nconst GetPollAnswerId: React.FC<GetPollAnswerIdProps> = ({\n  pollQuestionId,\n}) => {\n  useEffect(() => {}, [pollQuestionId]);\n\n  return (\n    <>\n      <Chip\n        color=\"secondary\"\n        size=\"small\"\n        variant=\"outlined\"\n        label={'Poll question id: ' + pollQuestionId}\n      />\n    </>\n  );\n};\n\nexport default GetPollAnswerId;\n","import React, { useEffect } from 'react';\nimport { useDeletePollAnswerIdMutation } from '../../api/generated/graphql';\nimport { Button } from '@material-ui/core';\n\ninterface DeleteAnswerProps {\n  answerId: number;\n  setActiveState: boolean;\n}\n\nconst DeleteAnswer: React.FC<DeleteAnswerProps> = ({\n  answerId,\n  setActiveState,\n}) => {\n  const [deletePollAnswerIdMutation] = useDeletePollAnswerIdMutation({\n    variables: {\n      pollAnswerId: answerId,\n    },\n  });\n\n  useEffect(() => {}, [answerId, setActiveState]);\n\n  const handleDeleteAnswer = async (answerId: number) => {\n    await deletePollAnswerIdMutation({\n      variables: {\n        pollAnswerId: answerId,\n      },\n    });\n  };\n\n  return (\n    <>\n      <Button\n        style={{\n          marginTop: '8px',\n          marginLeft: '8px',\n          maxWidth: '100px',\n        }}\n        variant=\"outlined\"\n        size=\"large\"\n        color=\"secondary\"\n        disabled={setActiveState}\n        onClick={() => {\n          handleDeleteAnswer(answerId);\n        }}\n      >\n        Delete\n      </Button>\n    </>\n  );\n};\n\nexport default DeleteAnswer;\n","import React from 'react';\nimport {\n  useWatchGetPollAnswersSubscription,\n  useUpdatePollAnswerTextMutation,\n  useWatchGetPollQuestionSubscription,\n} from '../../api/generated/graphql';\nimport {\n  Box,\n  Button,\n  Chip,\n  FormGroup,\n  Grid,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport DeleteAnswer from './DeleteAnswer';\nimport Loader from '../shared/Loader';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  messageInput: {\n    floatingLabelFocusStyle: {\n      color: theme.palette.secondary.dark,\n    },\n  },\n}));\n\ninterface PollAnswerListProps {\n  pollQuestionId: number;\n}\n\nconst PollAnswerList: React.FC<PollAnswerListProps> = ({ pollQuestionId }) => {\n  const classes = useStyles();\n  const [updateEnabled, setUpdateEnabled] = React.useState(true);\n  const [answerTextUpdateId, setAnswerTextUpdateId] = React.useState<number>(0);\n  const [answerText, setAnswerText] = React.useState({\n    text: '',\n  });\n  const getPollQuestion = useWatchGetPollQuestionSubscription({\n    variables: {\n      pollQuestionId: pollQuestionId,\n    },\n  });\n  const { data, loading } = useWatchGetPollAnswersSubscription({\n    variables: {\n      pollQuestionId: pollQuestionId,\n    },\n  });\n  const [updatePollAnswerTextMutation] = useUpdatePollAnswerTextMutation({\n    variables: {\n      text: answerText.text,\n      pollAnswerId: answerTextUpdateId,\n    },\n  });\n\n  const handleAnswerChange = (index?: number, e?: any) => {\n    setAnswerText({ text: e.target.value });\n    setUpdateEnabled(false);\n  };\n\n  const handleUpdateAnswerText = async (answerId: number) => {\n    setAnswerTextUpdateId(answerId);\n\n    if (answerId === undefined || answerText.text === '') {\n      setUpdateEnabled(true);\n      return;\n    }\n\n    await updatePollAnswerTextMutation({\n      variables: {\n        text: Object.values(answerText)[0],\n        pollAnswerId: answerId,\n      },\n    });\n    answerText.text = '';\n    setUpdateEnabled(true);\n  };\n\n  if (getPollQuestion.loading || loading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      <Box display=\"flex\" justifyContent=\"flex-start\" alignItems=\"center\">\n        <Typography variant=\"h3\">Answers to these question</Typography>\n        <Chip\n          variant=\"outlined\"\n          size=\"small\"\n          color=\"primary\"\n          label={'Total answers: ' + data?.poll_answers.length}\n          style={{ marginLeft: '16px' }}\n        />\n      </Box>\n      {data?.poll_answers.length === 0 ? (\n        <Alert severity=\"info\">Please add an answer to the poll.</Alert>\n      ) : (\n        data?.poll_answers\n          .sort((a, b) => a.id - b.id)\n          .map((answer) => (\n            <FormGroup row key={answer.id}>\n              <Grid item xs={8}>\n                <TextField\n                  key={answer.id}\n                  name={answer.text + answer.id}\n                  required\n                  disabled={getPollQuestion?.data?.poll_question[0].is_active}\n                  onChange={(e) => {\n                    handleAnswerChange(answer?.id, e);\n                    setAnswerTextUpdateId(answer.id);\n                  }}\n                  multiline\n                  rows={4}\n                  size=\"medium\"\n                  variant=\"outlined\"\n                  color=\"secondary\"\n                  autoComplete=\"off\"\n                  placeholder=\"Type your answers here ...\"\n                  label={answer.text}\n                  fullWidth\n                  margin=\"dense\"\n                  InputProps={{\n                    classes: {\n                      input: classes.messageInput,\n                    },\n                  }}\n                  inputProps={{\n                    maxLength: 250,\n                  }}\n                  InputLabelProps={{\n                    className: classes.messageInput,\n                  }}\n                />\n              </Grid>\n              <Grid item xs={4}>\n                <Box\n                  display=\"flex\"\n                  justifyContent=\"flex-end\"\n                  alignItems=\"center\"\n                >\n                  <Button\n                    style={{\n                      marginTop: '8px',\n                      marginLeft: '8px',\n                      maxWidth: '100px',\n                    }}\n                    key={answer.id}\n                    variant=\"contained\"\n                    size=\"large\"\n                    color=\"secondary\"\n                    disabled={\n                      answer.id !== answerTextUpdateId\n                        ? true\n                        : false || updateEnabled === true\n                    }\n                    onClick={() => {\n                      handleUpdateAnswerText(answer.id);\n                    }}\n                  >\n                    Update\n                  </Button>\n                  <DeleteAnswer\n                    answerId={answer.id}\n                    setActiveState={\n                      getPollQuestion?.data?.poll_question[0]?.is_active\n                        ? true\n                        : false\n                    }\n                  />\n                  <Button\n                    style={{\n                      marginTop: '8px',\n                      marginLeft: '8px',\n                      whiteSpace: 'nowrap',\n                      maxWidth: '100px',\n                      minWidth: '100px',\n                    }}\n                    variant=\"outlined\"\n                    size=\"large\"\n                    color=\"secondary\"\n                    disabled={answer.votes !== undefined}\n                  >\n                    {answer.votes ? answer.votes : 'no votes'}\n                  </Button>\n                </Box>\n              </Grid>\n            </FormGroup>\n          ))\n      )}\n    </>\n  );\n};\n\nexport default PollAnswerList;\n","import React, { useEffect } from 'react';\nimport { Button } from '@material-ui/core';\nimport {\n  useWatchGetPollAnswersSubscription,\n  useSetPublishPollQuestionStateMutation,\n} from '../../api/generated/graphql';\nimport Loader from '../shared/Loader';\nimport LockIcon from '@material-ui/icons/Lock';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  lock: {\n    color: theme.palette.error.main,\n  },\n  unlock: {\n    color: theme.palette.success.main,\n  },\n}));\n\ninterface SetPollQuestionLockStateProps {\n  pollQuestionId: number;\n  setActiveState: boolean;\n}\n\nconst SetPollQuestionLockState: React.FC<SetPollQuestionLockStateProps> = ({\n  pollQuestionId,\n  setActiveState,\n}) => {\n  const classes = useStyles();\n  const [readyToPublish, setReadyToPublish] = React.useState<boolean>(\n    setActiveState,\n  );\n  const [setPollQuestionState] = useSetPublishPollQuestionStateMutation({\n    variables: {\n      pollQuestionId: pollQuestionId,\n      is_active: setActiveState,\n    },\n  });\n  const { data, loading } = useWatchGetPollAnswersSubscription({\n    variables: {\n      pollQuestionId: pollQuestionId,\n    },\n  });\n\n  useEffect(() => {\n    const totalAnswers = data?.poll_answers?.length;\n    if (totalAnswers && totalAnswers > 1) {\n      setReadyToPublish(false);\n    } else {\n      setReadyToPublish(true);\n    }\n  }, [readyToPublish, data]);\n\n  const handleSetPollQuestionPublishState = async () => {\n    await setPollQuestionState({\n      variables: {\n        pollQuestionId: pollQuestionId,\n        is_active: !setActiveState,\n      },\n    });\n  };\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      <Button\n        variant={readyToPublish ? 'outlined' : 'contained'}\n        color=\"secondary\"\n        disabled={readyToPublish}\n        endIcon={\n          setActiveState ? (\n            <LockIcon className={classes.lock} />\n          ) : (\n            <LockOpenIcon className={classes.unlock} />\n          )\n        }\n        onClick={handleSetPollQuestionPublishState}\n      >\n        {setActiveState ? 'locked' : 'unlocked'}\n      </Button>\n    </>\n  );\n};\n\nexport default SetPollQuestionLockState;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  Box,\n  Button,\n  Divider,\n  FormGroup,\n  Grid,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\nimport {\n  useWatchGetPollQuestionSubscription,\n  useAddAnswerToQuestionMutation,\n} from '../../api/generated/graphql';\nimport GetChannels from './GetChannels';\nimport GetPollAnswerId from './GetPollAnswerId';\nimport PollAnswerList from './PollAnswerList';\nimport SetPollQuestionLockState from './SetPollQuestionLockState';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  divider: {\n    marginTop: theme.spacing(5),\n    marginBottom: theme.spacing(5),\n  },\n  form: {},\n  messageInput: {\n    floatingLabelFocusStyle: {\n      color: theme.palette.secondary.dark,\n    },\n  },\n  messageButton: {\n    [theme.breakpoints.down('md')]: {\n      width: '100%',\n      size: 'small',\n    },\n    [theme.breakpoints.up('md')]: {\n      size: 'large',\n      width: '25%',\n    },\n    marginTop: theme.spacing(2),\n    marginLeft: theme.spacing(0),\n    backgroundColor: theme.palette.primary.dark,\n  },\n}));\n\ninterface ParamType {\n  question: string;\n}\n\nconst PollAnswers: React.FC = () => {\n  const classes = useStyles();\n  const [answerNewText, setAnswerNewText] = React.useState({\n    text: '',\n  });\n  const [answerText, setAnswerText] = React.useState({\n    text: '',\n  });\n  const [answerTextUpdateId, setAnswerTextUpdateId] = React.useState<number>(0);\n  const [currentAnswerId, setCurrentAnswerId] = React.useState<number>(0);\n  const { question: pollQuestionId } = useParams<ParamType>();\n  const [pollQuestionActiveState] = React.useState<boolean>();\n\n  const getPollQuestion = useWatchGetPollQuestionSubscription({\n    variables: {\n      pollQuestionId: parseInt(pollQuestionId),\n    },\n  });\n\n  const [addPollQuestionMutation] = useAddAnswerToQuestionMutation();\n\n  const handleNewAnswerChange = (index?: number, e?: any) => {\n    setAnswerNewText({ text: e.target.value });\n    setCurrentAnswerId(e.target.id);\n  };\n\n  const handleAddAnswer = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (answerNewText.text === '') return;\n    await addPollQuestionMutation({\n      variables: {\n        text: answerNewText.text,\n        pollQuestionId: parseInt(pollQuestionId),\n      },\n    });\n\n    setAnswerNewText({ text: '' });\n  };\n\n  return (\n    <>\n      <Grid item xs={12}>\n        <Box mt={3} p={0}>\n          <GetPollAnswerId pollQuestionId={parseInt(pollQuestionId)} />\n        </Box>\n\n        <Box\n          display=\"flex\"\n          justifyContent=\"space-between\"\n          alignItems=\"flex-end\"\n          mb={3}\n          mt={0}\n        >\n          <Typography variant=\"h2\">\n            {getPollQuestion?.data?.poll_question[0]?.text\n              ? getPollQuestion?.data?.poll_question[0]?.text\n              : 'no value'}\n          </Typography>\n\n          <SetPollQuestionLockState\n            pollQuestionId={parseInt(pollQuestionId)}\n            setActiveState={\n              getPollQuestion?.data?.poll_question[0]?.is_active ? true : false\n            }\n          />\n        </Box>\n        <form\n          className={classes.form}\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleAddAnswer}\n        >\n          <FormGroup row>\n            <TextField\n              key={getPollQuestion?.data?.poll_question[0]?.id}\n              name=\"poll_answer\"\n              value={answerNewText.text}\n              required\n              multiline\n              rowsMax={4}\n              disabled={getPollQuestion?.data?.poll_question[0]?.is_active}\n              onChange={(e) =>\n                handleNewAnswerChange(\n                  getPollQuestion?.data?.poll_question[0]?.id,\n                  e,\n                )\n              }\n              size=\"medium\"\n              variant=\"outlined\"\n              color=\"secondary\"\n              autoComplete=\"off\"\n              placeholder=\"Type your answers here ...\"\n              label=\"Add an answer to these question\"\n              fullWidth\n              InputProps={{\n                classes: {\n                  input: classes.messageInput,\n                },\n              }}\n              inputProps={{\n                maxLength: 250,\n              }}\n              InputLabelProps={{\n                className: classes.messageInput,\n              }}\n            />\n            <Button\n              type=\"submit\"\n              value=\"Add poll title\"\n              size=\"medium\"\n              variant=\"contained\"\n              endIcon={<HowToVoteIcon />}\n              className={classes.messageButton}\n            >\n              Add answer\n            </Button>\n          </FormGroup>\n        </form>\n        <Divider className={classes.divider} />\n      </Grid>\n      <Grid item xs={12}>\n        <PollAnswerList pollQuestionId={parseInt(pollQuestionId)} />\n        <Divider className={classes.divider} />\n        <GetChannels questionId={currentAnswerId} />\n      </Grid>\n    </>\n  );\n};\n\nexport default PollAnswers;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { theme } from '../../theme/theme';\nimport { Container, Divider, Grid, Typography } from '@material-ui/core/';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport AdminSidebar from './AdminSidebar';\nimport AdminUserList from './AdminUserList';\nimport PollingDashBoard from '../adminPollings/PollingDashBoard';\nimport PollAnswers from '../adminPollings/PollAnswers';\nimport NotFound from '../shared/NotFound';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    alignItems: 'flex-start',\n    flexGrow: 1,\n    height: '100vh',\n    marginTop: theme.spacing(0),\n    paddingBottom: theme.spacing(0),\n  },\n  container: {\n    margin: theme.spacing(5),\n    marginTop: theme.spacing(5),\n  },\n  sidebar: {\n    height: '100vh',\n    maxHeight: '100vh',\n    display: 'flex',\n    alignItems: 'flex-start',\n    marginTop: theme.spacing(0),\n    paddingTop: theme.spacing(5),\n    borderRightWidth: 1,\n    borderRightStyle: 'solid',\n    borderRightColor: theme.palette.primary.dark,\n  },\n}));\n\nconst AdminContainer: React.FC = () => {\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n  return (\n    <Container\n      component=\"main\"\n      maxWidth=\"xl\"\n      disableGutters\n      className={classes.root}\n    >\n      {matches === true && (\n        <Grid item xs={4} className={classes.sidebar}>\n          <AdminSidebar />\n        </Grid>\n      )}\n      <Grid item xs={12} md={8} className={classes.container}>\n        <Typography color=\"primary\" variant=\"h1\">\n          Admin Dashboard\n        </Typography>\n        <Divider />\n        <Switch>\n          <Route exact path=\"/dashboard/users\" component={AdminUserList} />\n          <Route exact path=\"/dashboard\" component={PollingDashBoard} />\n          <Route\n            exact\n            path=\"/dashboard/pollings\"\n            component={PollingDashBoard}\n          />\n          <Route\n            exact\n            path=\"/dashboard/pollings/edit/question/:question\"\n            component={PollAnswers}\n          />\n          <Route component={NotFound} />\n        </Switch>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default AdminContainer;\n","import React from 'react';\nimport AdminContainer from '../admin/AdminContainer';\nimport { Container } from '@material-ui/core';\n\nconst AdminBoard: React.FC = () => {\n  return (\n    <Container maxWidth=\"xl\">\n      <AdminContainer />\n    </Container>\n  );\n};\n\nexport default AdminBoard;\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { theme } from './theme/theme';\nimport { Box } from '@material-ui/core';\nimport SignIn from './components/shared/SignIn';\nimport Loader from './components/shared/Loader';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport NotFound from './components/shared/NotFound';\nimport PrivateRoute from './components/PrivateRoute';\nimport AddChannelMembers from './components/chat/AddChannelMembers';\nimport AddDirectMessageChannel from './components/chat/AddDirectMessageChannel';\nimport ThreadBoard from './components/layout/ThreadBoard';\nimport ChatBoard from './components/layout/ChatBoard';\nimport AdminBoard from './components/layout/AdminBoard';\nimport Logo from './components/shared/Logo';\n\nconst App: React.FC = () => {\n  const { isAuthenticated, user, isLoading } = useAuth0();\n\n  if (isLoading) {\n    return (\n      <>\n        <Box\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          flexDirection=\"column\"\n          style={{\n            height: '100vh',\n            backgroundColor: theme.palette.error.dark,\n          }}\n        >\n          <Box>\n            <Logo />\n            <LinearProgress color=\"primary\" style={{ marginTop: '16px' }} />\n          </Box>\n        </Box>\n      </>\n    );\n  }\n\n  if (isAuthenticated) {\n    console.log('user.id', user.sub);\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className=\"app\">\n        {isAuthenticated ? (\n          <Switch>\n            <Redirect exact from=\"/\" to=\"/channel/general\" />\n            <Redirect exact from=\"/channel\" to=\"/channel/general\" />\n\n            <PrivateRoute\n              path=\"/channel/:channel/thread/:messageId\"\n              component={ThreadBoard}\n            />\n            <PrivateRoute path=\"/channel/threads\" component={ThreadBoard} />\n            <PrivateRoute path=\"/channel/:channel\" component={ChatBoard} />\n\n            <PrivateRoute path=\"/add-user-to-channel\" component={ChatBoard} />\n            <PrivateRoute\n              path=\"/addChannelMembers\"\n              component={AddChannelMembers}\n            />\n            <PrivateRoute\n              path=\"/addDirectMessageChannelMembers\"\n              component={AddDirectMessageChannel}\n            />\n\n            <PrivateRoute path=\"/dashboard\" component={AdminBoard} />\n            <Route exact path=\"/404-not-found\" component={NotFound} />\n            <Redirect to=\"/404-not-found\" />\n          </Switch>\n        ) : (\n          <Switch>\n            <Redirect exact from=\"/\" to=\"/channel/general\" />\n            <Route path=\"/home\" component={SignIn} />\n            <PrivateRoute\n              path=\"/channel/:channel/thread/:messageId\"\n              component={ThreadBoard}\n            />\n            <PrivateRoute path=\"/channel/threads\" component={ThreadBoard} />\n            <PrivateRoute path=\"/channel/:channel\" component={ChatBoard} />\n\n            <PrivateRoute path=\"/dashboard\" component={AdminBoard} />\n            <Route exact path=\"/404-not-found\" component={NotFound} />\n            <Redirect to=\"/404-not-found\" />\n          </Switch>\n        )}\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Auth0Provider } from '@auth0/auth0-react';\nimport ApolloWrapper from './components/ApolloWrapper';\nimport './index.css';\nimport App from './App';\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = (appState: any) => {\n  window.history.replaceState(\n    {},\n    document.title,\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname,\n  );\n};\n\nconst domain: string = process.env.REACT_APP_AUTH0_DOMAIN || '';\nconst clientId: string = process.env.REACT_APP_AUTH0_CLIENT_ID || '';\nconst redirectUri: string = process.env.REACT_APP_AUTH0_REDIRECT_URI || '';\nconst audience: string = process.env.REACT_APP_AUTH0_AUDIENCE || '';\n\nReactDOM.render(\n  <Auth0Provider\n    domain={domain}\n    clientId={clientId}\n    redirectUri={redirectUri}\n    onRedirectCallback={onRedirectCallback}\n    audience={audience}\n  >\n    <BrowserRouter>\n      <RecoilRoot>\n        <ApolloWrapper>\n          <React.Fragment>\n            <App />\n          </React.Fragment>\n        </ApolloWrapper>\n      </RecoilRoot>\n    </BrowserRouter>\n  </Auth0Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}