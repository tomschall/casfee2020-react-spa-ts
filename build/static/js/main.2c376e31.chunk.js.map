{"version":3,"sources":["api/generated/graphql.tsx","components/ApolloWrapper.tsx","theme/theme.tsx","theme/typography.ts","theme/overrides.ts","components/Login.tsx","components/shared/SignIn.tsx","components/shared/NotFound.tsx","components/shared/Loader.tsx","components/PrivateRoute.tsx","atom.js","components/shared/Logo.tsx","components/shared/OnlineUserStatus.tsx","components/adminPollings/ResultGraph.tsx","components/adminPollings/VoteButton.tsx","components/adminPollings/ShowTotalVotes.tsx","components/adminPollings/PublishChannelPolling.tsx","components/adminPollings/PollPopup.tsx","components/Logout.tsx","components/shared/MenuBarDrawer.tsx","components/shared/UserStatus.tsx","components/chat/UnreadMessageCounter.tsx","components/chat/ChannelList.tsx","components/chat/DirectMessageUserList.tsx","components/chat/AddChannel.tsx","components/shared/ThreadsLink.tsx","components/shared/DashBoardLink.tsx","components/shared/SideBar.tsx","components/shared/UserHeader.tsx","components/chat/MobileHeaderMenu.tsx","components/chat/AddChannelMembers.tsx","components/chat/AddDirectMessageChannel.tsx","components/chat/threads/ThreadInfo.tsx","components/chat/threads/ThreadDeleteMessage.tsx","components/chat/threads/ThreadMessageList.tsx","components/shared/GiphyCarousel.tsx","components/shared/MenuBar.tsx","components/shared/TypingIndicator.tsx","components/chat/threads/ThreadMessageInput.tsx","components/chat/threads/Thread.tsx","components/chat/threads/ThreadListInputContainer.tsx","components/chat/threads/ThreadList.tsx","components/chat/threads/ThreadListContainer.tsx","components/chat/threads/ThreadContainer.tsx","components/layout/ThreadBoard.tsx","components/chat/threads/ThreadReply.tsx","components/chat/threads/ThreadReplyIn.tsx","components/chat/DeleteMessage.tsx","components/chat/ReplaceMessage.tsx","components/chat/DeleteMessageWrapper.tsx","components/chat/UpdateMessage.tsx","components/chat/MessageList.tsx","components/chat/MessageInput.tsx","components/chat/Chat.tsx","components/chat/ChatApp.tsx","components/chat/ChatContainer.tsx","components/layout/ChatBoard.tsx","components/admin/AdminUserList.tsx","components/adminPollings/DeleteQuestion.tsx","components/adminPollings/GetChannels.tsx","components/adminPollings/SetPollQuestionLockState.tsx","components/adminPollings/GetPollQuestions.tsx","components/adminPollings/AddPollQuestion.tsx","components/adminPollings/PollingDashBoard.tsx","components/adminPollings/GetPollAnswerId.tsx","components/adminPollings/DeleteAnswer.tsx","components/adminPollings/PollAnswerList.tsx","components/adminPollings/PollAnswers.tsx","components/adminPollings/MobileHeaderDashboardMenu.tsx","components/admin/AdminContainer.tsx","components/layout/AdminBoard.tsx","App.tsx","index.tsx"],"names":["AddDirectMessageChannelChannelTypeEnum","MyMutationChannelTypeEnum","ValidateAndAddDirectMessageChannelTypeEnum","Channel_Constraint","Channel_Poll_Constraint","Channel_Poll_Select_Column","Channel_Poll_Update_Column","Channel_Select_Column","Channel_Thread_Constraint","Channel_Thread_Message_Constraint","Channel_Thread_Message_Select_Column","Channel_Thread_Message_Update_Column","Channel_Thread_Select_Column","Channel_Thread_Update_Column","Channel_Type_Constraint","Channel_Type_Enum","Channel_Type_Select_Column","Channel_Type_Update_Column","Channel_Update_Column","Message_Constraint","Message_Cursor_Constraint","Message_Cursor_Select_Column","Message_Cursor_Update_Column","Message_Select_Column","Message_Update_Column","Order_By","Poll_Anwers_Constraint","Poll_Anwers_Select_Column","Poll_Anwers_Update_Column","Poll_Questions_Constraint","Poll_Questions_Select_Column","Poll_Questions_Update_Column","User_Channels_Constraint","User_Channels_Select_Column","User_Channels_Update_Column","User_Constraint","User_Online_Select_Column","User_Select_Column","User_Typing_Select_Column","User_Update_Column","User_Votes_Constraint","User_Votes_Select_Column","User_Votes_Update_Column","ApolloWrapper","children","useAuth0","isAuthenticated","getAccessTokenSilently","getHeaders","a","headers","token","parseTokenAndSetRoles","Authorization","user","jwt_decode","localStorage","setItem","sub","authMiddleware","setContext","operation","originalHeaders","wsLinkOptions","uri","process","options","reconnect","lazy","connectionParams","httpLink","createHttpLink","wsLink","WebSocketLink","link","split","query","getMainDefinition","kind","concat","cache","InMemoryCache","client","ApolloClient","theme","createMuiTheme","palette","common","black","white","type","background","paper","default","primary","light","main","dark","contrastText","secondary","error","success","shape","borderRadius","mixins","toolbar","spacing","props","MuiCheckbox","style","fontSize","MuiChip","padding","MuiList","MuiListItemIcon","color","MuiPaper","draggable","elevation","overflow","MuiAppBar","top","bottom","MuiButton","disableElevation","variant","size","disableFocusRipple","disableTouchRipple","typography","body1","body2","fontWeight","button","h1","paddingBottom","h2","marginTop","h3","marginBottom","h4","h5","h6","overrides","MuiCssBaseline","width","height","backgroundColor","textDecoration","MuiToolbar","root","MuiPopover","MuiBackdrop","MuiFab","boxShadow","label","MuiSpeedDial","direction","directionUp","actions","display","MuiSpeedDialAction","fab","staticTooltip","tooltipOpen","tooltipPlacement","tooltipPlacementLeft","staticTooltipLabel","right","whiteSpace","MuiTableCell","borderBottom","MuiInputBase","MuiContainer","margin","MuiListItemText","MuiDivider","opacity","MuiTypography","contained","MuiIconButton","MuiAccordionSummary","expandIcon","Login","loginWithRedirect","Button","onClick","aria-label","useStyles","makeStyles","justifyContent","alignItems","flexDirection","title","textTransform","paddingTop","SignIn","classes","Container","maxWidth","Grid","container","className","item","Box","src","alt","Typography","toolbarIcon","NotFound","Loader","flex","CircularProgress","PrivateRoute","component","args","withAuthenticationRequired","onRedirecting","InsertMessageDocument","gql","useInsertMessageMutation","baseOptions","Apollo","UpdateMessageDocument","useUpdateMessageMutation","DeleteMessageDocument","SetUserOnlineDocument","useSetUserOnlineMutation","AddChannelDocument","ValidateAndAddDirectMessageChannelDocument","AddChannelUserDocument","SendTypingEventDocument","useSendTypingEventMutation","UpsertMessageCursorDocument","useUpsertMessageCursorMutation","InsertChannelThreadMessageDocument","useInsertChannelThreadMessageMutation","DeleteThreadMessageDocument","InsertChannelThreadDocument","AddPollQuestionDocument","AddAnswerToQuestionDocument","AddPublishPollQuestionToChannelDocument","SetPollAnswerVoteDocument","SetPublishPollQuestionStateDocument","DeletePollQuestionDocument","DeletePollQuestionFromChannelDocument","UpdatePollAnswerTextDocument","DeletePollAnswerIdDocument","SetUserVotePollQuestionDocument","GetUserListDocument","GetChannelByNameDocument","GetChannelThreadDocument","WatchMessagesDocument","useWatchMessagesSubscription","WatchChannelThreadMessagesDocument","useWatchChannelThreadMessagesSubscription","WatchChannelThreadDocument","useWatchChannelThreadSubscription","WatchThreadsDocument","WatchOnlineUsersDocument","useWatchOnlineUsersSubscription","WatchChannelsDocument","WatchDirectMessageChannelsDocument","WatchUsersWhoHaveNotSubscribedToChannelDocument","WatchUsersWhoHaveSubscribedToDirectMessageChannelDocument","WatchUsersWhoHaveSubscribedToChannelDocument","GetUserIsTypingDocument","WatchMessageCursorDocument","WatchGetPollQuestionsDocument","WatchGetPollQuestionDocument","useWatchGetPollQuestionSubscription","WatchGetPollAnswersDocument","useWatchGetPollAnswersSubscription","WatchChannelPollQuestionDocument","WatchPollAnswerVotesDocument","WatchGetChannelsDocument","useWatchGetChannelsSubscription","WatchChannelHasActivePollDocument","WatchChannelPollActiveStateDocument","WatchCheckUserHasVotedDocument","atom","key","currentChannelState","getPollQuestionAnswers","giphyState","deletedMessageState","large","backgroundSize","Logo","Avatar","badgeOnline","position","left","animation","border","content","badgeOffline","avatar","OnlineUserStatus","onlineUsers","data","onlineUsersError","console","log","Alert","severity","ListItemIcon","Badge","user_id","undefined","badge","onlineUser","users","filter","u","auth0_user_id","length","setOnlineUsersStatus","username","substring","toUpperCase","text","breakpoints","down","ResultGraph","answerId","userVote","pollVotes","totalVotes","LinearProgressWithLabel","mr","LinearProgress","id","Chip","value","toFixed","icon","mb","answerid","pollSubmit","VoteButton","enabled","disabled","ShowTotalVotes","badgeContent","pollCard","transform","minWidth","PublishChannelPolling","useRecoilState","currentChannel","React","useState","selectedPollAnswerId","setSelectedPollAnswerId","variables","pollAnswerId","getPollAnswerVotes","loading","useWatchChannelPollQuestionSubscription","channelId","useSetPollAnswerVoteMutation","setPollAnswerVoteMutation","numbers","getChannelPoll","poll_question","poll_anwers","count","map","num","push","votes","reduce","b","useWatchCheckUserHasVotedSubscription","pollQuestionId","auth0UserId","userVoteLoading","useSetUserVotePollQuestionMutation","userName","setUserVotePollQuestionMutation","handleChange","e","parseInt","target","handleSubmit","preventDefault","currentPollAnswerVotes","pollAnswerVotes","newVote","nickname","user_votes","Paper","channelPoll","sort","poll_answer_id","onSubmit","FormControl","RadioGroup","name","onChange","pollAnswer","FormControlLabel","control","Radio","checked","popoverRoot","popupWidth","voteIcon","cursor","PollPopUp","currentChannelId","poll_questions","popupId","popupState","bindTrigger","Popover","anchorReference","bindPopover","close","Logout","logout","IconButton","returnTo","window","clear","up","paddingLeft","paddingRight","drawerPaper","transition","transitions","create","easing","easeInOut","duration","enteringScreen","drawerPaperClose","overflowX","easeOut","leavingScreen","MenuBarDrawer","open","Drawer","anchor","clsx","Toolbar","UserStatus","usersOnline","marginRight","marginLeft","Tooltip","placement","flexWrap","UnreadMessageCounter","auth0Error","setCount","fetchPolicy","channel_id","useWatchMessageCursorData","useWatchMessageCursorLoading","useWatchMessageCursorError","useEffect","messageId","message_cursor","message_id","messageCounterArray","messages","m","Fragment","Channels","setOpen","match","useRouteMatch","activeLink","channel_type","ChatMessage","List","ListItem","ListItemText","Collapse","in","timeout","channels","index","Link","to","is_private","nested","form","flexGrow","submit","itemText","DirectMessageUserList","history","useHistory","DirectMessage","user_channels","checkbox","AddChannel","matches","useMediaQuery","openAlert","setOpenAlert","channelName","setChannelName","channelIsPrivate","setChannelIsPrivate","addChannel","sendMessage","userAuth0","loadingAuth0","isLoading","setSnackbarPosition","handleAlert","channel","owner_id","toLocaleLowerCase","dataAddChannel","message","insert_channel","returning","unmountOnExit","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","noValidate","autoComplete","xs","TextField","autoFocus","placeholder","fullWidth","Checkbox","endIcon","arial-label","ThreadsLink","DashboardLink","overflowY","WebkitOverflowScrolling","branding","logo","menuButton","SideBar","handleDrawerClose","role","getItem","Divider","DashBoardLink","ChannelList","UserHeader","zIndex","outerContainer","MobileHeaderMenu","showAddUserButton","isThreadList","spacer","AddChannelMembers","useAddChannelUserMutation","addChannelUserMutation","addChannelUserError","handleUsersToggle","event","md","mt","AddDirectMessageChannel","setAnchorEl","setUsers","upsertMessageCursorMutation","upsertMessageError","sendUpdateMessageError","useValidateAndAddDirectMessageChannelMutation","validateAndAddDirectMessageChannelMutation","addDMError","checkUserSubscriptions","user_channel","check","handleAddUser","dm_user","uuidv4","user_id1","user_id2","validateAndAddDirectMessageChannel","head","messageText","ThreadInfo","channelThread","showThreadInfo","vspaceTop","ListItemAvatar","deleted","location","origin","moment","timestamp","fromNow","vspace","renderThreadInfo","ThreadDeleteMessage","deleteThreadMessageMutation","delete_channel_thread_message","affected_rows","handleDelete","overflowWrap","wordBreak","reply","ThreadMessageList","handleIncreaseLimit","limit","loadMoreButton","reverse","image","renderMessage","giphySearchInput","giphyCarousel","giphyFetch","GiphyFetch","GiphyCarousel","hideGiphyCarousel","setGif","giphySearchString","setGiphySearchString","fetchGifs","offset","search","trending","onGifClick","gif","gifHeight","gutter","ev","giphyImage","giphyButton","MenuBar","openGiphy","setOpenGiphy","showGiphyCarousel","setShowGiphyCarousel","order","TypingIndicator","self_id","user_typing","messageInput","maxHeight","ThreadMessageInput","setText","setdeletedMessage","sendTypingEventMutation","alert","channelThreadId","channel_thread_id","images","fixed_width","url","textLength","handleTyping","focused","setTextFieldSize","multiline","rows","InputProps","endAdornment","InputAdornment","input","InputLabelProps","Thread","setLimit","messagesEndRef","useRef","useParams","getChannelThreadData","getChannelThreadLoading","getChannelThreadError","setTimeout","current","scrollIntoView","scrollToBottom","channel_thread_message","channel_thread","ref","giphyVisible","giphyHidden","ThreadListInputContainer","bitly_url","ThreadList","end","messageContainer","ThreadListContainer","channel_thread_messages","flexBasis","chatApp","ThreadContainer","ChatBoard","sendUserIsOnline","interval","setInterval","clearInterval","ThreadReply","channelThreadData","channelThreadLoading","channelThreadError","insertChannelThreadMutation","navigateToThreadChannel","stopPropagation","handleClick","ThreadReplyIn","pathname","lastReply","DeleteMessage","useSetRecoilState","deleteMessageMutation","delete_message","ReplaceMessage","updateMessageMutation","handleReplace","_eq","update_message","DeleteMessageWrapper","UpdateMessage","handleUpdate","rowsMax","listItem","hyphens","textOverflow","MessageList","lastMessage","preLastMessageId","setRef","showUpdate","setShowUpdate","showUpdateMessageId","setShowUpdateMessageId","deletedMessage","useRecoilValue","handleShowUpdate","giphy","divider","i","MessageInput","textInput","handleSetLastMessage","focus","inputRef","polling","Chat","isPrivate","channelType","setLastMessage","ChatApp","setCurrentChannel","isLoadingAuth0","channelLoading","channelError","ChatContainer","AdminUserList","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","scope","last_seen","DeleteQuestion","questionId","setActiveState","channelPollState","deleteQuestion","handleQuestionDelete","GetChannels","questionLocked","questionIdState","setQuestionIdState","getPollQuestionId","useAddPublishPollQuestionToChannelMutation","pollQuestionToChannel","useDeletePollQuestionFromChannelMutation","deletePollQuestionFromChannelMutation","deleteError","handlePublishOnChannel","kanalId","channelID","pollQuestionID","handleDeleteQuestionFromChannel","pb","chn","channel_polls","onDelete","lock","unlock","SetPollQuestionLockState","readyToPublish","setReadyToPublish","is_active","setPollQuestionState","totalAnswers","poll_answers","handleSetPollQuestionPublishState","play","stop","lineHeight","details","GetPollQuestions","setPollQuestion","loadingGetChannel","questions","question","Accordion","defaultExpanded","AccordionSummary","aria-controls","state","fromDashboard","AccordionDetails","onMouseEnter","AccordionActions","floatingLabelFocusStyle","messageButton","AddPollQuestion","addPollQuestionMutation","pollTitle","setPollTitle","handleAddTitle","FormGroup","required","inputProps","maxLength","PollingDashBoard","GetPollAnswerId","DeleteAnswer","deletePollAnswerIdMutation","handleDeleteAnswer","PollAnswerList","updateEnabled","setUpdateEnabled","answerTextUpdateId","setAnswerTextUpdateId","answerText","setAnswerText","getPollQuestion","updatePollAnswerTextMutation","handleUpdateAnswerText","Object","values","answer","row","handleAnswerChange","shrink","PollAnswers","answerNewText","setAnswerNewText","setCurrentAnswerId","handleAddAnswer","handleNewAnswerChange","MobileHeaderDashboardMenu","article","AdminContainer","exact","path","AdminBoard","sidebar","minHeight","App","ThemeProvider","CssBaseline","disableGutters","sm","from","ThreadBoard","ReactDOM","render","domain","clientId","redirectUri","onRedirectCallback","appState","replaceState","document","targetUrl","audience","getElementById"],"mappings":"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AA,M,cA6KAC,K,kCAAAA,E,4BAAAA,M,cA8LAC,K,qCAAAA,M,cA0FAC,K,uBAAAA,E,QAAAA,E,qBAAAA,E,gCAAAA,M,cAgFAC,K,uBAAAA,E,QAAAA,E,qBAAAA,E,gCAAAA,M,cAyDAC,K,2BAAAA,E,QAAAA,E,uBAAAA,E,YAAAA,E,oBAAAA,M,cA+KAC,K,0DAAAA,E,yCAAAA,M,cAiIAC,K,wDAAAA,M,cAyGAC,K,oCAAAA,E,QAAAA,E,cAAAA,E,kBAAAA,E,sBAAAA,E,kBAAAA,M,cA8EAC,K,oCAAAA,E,QAAAA,E,cAAAA,E,kBAAAA,E,sBAAAA,E,kBAAAA,M,cAuGAC,K,QAAAA,E,wBAAAA,M,cAkEAC,K,QAAAA,E,wBAAAA,M,cA2HAC,K,qCAAAA,M,cAKAC,K,2BAAAA,E,gCAAAA,M,cAoFAC,K,kBAAAA,E,eAAAA,M,cAcAC,K,kBAAAA,E,eAAAA,M,cAQAC,K,2BAAAA,E,QAAAA,E,uBAAAA,E,YAAAA,E,oBAAAA,M,cAyLAC,K,4BAAAA,M,cA4FAC,K,wEAAAA,E,yCAAAA,M,cA4FAC,K,uBAAAA,E,QAAAA,E,uBAAAA,E,kBAAAA,M,cAgFAC,K,uBAAAA,E,QAAAA,E,uBAAAA,E,kBAAAA,M,cAkKAC,K,uBAAAA,E,kBAAAA,E,QAAAA,E,cAAAA,E,YAAAA,E,sBAAAA,E,kBAAAA,M,cAiFAC,K,uBAAAA,E,kBAAAA,E,QAAAA,E,cAAAA,E,YAAAA,E,sBAAAA,E,kBAAAA,M,cA4xBAC,K,UAAAA,E,gCAAAA,E,8BAAAA,E,YAAAA,E,kCAAAA,E,iCAAAA,M,cA+GAC,K,mCAAAA,M,cA8GAC,K,uBAAAA,E,QAAAA,E,yBAAAA,E,YAAAA,E,uBAAAA,E,iBAAAA,E,eAAAA,M,cAyFAC,K,uBAAAA,E,QAAAA,E,yBAAAA,E,YAAAA,E,uBAAAA,E,iBAAAA,E,eAAAA,M,cAuMAC,K,yCAAAA,M,cAoGAC,K,uBAAAA,E,QAAAA,E,qBAAAA,E,mBAAAA,E,YAAAA,E,wBAAAA,M,cAsEAC,K,uBAAAA,E,QAAAA,E,qBAAAA,E,mBAAAA,E,YAAAA,E,wBAAAA,M,cAwuCAC,K,uCAAAA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","file":"static/js/main.2c376e31.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  json: any;\n  timestamptz: any;\n  uuid: any;\n};\n\nexport type AddChannelUserOutput = {\n  __typename?: 'AddChannelUserOutput';\n  affected_rows: Scalars['Int'];\n};\n\nexport type AddChannelUserSubscriptionOutput = {\n  __typename?: 'AddChannelUserSubscriptionOutput';\n  affected_rows: Scalars['Int'];\n};\n\nexport enum AddDirectMessageChannelChannelTypeEnum {\n  /** this channel type is for chat messages in a private or public channel */\n  ChatMessage = 'CHAT_MESSAGE',\n  /** this channel type is for direct messages */\n  DirectMessage = 'DIRECT_MESSAGE'\n}\n\nexport type AddDirectMessageChannelOutput = {\n  __typename?: 'AddDirectMessageChannelOutput';\n  affected_rows: Scalars['Int'];\n};\n\n/** expression to compare columns of type Boolean. All fields are combined with logical 'AND'. */\nexport type Boolean_Comparison_Exp = {\n  _eq?: Maybe<Scalars['Boolean']>;\n  _gt?: Maybe<Scalars['Boolean']>;\n  _gte?: Maybe<Scalars['Boolean']>;\n  _in?: Maybe<Array<Scalars['Boolean']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Boolean']>;\n  _lte?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<Scalars['Boolean']>;\n  _nin?: Maybe<Array<Scalars['Boolean']>>;\n};\n\n/** expression to compare columns of type Int. All fields are combined with logical 'AND'. */\nexport type Int_Comparison_Exp = {\n  _eq?: Maybe<Scalars['Int']>;\n  _gt?: Maybe<Scalars['Int']>;\n  _gte?: Maybe<Scalars['Int']>;\n  _in?: Maybe<Array<Scalars['Int']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Int']>;\n  _lte?: Maybe<Scalars['Int']>;\n  _neq?: Maybe<Scalars['Int']>;\n  _nin?: Maybe<Array<Scalars['Int']>>;\n};\n\nexport type MyMutationBooleanComparisonExp = {\n  _eq?: Maybe<Scalars['Boolean']>;\n  _gt?: Maybe<Scalars['Boolean']>;\n  _gte?: Maybe<Scalars['Boolean']>;\n  _in?: Maybe<Array<Scalars['Boolean']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Boolean']>;\n  _lte?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<Scalars['Boolean']>;\n  _nin?: Maybe<Array<Scalars['Boolean']>>;\n};\n\nexport type MyMutationChannelBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationChannelBoolExp>>>;\n  _not?: Maybe<MyMutationChannelBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationChannelBoolExp>>>;\n  channelTypeByChannelType?: Maybe<MyMutationChannelTypeBoolExp>;\n  channel_polls?: Maybe<MyMutationChannelPollBoolExp>;\n  channel_type?: Maybe<MyMutationChannelTypeEnumComparisonExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  is_private?: Maybe<MyMutationBooleanComparisonExp>;\n  messages?: Maybe<MyMutationMessageBoolExp>;\n  name?: Maybe<MyMutationStringComparisonExp>;\n  owner_id?: Maybe<MyMutationStringComparisonExp>;\n  user?: Maybe<MyMutationUserBoolExp>;\n  user_channels?: Maybe<MyMutationUserChannelsBoolExp>;\n};\n\nexport type MyMutationChannelPollBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationChannelPollBoolExp>>>;\n  _not?: Maybe<MyMutationChannelPollBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationChannelPollBoolExp>>>;\n  channel?: Maybe<MyMutationChannelBoolExp>;\n  channel_id?: Maybe<MyMutationIntComparisonExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  poll_question?: Maybe<MyMutationPollQuestionsBoolExp>;\n  poll_questions?: Maybe<MyMutationIntComparisonExp>;\n};\n\nexport type MyMutationChannelThreadBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationChannelThreadBoolExp>>>;\n  _not?: Maybe<MyMutationChannelThreadBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationChannelThreadBoolExp>>>;\n  channel_thread_messages?: Maybe<MyMutationChannelThreadMessageBoolExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  message?: Maybe<MyMutationMessageBoolExp>;\n  message_id?: Maybe<MyMutationIntComparisonExp>;\n};\n\nexport type MyMutationChannelThreadMessageBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationChannelThreadMessageBoolExp>>>;\n  _not?: Maybe<MyMutationChannelThreadMessageBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationChannelThreadMessageBoolExp>>>;\n  channel_thread?: Maybe<MyMutationChannelThreadBoolExp>;\n  channel_thread_id?: Maybe<MyMutationIntComparisonExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  message?: Maybe<MyMutationStringComparisonExp>;\n  user?: Maybe<MyMutationUserBoolExp>;\n  user_id?: Maybe<MyMutationStringComparisonExp>;\n};\n\nexport type MyMutationChannelTypeBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationChannelTypeBoolExp>>>;\n  _not?: Maybe<MyMutationChannelTypeBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationChannelTypeBoolExp>>>;\n  channels?: Maybe<MyMutationChannelBoolExp>;\n  comment?: Maybe<MyMutationStringComparisonExp>;\n  value?: Maybe<MyMutationStringComparisonExp>;\n};\n\nexport enum MyMutationChannelTypeEnum {\n  /** this channel type is for chat messages in a private or public channel */\n  ChatMessage = 'CHAT_MESSAGE',\n  /** this channel type is for direct messages */\n  DirectMessage = 'DIRECT_MESSAGE'\n}\n\nexport type MyMutationChannelTypeEnumComparisonExp = {\n  _eq?: Maybe<MyMutationChannelTypeEnum>;\n  _in?: Maybe<Array<MyMutationChannelTypeEnum>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<MyMutationChannelTypeEnum>;\n  _nin?: Maybe<Array<MyMutationChannelTypeEnum>>;\n};\n\nexport type MyMutationIntComparisonExp = {\n  _eq?: Maybe<Scalars['Int']>;\n  _gt?: Maybe<Scalars['Int']>;\n  _gte?: Maybe<Scalars['Int']>;\n  _in?: Maybe<Array<Scalars['Int']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Int']>;\n  _lte?: Maybe<Scalars['Int']>;\n  _neq?: Maybe<Scalars['Int']>;\n  _nin?: Maybe<Array<Scalars['Int']>>;\n};\n\nexport type MyMutationMessageBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationMessageBoolExp>>>;\n  _not?: Maybe<MyMutationMessageBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationMessageBoolExp>>>;\n  channel?: Maybe<MyMutationChannelBoolExp>;\n  channel_id?: Maybe<MyMutationIntComparisonExp>;\n  channel_threads?: Maybe<MyMutationChannelThreadBoolExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  text?: Maybe<MyMutationStringComparisonExp>;\n  timestamp?: Maybe<MyMutationTimestamptzComparisonExp>;\n  user?: Maybe<MyMutationUserBoolExp>;\n  user_id?: Maybe<MyMutationStringComparisonExp>;\n};\n\nexport type MyMutationOutput = {\n  __typename?: 'MyMutationOutput';\n  affected_rows: Scalars['Int'];\n};\n\nexport type MyMutationPollAnwersBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationPollAnwersBoolExp>>>;\n  _not?: Maybe<MyMutationPollAnwersBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationPollAnwersBoolExp>>>;\n  created_at?: Maybe<MyMutationTimestamptzComparisonExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  poll_question?: Maybe<MyMutationPollQuestionsBoolExp>;\n  question_id?: Maybe<MyMutationIntComparisonExp>;\n  text?: Maybe<MyMutationStringComparisonExp>;\n  updated_at?: Maybe<MyMutationTimestamptzComparisonExp>;\n  user_id?: Maybe<MyMutationStringComparisonExp>;\n  votes?: Maybe<MyMutationIntComparisonExp>;\n};\n\nexport type MyMutationPollQuestionsBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationPollQuestionsBoolExp>>>;\n  _not?: Maybe<MyMutationPollQuestionsBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationPollQuestionsBoolExp>>>;\n  channel_polls?: Maybe<MyMutationChannelPollBoolExp>;\n  created_at?: Maybe<MyMutationTimestamptzComparisonExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  is_active?: Maybe<MyMutationBooleanComparisonExp>;\n  owner_id?: Maybe<MyMutationStringComparisonExp>;\n  poll_anwers?: Maybe<MyMutationPollAnwersBoolExp>;\n  text?: Maybe<MyMutationStringComparisonExp>;\n  updated_at?: Maybe<MyMutationTimestamptzComparisonExp>;\n};\n\nexport type MyMutationStringComparisonExp = {\n  _eq?: Maybe<Scalars['String']>;\n  _gt?: Maybe<Scalars['String']>;\n  _gte?: Maybe<Scalars['String']>;\n  _ilike?: Maybe<Scalars['String']>;\n  _in?: Maybe<Array<Scalars['String']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _like?: Maybe<Scalars['String']>;\n  _lt?: Maybe<Scalars['String']>;\n  _lte?: Maybe<Scalars['String']>;\n  _neq?: Maybe<Scalars['String']>;\n  _nilike?: Maybe<Scalars['String']>;\n  _nin?: Maybe<Array<Scalars['String']>>;\n  _nlike?: Maybe<Scalars['String']>;\n  _nsimilar?: Maybe<Scalars['String']>;\n  _similar?: Maybe<Scalars['String']>;\n};\n\nexport type MyMutationTimestamptzComparisonExp = {\n  _eq?: Maybe<Scalars['timestamptz']>;\n  _gt?: Maybe<Scalars['timestamptz']>;\n  _gte?: Maybe<Scalars['timestamptz']>;\n  _in?: Maybe<Array<Scalars['timestamptz']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['timestamptz']>;\n  _lte?: Maybe<Scalars['timestamptz']>;\n  _neq?: Maybe<Scalars['timestamptz']>;\n  _nin?: Maybe<Array<Scalars['timestamptz']>>;\n};\n\nexport type MyMutationUserBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationUserBoolExp>>>;\n  _not?: Maybe<MyMutationUserBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationUserBoolExp>>>;\n  auth0_user_id?: Maybe<MyMutationStringComparisonExp>;\n  channel_thread_messages?: Maybe<MyMutationChannelThreadMessageBoolExp>;\n  channels?: Maybe<MyMutationChannelBoolExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  last_seen?: Maybe<MyMutationTimestamptzComparisonExp>;\n  last_typed?: Maybe<MyMutationTimestamptzComparisonExp>;\n  messages?: Maybe<MyMutationMessageBoolExp>;\n  user_channels?: Maybe<MyMutationUserChannelsBoolExp>;\n  username?: Maybe<MyMutationStringComparisonExp>;\n};\n\nexport type MyMutationUserChannelsBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationUserChannelsBoolExp>>>;\n  _not?: Maybe<MyMutationUserChannelsBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationUserChannelsBoolExp>>>;\n  channel?: Maybe<MyMutationChannelBoolExp>;\n  channel_id?: Maybe<MyMutationIntComparisonExp>;\n  user?: Maybe<MyMutationUserBoolExp>;\n  user_id?: Maybe<MyMutationStringComparisonExp>;\n};\n\nexport type SampleInput = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\nexport type SampleOutput = {\n  __typename?: 'SampleOutput';\n  accessToken: Scalars['String'];\n};\n\n/** expression to compare columns of type String. All fields are combined with logical 'AND'. */\nexport type String_Comparison_Exp = {\n  _eq?: Maybe<Scalars['String']>;\n  _gt?: Maybe<Scalars['String']>;\n  _gte?: Maybe<Scalars['String']>;\n  _ilike?: Maybe<Scalars['String']>;\n  _in?: Maybe<Array<Scalars['String']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _like?: Maybe<Scalars['String']>;\n  _lt?: Maybe<Scalars['String']>;\n  _lte?: Maybe<Scalars['String']>;\n  _neq?: Maybe<Scalars['String']>;\n  _nilike?: Maybe<Scalars['String']>;\n  _nin?: Maybe<Array<Scalars['String']>>;\n  _nlike?: Maybe<Scalars['String']>;\n  _nsimilar?: Maybe<Scalars['String']>;\n  _similar?: Maybe<Scalars['String']>;\n};\n\nexport enum ValidateAndAddDirectMessageChannelTypeEnum {\n  /** this channel type is for chat messages in a private or public channel */\n  ChatMessage = 'CHAT_MESSAGE',\n  /** this channel type is for direct messages */\n  DirectMessage = 'DIRECT_MESSAGE'\n}\n\n/** columns and relationships of \"channel\" */\nexport type Channel = {\n  __typename?: 'channel';\n  /** An object relationship */\n  channelTypeByChannelType: Channel_Type;\n  /** An array relationship */\n  channel_polls: Array<Channel_Poll>;\n  /** An aggregated array relationship */\n  channel_polls_aggregate: Channel_Poll_Aggregate;\n  channel_type: Channel_Type_Enum;\n  id: Scalars['Int'];\n  is_private: Scalars['Boolean'];\n  /** An array relationship */\n  messages: Array<Message>;\n  /** An aggregated array relationship */\n  messages_aggregate: Message_Aggregate;\n  name: Scalars['String'];\n  owner_id?: Maybe<Scalars['String']>;\n  /** An object relationship */\n  user?: Maybe<User>;\n  /** An array relationship */\n  user_channels: Array<User_Channels>;\n  /** An aggregated array relationship */\n  user_channels_aggregate: User_Channels_Aggregate;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelChannel_PollsArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelChannel_Polls_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelMessagesArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelMessages_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelUser_ChannelsArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelUser_Channels_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n/** aggregated selection of \"channel\" */\nexport type Channel_Aggregate = {\n  __typename?: 'channel_aggregate';\n  aggregate?: Maybe<Channel_Aggregate_Fields>;\n  nodes: Array<Channel>;\n};\n\n/** aggregate fields of \"channel\" */\nexport type Channel_Aggregate_Fields = {\n  __typename?: 'channel_aggregate_fields';\n  avg?: Maybe<Channel_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Channel_Max_Fields>;\n  min?: Maybe<Channel_Min_Fields>;\n  stddev?: Maybe<Channel_Stddev_Fields>;\n  stddev_pop?: Maybe<Channel_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Channel_Stddev_Samp_Fields>;\n  sum?: Maybe<Channel_Sum_Fields>;\n  var_pop?: Maybe<Channel_Var_Pop_Fields>;\n  var_samp?: Maybe<Channel_Var_Samp_Fields>;\n  variance?: Maybe<Channel_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"channel\" */\nexport type Channel_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Channel_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"channel\" */\nexport type Channel_Aggregate_Order_By = {\n  avg?: Maybe<Channel_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Channel_Max_Order_By>;\n  min?: Maybe<Channel_Min_Order_By>;\n  stddev?: Maybe<Channel_Stddev_Order_By>;\n  stddev_pop?: Maybe<Channel_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Channel_Stddev_Samp_Order_By>;\n  sum?: Maybe<Channel_Sum_Order_By>;\n  var_pop?: Maybe<Channel_Var_Pop_Order_By>;\n  var_samp?: Maybe<Channel_Var_Samp_Order_By>;\n  variance?: Maybe<Channel_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"channel\" */\nexport type Channel_Arr_Rel_Insert_Input = {\n  data: Array<Channel_Insert_Input>;\n  on_conflict?: Maybe<Channel_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Channel_Avg_Fields = {\n  __typename?: 'channel_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"channel\" */\nexport type Channel_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"channel\". All fields are combined with a logical 'AND'. */\nexport type Channel_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Channel_Bool_Exp>>>;\n  _not?: Maybe<Channel_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Channel_Bool_Exp>>>;\n  channelTypeByChannelType?: Maybe<Channel_Type_Bool_Exp>;\n  channel_polls?: Maybe<Channel_Poll_Bool_Exp>;\n  channel_type?: Maybe<Channel_Type_Enum_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  is_private?: Maybe<Boolean_Comparison_Exp>;\n  messages?: Maybe<Message_Bool_Exp>;\n  name?: Maybe<String_Comparison_Exp>;\n  owner_id?: Maybe<String_Comparison_Exp>;\n  user?: Maybe<User_Bool_Exp>;\n  user_channels?: Maybe<User_Channels_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"channel\" */\nexport enum Channel_Constraint {\n  /** unique or primary key constraint */\n  ChannelNameKey = 'channel_name_key',\n  /** unique or primary key constraint */\n  ChannelPkey = 'channel_pkey'\n}\n\n/** input type for incrementing integer column in table \"channel\" */\nexport type Channel_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"channel\" */\nexport type Channel_Insert_Input = {\n  channelTypeByChannelType?: Maybe<Channel_Type_Obj_Rel_Insert_Input>;\n  channel_polls?: Maybe<Channel_Poll_Arr_Rel_Insert_Input>;\n  channel_type?: Maybe<Channel_Type_Enum>;\n  id?: Maybe<Scalars['Int']>;\n  is_private?: Maybe<Scalars['Boolean']>;\n  messages?: Maybe<Message_Arr_Rel_Insert_Input>;\n  name?: Maybe<Scalars['String']>;\n  owner_id?: Maybe<Scalars['String']>;\n  user?: Maybe<User_Obj_Rel_Insert_Input>;\n  user_channels?: Maybe<User_Channels_Arr_Rel_Insert_Input>;\n};\n\n/** aggregate max on columns */\nexport type Channel_Max_Fields = {\n  __typename?: 'channel_max_fields';\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  owner_id?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"channel\" */\nexport type Channel_Max_Order_By = {\n  id?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Channel_Min_Fields = {\n  __typename?: 'channel_min_fields';\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  owner_id?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"channel\" */\nexport type Channel_Min_Order_By = {\n  id?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"channel\" */\nexport type Channel_Mutation_Response = {\n  __typename?: 'channel_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Channel>;\n};\n\n/** input type for inserting object relation for remote table \"channel\" */\nexport type Channel_Obj_Rel_Insert_Input = {\n  data: Channel_Insert_Input;\n  on_conflict?: Maybe<Channel_On_Conflict>;\n};\n\n/** on conflict condition type for table \"channel\" */\nexport type Channel_On_Conflict = {\n  constraint: Channel_Constraint;\n  update_columns: Array<Channel_Update_Column>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"channel\" */\nexport type Channel_Order_By = {\n  channelTypeByChannelType?: Maybe<Channel_Type_Order_By>;\n  channel_polls_aggregate?: Maybe<Channel_Poll_Aggregate_Order_By>;\n  channel_type?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  is_private?: Maybe<Order_By>;\n  messages_aggregate?: Maybe<Message_Aggregate_Order_By>;\n  name?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n  user?: Maybe<User_Order_By>;\n  user_channels_aggregate?: Maybe<User_Channels_Aggregate_Order_By>;\n};\n\n/** primary key columns input for table: \"channel\" */\nexport type Channel_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** columns and relationships of \"channel_poll\" */\nexport type Channel_Poll = {\n  __typename?: 'channel_poll';\n  /** An object relationship */\n  channel: Channel;\n  channel_id: Scalars['Int'];\n  id: Scalars['Int'];\n  is_active?: Maybe<Scalars['Boolean']>;\n  /** An object relationship */\n  poll_question: Poll_Questions;\n  poll_questions: Scalars['Int'];\n};\n\n/** aggregated selection of \"channel_poll\" */\nexport type Channel_Poll_Aggregate = {\n  __typename?: 'channel_poll_aggregate';\n  aggregate?: Maybe<Channel_Poll_Aggregate_Fields>;\n  nodes: Array<Channel_Poll>;\n};\n\n/** aggregate fields of \"channel_poll\" */\nexport type Channel_Poll_Aggregate_Fields = {\n  __typename?: 'channel_poll_aggregate_fields';\n  avg?: Maybe<Channel_Poll_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Channel_Poll_Max_Fields>;\n  min?: Maybe<Channel_Poll_Min_Fields>;\n  stddev?: Maybe<Channel_Poll_Stddev_Fields>;\n  stddev_pop?: Maybe<Channel_Poll_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Channel_Poll_Stddev_Samp_Fields>;\n  sum?: Maybe<Channel_Poll_Sum_Fields>;\n  var_pop?: Maybe<Channel_Poll_Var_Pop_Fields>;\n  var_samp?: Maybe<Channel_Poll_Var_Samp_Fields>;\n  variance?: Maybe<Channel_Poll_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"channel_poll\" */\nexport type Channel_Poll_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Channel_Poll_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"channel_poll\" */\nexport type Channel_Poll_Aggregate_Order_By = {\n  avg?: Maybe<Channel_Poll_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Channel_Poll_Max_Order_By>;\n  min?: Maybe<Channel_Poll_Min_Order_By>;\n  stddev?: Maybe<Channel_Poll_Stddev_Order_By>;\n  stddev_pop?: Maybe<Channel_Poll_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Channel_Poll_Stddev_Samp_Order_By>;\n  sum?: Maybe<Channel_Poll_Sum_Order_By>;\n  var_pop?: Maybe<Channel_Poll_Var_Pop_Order_By>;\n  var_samp?: Maybe<Channel_Poll_Var_Samp_Order_By>;\n  variance?: Maybe<Channel_Poll_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"channel_poll\" */\nexport type Channel_Poll_Arr_Rel_Insert_Input = {\n  data: Array<Channel_Poll_Insert_Input>;\n  on_conflict?: Maybe<Channel_Poll_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Channel_Poll_Avg_Fields = {\n  __typename?: 'channel_poll_avg_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Avg_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"channel_poll\". All fields are combined with a logical 'AND'. */\nexport type Channel_Poll_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Channel_Poll_Bool_Exp>>>;\n  _not?: Maybe<Channel_Poll_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Channel_Poll_Bool_Exp>>>;\n  channel?: Maybe<Channel_Bool_Exp>;\n  channel_id?: Maybe<Int_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  is_active?: Maybe<Boolean_Comparison_Exp>;\n  poll_question?: Maybe<Poll_Questions_Bool_Exp>;\n  poll_questions?: Maybe<Int_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"channel_poll\" */\nexport enum Channel_Poll_Constraint {\n  /** unique or primary key constraint */\n  ChannelPollPkey = 'channel_poll_pkey'\n}\n\n/** input type for incrementing integer column in table \"channel_poll\" */\nexport type Channel_Poll_Inc_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"channel_poll\" */\nexport type Channel_Poll_Insert_Input = {\n  channel?: Maybe<Channel_Obj_Rel_Insert_Input>;\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  is_active?: Maybe<Scalars['Boolean']>;\n  poll_question?: Maybe<Poll_Questions_Obj_Rel_Insert_Input>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Channel_Poll_Max_Fields = {\n  __typename?: 'channel_poll_max_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** order by max() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Max_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Channel_Poll_Min_Fields = {\n  __typename?: 'channel_poll_min_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** order by min() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Min_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"channel_poll\" */\nexport type Channel_Poll_Mutation_Response = {\n  __typename?: 'channel_poll_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Channel_Poll>;\n};\n\n/** input type for inserting object relation for remote table \"channel_poll\" */\nexport type Channel_Poll_Obj_Rel_Insert_Input = {\n  data: Channel_Poll_Insert_Input;\n  on_conflict?: Maybe<Channel_Poll_On_Conflict>;\n};\n\n/** on conflict condition type for table \"channel_poll\" */\nexport type Channel_Poll_On_Conflict = {\n  constraint: Channel_Poll_Constraint;\n  update_columns: Array<Channel_Poll_Update_Column>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"channel_poll\" */\nexport type Channel_Poll_Order_By = {\n  channel?: Maybe<Channel_Order_By>;\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  is_active?: Maybe<Order_By>;\n  poll_question?: Maybe<Poll_Questions_Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"channel_poll\" */\nexport type Channel_Poll_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"channel_poll\" */\nexport enum Channel_Poll_Select_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsActive = 'is_active',\n  /** column name */\n  PollQuestions = 'poll_questions'\n}\n\n/** input type for updating data in table \"channel_poll\" */\nexport type Channel_Poll_Set_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  is_active?: Maybe<Scalars['Boolean']>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Channel_Poll_Stddev_Fields = {\n  __typename?: 'channel_poll_stddev_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Stddev_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Channel_Poll_Stddev_Pop_Fields = {\n  __typename?: 'channel_poll_stddev_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Stddev_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Channel_Poll_Stddev_Samp_Fields = {\n  __typename?: 'channel_poll_stddev_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Stddev_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Channel_Poll_Sum_Fields = {\n  __typename?: 'channel_poll_sum_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Sum_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** update columns of table \"channel_poll\" */\nexport enum Channel_Poll_Update_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsActive = 'is_active',\n  /** column name */\n  PollQuestions = 'poll_questions'\n}\n\n/** aggregate var_pop on columns */\nexport type Channel_Poll_Var_Pop_Fields = {\n  __typename?: 'channel_poll_var_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Var_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Channel_Poll_Var_Samp_Fields = {\n  __typename?: 'channel_poll_var_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Var_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Channel_Poll_Variance_Fields = {\n  __typename?: 'channel_poll_variance_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Variance_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** select columns of table \"channel\" */\nexport enum Channel_Select_Column {\n  /** column name */\n  ChannelType = 'channel_type',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsPrivate = 'is_private',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  OwnerId = 'owner_id'\n}\n\n/** input type for updating data in table \"channel\" */\nexport type Channel_Set_Input = {\n  channel_type?: Maybe<Channel_Type_Enum>;\n  id?: Maybe<Scalars['Int']>;\n  is_private?: Maybe<Scalars['Boolean']>;\n  name?: Maybe<Scalars['String']>;\n  owner_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type Channel_Stddev_Fields = {\n  __typename?: 'channel_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"channel\" */\nexport type Channel_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Channel_Stddev_Pop_Fields = {\n  __typename?: 'channel_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"channel\" */\nexport type Channel_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Channel_Stddev_Samp_Fields = {\n  __typename?: 'channel_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"channel\" */\nexport type Channel_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Channel_Sum_Fields = {\n  __typename?: 'channel_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"channel\" */\nexport type Channel_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"channel_thread\" */\nexport type Channel_Thread = {\n  __typename?: 'channel_thread';\n  /** An array relationship */\n  channel_thread_messages: Array<Channel_Thread_Message>;\n  /** An aggregated array relationship */\n  channel_thread_messages_aggregate: Channel_Thread_Message_Aggregate;\n  id: Scalars['Int'];\n  /** An object relationship */\n  message?: Maybe<Message>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n\n/** columns and relationships of \"channel_thread\" */\nexport type Channel_ThreadChannel_Thread_MessagesArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel_thread\" */\nexport type Channel_ThreadChannel_Thread_Messages_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n/** aggregated selection of \"channel_thread\" */\nexport type Channel_Thread_Aggregate = {\n  __typename?: 'channel_thread_aggregate';\n  aggregate?: Maybe<Channel_Thread_Aggregate_Fields>;\n  nodes: Array<Channel_Thread>;\n};\n\n/** aggregate fields of \"channel_thread\" */\nexport type Channel_Thread_Aggregate_Fields = {\n  __typename?: 'channel_thread_aggregate_fields';\n  avg?: Maybe<Channel_Thread_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Channel_Thread_Max_Fields>;\n  min?: Maybe<Channel_Thread_Min_Fields>;\n  stddev?: Maybe<Channel_Thread_Stddev_Fields>;\n  stddev_pop?: Maybe<Channel_Thread_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Channel_Thread_Stddev_Samp_Fields>;\n  sum?: Maybe<Channel_Thread_Sum_Fields>;\n  var_pop?: Maybe<Channel_Thread_Var_Pop_Fields>;\n  var_samp?: Maybe<Channel_Thread_Var_Samp_Fields>;\n  variance?: Maybe<Channel_Thread_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"channel_thread\" */\nexport type Channel_Thread_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Channel_Thread_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"channel_thread\" */\nexport type Channel_Thread_Aggregate_Order_By = {\n  avg?: Maybe<Channel_Thread_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Channel_Thread_Max_Order_By>;\n  min?: Maybe<Channel_Thread_Min_Order_By>;\n  stddev?: Maybe<Channel_Thread_Stddev_Order_By>;\n  stddev_pop?: Maybe<Channel_Thread_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Channel_Thread_Stddev_Samp_Order_By>;\n  sum?: Maybe<Channel_Thread_Sum_Order_By>;\n  var_pop?: Maybe<Channel_Thread_Var_Pop_Order_By>;\n  var_samp?: Maybe<Channel_Thread_Var_Samp_Order_By>;\n  variance?: Maybe<Channel_Thread_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"channel_thread\" */\nexport type Channel_Thread_Arr_Rel_Insert_Input = {\n  data: Array<Channel_Thread_Insert_Input>;\n  on_conflict?: Maybe<Channel_Thread_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Channel_Thread_Avg_Fields = {\n  __typename?: 'channel_thread_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"channel_thread\". All fields are combined with a logical 'AND'. */\nexport type Channel_Thread_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Channel_Thread_Bool_Exp>>>;\n  _not?: Maybe<Channel_Thread_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Channel_Thread_Bool_Exp>>>;\n  channel_thread_messages?: Maybe<Channel_Thread_Message_Bool_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  message?: Maybe<Message_Bool_Exp>;\n  message_id?: Maybe<Int_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"channel_thread\" */\nexport enum Channel_Thread_Constraint {\n  /** unique or primary key constraint */\n  ChannelThreadMessageIdKey = 'channel_thread_message_id_key',\n  /** unique or primary key constraint */\n  ChannelThreadPkey = 'channel_thread_pkey'\n}\n\n/** input type for incrementing integer column in table \"channel_thread\" */\nexport type Channel_Thread_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"channel_thread\" */\nexport type Channel_Thread_Insert_Input = {\n  channel_thread_messages?: Maybe<Channel_Thread_Message_Arr_Rel_Insert_Input>;\n  id?: Maybe<Scalars['Int']>;\n  message?: Maybe<Message_Obj_Rel_Insert_Input>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Channel_Thread_Max_Fields = {\n  __typename?: 'channel_thread_max_fields';\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by max() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Max_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"channel_thread_message\" */\nexport type Channel_Thread_Message = {\n  __typename?: 'channel_thread_message';\n  /** An object relationship */\n  channel_thread: Channel_Thread;\n  channel_thread_id: Scalars['Int'];\n  id: Scalars['Int'];\n  image?: Maybe<Scalars['String']>;\n  message: Scalars['String'];\n  timestamp: Scalars['timestamptz'];\n  /** An object relationship */\n  user: User;\n  user_id: Scalars['String'];\n};\n\n/** aggregated selection of \"channel_thread_message\" */\nexport type Channel_Thread_Message_Aggregate = {\n  __typename?: 'channel_thread_message_aggregate';\n  aggregate?: Maybe<Channel_Thread_Message_Aggregate_Fields>;\n  nodes: Array<Channel_Thread_Message>;\n};\n\n/** aggregate fields of \"channel_thread_message\" */\nexport type Channel_Thread_Message_Aggregate_Fields = {\n  __typename?: 'channel_thread_message_aggregate_fields';\n  avg?: Maybe<Channel_Thread_Message_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Channel_Thread_Message_Max_Fields>;\n  min?: Maybe<Channel_Thread_Message_Min_Fields>;\n  stddev?: Maybe<Channel_Thread_Message_Stddev_Fields>;\n  stddev_pop?: Maybe<Channel_Thread_Message_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Channel_Thread_Message_Stddev_Samp_Fields>;\n  sum?: Maybe<Channel_Thread_Message_Sum_Fields>;\n  var_pop?: Maybe<Channel_Thread_Message_Var_Pop_Fields>;\n  var_samp?: Maybe<Channel_Thread_Message_Var_Samp_Fields>;\n  variance?: Maybe<Channel_Thread_Message_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"channel_thread_message\" */\nexport type Channel_Thread_Message_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Aggregate_Order_By = {\n  avg?: Maybe<Channel_Thread_Message_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Channel_Thread_Message_Max_Order_By>;\n  min?: Maybe<Channel_Thread_Message_Min_Order_By>;\n  stddev?: Maybe<Channel_Thread_Message_Stddev_Order_By>;\n  stddev_pop?: Maybe<Channel_Thread_Message_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Channel_Thread_Message_Stddev_Samp_Order_By>;\n  sum?: Maybe<Channel_Thread_Message_Sum_Order_By>;\n  var_pop?: Maybe<Channel_Thread_Message_Var_Pop_Order_By>;\n  var_samp?: Maybe<Channel_Thread_Message_Var_Samp_Order_By>;\n  variance?: Maybe<Channel_Thread_Message_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Arr_Rel_Insert_Input = {\n  data: Array<Channel_Thread_Message_Insert_Input>;\n  on_conflict?: Maybe<Channel_Thread_Message_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Channel_Thread_Message_Avg_Fields = {\n  __typename?: 'channel_thread_message_avg_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Avg_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"channel_thread_message\". All fields are combined with a logical 'AND'. */\nexport type Channel_Thread_Message_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Channel_Thread_Message_Bool_Exp>>>;\n  _not?: Maybe<Channel_Thread_Message_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Channel_Thread_Message_Bool_Exp>>>;\n  channel_thread?: Maybe<Channel_Thread_Bool_Exp>;\n  channel_thread_id?: Maybe<Int_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  image?: Maybe<String_Comparison_Exp>;\n  message?: Maybe<String_Comparison_Exp>;\n  timestamp?: Maybe<Timestamptz_Comparison_Exp>;\n  user?: Maybe<User_Bool_Exp>;\n  user_id?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"channel_thread_message\" */\nexport enum Channel_Thread_Message_Constraint {\n  /** unique or primary key constraint */\n  ChannelThreadMessagePkey = 'channel_thread_message_pkey'\n}\n\n/** input type for incrementing integer column in table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Inc_Input = {\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Insert_Input = {\n  channel_thread?: Maybe<Channel_Thread_Obj_Rel_Insert_Input>;\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  message?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user?: Maybe<User_Obj_Rel_Insert_Input>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Channel_Thread_Message_Max_Fields = {\n  __typename?: 'channel_thread_message_max_fields';\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  message?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Max_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  message?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Channel_Thread_Message_Min_Fields = {\n  __typename?: 'channel_thread_message_min_fields';\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  message?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Min_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  message?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Mutation_Response = {\n  __typename?: 'channel_thread_message_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Channel_Thread_Message>;\n};\n\n/** input type for inserting object relation for remote table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Obj_Rel_Insert_Input = {\n  data: Channel_Thread_Message_Insert_Input;\n  on_conflict?: Maybe<Channel_Thread_Message_On_Conflict>;\n};\n\n/** on conflict condition type for table \"channel_thread_message\" */\nexport type Channel_Thread_Message_On_Conflict = {\n  constraint: Channel_Thread_Message_Constraint;\n  update_columns: Array<Channel_Thread_Message_Update_Column>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"channel_thread_message\" */\nexport type Channel_Thread_Message_Order_By = {\n  channel_thread?: Maybe<Channel_Thread_Order_By>;\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  message?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user?: Maybe<User_Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"channel_thread_message\" */\nexport type Channel_Thread_Message_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"channel_thread_message\" */\nexport enum Channel_Thread_Message_Select_Column {\n  /** column name */\n  ChannelThreadId = 'channel_thread_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Image = 'image',\n  /** column name */\n  Message = 'message',\n  /** column name */\n  Timestamp = 'timestamp',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** input type for updating data in table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Set_Input = {\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  message?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type Channel_Thread_Message_Stddev_Fields = {\n  __typename?: 'channel_thread_message_stddev_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Stddev_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Channel_Thread_Message_Stddev_Pop_Fields = {\n  __typename?: 'channel_thread_message_stddev_pop_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Stddev_Pop_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Channel_Thread_Message_Stddev_Samp_Fields = {\n  __typename?: 'channel_thread_message_stddev_samp_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Stddev_Samp_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Channel_Thread_Message_Sum_Fields = {\n  __typename?: 'channel_thread_message_sum_fields';\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Sum_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"channel_thread_message\" */\nexport enum Channel_Thread_Message_Update_Column {\n  /** column name */\n  ChannelThreadId = 'channel_thread_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Image = 'image',\n  /** column name */\n  Message = 'message',\n  /** column name */\n  Timestamp = 'timestamp',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Channel_Thread_Message_Var_Pop_Fields = {\n  __typename?: 'channel_thread_message_var_pop_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Var_Pop_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Channel_Thread_Message_Var_Samp_Fields = {\n  __typename?: 'channel_thread_message_var_samp_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Var_Samp_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Channel_Thread_Message_Variance_Fields = {\n  __typename?: 'channel_thread_message_variance_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Variance_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Channel_Thread_Min_Fields = {\n  __typename?: 'channel_thread_min_fields';\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by min() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Min_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"channel_thread\" */\nexport type Channel_Thread_Mutation_Response = {\n  __typename?: 'channel_thread_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Channel_Thread>;\n};\n\n/** input type for inserting object relation for remote table \"channel_thread\" */\nexport type Channel_Thread_Obj_Rel_Insert_Input = {\n  data: Channel_Thread_Insert_Input;\n  on_conflict?: Maybe<Channel_Thread_On_Conflict>;\n};\n\n/** on conflict condition type for table \"channel_thread\" */\nexport type Channel_Thread_On_Conflict = {\n  constraint: Channel_Thread_Constraint;\n  update_columns: Array<Channel_Thread_Update_Column>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"channel_thread\" */\nexport type Channel_Thread_Order_By = {\n  channel_thread_messages_aggregate?: Maybe<Channel_Thread_Message_Aggregate_Order_By>;\n  id?: Maybe<Order_By>;\n  message?: Maybe<Message_Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"channel_thread\" */\nexport type Channel_Thread_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"channel_thread\" */\nexport enum Channel_Thread_Select_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  MessageId = 'message_id'\n}\n\n/** input type for updating data in table \"channel_thread\" */\nexport type Channel_Thread_Set_Input = {\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Channel_Thread_Stddev_Fields = {\n  __typename?: 'channel_thread_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Channel_Thread_Stddev_Pop_Fields = {\n  __typename?: 'channel_thread_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Channel_Thread_Stddev_Samp_Fields = {\n  __typename?: 'channel_thread_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Channel_Thread_Sum_Fields = {\n  __typename?: 'channel_thread_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"channel_thread\" */\nexport enum Channel_Thread_Update_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  MessageId = 'message_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Channel_Thread_Var_Pop_Fields = {\n  __typename?: 'channel_thread_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Channel_Thread_Var_Samp_Fields = {\n  __typename?: 'channel_thread_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Channel_Thread_Variance_Fields = {\n  __typename?: 'channel_thread_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"channel_type\" */\nexport type Channel_Type = {\n  __typename?: 'channel_type';\n  /** An array relationship */\n  channels: Array<Channel>;\n  /** An aggregated array relationship */\n  channels_aggregate: Channel_Aggregate;\n  comment?: Maybe<Scalars['String']>;\n  value: Scalars['String'];\n};\n\n\n/** columns and relationships of \"channel_type\" */\nexport type Channel_TypeChannelsArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel_type\" */\nexport type Channel_TypeChannels_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n/** aggregated selection of \"channel_type\" */\nexport type Channel_Type_Aggregate = {\n  __typename?: 'channel_type_aggregate';\n  aggregate?: Maybe<Channel_Type_Aggregate_Fields>;\n  nodes: Array<Channel_Type>;\n};\n\n/** aggregate fields of \"channel_type\" */\nexport type Channel_Type_Aggregate_Fields = {\n  __typename?: 'channel_type_aggregate_fields';\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Channel_Type_Max_Fields>;\n  min?: Maybe<Channel_Type_Min_Fields>;\n};\n\n\n/** aggregate fields of \"channel_type\" */\nexport type Channel_Type_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Channel_Type_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"channel_type\" */\nexport type Channel_Type_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<Channel_Type_Max_Order_By>;\n  min?: Maybe<Channel_Type_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"channel_type\" */\nexport type Channel_Type_Arr_Rel_Insert_Input = {\n  data: Array<Channel_Type_Insert_Input>;\n  on_conflict?: Maybe<Channel_Type_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"channel_type\". All fields are combined with a logical 'AND'. */\nexport type Channel_Type_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Channel_Type_Bool_Exp>>>;\n  _not?: Maybe<Channel_Type_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Channel_Type_Bool_Exp>>>;\n  channels?: Maybe<Channel_Bool_Exp>;\n  comment?: Maybe<String_Comparison_Exp>;\n  value?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"channel_type\" */\nexport enum Channel_Type_Constraint {\n  /** unique or primary key constraint */\n  ChannelTypePkey = 'channel_type_pkey'\n}\n\nexport enum Channel_Type_Enum {\n  /** This represents a chat message */\n  ChatMessage = 'CHAT_MESSAGE',\n  /** This represents a direct message */\n  DirectMessage = 'DIRECT_MESSAGE'\n}\n\n/** expression to compare columns of type channel_type_enum. All fields are combined with logical 'AND'. */\nexport type Channel_Type_Enum_Comparison_Exp = {\n  _eq?: Maybe<Channel_Type_Enum>;\n  _in?: Maybe<Array<Channel_Type_Enum>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<Channel_Type_Enum>;\n  _nin?: Maybe<Array<Channel_Type_Enum>>;\n};\n\n/** input type for inserting data into table \"channel_type\" */\nexport type Channel_Type_Insert_Input = {\n  channels?: Maybe<Channel_Arr_Rel_Insert_Input>;\n  comment?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Channel_Type_Max_Fields = {\n  __typename?: 'channel_type_max_fields';\n  comment?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"channel_type\" */\nexport type Channel_Type_Max_Order_By = {\n  comment?: Maybe<Order_By>;\n  value?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Channel_Type_Min_Fields = {\n  __typename?: 'channel_type_min_fields';\n  comment?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"channel_type\" */\nexport type Channel_Type_Min_Order_By = {\n  comment?: Maybe<Order_By>;\n  value?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"channel_type\" */\nexport type Channel_Type_Mutation_Response = {\n  __typename?: 'channel_type_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Channel_Type>;\n};\n\n/** input type for inserting object relation for remote table \"channel_type\" */\nexport type Channel_Type_Obj_Rel_Insert_Input = {\n  data: Channel_Type_Insert_Input;\n  on_conflict?: Maybe<Channel_Type_On_Conflict>;\n};\n\n/** on conflict condition type for table \"channel_type\" */\nexport type Channel_Type_On_Conflict = {\n  constraint: Channel_Type_Constraint;\n  update_columns: Array<Channel_Type_Update_Column>;\n  where?: Maybe<Channel_Type_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"channel_type\" */\nexport type Channel_Type_Order_By = {\n  channels_aggregate?: Maybe<Channel_Aggregate_Order_By>;\n  comment?: Maybe<Order_By>;\n  value?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"channel_type\" */\nexport type Channel_Type_Pk_Columns_Input = {\n  value: Scalars['String'];\n};\n\n/** select columns of table \"channel_type\" */\nexport enum Channel_Type_Select_Column {\n  /** column name */\n  Comment = 'comment',\n  /** column name */\n  Value = 'value'\n}\n\n/** input type for updating data in table \"channel_type\" */\nexport type Channel_Type_Set_Input = {\n  comment?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n};\n\n/** update columns of table \"channel_type\" */\nexport enum Channel_Type_Update_Column {\n  /** column name */\n  Comment = 'comment',\n  /** column name */\n  Value = 'value'\n}\n\n/** update columns of table \"channel\" */\nexport enum Channel_Update_Column {\n  /** column name */\n  ChannelType = 'channel_type',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsPrivate = 'is_private',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  OwnerId = 'owner_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Channel_Var_Pop_Fields = {\n  __typename?: 'channel_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"channel\" */\nexport type Channel_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Channel_Var_Samp_Fields = {\n  __typename?: 'channel_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"channel\" */\nexport type Channel_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Channel_Variance_Fields = {\n  __typename?: 'channel_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"channel\" */\nexport type Channel_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n\n/** expression to compare columns of type json. All fields are combined with logical 'AND'. */\nexport type Json_Comparison_Exp = {\n  _eq?: Maybe<Scalars['json']>;\n  _gt?: Maybe<Scalars['json']>;\n  _gte?: Maybe<Scalars['json']>;\n  _in?: Maybe<Array<Scalars['json']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['json']>;\n  _lte?: Maybe<Scalars['json']>;\n  _neq?: Maybe<Scalars['json']>;\n  _nin?: Maybe<Array<Scalars['json']>>;\n};\n\n/** columns and relationships of \"message\" */\nexport type Message = {\n  __typename?: 'message';\n  /** An object relationship */\n  channel: Channel;\n  channel_id: Scalars['Int'];\n  /** An object relationship */\n  channel_thread?: Maybe<Channel_Thread>;\n  /** An array relationship */\n  channel_threads: Array<Channel_Thread>;\n  /** An aggregated array relationship */\n  channel_threads_aggregate: Channel_Thread_Aggregate;\n  deleted?: Maybe<Scalars['Boolean']>;\n  id: Scalars['Int'];\n  image?: Maybe<Scalars['String']>;\n  text: Scalars['String'];\n  timestamp: Scalars['timestamptz'];\n  /** An object relationship */\n  user: User;\n  user_id: Scalars['String'];\n};\n\n\n/** columns and relationships of \"message\" */\nexport type MessageChannel_ThreadsArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"message\" */\nexport type MessageChannel_Threads_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n/** aggregated selection of \"message\" */\nexport type Message_Aggregate = {\n  __typename?: 'message_aggregate';\n  aggregate?: Maybe<Message_Aggregate_Fields>;\n  nodes: Array<Message>;\n};\n\n/** aggregate fields of \"message\" */\nexport type Message_Aggregate_Fields = {\n  __typename?: 'message_aggregate_fields';\n  avg?: Maybe<Message_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Message_Max_Fields>;\n  min?: Maybe<Message_Min_Fields>;\n  stddev?: Maybe<Message_Stddev_Fields>;\n  stddev_pop?: Maybe<Message_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Message_Stddev_Samp_Fields>;\n  sum?: Maybe<Message_Sum_Fields>;\n  var_pop?: Maybe<Message_Var_Pop_Fields>;\n  var_samp?: Maybe<Message_Var_Samp_Fields>;\n  variance?: Maybe<Message_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"message\" */\nexport type Message_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Message_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"message\" */\nexport type Message_Aggregate_Order_By = {\n  avg?: Maybe<Message_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Message_Max_Order_By>;\n  min?: Maybe<Message_Min_Order_By>;\n  stddev?: Maybe<Message_Stddev_Order_By>;\n  stddev_pop?: Maybe<Message_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Message_Stddev_Samp_Order_By>;\n  sum?: Maybe<Message_Sum_Order_By>;\n  var_pop?: Maybe<Message_Var_Pop_Order_By>;\n  var_samp?: Maybe<Message_Var_Samp_Order_By>;\n  variance?: Maybe<Message_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"message\" */\nexport type Message_Arr_Rel_Insert_Input = {\n  data: Array<Message_Insert_Input>;\n  on_conflict?: Maybe<Message_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Message_Avg_Fields = {\n  __typename?: 'message_avg_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"message\" */\nexport type Message_Avg_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"message\". All fields are combined with a logical 'AND'. */\nexport type Message_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Message_Bool_Exp>>>;\n  _not?: Maybe<Message_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Message_Bool_Exp>>>;\n  channel?: Maybe<Channel_Bool_Exp>;\n  channel_id?: Maybe<Int_Comparison_Exp>;\n  channel_thread?: Maybe<Channel_Thread_Bool_Exp>;\n  channel_threads?: Maybe<Channel_Thread_Bool_Exp>;\n  deleted?: Maybe<Boolean_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  image?: Maybe<String_Comparison_Exp>;\n  text?: Maybe<String_Comparison_Exp>;\n  timestamp?: Maybe<Timestamptz_Comparison_Exp>;\n  user?: Maybe<User_Bool_Exp>;\n  user_id?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"message\" */\nexport enum Message_Constraint {\n  /** unique or primary key constraint */\n  MessagePkey = 'message_pkey'\n}\n\n/** columns and relationships of \"message_cursor\" */\nexport type Message_Cursor = {\n  __typename?: 'message_cursor';\n  channel_id: Scalars['Int'];\n  id: Scalars['Int'];\n  message_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n/** aggregated selection of \"message_cursor\" */\nexport type Message_Cursor_Aggregate = {\n  __typename?: 'message_cursor_aggregate';\n  aggregate?: Maybe<Message_Cursor_Aggregate_Fields>;\n  nodes: Array<Message_Cursor>;\n};\n\n/** aggregate fields of \"message_cursor\" */\nexport type Message_Cursor_Aggregate_Fields = {\n  __typename?: 'message_cursor_aggregate_fields';\n  avg?: Maybe<Message_Cursor_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Message_Cursor_Max_Fields>;\n  min?: Maybe<Message_Cursor_Min_Fields>;\n  stddev?: Maybe<Message_Cursor_Stddev_Fields>;\n  stddev_pop?: Maybe<Message_Cursor_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Message_Cursor_Stddev_Samp_Fields>;\n  sum?: Maybe<Message_Cursor_Sum_Fields>;\n  var_pop?: Maybe<Message_Cursor_Var_Pop_Fields>;\n  var_samp?: Maybe<Message_Cursor_Var_Samp_Fields>;\n  variance?: Maybe<Message_Cursor_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"message_cursor\" */\nexport type Message_Cursor_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Message_Cursor_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"message_cursor\" */\nexport type Message_Cursor_Aggregate_Order_By = {\n  avg?: Maybe<Message_Cursor_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Message_Cursor_Max_Order_By>;\n  min?: Maybe<Message_Cursor_Min_Order_By>;\n  stddev?: Maybe<Message_Cursor_Stddev_Order_By>;\n  stddev_pop?: Maybe<Message_Cursor_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Message_Cursor_Stddev_Samp_Order_By>;\n  sum?: Maybe<Message_Cursor_Sum_Order_By>;\n  var_pop?: Maybe<Message_Cursor_Var_Pop_Order_By>;\n  var_samp?: Maybe<Message_Cursor_Var_Samp_Order_By>;\n  variance?: Maybe<Message_Cursor_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"message_cursor\" */\nexport type Message_Cursor_Arr_Rel_Insert_Input = {\n  data: Array<Message_Cursor_Insert_Input>;\n  on_conflict?: Maybe<Message_Cursor_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Message_Cursor_Avg_Fields = {\n  __typename?: 'message_cursor_avg_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Avg_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"message_cursor\". All fields are combined with a logical 'AND'. */\nexport type Message_Cursor_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Message_Cursor_Bool_Exp>>>;\n  _not?: Maybe<Message_Cursor_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Message_Cursor_Bool_Exp>>>;\n  channel_id?: Maybe<Int_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  message_id?: Maybe<Int_Comparison_Exp>;\n  user_id?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"message_cursor\" */\nexport enum Message_Cursor_Constraint {\n  /** unique or primary key constraint */\n  MessageCursorChannelIdUserIdKey = 'message_cursor_channel_id_user_id_key',\n  /** unique or primary key constraint */\n  MessageCursorPkey = 'message_cursor_pkey'\n}\n\n/** input type for incrementing integer column in table \"message_cursor\" */\nexport type Message_Cursor_Inc_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"message_cursor\" */\nexport type Message_Cursor_Insert_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Message_Cursor_Max_Fields = {\n  __typename?: 'message_cursor_max_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Max_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Message_Cursor_Min_Fields = {\n  __typename?: 'message_cursor_min_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Min_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"message_cursor\" */\nexport type Message_Cursor_Mutation_Response = {\n  __typename?: 'message_cursor_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Message_Cursor>;\n};\n\n/** input type for inserting object relation for remote table \"message_cursor\" */\nexport type Message_Cursor_Obj_Rel_Insert_Input = {\n  data: Message_Cursor_Insert_Input;\n  on_conflict?: Maybe<Message_Cursor_On_Conflict>;\n};\n\n/** on conflict condition type for table \"message_cursor\" */\nexport type Message_Cursor_On_Conflict = {\n  constraint: Message_Cursor_Constraint;\n  update_columns: Array<Message_Cursor_Update_Column>;\n  where?: Maybe<Message_Cursor_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"message_cursor\" */\nexport type Message_Cursor_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"message_cursor\" */\nexport type Message_Cursor_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"message_cursor\" */\nexport enum Message_Cursor_Select_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  MessageId = 'message_id',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** input type for updating data in table \"message_cursor\" */\nexport type Message_Cursor_Set_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type Message_Cursor_Stddev_Fields = {\n  __typename?: 'message_cursor_stddev_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Stddev_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Message_Cursor_Stddev_Pop_Fields = {\n  __typename?: 'message_cursor_stddev_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Stddev_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Message_Cursor_Stddev_Samp_Fields = {\n  __typename?: 'message_cursor_stddev_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Stddev_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Message_Cursor_Sum_Fields = {\n  __typename?: 'message_cursor_sum_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Sum_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"message_cursor\" */\nexport enum Message_Cursor_Update_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  MessageId = 'message_id',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Message_Cursor_Var_Pop_Fields = {\n  __typename?: 'message_cursor_var_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Var_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Message_Cursor_Var_Samp_Fields = {\n  __typename?: 'message_cursor_var_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Var_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Message_Cursor_Variance_Fields = {\n  __typename?: 'message_cursor_variance_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Variance_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** input type for incrementing integer column in table \"message\" */\nexport type Message_Inc_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"message\" */\nexport type Message_Insert_Input = {\n  channel?: Maybe<Channel_Obj_Rel_Insert_Input>;\n  channel_id?: Maybe<Scalars['Int']>;\n  channel_thread?: Maybe<Channel_Thread_Obj_Rel_Insert_Input>;\n  channel_threads?: Maybe<Channel_Thread_Arr_Rel_Insert_Input>;\n  deleted?: Maybe<Scalars['Boolean']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user?: Maybe<User_Obj_Rel_Insert_Input>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Message_Max_Fields = {\n  __typename?: 'message_max_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"message\" */\nexport type Message_Max_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Message_Min_Fields = {\n  __typename?: 'message_min_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"message\" */\nexport type Message_Min_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"message\" */\nexport type Message_Mutation_Response = {\n  __typename?: 'message_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Message>;\n};\n\n/** input type for inserting object relation for remote table \"message\" */\nexport type Message_Obj_Rel_Insert_Input = {\n  data: Message_Insert_Input;\n  on_conflict?: Maybe<Message_On_Conflict>;\n};\n\n/** on conflict condition type for table \"message\" */\nexport type Message_On_Conflict = {\n  constraint: Message_Constraint;\n  update_columns: Array<Message_Update_Column>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"message\" */\nexport type Message_Order_By = {\n  channel?: Maybe<Channel_Order_By>;\n  channel_id?: Maybe<Order_By>;\n  channel_thread?: Maybe<Channel_Thread_Order_By>;\n  channel_threads_aggregate?: Maybe<Channel_Thread_Aggregate_Order_By>;\n  deleted?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user?: Maybe<User_Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"message\" */\nexport type Message_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"message\" */\nexport enum Message_Select_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Deleted = 'deleted',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Image = 'image',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  Timestamp = 'timestamp',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** input type for updating data in table \"message\" */\nexport type Message_Set_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  deleted?: Maybe<Scalars['Boolean']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type Message_Stddev_Fields = {\n  __typename?: 'message_stddev_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"message\" */\nexport type Message_Stddev_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Message_Stddev_Pop_Fields = {\n  __typename?: 'message_stddev_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"message\" */\nexport type Message_Stddev_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Message_Stddev_Samp_Fields = {\n  __typename?: 'message_stddev_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"message\" */\nexport type Message_Stddev_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Message_Sum_Fields = {\n  __typename?: 'message_sum_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"message\" */\nexport type Message_Sum_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"message\" */\nexport enum Message_Update_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Deleted = 'deleted',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Image = 'image',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  Timestamp = 'timestamp',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Message_Var_Pop_Fields = {\n  __typename?: 'message_var_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"message\" */\nexport type Message_Var_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Message_Var_Samp_Fields = {\n  __typename?: 'message_var_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"message\" */\nexport type Message_Var_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Message_Variance_Fields = {\n  __typename?: 'message_variance_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"message\" */\nexport type Message_Variance_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** mutation root */\nexport type Mutation_Root = {\n  __typename?: 'mutation_root';\n  /** perform the action: \"addChannelUser\" */\n  addChannelUser?: Maybe<AddChannelUserOutput>;\n  /** delete data from the table: \"channel\" */\n  delete_channel?: Maybe<Channel_Mutation_Response>;\n  /** delete single row from the table: \"channel\" */\n  delete_channel_by_pk?: Maybe<Channel>;\n  /** delete data from the table: \"channel_poll\" */\n  delete_channel_poll?: Maybe<Channel_Poll_Mutation_Response>;\n  /** delete single row from the table: \"channel_poll\" */\n  delete_channel_poll_by_pk?: Maybe<Channel_Poll>;\n  /** delete data from the table: \"channel_thread\" */\n  delete_channel_thread?: Maybe<Channel_Thread_Mutation_Response>;\n  /** delete single row from the table: \"channel_thread\" */\n  delete_channel_thread_by_pk?: Maybe<Channel_Thread>;\n  /** delete data from the table: \"channel_thread_message\" */\n  delete_channel_thread_message?: Maybe<Channel_Thread_Message_Mutation_Response>;\n  /** delete single row from the table: \"channel_thread_message\" */\n  delete_channel_thread_message_by_pk?: Maybe<Channel_Thread_Message>;\n  /** delete data from the table: \"channel_type\" */\n  delete_channel_type?: Maybe<Channel_Type_Mutation_Response>;\n  /** delete single row from the table: \"channel_type\" */\n  delete_channel_type_by_pk?: Maybe<Channel_Type>;\n  /** delete data from the table: \"message\" */\n  delete_message?: Maybe<Message_Mutation_Response>;\n  /** delete single row from the table: \"message\" */\n  delete_message_by_pk?: Maybe<Message>;\n  /** delete data from the table: \"message_cursor\" */\n  delete_message_cursor?: Maybe<Message_Cursor_Mutation_Response>;\n  /** delete single row from the table: \"message_cursor\" */\n  delete_message_cursor_by_pk?: Maybe<Message_Cursor>;\n  /** delete data from the table: \"poll_anwers\" */\n  delete_poll_anwers?: Maybe<Poll_Anwers_Mutation_Response>;\n  /** delete single row from the table: \"poll_anwers\" */\n  delete_poll_anwers_by_pk?: Maybe<Poll_Anwers>;\n  /** delete data from the table: \"poll_questions\" */\n  delete_poll_questions?: Maybe<Poll_Questions_Mutation_Response>;\n  /** delete single row from the table: \"poll_questions\" */\n  delete_poll_questions_by_pk?: Maybe<Poll_Questions>;\n  /** delete data from the table: \"user\" */\n  delete_user?: Maybe<User_Mutation_Response>;\n  /** delete single row from the table: \"user\" */\n  delete_user_by_pk?: Maybe<User>;\n  /** delete data from the table: \"user_channels\" */\n  delete_user_channels?: Maybe<User_Channels_Mutation_Response>;\n  /** delete single row from the table: \"user_channels\" */\n  delete_user_channels_by_pk?: Maybe<User_Channels>;\n  /** delete data from the table: \"user_online\" */\n  delete_user_online?: Maybe<User_Online_Mutation_Response>;\n  /** delete data from the table: \"user_typing\" */\n  delete_user_typing?: Maybe<User_Typing_Mutation_Response>;\n  /** delete data from the table: \"user_votes\" */\n  delete_user_votes?: Maybe<User_Votes_Mutation_Response>;\n  /** delete single row from the table: \"user_votes\" */\n  delete_user_votes_by_pk?: Maybe<User_Votes>;\n  /** insert data into the table: \"channel\" */\n  insert_channel?: Maybe<Channel_Mutation_Response>;\n  /** insert a single row into the table: \"channel\" */\n  insert_channel_one?: Maybe<Channel>;\n  /** insert data into the table: \"channel_poll\" */\n  insert_channel_poll?: Maybe<Channel_Poll_Mutation_Response>;\n  /** insert a single row into the table: \"channel_poll\" */\n  insert_channel_poll_one?: Maybe<Channel_Poll>;\n  /** insert data into the table: \"channel_thread\" */\n  insert_channel_thread?: Maybe<Channel_Thread_Mutation_Response>;\n  /** insert data into the table: \"channel_thread_message\" */\n  insert_channel_thread_message?: Maybe<Channel_Thread_Message_Mutation_Response>;\n  /** insert a single row into the table: \"channel_thread_message\" */\n  insert_channel_thread_message_one?: Maybe<Channel_Thread_Message>;\n  /** insert a single row into the table: \"channel_thread\" */\n  insert_channel_thread_one?: Maybe<Channel_Thread>;\n  /** insert data into the table: \"channel_type\" */\n  insert_channel_type?: Maybe<Channel_Type_Mutation_Response>;\n  /** insert a single row into the table: \"channel_type\" */\n  insert_channel_type_one?: Maybe<Channel_Type>;\n  /** insert data into the table: \"message\" */\n  insert_message?: Maybe<Message_Mutation_Response>;\n  /** insert data into the table: \"message_cursor\" */\n  insert_message_cursor?: Maybe<Message_Cursor_Mutation_Response>;\n  /** insert a single row into the table: \"message_cursor\" */\n  insert_message_cursor_one?: Maybe<Message_Cursor>;\n  /** insert a single row into the table: \"message\" */\n  insert_message_one?: Maybe<Message>;\n  /** insert data into the table: \"poll_anwers\" */\n  insert_poll_anwers?: Maybe<Poll_Anwers_Mutation_Response>;\n  /** insert a single row into the table: \"poll_anwers\" */\n  insert_poll_anwers_one?: Maybe<Poll_Anwers>;\n  /** insert data into the table: \"poll_questions\" */\n  insert_poll_questions?: Maybe<Poll_Questions_Mutation_Response>;\n  /** insert a single row into the table: \"poll_questions\" */\n  insert_poll_questions_one?: Maybe<Poll_Questions>;\n  /** insert data into the table: \"user\" */\n  insert_user?: Maybe<User_Mutation_Response>;\n  /** insert data into the table: \"user_channels\" */\n  insert_user_channels?: Maybe<User_Channels_Mutation_Response>;\n  /** insert a single row into the table: \"user_channels\" */\n  insert_user_channels_one?: Maybe<User_Channels>;\n  /** insert a single row into the table: \"user\" */\n  insert_user_one?: Maybe<User>;\n  /** insert data into the table: \"user_online\" */\n  insert_user_online?: Maybe<User_Online_Mutation_Response>;\n  /** insert a single row into the table: \"user_online\" */\n  insert_user_online_one?: Maybe<User_Online>;\n  /** insert data into the table: \"user_typing\" */\n  insert_user_typing?: Maybe<User_Typing_Mutation_Response>;\n  /** insert a single row into the table: \"user_typing\" */\n  insert_user_typing_one?: Maybe<User_Typing>;\n  /** insert data into the table: \"user_votes\" */\n  insert_user_votes?: Maybe<User_Votes_Mutation_Response>;\n  /** insert a single row into the table: \"user_votes\" */\n  insert_user_votes_one?: Maybe<User_Votes>;\n  /** update data of the table: \"channel\" */\n  update_channel?: Maybe<Channel_Mutation_Response>;\n  /** update single row of the table: \"channel\" */\n  update_channel_by_pk?: Maybe<Channel>;\n  /** update data of the table: \"channel_poll\" */\n  update_channel_poll?: Maybe<Channel_Poll_Mutation_Response>;\n  /** update single row of the table: \"channel_poll\" */\n  update_channel_poll_by_pk?: Maybe<Channel_Poll>;\n  /** update data of the table: \"channel_thread\" */\n  update_channel_thread?: Maybe<Channel_Thread_Mutation_Response>;\n  /** update single row of the table: \"channel_thread\" */\n  update_channel_thread_by_pk?: Maybe<Channel_Thread>;\n  /** update data of the table: \"channel_thread_message\" */\n  update_channel_thread_message?: Maybe<Channel_Thread_Message_Mutation_Response>;\n  /** update single row of the table: \"channel_thread_message\" */\n  update_channel_thread_message_by_pk?: Maybe<Channel_Thread_Message>;\n  /** update data of the table: \"channel_type\" */\n  update_channel_type?: Maybe<Channel_Type_Mutation_Response>;\n  /** update single row of the table: \"channel_type\" */\n  update_channel_type_by_pk?: Maybe<Channel_Type>;\n  /** update data of the table: \"message\" */\n  update_message?: Maybe<Message_Mutation_Response>;\n  /** update single row of the table: \"message\" */\n  update_message_by_pk?: Maybe<Message>;\n  /** update data of the table: \"message_cursor\" */\n  update_message_cursor?: Maybe<Message_Cursor_Mutation_Response>;\n  /** update single row of the table: \"message_cursor\" */\n  update_message_cursor_by_pk?: Maybe<Message_Cursor>;\n  /** update data of the table: \"poll_anwers\" */\n  update_poll_anwers?: Maybe<Poll_Anwers_Mutation_Response>;\n  /** update single row of the table: \"poll_anwers\" */\n  update_poll_anwers_by_pk?: Maybe<Poll_Anwers>;\n  /** update data of the table: \"poll_questions\" */\n  update_poll_questions?: Maybe<Poll_Questions_Mutation_Response>;\n  /** update single row of the table: \"poll_questions\" */\n  update_poll_questions_by_pk?: Maybe<Poll_Questions>;\n  /** update data of the table: \"user\" */\n  update_user?: Maybe<User_Mutation_Response>;\n  /** update single row of the table: \"user\" */\n  update_user_by_pk?: Maybe<User>;\n  /** update data of the table: \"user_channels\" */\n  update_user_channels?: Maybe<User_Channels_Mutation_Response>;\n  /** update single row of the table: \"user_channels\" */\n  update_user_channels_by_pk?: Maybe<User_Channels>;\n  /** update data of the table: \"user_online\" */\n  update_user_online?: Maybe<User_Online_Mutation_Response>;\n  /** update data of the table: \"user_typing\" */\n  update_user_typing?: Maybe<User_Typing_Mutation_Response>;\n  /** update data of the table: \"user_votes\" */\n  update_user_votes?: Maybe<User_Votes_Mutation_Response>;\n  /** update single row of the table: \"user_votes\" */\n  update_user_votes_by_pk?: Maybe<User_Votes>;\n  /** perform the action: \"validateAndAddDirectMessageChannel\" */\n  validateAndAddDirectMessageChannel?: Maybe<ValidateAndAddDirectMessageChannelOutput>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootAddChannelUserArgs = {\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_ChannelArgs = {\n  where: Channel_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_PollArgs = {\n  where: Channel_Poll_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_Poll_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_ThreadArgs = {\n  where: Channel_Thread_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_Thread_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_Thread_MessageArgs = {\n  where: Channel_Thread_Message_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_Thread_Message_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_TypeArgs = {\n  where: Channel_Type_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_Type_By_PkArgs = {\n  value: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_MessageArgs = {\n  where: Message_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Message_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Message_CursorArgs = {\n  where: Message_Cursor_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Message_Cursor_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Poll_AnwersArgs = {\n  where: Poll_Anwers_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Poll_Anwers_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Poll_QuestionsArgs = {\n  where: Poll_Questions_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Poll_Questions_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_UserArgs = {\n  where: User_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_ChannelsArgs = {\n  where: User_Channels_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_Channels_By_PkArgs = {\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_OnlineArgs = {\n  where: User_Online_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_TypingArgs = {\n  where: User_Typing_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_VotesArgs = {\n  where: User_Votes_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_Votes_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_ChannelArgs = {\n  objects: Array<Channel_Insert_Input>;\n  on_conflict?: Maybe<Channel_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_OneArgs = {\n  object: Channel_Insert_Input;\n  on_conflict?: Maybe<Channel_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_PollArgs = {\n  objects: Array<Channel_Poll_Insert_Input>;\n  on_conflict?: Maybe<Channel_Poll_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_Poll_OneArgs = {\n  object: Channel_Poll_Insert_Input;\n  on_conflict?: Maybe<Channel_Poll_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_ThreadArgs = {\n  objects: Array<Channel_Thread_Insert_Input>;\n  on_conflict?: Maybe<Channel_Thread_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_Thread_MessageArgs = {\n  objects: Array<Channel_Thread_Message_Insert_Input>;\n  on_conflict?: Maybe<Channel_Thread_Message_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_Thread_Message_OneArgs = {\n  object: Channel_Thread_Message_Insert_Input;\n  on_conflict?: Maybe<Channel_Thread_Message_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_Thread_OneArgs = {\n  object: Channel_Thread_Insert_Input;\n  on_conflict?: Maybe<Channel_Thread_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_TypeArgs = {\n  objects: Array<Channel_Type_Insert_Input>;\n  on_conflict?: Maybe<Channel_Type_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_Type_OneArgs = {\n  object: Channel_Type_Insert_Input;\n  on_conflict?: Maybe<Channel_Type_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_MessageArgs = {\n  objects: Array<Message_Insert_Input>;\n  on_conflict?: Maybe<Message_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Message_CursorArgs = {\n  objects: Array<Message_Cursor_Insert_Input>;\n  on_conflict?: Maybe<Message_Cursor_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Message_Cursor_OneArgs = {\n  object: Message_Cursor_Insert_Input;\n  on_conflict?: Maybe<Message_Cursor_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Message_OneArgs = {\n  object: Message_Insert_Input;\n  on_conflict?: Maybe<Message_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Poll_AnwersArgs = {\n  objects: Array<Poll_Anwers_Insert_Input>;\n  on_conflict?: Maybe<Poll_Anwers_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Poll_Anwers_OneArgs = {\n  object: Poll_Anwers_Insert_Input;\n  on_conflict?: Maybe<Poll_Anwers_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Poll_QuestionsArgs = {\n  objects: Array<Poll_Questions_Insert_Input>;\n  on_conflict?: Maybe<Poll_Questions_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Poll_Questions_OneArgs = {\n  object: Poll_Questions_Insert_Input;\n  on_conflict?: Maybe<Poll_Questions_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_UserArgs = {\n  objects: Array<User_Insert_Input>;\n  on_conflict?: Maybe<User_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_ChannelsArgs = {\n  objects: Array<User_Channels_Insert_Input>;\n  on_conflict?: Maybe<User_Channels_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_Channels_OneArgs = {\n  object: User_Channels_Insert_Input;\n  on_conflict?: Maybe<User_Channels_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_OneArgs = {\n  object: User_Insert_Input;\n  on_conflict?: Maybe<User_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_OnlineArgs = {\n  objects: Array<User_Online_Insert_Input>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_Online_OneArgs = {\n  object: User_Online_Insert_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_TypingArgs = {\n  objects: Array<User_Typing_Insert_Input>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_Typing_OneArgs = {\n  object: User_Typing_Insert_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_VotesArgs = {\n  objects: Array<User_Votes_Insert_Input>;\n  on_conflict?: Maybe<User_Votes_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_Votes_OneArgs = {\n  object: User_Votes_Insert_Input;\n  on_conflict?: Maybe<User_Votes_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_ChannelArgs = {\n  _inc?: Maybe<Channel_Inc_Input>;\n  _set?: Maybe<Channel_Set_Input>;\n  where: Channel_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_By_PkArgs = {\n  _inc?: Maybe<Channel_Inc_Input>;\n  _set?: Maybe<Channel_Set_Input>;\n  pk_columns: Channel_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_PollArgs = {\n  _inc?: Maybe<Channel_Poll_Inc_Input>;\n  _set?: Maybe<Channel_Poll_Set_Input>;\n  where: Channel_Poll_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_Poll_By_PkArgs = {\n  _inc?: Maybe<Channel_Poll_Inc_Input>;\n  _set?: Maybe<Channel_Poll_Set_Input>;\n  pk_columns: Channel_Poll_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_ThreadArgs = {\n  _inc?: Maybe<Channel_Thread_Inc_Input>;\n  _set?: Maybe<Channel_Thread_Set_Input>;\n  where: Channel_Thread_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_Thread_By_PkArgs = {\n  _inc?: Maybe<Channel_Thread_Inc_Input>;\n  _set?: Maybe<Channel_Thread_Set_Input>;\n  pk_columns: Channel_Thread_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_Thread_MessageArgs = {\n  _inc?: Maybe<Channel_Thread_Message_Inc_Input>;\n  _set?: Maybe<Channel_Thread_Message_Set_Input>;\n  where: Channel_Thread_Message_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_Thread_Message_By_PkArgs = {\n  _inc?: Maybe<Channel_Thread_Message_Inc_Input>;\n  _set?: Maybe<Channel_Thread_Message_Set_Input>;\n  pk_columns: Channel_Thread_Message_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_TypeArgs = {\n  _set?: Maybe<Channel_Type_Set_Input>;\n  where: Channel_Type_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_Type_By_PkArgs = {\n  _set?: Maybe<Channel_Type_Set_Input>;\n  pk_columns: Channel_Type_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_MessageArgs = {\n  _inc?: Maybe<Message_Inc_Input>;\n  _set?: Maybe<Message_Set_Input>;\n  where: Message_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Message_By_PkArgs = {\n  _inc?: Maybe<Message_Inc_Input>;\n  _set?: Maybe<Message_Set_Input>;\n  pk_columns: Message_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Message_CursorArgs = {\n  _inc?: Maybe<Message_Cursor_Inc_Input>;\n  _set?: Maybe<Message_Cursor_Set_Input>;\n  where: Message_Cursor_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Message_Cursor_By_PkArgs = {\n  _inc?: Maybe<Message_Cursor_Inc_Input>;\n  _set?: Maybe<Message_Cursor_Set_Input>;\n  pk_columns: Message_Cursor_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Poll_AnwersArgs = {\n  _inc?: Maybe<Poll_Anwers_Inc_Input>;\n  _set?: Maybe<Poll_Anwers_Set_Input>;\n  where: Poll_Anwers_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Poll_Anwers_By_PkArgs = {\n  _inc?: Maybe<Poll_Anwers_Inc_Input>;\n  _set?: Maybe<Poll_Anwers_Set_Input>;\n  pk_columns: Poll_Anwers_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Poll_QuestionsArgs = {\n  _inc?: Maybe<Poll_Questions_Inc_Input>;\n  _set?: Maybe<Poll_Questions_Set_Input>;\n  where: Poll_Questions_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Poll_Questions_By_PkArgs = {\n  _inc?: Maybe<Poll_Questions_Inc_Input>;\n  _set?: Maybe<Poll_Questions_Set_Input>;\n  pk_columns: Poll_Questions_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_UserArgs = {\n  _inc?: Maybe<User_Inc_Input>;\n  _set?: Maybe<User_Set_Input>;\n  where: User_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_By_PkArgs = {\n  _inc?: Maybe<User_Inc_Input>;\n  _set?: Maybe<User_Set_Input>;\n  pk_columns: User_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_ChannelsArgs = {\n  _inc?: Maybe<User_Channels_Inc_Input>;\n  _set?: Maybe<User_Channels_Set_Input>;\n  where: User_Channels_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_Channels_By_PkArgs = {\n  _inc?: Maybe<User_Channels_Inc_Input>;\n  _set?: Maybe<User_Channels_Set_Input>;\n  pk_columns: User_Channels_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_OnlineArgs = {\n  _inc?: Maybe<User_Online_Inc_Input>;\n  _set?: Maybe<User_Online_Set_Input>;\n  where: User_Online_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_TypingArgs = {\n  _inc?: Maybe<User_Typing_Inc_Input>;\n  _set?: Maybe<User_Typing_Set_Input>;\n  where: User_Typing_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_VotesArgs = {\n  _inc?: Maybe<User_Votes_Inc_Input>;\n  _set?: Maybe<User_Votes_Set_Input>;\n  where: User_Votes_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_Votes_By_PkArgs = {\n  _inc?: Maybe<User_Votes_Inc_Input>;\n  _set?: Maybe<User_Votes_Set_Input>;\n  pk_columns: User_Votes_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootValidateAndAddDirectMessageChannelArgs = {\n  name: Scalars['String'];\n  user_id1: Scalars['String'];\n  user_id2: Scalars['String'];\n};\n\n/** column ordering options */\nexport enum Order_By {\n  /** in the ascending order, nulls last */\n  Asc = 'asc',\n  /** in the ascending order, nulls first */\n  AscNullsFirst = 'asc_nulls_first',\n  /** in the ascending order, nulls last */\n  AscNullsLast = 'asc_nulls_last',\n  /** in the descending order, nulls first */\n  Desc = 'desc',\n  /** in the descending order, nulls first */\n  DescNullsFirst = 'desc_nulls_first',\n  /** in the descending order, nulls last */\n  DescNullsLast = 'desc_nulls_last'\n}\n\n/** columns and relationships of \"poll_anwers\" */\nexport type Poll_Anwers = {\n  __typename?: 'poll_anwers';\n  created_at: Scalars['timestamptz'];\n  id: Scalars['Int'];\n  /** An object relationship */\n  poll_question: Poll_Questions;\n  question_id: Scalars['Int'];\n  text: Scalars['String'];\n  updated_at: Scalars['timestamptz'];\n  user_id?: Maybe<Scalars['String']>;\n  votes: Scalars['Int'];\n};\n\n/** aggregated selection of \"poll_anwers\" */\nexport type Poll_Anwers_Aggregate = {\n  __typename?: 'poll_anwers_aggregate';\n  aggregate?: Maybe<Poll_Anwers_Aggregate_Fields>;\n  nodes: Array<Poll_Anwers>;\n};\n\n/** aggregate fields of \"poll_anwers\" */\nexport type Poll_Anwers_Aggregate_Fields = {\n  __typename?: 'poll_anwers_aggregate_fields';\n  avg?: Maybe<Poll_Anwers_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Poll_Anwers_Max_Fields>;\n  min?: Maybe<Poll_Anwers_Min_Fields>;\n  stddev?: Maybe<Poll_Anwers_Stddev_Fields>;\n  stddev_pop?: Maybe<Poll_Anwers_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Poll_Anwers_Stddev_Samp_Fields>;\n  sum?: Maybe<Poll_Anwers_Sum_Fields>;\n  var_pop?: Maybe<Poll_Anwers_Var_Pop_Fields>;\n  var_samp?: Maybe<Poll_Anwers_Var_Samp_Fields>;\n  variance?: Maybe<Poll_Anwers_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"poll_anwers\" */\nexport type Poll_Anwers_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"poll_anwers\" */\nexport type Poll_Anwers_Aggregate_Order_By = {\n  avg?: Maybe<Poll_Anwers_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Poll_Anwers_Max_Order_By>;\n  min?: Maybe<Poll_Anwers_Min_Order_By>;\n  stddev?: Maybe<Poll_Anwers_Stddev_Order_By>;\n  stddev_pop?: Maybe<Poll_Anwers_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Poll_Anwers_Stddev_Samp_Order_By>;\n  sum?: Maybe<Poll_Anwers_Sum_Order_By>;\n  var_pop?: Maybe<Poll_Anwers_Var_Pop_Order_By>;\n  var_samp?: Maybe<Poll_Anwers_Var_Samp_Order_By>;\n  variance?: Maybe<Poll_Anwers_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"poll_anwers\" */\nexport type Poll_Anwers_Arr_Rel_Insert_Input = {\n  data: Array<Poll_Anwers_Insert_Input>;\n  on_conflict?: Maybe<Poll_Anwers_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Poll_Anwers_Avg_Fields = {\n  __typename?: 'poll_anwers_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"poll_anwers\". All fields are combined with a logical 'AND'. */\nexport type Poll_Anwers_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Poll_Anwers_Bool_Exp>>>;\n  _not?: Maybe<Poll_Anwers_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Poll_Anwers_Bool_Exp>>>;\n  created_at?: Maybe<Timestamptz_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  poll_question?: Maybe<Poll_Questions_Bool_Exp>;\n  question_id?: Maybe<Int_Comparison_Exp>;\n  text?: Maybe<String_Comparison_Exp>;\n  updated_at?: Maybe<Timestamptz_Comparison_Exp>;\n  user_id?: Maybe<String_Comparison_Exp>;\n  votes?: Maybe<Int_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"poll_anwers\" */\nexport enum Poll_Anwers_Constraint {\n  /** unique or primary key constraint */\n  PollAnwersPkey = 'poll_anwers_pkey'\n}\n\n/** input type for incrementing integer column in table \"poll_anwers\" */\nexport type Poll_Anwers_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  question_id?: Maybe<Scalars['Int']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"poll_anwers\" */\nexport type Poll_Anwers_Insert_Input = {\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_question?: Maybe<Poll_Questions_Obj_Rel_Insert_Input>;\n  question_id?: Maybe<Scalars['Int']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Poll_Anwers_Max_Fields = {\n  __typename?: 'poll_anwers_max_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  question_id?: Maybe<Scalars['Int']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** order by max() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Max_Order_By = {\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Poll_Anwers_Min_Fields = {\n  __typename?: 'poll_anwers_min_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  question_id?: Maybe<Scalars['Int']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** order by min() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Min_Order_By = {\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"poll_anwers\" */\nexport type Poll_Anwers_Mutation_Response = {\n  __typename?: 'poll_anwers_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Poll_Anwers>;\n};\n\n/** input type for inserting object relation for remote table \"poll_anwers\" */\nexport type Poll_Anwers_Obj_Rel_Insert_Input = {\n  data: Poll_Anwers_Insert_Input;\n  on_conflict?: Maybe<Poll_Anwers_On_Conflict>;\n};\n\n/** on conflict condition type for table \"poll_anwers\" */\nexport type Poll_Anwers_On_Conflict = {\n  constraint: Poll_Anwers_Constraint;\n  update_columns: Array<Poll_Anwers_Update_Column>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"poll_anwers\" */\nexport type Poll_Anwers_Order_By = {\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_question?: Maybe<Poll_Questions_Order_By>;\n  question_id?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"poll_anwers\" */\nexport type Poll_Anwers_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"poll_anwers\" */\nexport enum Poll_Anwers_Select_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  QuestionId = 'question_id',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  UpdatedAt = 'updated_at',\n  /** column name */\n  UserId = 'user_id',\n  /** column name */\n  Votes = 'votes'\n}\n\n/** input type for updating data in table \"poll_anwers\" */\nexport type Poll_Anwers_Set_Input = {\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  question_id?: Maybe<Scalars['Int']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Poll_Anwers_Stddev_Fields = {\n  __typename?: 'poll_anwers_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Poll_Anwers_Stddev_Pop_Fields = {\n  __typename?: 'poll_anwers_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Poll_Anwers_Stddev_Samp_Fields = {\n  __typename?: 'poll_anwers_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Poll_Anwers_Sum_Fields = {\n  __typename?: 'poll_anwers_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  question_id?: Maybe<Scalars['Int']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** update columns of table \"poll_anwers\" */\nexport enum Poll_Anwers_Update_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  QuestionId = 'question_id',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  UpdatedAt = 'updated_at',\n  /** column name */\n  UserId = 'user_id',\n  /** column name */\n  Votes = 'votes'\n}\n\n/** aggregate var_pop on columns */\nexport type Poll_Anwers_Var_Pop_Fields = {\n  __typename?: 'poll_anwers_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Poll_Anwers_Var_Samp_Fields = {\n  __typename?: 'poll_anwers_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Poll_Anwers_Variance_Fields = {\n  __typename?: 'poll_anwers_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"poll_questions\" */\nexport type Poll_Questions = {\n  __typename?: 'poll_questions';\n  /** An array relationship */\n  channel_polls: Array<Channel_Poll>;\n  /** An aggregated array relationship */\n  channel_polls_aggregate: Channel_Poll_Aggregate;\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id: Scalars['Int'];\n  is_active: Scalars['Boolean'];\n  owner_id: Scalars['String'];\n  /** An array relationship */\n  poll_anwers: Array<Poll_Anwers>;\n  /** An aggregated array relationship */\n  poll_anwers_aggregate: Poll_Anwers_Aggregate;\n  text: Scalars['String'];\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n\n/** columns and relationships of \"poll_questions\" */\nexport type Poll_QuestionsChannel_PollsArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"poll_questions\" */\nexport type Poll_QuestionsChannel_Polls_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"poll_questions\" */\nexport type Poll_QuestionsPoll_AnwersArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"poll_questions\" */\nexport type Poll_QuestionsPoll_Anwers_AggregateArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n/** aggregated selection of \"poll_questions\" */\nexport type Poll_Questions_Aggregate = {\n  __typename?: 'poll_questions_aggregate';\n  aggregate?: Maybe<Poll_Questions_Aggregate_Fields>;\n  nodes: Array<Poll_Questions>;\n};\n\n/** aggregate fields of \"poll_questions\" */\nexport type Poll_Questions_Aggregate_Fields = {\n  __typename?: 'poll_questions_aggregate_fields';\n  avg?: Maybe<Poll_Questions_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Poll_Questions_Max_Fields>;\n  min?: Maybe<Poll_Questions_Min_Fields>;\n  stddev?: Maybe<Poll_Questions_Stddev_Fields>;\n  stddev_pop?: Maybe<Poll_Questions_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Poll_Questions_Stddev_Samp_Fields>;\n  sum?: Maybe<Poll_Questions_Sum_Fields>;\n  var_pop?: Maybe<Poll_Questions_Var_Pop_Fields>;\n  var_samp?: Maybe<Poll_Questions_Var_Samp_Fields>;\n  variance?: Maybe<Poll_Questions_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"poll_questions\" */\nexport type Poll_Questions_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Poll_Questions_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"poll_questions\" */\nexport type Poll_Questions_Aggregate_Order_By = {\n  avg?: Maybe<Poll_Questions_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Poll_Questions_Max_Order_By>;\n  min?: Maybe<Poll_Questions_Min_Order_By>;\n  stddev?: Maybe<Poll_Questions_Stddev_Order_By>;\n  stddev_pop?: Maybe<Poll_Questions_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Poll_Questions_Stddev_Samp_Order_By>;\n  sum?: Maybe<Poll_Questions_Sum_Order_By>;\n  var_pop?: Maybe<Poll_Questions_Var_Pop_Order_By>;\n  var_samp?: Maybe<Poll_Questions_Var_Samp_Order_By>;\n  variance?: Maybe<Poll_Questions_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"poll_questions\" */\nexport type Poll_Questions_Arr_Rel_Insert_Input = {\n  data: Array<Poll_Questions_Insert_Input>;\n  on_conflict?: Maybe<Poll_Questions_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Poll_Questions_Avg_Fields = {\n  __typename?: 'poll_questions_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"poll_questions\". All fields are combined with a logical 'AND'. */\nexport type Poll_Questions_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Poll_Questions_Bool_Exp>>>;\n  _not?: Maybe<Poll_Questions_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Poll_Questions_Bool_Exp>>>;\n  channel_polls?: Maybe<Channel_Poll_Bool_Exp>;\n  created_at?: Maybe<Timestamptz_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  is_active?: Maybe<Boolean_Comparison_Exp>;\n  owner_id?: Maybe<String_Comparison_Exp>;\n  poll_anwers?: Maybe<Poll_Anwers_Bool_Exp>;\n  text?: Maybe<String_Comparison_Exp>;\n  updated_at?: Maybe<Timestamptz_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"poll_questions\" */\nexport enum Poll_Questions_Constraint {\n  /** unique or primary key constraint */\n  PollQuestionsPkey = 'poll_questions_pkey'\n}\n\n/** input type for incrementing integer column in table \"poll_questions\" */\nexport type Poll_Questions_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"poll_questions\" */\nexport type Poll_Questions_Insert_Input = {\n  channel_polls?: Maybe<Channel_Poll_Arr_Rel_Insert_Input>;\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  is_active?: Maybe<Scalars['Boolean']>;\n  owner_id?: Maybe<Scalars['String']>;\n  poll_anwers?: Maybe<Poll_Anwers_Arr_Rel_Insert_Input>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** aggregate max on columns */\nexport type Poll_Questions_Max_Fields = {\n  __typename?: 'poll_questions_max_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  owner_id?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by max() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Max_Order_By = {\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Poll_Questions_Min_Fields = {\n  __typename?: 'poll_questions_min_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  owner_id?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by min() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Min_Order_By = {\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"poll_questions\" */\nexport type Poll_Questions_Mutation_Response = {\n  __typename?: 'poll_questions_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Poll_Questions>;\n};\n\n/** input type for inserting object relation for remote table \"poll_questions\" */\nexport type Poll_Questions_Obj_Rel_Insert_Input = {\n  data: Poll_Questions_Insert_Input;\n  on_conflict?: Maybe<Poll_Questions_On_Conflict>;\n};\n\n/** on conflict condition type for table \"poll_questions\" */\nexport type Poll_Questions_On_Conflict = {\n  constraint: Poll_Questions_Constraint;\n  update_columns: Array<Poll_Questions_Update_Column>;\n  where?: Maybe<Poll_Questions_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"poll_questions\" */\nexport type Poll_Questions_Order_By = {\n  channel_polls_aggregate?: Maybe<Channel_Poll_Aggregate_Order_By>;\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  is_active?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n  poll_anwers_aggregate?: Maybe<Poll_Anwers_Aggregate_Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"poll_questions\" */\nexport type Poll_Questions_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"poll_questions\" */\nexport enum Poll_Questions_Select_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsActive = 'is_active',\n  /** column name */\n  OwnerId = 'owner_id',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  UpdatedAt = 'updated_at'\n}\n\n/** input type for updating data in table \"poll_questions\" */\nexport type Poll_Questions_Set_Input = {\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  is_active?: Maybe<Scalars['Boolean']>;\n  owner_id?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** aggregate stddev on columns */\nexport type Poll_Questions_Stddev_Fields = {\n  __typename?: 'poll_questions_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Poll_Questions_Stddev_Pop_Fields = {\n  __typename?: 'poll_questions_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Poll_Questions_Stddev_Samp_Fields = {\n  __typename?: 'poll_questions_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Poll_Questions_Sum_Fields = {\n  __typename?: 'poll_questions_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"poll_questions\" */\nexport enum Poll_Questions_Update_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsActive = 'is_active',\n  /** column name */\n  OwnerId = 'owner_id',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  UpdatedAt = 'updated_at'\n}\n\n/** aggregate var_pop on columns */\nexport type Poll_Questions_Var_Pop_Fields = {\n  __typename?: 'poll_questions_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Poll_Questions_Var_Samp_Fields = {\n  __typename?: 'poll_questions_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Poll_Questions_Variance_Fields = {\n  __typename?: 'poll_questions_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** query root */\nexport type Query_Root = {\n  __typename?: 'query_root';\n  /** fetch data from the table: \"channel\" */\n  channel: Array<Channel>;\n  /** fetch aggregated fields from the table: \"channel\" */\n  channel_aggregate: Channel_Aggregate;\n  /** fetch data from the table: \"channel\" using primary key columns */\n  channel_by_pk?: Maybe<Channel>;\n  /** fetch data from the table: \"channel_poll\" */\n  channel_poll: Array<Channel_Poll>;\n  /** fetch aggregated fields from the table: \"channel_poll\" */\n  channel_poll_aggregate: Channel_Poll_Aggregate;\n  /** fetch data from the table: \"channel_poll\" using primary key columns */\n  channel_poll_by_pk?: Maybe<Channel_Poll>;\n  /** fetch data from the table: \"channel_thread\" */\n  channel_thread: Array<Channel_Thread>;\n  /** fetch aggregated fields from the table: \"channel_thread\" */\n  channel_thread_aggregate: Channel_Thread_Aggregate;\n  /** fetch data from the table: \"channel_thread\" using primary key columns */\n  channel_thread_by_pk?: Maybe<Channel_Thread>;\n  /** fetch data from the table: \"channel_thread_message\" */\n  channel_thread_message: Array<Channel_Thread_Message>;\n  /** fetch aggregated fields from the table: \"channel_thread_message\" */\n  channel_thread_message_aggregate: Channel_Thread_Message_Aggregate;\n  /** fetch data from the table: \"channel_thread_message\" using primary key columns */\n  channel_thread_message_by_pk?: Maybe<Channel_Thread_Message>;\n  /** fetch data from the table: \"channel_type\" */\n  channel_type: Array<Channel_Type>;\n  /** fetch aggregated fields from the table: \"channel_type\" */\n  channel_type_aggregate: Channel_Type_Aggregate;\n  /** fetch data from the table: \"channel_type\" using primary key columns */\n  channel_type_by_pk?: Maybe<Channel_Type>;\n  /** fetch data from the table: \"message\" */\n  message: Array<Message>;\n  /** fetch aggregated fields from the table: \"message\" */\n  message_aggregate: Message_Aggregate;\n  /** fetch data from the table: \"message\" using primary key columns */\n  message_by_pk?: Maybe<Message>;\n  /** fetch data from the table: \"message_cursor\" */\n  message_cursor: Array<Message_Cursor>;\n  /** fetch aggregated fields from the table: \"message_cursor\" */\n  message_cursor_aggregate: Message_Cursor_Aggregate;\n  /** fetch data from the table: \"message_cursor\" using primary key columns */\n  message_cursor_by_pk?: Maybe<Message_Cursor>;\n  /** fetch data from the table: \"poll_anwers\" */\n  poll_anwers: Array<Poll_Anwers>;\n  /** fetch aggregated fields from the table: \"poll_anwers\" */\n  poll_anwers_aggregate: Poll_Anwers_Aggregate;\n  /** fetch data from the table: \"poll_anwers\" using primary key columns */\n  poll_anwers_by_pk?: Maybe<Poll_Anwers>;\n  /** fetch data from the table: \"poll_questions\" */\n  poll_questions: Array<Poll_Questions>;\n  /** fetch aggregated fields from the table: \"poll_questions\" */\n  poll_questions_aggregate: Poll_Questions_Aggregate;\n  /** fetch data from the table: \"poll_questions\" using primary key columns */\n  poll_questions_by_pk?: Maybe<Poll_Questions>;\n  /** fetch data from the table: \"user\" */\n  user: Array<User>;\n  /** fetch aggregated fields from the table: \"user\" */\n  user_aggregate: User_Aggregate;\n  /** fetch data from the table: \"user\" using primary key columns */\n  user_by_pk?: Maybe<User>;\n  /** fetch data from the table: \"user_channels\" */\n  user_channels: Array<User_Channels>;\n  /** fetch aggregated fields from the table: \"user_channels\" */\n  user_channels_aggregate: User_Channels_Aggregate;\n  /** fetch data from the table: \"user_channels\" using primary key columns */\n  user_channels_by_pk?: Maybe<User_Channels>;\n  /** fetch data from the table: \"user_online\" */\n  user_online: Array<User_Online>;\n  /** fetch aggregated fields from the table: \"user_online\" */\n  user_online_aggregate: User_Online_Aggregate;\n  /** fetch data from the table: \"user_typing\" */\n  user_typing: Array<User_Typing>;\n  /** fetch aggregated fields from the table: \"user_typing\" */\n  user_typing_aggregate: User_Typing_Aggregate;\n  /** fetch data from the table: \"user_votes\" */\n  user_votes: Array<User_Votes>;\n  /** fetch aggregated fields from the table: \"user_votes\" */\n  user_votes_aggregate: User_Votes_Aggregate;\n  /** fetch data from the table: \"user_votes\" using primary key columns */\n  user_votes_by_pk?: Maybe<User_Votes>;\n};\n\n\n/** query root */\nexport type Query_RootChannelArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootChannel_PollArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Poll_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Poll_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootChannel_ThreadArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Thread_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Thread_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootChannel_Thread_MessageArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Thread_Message_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Thread_Message_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootChannel_TypeArgs = {\n  distinct_on?: Maybe<Array<Channel_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Type_Order_By>>;\n  where?: Maybe<Channel_Type_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Type_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Type_Order_By>>;\n  where?: Maybe<Channel_Type_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Type_By_PkArgs = {\n  value: Scalars['String'];\n};\n\n\n/** query root */\nexport type Query_RootMessageArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootMessage_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootMessage_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootMessage_CursorArgs = {\n  distinct_on?: Maybe<Array<Message_Cursor_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Cursor_Order_By>>;\n  where?: Maybe<Message_Cursor_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootMessage_Cursor_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Cursor_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Cursor_Order_By>>;\n  where?: Maybe<Message_Cursor_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootMessage_Cursor_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootPoll_AnwersArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPoll_Anwers_AggregateArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPoll_Anwers_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootPoll_QuestionsArgs = {\n  distinct_on?: Maybe<Array<Poll_Questions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Questions_Order_By>>;\n  where?: Maybe<Poll_Questions_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPoll_Questions_AggregateArgs = {\n  distinct_on?: Maybe<Array<Poll_Questions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Questions_Order_By>>;\n  where?: Maybe<Poll_Questions_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPoll_Questions_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootUserArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootUser_ChannelsArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Channels_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Channels_By_PkArgs = {\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n\n/** query root */\nexport type Query_RootUser_OnlineArgs = {\n  distinct_on?: Maybe<Array<User_Online_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Online_Order_By>>;\n  where?: Maybe<User_Online_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Online_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Online_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Online_Order_By>>;\n  where?: Maybe<User_Online_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_TypingArgs = {\n  distinct_on?: Maybe<Array<User_Typing_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Typing_Order_By>>;\n  where?: Maybe<User_Typing_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Typing_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Typing_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Typing_Order_By>>;\n  where?: Maybe<User_Typing_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_VotesArgs = {\n  distinct_on?: Maybe<Array<User_Votes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Votes_Order_By>>;\n  where?: Maybe<User_Votes_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Votes_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Votes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Votes_Order_By>>;\n  where?: Maybe<User_Votes_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Votes_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n/** subscription root */\nexport type Subscription_Root = {\n  __typename?: 'subscription_root';\n  /** fetch data from the table: \"channel\" */\n  channel: Array<Channel>;\n  /** fetch aggregated fields from the table: \"channel\" */\n  channel_aggregate: Channel_Aggregate;\n  /** fetch data from the table: \"channel\" using primary key columns */\n  channel_by_pk?: Maybe<Channel>;\n  /** fetch data from the table: \"channel_poll\" */\n  channel_poll: Array<Channel_Poll>;\n  /** fetch aggregated fields from the table: \"channel_poll\" */\n  channel_poll_aggregate: Channel_Poll_Aggregate;\n  /** fetch data from the table: \"channel_poll\" using primary key columns */\n  channel_poll_by_pk?: Maybe<Channel_Poll>;\n  /** fetch data from the table: \"channel_thread\" */\n  channel_thread: Array<Channel_Thread>;\n  /** fetch aggregated fields from the table: \"channel_thread\" */\n  channel_thread_aggregate: Channel_Thread_Aggregate;\n  /** fetch data from the table: \"channel_thread\" using primary key columns */\n  channel_thread_by_pk?: Maybe<Channel_Thread>;\n  /** fetch data from the table: \"channel_thread_message\" */\n  channel_thread_message: Array<Channel_Thread_Message>;\n  /** fetch aggregated fields from the table: \"channel_thread_message\" */\n  channel_thread_message_aggregate: Channel_Thread_Message_Aggregate;\n  /** fetch data from the table: \"channel_thread_message\" using primary key columns */\n  channel_thread_message_by_pk?: Maybe<Channel_Thread_Message>;\n  /** fetch data from the table: \"channel_type\" */\n  channel_type: Array<Channel_Type>;\n  /** fetch aggregated fields from the table: \"channel_type\" */\n  channel_type_aggregate: Channel_Type_Aggregate;\n  /** fetch data from the table: \"channel_type\" using primary key columns */\n  channel_type_by_pk?: Maybe<Channel_Type>;\n  /** fetch data from the table: \"message\" */\n  message: Array<Message>;\n  /** fetch aggregated fields from the table: \"message\" */\n  message_aggregate: Message_Aggregate;\n  /** fetch data from the table: \"message\" using primary key columns */\n  message_by_pk?: Maybe<Message>;\n  /** fetch data from the table: \"message_cursor\" */\n  message_cursor: Array<Message_Cursor>;\n  /** fetch aggregated fields from the table: \"message_cursor\" */\n  message_cursor_aggregate: Message_Cursor_Aggregate;\n  /** fetch data from the table: \"message_cursor\" using primary key columns */\n  message_cursor_by_pk?: Maybe<Message_Cursor>;\n  /** fetch data from the table: \"poll_anwers\" */\n  poll_anwers: Array<Poll_Anwers>;\n  /** fetch aggregated fields from the table: \"poll_anwers\" */\n  poll_anwers_aggregate: Poll_Anwers_Aggregate;\n  /** fetch data from the table: \"poll_anwers\" using primary key columns */\n  poll_anwers_by_pk?: Maybe<Poll_Anwers>;\n  /** fetch data from the table: \"poll_questions\" */\n  poll_questions: Array<Poll_Questions>;\n  /** fetch aggregated fields from the table: \"poll_questions\" */\n  poll_questions_aggregate: Poll_Questions_Aggregate;\n  /** fetch data from the table: \"poll_questions\" using primary key columns */\n  poll_questions_by_pk?: Maybe<Poll_Questions>;\n  /** fetch data from the table: \"user\" */\n  user: Array<User>;\n  /** fetch aggregated fields from the table: \"user\" */\n  user_aggregate: User_Aggregate;\n  /** fetch data from the table: \"user\" using primary key columns */\n  user_by_pk?: Maybe<User>;\n  /** fetch data from the table: \"user_channels\" */\n  user_channels: Array<User_Channels>;\n  /** fetch aggregated fields from the table: \"user_channels\" */\n  user_channels_aggregate: User_Channels_Aggregate;\n  /** fetch data from the table: \"user_channels\" using primary key columns */\n  user_channels_by_pk?: Maybe<User_Channels>;\n  /** fetch data from the table: \"user_online\" */\n  user_online: Array<User_Online>;\n  /** fetch aggregated fields from the table: \"user_online\" */\n  user_online_aggregate: User_Online_Aggregate;\n  /** fetch data from the table: \"user_typing\" */\n  user_typing: Array<User_Typing>;\n  /** fetch aggregated fields from the table: \"user_typing\" */\n  user_typing_aggregate: User_Typing_Aggregate;\n  /** fetch data from the table: \"user_votes\" */\n  user_votes: Array<User_Votes>;\n  /** fetch aggregated fields from the table: \"user_votes\" */\n  user_votes_aggregate: User_Votes_Aggregate;\n  /** fetch data from the table: \"user_votes\" using primary key columns */\n  user_votes_by_pk?: Maybe<User_Votes>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannelArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_PollArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Poll_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Poll_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_ThreadArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Thread_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Thread_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Thread_MessageArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Thread_Message_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Thread_Message_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_TypeArgs = {\n  distinct_on?: Maybe<Array<Channel_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Type_Order_By>>;\n  where?: Maybe<Channel_Type_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Type_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Type_Order_By>>;\n  where?: Maybe<Channel_Type_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Type_By_PkArgs = {\n  value: Scalars['String'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessageArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessage_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessage_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessage_CursorArgs = {\n  distinct_on?: Maybe<Array<Message_Cursor_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Cursor_Order_By>>;\n  where?: Maybe<Message_Cursor_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessage_Cursor_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Cursor_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Cursor_Order_By>>;\n  where?: Maybe<Message_Cursor_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessage_Cursor_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_AnwersArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_Anwers_AggregateArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_Anwers_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_QuestionsArgs = {\n  distinct_on?: Maybe<Array<Poll_Questions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Questions_Order_By>>;\n  where?: Maybe<Poll_Questions_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_Questions_AggregateArgs = {\n  distinct_on?: Maybe<Array<Poll_Questions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Questions_Order_By>>;\n  where?: Maybe<Poll_Questions_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_Questions_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootUserArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_ChannelsArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Channels_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Channels_By_PkArgs = {\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_OnlineArgs = {\n  distinct_on?: Maybe<Array<User_Online_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Online_Order_By>>;\n  where?: Maybe<User_Online_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Online_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Online_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Online_Order_By>>;\n  where?: Maybe<User_Online_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_TypingArgs = {\n  distinct_on?: Maybe<Array<User_Typing_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Typing_Order_By>>;\n  where?: Maybe<User_Typing_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Typing_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Typing_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Typing_Order_By>>;\n  where?: Maybe<User_Typing_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_VotesArgs = {\n  distinct_on?: Maybe<Array<User_Votes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Votes_Order_By>>;\n  where?: Maybe<User_Votes_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Votes_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Votes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Votes_Order_By>>;\n  where?: Maybe<User_Votes_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Votes_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** expression to compare columns of type timestamptz. All fields are combined with logical 'AND'. */\nexport type Timestamptz_Comparison_Exp = {\n  _eq?: Maybe<Scalars['timestamptz']>;\n  _gt?: Maybe<Scalars['timestamptz']>;\n  _gte?: Maybe<Scalars['timestamptz']>;\n  _in?: Maybe<Array<Scalars['timestamptz']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['timestamptz']>;\n  _lte?: Maybe<Scalars['timestamptz']>;\n  _neq?: Maybe<Scalars['timestamptz']>;\n  _nin?: Maybe<Array<Scalars['timestamptz']>>;\n};\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type User = {\n  __typename?: 'user';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  /** An array relationship */\n  channel_thread_messages: Array<Channel_Thread_Message>;\n  /** An aggregated array relationship */\n  channel_thread_messages_aggregate: Channel_Thread_Message_Aggregate;\n  /** An array relationship */\n  channels: Array<Channel>;\n  /** An aggregated array relationship */\n  channels_aggregate: Channel_Aggregate;\n  id: Scalars['Int'];\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  /** An array relationship */\n  messages: Array<Message>;\n  /** An aggregated array relationship */\n  messages_aggregate: Message_Aggregate;\n  /** An array relationship */\n  user_channels: Array<User_Channels>;\n  /** An aggregated array relationship */\n  user_channels_aggregate: User_Channels_Aggregate;\n  username: Scalars['String'];\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserChannel_Thread_MessagesArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserChannel_Thread_Messages_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserChannelsArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserChannels_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserMessagesArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserMessages_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserUser_ChannelsArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserUser_Channels_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n/** aggregated selection of \"user\" */\nexport type User_Aggregate = {\n  __typename?: 'user_aggregate';\n  aggregate?: Maybe<User_Aggregate_Fields>;\n  nodes: Array<User>;\n};\n\n/** aggregate fields of \"user\" */\nexport type User_Aggregate_Fields = {\n  __typename?: 'user_aggregate_fields';\n  avg?: Maybe<User_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<User_Max_Fields>;\n  min?: Maybe<User_Min_Fields>;\n  stddev?: Maybe<User_Stddev_Fields>;\n  stddev_pop?: Maybe<User_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<User_Stddev_Samp_Fields>;\n  sum?: Maybe<User_Sum_Fields>;\n  var_pop?: Maybe<User_Var_Pop_Fields>;\n  var_samp?: Maybe<User_Var_Samp_Fields>;\n  variance?: Maybe<User_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"user\" */\nexport type User_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<User_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"user\" */\nexport type User_Aggregate_Order_By = {\n  avg?: Maybe<User_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<User_Max_Order_By>;\n  min?: Maybe<User_Min_Order_By>;\n  stddev?: Maybe<User_Stddev_Order_By>;\n  stddev_pop?: Maybe<User_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<User_Stddev_Samp_Order_By>;\n  sum?: Maybe<User_Sum_Order_By>;\n  var_pop?: Maybe<User_Var_Pop_Order_By>;\n  var_samp?: Maybe<User_Var_Samp_Order_By>;\n  variance?: Maybe<User_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"user\" */\nexport type User_Arr_Rel_Insert_Input = {\n  data: Array<User_Insert_Input>;\n  on_conflict?: Maybe<User_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type User_Avg_Fields = {\n  __typename?: 'user_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"user\" */\nexport type User_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"user\". All fields are combined with a logical 'AND'. */\nexport type User_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<User_Bool_Exp>>>;\n  _not?: Maybe<User_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<User_Bool_Exp>>>;\n  auth0_user_id?: Maybe<String_Comparison_Exp>;\n  channel_thread_messages?: Maybe<Channel_Thread_Message_Bool_Exp>;\n  channels?: Maybe<Channel_Bool_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  last_seen?: Maybe<Timestamptz_Comparison_Exp>;\n  last_typed?: Maybe<Timestamptz_Comparison_Exp>;\n  last_typed_channel?: Maybe<Int_Comparison_Exp>;\n  messages?: Maybe<Message_Bool_Exp>;\n  user_channels?: Maybe<User_Channels_Bool_Exp>;\n  username?: Maybe<String_Comparison_Exp>;\n};\n\n/** columns and relationships of \"user_channels\" */\nexport type User_Channels = {\n  __typename?: 'user_channels';\n  /** An object relationship */\n  channel: Channel;\n  channel_id: Scalars['Int'];\n  /** An object relationship */\n  user: User;\n  user_id: Scalars['String'];\n};\n\n/** aggregated selection of \"user_channels\" */\nexport type User_Channels_Aggregate = {\n  __typename?: 'user_channels_aggregate';\n  aggregate?: Maybe<User_Channels_Aggregate_Fields>;\n  nodes: Array<User_Channels>;\n};\n\n/** aggregate fields of \"user_channels\" */\nexport type User_Channels_Aggregate_Fields = {\n  __typename?: 'user_channels_aggregate_fields';\n  avg?: Maybe<User_Channels_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<User_Channels_Max_Fields>;\n  min?: Maybe<User_Channels_Min_Fields>;\n  stddev?: Maybe<User_Channels_Stddev_Fields>;\n  stddev_pop?: Maybe<User_Channels_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<User_Channels_Stddev_Samp_Fields>;\n  sum?: Maybe<User_Channels_Sum_Fields>;\n  var_pop?: Maybe<User_Channels_Var_Pop_Fields>;\n  var_samp?: Maybe<User_Channels_Var_Samp_Fields>;\n  variance?: Maybe<User_Channels_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"user_channels\" */\nexport type User_Channels_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<User_Channels_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"user_channels\" */\nexport type User_Channels_Aggregate_Order_By = {\n  avg?: Maybe<User_Channels_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<User_Channels_Max_Order_By>;\n  min?: Maybe<User_Channels_Min_Order_By>;\n  stddev?: Maybe<User_Channels_Stddev_Order_By>;\n  stddev_pop?: Maybe<User_Channels_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<User_Channels_Stddev_Samp_Order_By>;\n  sum?: Maybe<User_Channels_Sum_Order_By>;\n  var_pop?: Maybe<User_Channels_Var_Pop_Order_By>;\n  var_samp?: Maybe<User_Channels_Var_Samp_Order_By>;\n  variance?: Maybe<User_Channels_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"user_channels\" */\nexport type User_Channels_Arr_Rel_Insert_Input = {\n  data: Array<User_Channels_Insert_Input>;\n  on_conflict?: Maybe<User_Channels_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type User_Channels_Avg_Fields = {\n  __typename?: 'user_channels_avg_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"user_channels\" */\nexport type User_Channels_Avg_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"user_channels\". All fields are combined with a logical 'AND'. */\nexport type User_Channels_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<User_Channels_Bool_Exp>>>;\n  _not?: Maybe<User_Channels_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<User_Channels_Bool_Exp>>>;\n  channel?: Maybe<Channel_Bool_Exp>;\n  channel_id?: Maybe<Int_Comparison_Exp>;\n  user?: Maybe<User_Bool_Exp>;\n  user_id?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"user_channels\" */\nexport enum User_Channels_Constraint {\n  /** unique or primary key constraint */\n  UserChannelsPkey = 'user_channels_pkey'\n}\n\n/** input type for incrementing integer column in table \"user_channels\" */\nexport type User_Channels_Inc_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"user_channels\" */\nexport type User_Channels_Insert_Input = {\n  channel?: Maybe<Channel_Obj_Rel_Insert_Input>;\n  channel_id?: Maybe<Scalars['Int']>;\n  user?: Maybe<User_Obj_Rel_Insert_Input>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type User_Channels_Max_Fields = {\n  __typename?: 'user_channels_max_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"user_channels\" */\nexport type User_Channels_Max_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type User_Channels_Min_Fields = {\n  __typename?: 'user_channels_min_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"user_channels\" */\nexport type User_Channels_Min_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"user_channels\" */\nexport type User_Channels_Mutation_Response = {\n  __typename?: 'user_channels_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<User_Channels>;\n};\n\n/** input type for inserting object relation for remote table \"user_channels\" */\nexport type User_Channels_Obj_Rel_Insert_Input = {\n  data: User_Channels_Insert_Input;\n  on_conflict?: Maybe<User_Channels_On_Conflict>;\n};\n\n/** on conflict condition type for table \"user_channels\" */\nexport type User_Channels_On_Conflict = {\n  constraint: User_Channels_Constraint;\n  update_columns: Array<User_Channels_Update_Column>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"user_channels\" */\nexport type User_Channels_Order_By = {\n  channel?: Maybe<Channel_Order_By>;\n  channel_id?: Maybe<Order_By>;\n  user?: Maybe<User_Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"user_channels\" */\nexport type User_Channels_Pk_Columns_Input = {\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n/** select columns of table \"user_channels\" */\nexport enum User_Channels_Select_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** input type for updating data in table \"user_channels\" */\nexport type User_Channels_Set_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type User_Channels_Stddev_Fields = {\n  __typename?: 'user_channels_stddev_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"user_channels\" */\nexport type User_Channels_Stddev_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type User_Channels_Stddev_Pop_Fields = {\n  __typename?: 'user_channels_stddev_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"user_channels\" */\nexport type User_Channels_Stddev_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type User_Channels_Stddev_Samp_Fields = {\n  __typename?: 'user_channels_stddev_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"user_channels\" */\nexport type User_Channels_Stddev_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type User_Channels_Sum_Fields = {\n  __typename?: 'user_channels_sum_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"user_channels\" */\nexport type User_Channels_Sum_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"user_channels\" */\nexport enum User_Channels_Update_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** aggregate var_pop on columns */\nexport type User_Channels_Var_Pop_Fields = {\n  __typename?: 'user_channels_var_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"user_channels\" */\nexport type User_Channels_Var_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type User_Channels_Var_Samp_Fields = {\n  __typename?: 'user_channels_var_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"user_channels\" */\nexport type User_Channels_Var_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type User_Channels_Variance_Fields = {\n  __typename?: 'user_channels_variance_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"user_channels\" */\nexport type User_Channels_Variance_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** unique or primary key constraints on table \"user\" */\nexport enum User_Constraint {\n  /** unique or primary key constraint */\n  UserAuth0UserIdKey = 'user_auth0_user_id_key',\n  /** unique or primary key constraint */\n  UserPkey = 'user_pkey'\n}\n\n/** input type for incrementing integer column in table \"user\" */\nexport type User_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"user\" */\nexport type User_Insert_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  channel_thread_messages?: Maybe<Channel_Thread_Message_Arr_Rel_Insert_Input>;\n  channels?: Maybe<Channel_Arr_Rel_Insert_Input>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  messages?: Maybe<Message_Arr_Rel_Insert_Input>;\n  user_channels?: Maybe<User_Channels_Arr_Rel_Insert_Input>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type User_Max_Fields = {\n  __typename?: 'user_max_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"user\" */\nexport type User_Max_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type User_Min_Fields = {\n  __typename?: 'user_min_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"user\" */\nexport type User_Min_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"user\" */\nexport type User_Mutation_Response = {\n  __typename?: 'user_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<User>;\n};\n\n/** input type for inserting object relation for remote table \"user\" */\nexport type User_Obj_Rel_Insert_Input = {\n  data: User_Insert_Input;\n  on_conflict?: Maybe<User_On_Conflict>;\n};\n\n/** on conflict condition type for table \"user\" */\nexport type User_On_Conflict = {\n  constraint: User_Constraint;\n  update_columns: Array<User_Update_Column>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n/** columns and relationships of \"user_online\" */\nexport type User_Online = {\n  __typename?: 'user_online';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregated selection of \"user_online\" */\nexport type User_Online_Aggregate = {\n  __typename?: 'user_online_aggregate';\n  aggregate?: Maybe<User_Online_Aggregate_Fields>;\n  nodes: Array<User_Online>;\n};\n\n/** aggregate fields of \"user_online\" */\nexport type User_Online_Aggregate_Fields = {\n  __typename?: 'user_online_aggregate_fields';\n  avg?: Maybe<User_Online_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<User_Online_Max_Fields>;\n  min?: Maybe<User_Online_Min_Fields>;\n  stddev?: Maybe<User_Online_Stddev_Fields>;\n  stddev_pop?: Maybe<User_Online_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<User_Online_Stddev_Samp_Fields>;\n  sum?: Maybe<User_Online_Sum_Fields>;\n  var_pop?: Maybe<User_Online_Var_Pop_Fields>;\n  var_samp?: Maybe<User_Online_Var_Samp_Fields>;\n  variance?: Maybe<User_Online_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"user_online\" */\nexport type User_Online_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<User_Online_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"user_online\" */\nexport type User_Online_Aggregate_Order_By = {\n  avg?: Maybe<User_Online_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<User_Online_Max_Order_By>;\n  min?: Maybe<User_Online_Min_Order_By>;\n  stddev?: Maybe<User_Online_Stddev_Order_By>;\n  stddev_pop?: Maybe<User_Online_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<User_Online_Stddev_Samp_Order_By>;\n  sum?: Maybe<User_Online_Sum_Order_By>;\n  var_pop?: Maybe<User_Online_Var_Pop_Order_By>;\n  var_samp?: Maybe<User_Online_Var_Samp_Order_By>;\n  variance?: Maybe<User_Online_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"user_online\" */\nexport type User_Online_Arr_Rel_Insert_Input = {\n  data: Array<User_Online_Insert_Input>;\n};\n\n/** aggregate avg on columns */\nexport type User_Online_Avg_Fields = {\n  __typename?: 'user_online_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"user_online\" */\nexport type User_Online_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"user_online\". All fields are combined with a logical 'AND'. */\nexport type User_Online_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<User_Online_Bool_Exp>>>;\n  _not?: Maybe<User_Online_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<User_Online_Bool_Exp>>>;\n  auth0_user_id?: Maybe<String_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  last_seen?: Maybe<Timestamptz_Comparison_Exp>;\n  last_typed?: Maybe<Timestamptz_Comparison_Exp>;\n  username?: Maybe<String_Comparison_Exp>;\n};\n\n/** input type for incrementing integer column in table \"user_online\" */\nexport type User_Online_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"user_online\" */\nexport type User_Online_Insert_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type User_Online_Max_Fields = {\n  __typename?: 'user_online_max_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"user_online\" */\nexport type User_Online_Max_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type User_Online_Min_Fields = {\n  __typename?: 'user_online_min_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"user_online\" */\nexport type User_Online_Min_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"user_online\" */\nexport type User_Online_Mutation_Response = {\n  __typename?: 'user_online_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<User_Online>;\n};\n\n/** input type for inserting object relation for remote table \"user_online\" */\nexport type User_Online_Obj_Rel_Insert_Input = {\n  data: User_Online_Insert_Input;\n};\n\n/** ordering options when selecting data from \"user_online\" */\nexport type User_Online_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** select columns of table \"user_online\" */\nexport enum User_Online_Select_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  LastSeen = 'last_seen',\n  /** column name */\n  LastTyped = 'last_typed',\n  /** column name */\n  Username = 'username'\n}\n\n/** input type for updating data in table \"user_online\" */\nexport type User_Online_Set_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type User_Online_Stddev_Fields = {\n  __typename?: 'user_online_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"user_online\" */\nexport type User_Online_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type User_Online_Stddev_Pop_Fields = {\n  __typename?: 'user_online_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"user_online\" */\nexport type User_Online_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type User_Online_Stddev_Samp_Fields = {\n  __typename?: 'user_online_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"user_online\" */\nexport type User_Online_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type User_Online_Sum_Fields = {\n  __typename?: 'user_online_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"user_online\" */\nexport type User_Online_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_pop on columns */\nexport type User_Online_Var_Pop_Fields = {\n  __typename?: 'user_online_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"user_online\" */\nexport type User_Online_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type User_Online_Var_Samp_Fields = {\n  __typename?: 'user_online_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"user_online\" */\nexport type User_Online_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type User_Online_Variance_Fields = {\n  __typename?: 'user_online_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"user_online\" */\nexport type User_Online_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** ordering options when selecting data from \"user\" */\nexport type User_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  channel_thread_messages_aggregate?: Maybe<Channel_Thread_Message_Aggregate_Order_By>;\n  channels_aggregate?: Maybe<Channel_Aggregate_Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  messages_aggregate?: Maybe<Message_Aggregate_Order_By>;\n  user_channels_aggregate?: Maybe<User_Channels_Aggregate_Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"user\" */\nexport type User_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"user\" */\nexport enum User_Select_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  LastSeen = 'last_seen',\n  /** column name */\n  LastTyped = 'last_typed',\n  /** column name */\n  LastTypedChannel = 'last_typed_channel',\n  /** column name */\n  Username = 'username'\n}\n\n/** input type for updating data in table \"user\" */\nexport type User_Set_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type User_Stddev_Fields = {\n  __typename?: 'user_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"user\" */\nexport type User_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type User_Stddev_Pop_Fields = {\n  __typename?: 'user_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"user\" */\nexport type User_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type User_Stddev_Samp_Fields = {\n  __typename?: 'user_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"user\" */\nexport type User_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type User_Sum_Fields = {\n  __typename?: 'user_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"user\" */\nexport type User_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"user_typing\" */\nexport type User_Typing = {\n  __typename?: 'user_typing';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregated selection of \"user_typing\" */\nexport type User_Typing_Aggregate = {\n  __typename?: 'user_typing_aggregate';\n  aggregate?: Maybe<User_Typing_Aggregate_Fields>;\n  nodes: Array<User_Typing>;\n};\n\n/** aggregate fields of \"user_typing\" */\nexport type User_Typing_Aggregate_Fields = {\n  __typename?: 'user_typing_aggregate_fields';\n  avg?: Maybe<User_Typing_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<User_Typing_Max_Fields>;\n  min?: Maybe<User_Typing_Min_Fields>;\n  stddev?: Maybe<User_Typing_Stddev_Fields>;\n  stddev_pop?: Maybe<User_Typing_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<User_Typing_Stddev_Samp_Fields>;\n  sum?: Maybe<User_Typing_Sum_Fields>;\n  var_pop?: Maybe<User_Typing_Var_Pop_Fields>;\n  var_samp?: Maybe<User_Typing_Var_Samp_Fields>;\n  variance?: Maybe<User_Typing_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"user_typing\" */\nexport type User_Typing_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<User_Typing_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"user_typing\" */\nexport type User_Typing_Aggregate_Order_By = {\n  avg?: Maybe<User_Typing_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<User_Typing_Max_Order_By>;\n  min?: Maybe<User_Typing_Min_Order_By>;\n  stddev?: Maybe<User_Typing_Stddev_Order_By>;\n  stddev_pop?: Maybe<User_Typing_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<User_Typing_Stddev_Samp_Order_By>;\n  sum?: Maybe<User_Typing_Sum_Order_By>;\n  var_pop?: Maybe<User_Typing_Var_Pop_Order_By>;\n  var_samp?: Maybe<User_Typing_Var_Samp_Order_By>;\n  variance?: Maybe<User_Typing_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"user_typing\" */\nexport type User_Typing_Arr_Rel_Insert_Input = {\n  data: Array<User_Typing_Insert_Input>;\n};\n\n/** aggregate avg on columns */\nexport type User_Typing_Avg_Fields = {\n  __typename?: 'user_typing_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"user_typing\" */\nexport type User_Typing_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"user_typing\". All fields are combined with a logical 'AND'. */\nexport type User_Typing_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<User_Typing_Bool_Exp>>>;\n  _not?: Maybe<User_Typing_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<User_Typing_Bool_Exp>>>;\n  auth0_user_id?: Maybe<String_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  last_seen?: Maybe<Timestamptz_Comparison_Exp>;\n  last_typed?: Maybe<Timestamptz_Comparison_Exp>;\n  last_typed_channel?: Maybe<Int_Comparison_Exp>;\n  username?: Maybe<String_Comparison_Exp>;\n};\n\n/** input type for incrementing integer column in table \"user_typing\" */\nexport type User_Typing_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"user_typing\" */\nexport type User_Typing_Insert_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type User_Typing_Max_Fields = {\n  __typename?: 'user_typing_max_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"user_typing\" */\nexport type User_Typing_Max_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type User_Typing_Min_Fields = {\n  __typename?: 'user_typing_min_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"user_typing\" */\nexport type User_Typing_Min_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"user_typing\" */\nexport type User_Typing_Mutation_Response = {\n  __typename?: 'user_typing_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<User_Typing>;\n};\n\n/** input type for inserting object relation for remote table \"user_typing\" */\nexport type User_Typing_Obj_Rel_Insert_Input = {\n  data: User_Typing_Insert_Input;\n};\n\n/** ordering options when selecting data from \"user_typing\" */\nexport type User_Typing_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** select columns of table \"user_typing\" */\nexport enum User_Typing_Select_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  LastSeen = 'last_seen',\n  /** column name */\n  LastTyped = 'last_typed',\n  /** column name */\n  LastTypedChannel = 'last_typed_channel',\n  /** column name */\n  Username = 'username'\n}\n\n/** input type for updating data in table \"user_typing\" */\nexport type User_Typing_Set_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type User_Typing_Stddev_Fields = {\n  __typename?: 'user_typing_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"user_typing\" */\nexport type User_Typing_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type User_Typing_Stddev_Pop_Fields = {\n  __typename?: 'user_typing_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"user_typing\" */\nexport type User_Typing_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type User_Typing_Stddev_Samp_Fields = {\n  __typename?: 'user_typing_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"user_typing\" */\nexport type User_Typing_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type User_Typing_Sum_Fields = {\n  __typename?: 'user_typing_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"user_typing\" */\nexport type User_Typing_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate var_pop on columns */\nexport type User_Typing_Var_Pop_Fields = {\n  __typename?: 'user_typing_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"user_typing\" */\nexport type User_Typing_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type User_Typing_Var_Samp_Fields = {\n  __typename?: 'user_typing_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"user_typing\" */\nexport type User_Typing_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type User_Typing_Variance_Fields = {\n  __typename?: 'user_typing_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"user_typing\" */\nexport type User_Typing_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** update columns of table \"user\" */\nexport enum User_Update_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  LastSeen = 'last_seen',\n  /** column name */\n  LastTyped = 'last_typed',\n  /** column name */\n  LastTypedChannel = 'last_typed_channel',\n  /** column name */\n  Username = 'username'\n}\n\n/** aggregate var_pop on columns */\nexport type User_Var_Pop_Fields = {\n  __typename?: 'user_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"user\" */\nexport type User_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type User_Var_Samp_Fields = {\n  __typename?: 'user_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"user\" */\nexport type User_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type User_Variance_Fields = {\n  __typename?: 'user_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"user\" */\nexport type User_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"user_votes\" */\nexport type User_Votes = {\n  __typename?: 'user_votes';\n  auth0_user_id: Scalars['String'];\n  id: Scalars['Int'];\n  poll_answer_id: Scalars['Int'];\n  poll_question_id: Scalars['Int'];\n  username: Scalars['String'];\n  voted_at: Scalars['timestamptz'];\n};\n\n/** aggregated selection of \"user_votes\" */\nexport type User_Votes_Aggregate = {\n  __typename?: 'user_votes_aggregate';\n  aggregate?: Maybe<User_Votes_Aggregate_Fields>;\n  nodes: Array<User_Votes>;\n};\n\n/** aggregate fields of \"user_votes\" */\nexport type User_Votes_Aggregate_Fields = {\n  __typename?: 'user_votes_aggregate_fields';\n  avg?: Maybe<User_Votes_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<User_Votes_Max_Fields>;\n  min?: Maybe<User_Votes_Min_Fields>;\n  stddev?: Maybe<User_Votes_Stddev_Fields>;\n  stddev_pop?: Maybe<User_Votes_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<User_Votes_Stddev_Samp_Fields>;\n  sum?: Maybe<User_Votes_Sum_Fields>;\n  var_pop?: Maybe<User_Votes_Var_Pop_Fields>;\n  var_samp?: Maybe<User_Votes_Var_Samp_Fields>;\n  variance?: Maybe<User_Votes_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"user_votes\" */\nexport type User_Votes_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<User_Votes_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"user_votes\" */\nexport type User_Votes_Aggregate_Order_By = {\n  avg?: Maybe<User_Votes_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<User_Votes_Max_Order_By>;\n  min?: Maybe<User_Votes_Min_Order_By>;\n  stddev?: Maybe<User_Votes_Stddev_Order_By>;\n  stddev_pop?: Maybe<User_Votes_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<User_Votes_Stddev_Samp_Order_By>;\n  sum?: Maybe<User_Votes_Sum_Order_By>;\n  var_pop?: Maybe<User_Votes_Var_Pop_Order_By>;\n  var_samp?: Maybe<User_Votes_Var_Samp_Order_By>;\n  variance?: Maybe<User_Votes_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"user_votes\" */\nexport type User_Votes_Arr_Rel_Insert_Input = {\n  data: Array<User_Votes_Insert_Input>;\n  on_conflict?: Maybe<User_Votes_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type User_Votes_Avg_Fields = {\n  __typename?: 'user_votes_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"user_votes\" */\nexport type User_Votes_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"user_votes\". All fields are combined with a logical 'AND'. */\nexport type User_Votes_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<User_Votes_Bool_Exp>>>;\n  _not?: Maybe<User_Votes_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<User_Votes_Bool_Exp>>>;\n  auth0_user_id?: Maybe<String_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  poll_answer_id?: Maybe<Int_Comparison_Exp>;\n  poll_question_id?: Maybe<Int_Comparison_Exp>;\n  username?: Maybe<String_Comparison_Exp>;\n  voted_at?: Maybe<Timestamptz_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"user_votes\" */\nexport enum User_Votes_Constraint {\n  /** unique or primary key constraint */\n  UserVotesPkey = 'user_votes_pkey'\n}\n\n/** input type for incrementing integer column in table \"user_votes\" */\nexport type User_Votes_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"user_votes\" */\nexport type User_Votes_Insert_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n  voted_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** aggregate max on columns */\nexport type User_Votes_Max_Fields = {\n  __typename?: 'user_votes_max_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n  voted_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by max() on columns of table \"user_votes\" */\nexport type User_Votes_Max_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n  voted_at?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type User_Votes_Min_Fields = {\n  __typename?: 'user_votes_min_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n  voted_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by min() on columns of table \"user_votes\" */\nexport type User_Votes_Min_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n  voted_at?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"user_votes\" */\nexport type User_Votes_Mutation_Response = {\n  __typename?: 'user_votes_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<User_Votes>;\n};\n\n/** input type for inserting object relation for remote table \"user_votes\" */\nexport type User_Votes_Obj_Rel_Insert_Input = {\n  data: User_Votes_Insert_Input;\n  on_conflict?: Maybe<User_Votes_On_Conflict>;\n};\n\n/** on conflict condition type for table \"user_votes\" */\nexport type User_Votes_On_Conflict = {\n  constraint: User_Votes_Constraint;\n  update_columns: Array<User_Votes_Update_Column>;\n  where?: Maybe<User_Votes_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"user_votes\" */\nexport type User_Votes_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n  voted_at?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"user_votes\" */\nexport type User_Votes_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"user_votes\" */\nexport enum User_Votes_Select_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  PollAnswerId = 'poll_answer_id',\n  /** column name */\n  PollQuestionId = 'poll_question_id',\n  /** column name */\n  Username = 'username',\n  /** column name */\n  VotedAt = 'voted_at'\n}\n\n/** input type for updating data in table \"user_votes\" */\nexport type User_Votes_Set_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n  voted_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** aggregate stddev on columns */\nexport type User_Votes_Stddev_Fields = {\n  __typename?: 'user_votes_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"user_votes\" */\nexport type User_Votes_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type User_Votes_Stddev_Pop_Fields = {\n  __typename?: 'user_votes_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"user_votes\" */\nexport type User_Votes_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type User_Votes_Stddev_Samp_Fields = {\n  __typename?: 'user_votes_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"user_votes\" */\nexport type User_Votes_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type User_Votes_Sum_Fields = {\n  __typename?: 'user_votes_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"user_votes\" */\nexport type User_Votes_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"user_votes\" */\nexport enum User_Votes_Update_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  PollAnswerId = 'poll_answer_id',\n  /** column name */\n  PollQuestionId = 'poll_question_id',\n  /** column name */\n  Username = 'username',\n  /** column name */\n  VotedAt = 'voted_at'\n}\n\n/** aggregate var_pop on columns */\nexport type User_Votes_Var_Pop_Fields = {\n  __typename?: 'user_votes_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"user_votes\" */\nexport type User_Votes_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type User_Votes_Var_Samp_Fields = {\n  __typename?: 'user_votes_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"user_votes\" */\nexport type User_Votes_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type User_Votes_Variance_Fields = {\n  __typename?: 'user_votes_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"user_votes\" */\nexport type User_Votes_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n\nexport type ValidateAndAddDirectMessageChannelOutput = {\n  __typename?: 'validateAndAddDirectMessageChannelOutput';\n  id: Scalars['Int'];\n  name: Scalars['String'];\n};\n\nexport type InsertMessageMutationVariables = Exact<{\n  message: Message_Insert_Input;\n}>;\n\n\nexport type InsertMessageMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_message?: Maybe<(\n    { __typename?: 'message_mutation_response' }\n    & { returning: Array<(\n      { __typename?: 'message' }\n      & Pick<Message, 'id' | 'timestamp' | 'text'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'username'>\n      ), channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'name'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type UpdateMessageMutationVariables = Exact<{\n  _eq: Scalars['Int'];\n  text: Scalars['String'];\n  deleted?: Maybe<Scalars['Boolean']>;\n}>;\n\n\nexport type UpdateMessageMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_message?: Maybe<(\n    { __typename?: 'message_mutation_response' }\n    & Pick<Message_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type DeleteMessageMutationVariables = Exact<{\n  message_id?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type DeleteMessageMutation = (\n  { __typename?: 'mutation_root' }\n  & { delete_message?: Maybe<(\n    { __typename?: 'message_mutation_response' }\n    & Pick<Message_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type SetUserOnlineMutationVariables = Exact<{\n  user_id: Scalars['String'];\n}>;\n\n\nexport type SetUserOnlineMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_user?: Maybe<(\n    { __typename?: 'user_mutation_response' }\n    & Pick<User_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type AddChannelMutationVariables = Exact<{\n  channel: Channel_Insert_Input;\n}>;\n\n\nexport type AddChannelMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_channel?: Maybe<(\n    { __typename?: 'channel_mutation_response' }\n    & { returning: Array<(\n      { __typename?: 'channel' }\n      & Pick<Channel, 'id' | 'name' | 'owner_id' | 'is_private'>\n    )> }\n  )> }\n);\n\nexport type ValidateAndAddDirectMessageChannelMutationVariables = Exact<{\n  name: Scalars['String'];\n  user_id1: Scalars['String'];\n  user_id2: Scalars['String'];\n}>;\n\n\nexport type ValidateAndAddDirectMessageChannelMutation = (\n  { __typename?: 'mutation_root' }\n  & { validateAndAddDirectMessageChannel?: Maybe<(\n    { __typename?: 'validateAndAddDirectMessageChannelOutput' }\n    & Pick<ValidateAndAddDirectMessageChannelOutput, 'id' | 'name'>\n  )> }\n);\n\nexport type AddChannelUserMutationVariables = Exact<{\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n}>;\n\n\nexport type AddChannelUserMutation = (\n  { __typename?: 'mutation_root' }\n  & { addChannelUser?: Maybe<(\n    { __typename?: 'AddChannelUserOutput' }\n    & Pick<AddChannelUserOutput, 'affected_rows'>\n  )> }\n);\n\nexport type SendTypingEventMutationVariables = Exact<{\n  user_id: Scalars['String'];\n  channel_id: Scalars['Int'];\n}>;\n\n\nexport type SendTypingEventMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_user?: Maybe<(\n    { __typename?: 'user_mutation_response' }\n    & Pick<User_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type UpsertMessageCursorMutationVariables = Exact<{\n  channel_id: Scalars['Int'];\n  message_id: Scalars['Int'];\n  user_id: Scalars['String'];\n}>;\n\n\nexport type UpsertMessageCursorMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_message_cursor?: Maybe<(\n    { __typename?: 'message_cursor_mutation_response' }\n    & { returning: Array<(\n      { __typename?: 'message_cursor' }\n      & Pick<Message_Cursor, 'channel_id' | 'message_id' | 'user_id'>\n    )> }\n  )> }\n);\n\nexport type InsertChannelThreadMessageMutationVariables = Exact<{\n  channel_thread_id: Scalars['Int'];\n  message: Scalars['String'];\n  user_id: Scalars['String'];\n  image?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type InsertChannelThreadMessageMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_channel_thread_message?: Maybe<(\n    { __typename?: 'channel_thread_message_mutation_response' }\n    & Pick<Channel_Thread_Message_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'channel_thread_message' }\n      & Pick<Channel_Thread_Message, 'id' | 'image' | 'message' | 'timestamp' | 'user_id'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'auth0_user_id' | 'username'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type DeleteThreadMessageMutationVariables = Exact<{\n  message_id: Scalars['Int'];\n}>;\n\n\nexport type DeleteThreadMessageMutation = (\n  { __typename?: 'mutation_root' }\n  & { delete_channel_thread_message?: Maybe<(\n    { __typename?: 'channel_thread_message_mutation_response' }\n    & Pick<Channel_Thread_Message_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type InsertChannelThreadMutationVariables = Exact<{\n  message_id: Scalars['Int'];\n}>;\n\n\nexport type InsertChannelThreadMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_channel_thread?: Maybe<(\n    { __typename?: 'channel_thread_mutation_response' }\n    & { returning: Array<(\n      { __typename?: 'channel_thread' }\n      & { message?: Maybe<(\n        { __typename?: 'message' }\n        & Pick<Message, 'image' | 'text' | 'timestamp' | 'id'>\n        & { user: (\n          { __typename?: 'user' }\n          & Pick<User, 'auth0_user_id' | 'id' | 'username'>\n        ) }\n      )> }\n    )> }\n  )> }\n);\n\nexport type AddPollQuestionMutationVariables = Exact<{\n  text?: Maybe<Scalars['String']>;\n  owner_id?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type AddPollQuestionMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_poll_questions?: Maybe<(\n    { __typename?: 'poll_questions_mutation_response' }\n    & Pick<Poll_Questions_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type AddAnswerToQuestionMutationVariables = Exact<{\n  text: Scalars['String'];\n  pollQuestionId: Scalars['Int'];\n}>;\n\n\nexport type AddAnswerToQuestionMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_poll_anwers?: Maybe<(\n    { __typename?: 'poll_anwers_mutation_response' }\n    & Pick<Poll_Anwers_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type AddPublishPollQuestionToChannelMutationVariables = Exact<{\n  channelID: Scalars['Int'];\n  pollQuestionID: Scalars['Int'];\n}>;\n\n\nexport type AddPublishPollQuestionToChannelMutation = (\n  { __typename?: 'mutation_root' }\n  & { channelPoll?: Maybe<(\n    { __typename?: 'channel_poll_mutation_response' }\n    & Pick<Channel_Poll_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'channel_poll' }\n      & Pick<Channel_Poll, 'channel_id' | 'id' | 'poll_questions'>\n    )> }\n  )> }\n);\n\nexport type SetPollAnswerVoteMutationVariables = Exact<{\n  pollAnswerId: Scalars['Int'];\n  newVote: Scalars['Int'];\n}>;\n\n\nexport type SetPollAnswerVoteMutation = (\n  { __typename?: 'mutation_root' }\n  & { updatePollAnswer?: Maybe<(\n    { __typename?: 'poll_anwers_mutation_response' }\n    & Pick<Poll_Anwers_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'poll_anwers' }\n      & Pick<Poll_Anwers, 'votes'>\n    )> }\n  )> }\n);\n\nexport type SetPublishPollQuestionStateMutationVariables = Exact<{\n  pollQuestionId: Scalars['Int'];\n  is_active?: Maybe<Scalars['Boolean']>;\n}>;\n\n\nexport type SetPublishPollQuestionStateMutation = (\n  { __typename?: 'mutation_root' }\n  & { setPollQuestionState?: Maybe<(\n    { __typename?: 'poll_questions_mutation_response' }\n    & Pick<Poll_Questions_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'poll_questions' }\n      & Pick<Poll_Questions, 'is_active'>\n    )> }\n  )>, delete_channel_poll?: Maybe<(\n    { __typename?: 'channel_poll_mutation_response' }\n    & Pick<Channel_Poll_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type DeletePollQuestionMutationVariables = Exact<{\n  pollQuestionId: Scalars['Int'];\n}>;\n\n\nexport type DeletePollQuestionMutation = (\n  { __typename?: 'mutation_root' }\n  & { delete_poll_anwers?: Maybe<(\n    { __typename?: 'poll_anwers_mutation_response' }\n    & Pick<Poll_Anwers_Mutation_Response, 'affected_rows'>\n  )>, deletePollQuestion?: Maybe<(\n    { __typename?: 'poll_questions_mutation_response' }\n    & Pick<Poll_Questions_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type DeletePollQuestionFromChannelMutationVariables = Exact<{\n  pollQuestionId: Scalars['Int'];\n  channelId: Scalars['Int'];\n}>;\n\n\nexport type DeletePollQuestionFromChannelMutation = (\n  { __typename?: 'mutation_root' }\n  & { delete_channel_poll?: Maybe<(\n    { __typename?: 'channel_poll_mutation_response' }\n    & Pick<Channel_Poll_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type UpdatePollAnswerTextMutationVariables = Exact<{\n  text: Scalars['String'];\n  pollAnswerId: Scalars['Int'];\n}>;\n\n\nexport type UpdatePollAnswerTextMutation = (\n  { __typename?: 'mutation_root' }\n  & { pollAnswerText?: Maybe<(\n    { __typename?: 'poll_anwers_mutation_response' }\n    & Pick<Poll_Anwers_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'poll_anwers' }\n      & Pick<Poll_Anwers, 'text'>\n    )> }\n  )> }\n);\n\nexport type DeletePollAnswerIdMutationVariables = Exact<{\n  pollAnswerId: Scalars['Int'];\n}>;\n\n\nexport type DeletePollAnswerIdMutation = (\n  { __typename?: 'mutation_root' }\n  & { delete_poll_anwers?: Maybe<(\n    { __typename?: 'poll_anwers_mutation_response' }\n    & Pick<Poll_Anwers_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type SetUserVotePollQuestionMutationVariables = Exact<{\n  userName?: Maybe<Scalars['String']>;\n  auth0UserId?: Maybe<Scalars['String']>;\n  pollQuestionId?: Maybe<Scalars['Int']>;\n  pollAnswerId?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type SetUserVotePollQuestionMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_user_votes?: Maybe<(\n    { __typename?: 'user_votes_mutation_response' }\n    & Pick<User_Votes_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type GetMessagesQueryVariables = Exact<{\n  last_received_id?: Maybe<Scalars['Int']>;\n  last_received_ts?: Maybe<Scalars['timestamptz']>;\n  channel?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type GetMessagesQuery = (\n  { __typename?: 'query_root' }\n  & { channel: Array<(\n    { __typename?: 'channel' }\n    & { messages: Array<(\n      { __typename?: 'message' }\n      & Pick<Message, 'id' | 'text' | 'timestamp'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'username'>\n      ), channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'name'>\n      ), channel_threads: Array<(\n        { __typename?: 'channel_thread' }\n        & Pick<Channel_Thread, 'id'>\n      )> }\n    )> }\n  )> }\n);\n\nexport type GetMessagesSumQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetMessagesSumQuery = (\n  { __typename?: 'query_root' }\n  & { channel_aggregate: (\n    { __typename?: 'channel_aggregate' }\n    & { nodes: Array<(\n      { __typename?: 'channel' }\n      & { messages: Array<(\n        { __typename?: 'message' }\n        & Pick<Message, 'channel_id'>\n        & { channel: (\n          { __typename?: 'channel' }\n          & Pick<Channel, 'name'>\n        ) }\n      )>, messages_aggregate: (\n        { __typename?: 'message_aggregate' }\n        & { aggregate?: Maybe<(\n          { __typename?: 'message_aggregate_fields' }\n          & Pick<Message_Aggregate_Fields, 'count'>\n        )> }\n      ) }\n    )> }\n  ) }\n);\n\nexport type GetChannelsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetChannelsQuery = (\n  { __typename?: 'query_root' }\n  & { channels: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'name' | 'id' | 'is_private' | 'owner_id'>\n  )> }\n);\n\nexport type GetUserListQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserListQuery = (\n  { __typename?: 'query_root' }\n  & { users: Array<(\n    { __typename?: 'user' }\n    & Pick<User, 'username' | 'id' | 'auth0_user_id' | 'last_seen'>\n  )> }\n);\n\nexport type GetChannelByNameQueryVariables = Exact<{\n  name: Scalars['String'];\n}>;\n\n\nexport type GetChannelByNameQuery = (\n  { __typename?: 'query_root' }\n  & { channel: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'name' | 'id' | 'is_private' | 'owner_id' | 'channel_type'>\n  )> }\n);\n\nexport type GetAuth0UserByIdQueryVariables = Exact<{\n  user_id?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type GetAuth0UserByIdQuery = (\n  { __typename?: 'query_root' }\n  & { user: Array<(\n    { __typename?: 'user' }\n    & Pick<User, 'id' | 'username' | 'auth0_user_id'>\n    & { user_channels: Array<(\n      { __typename?: 'user_channels' }\n      & { channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'name' | 'id' | 'is_private'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type GetChannelThreadIdQueryVariables = Exact<{\n  message_id?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetChannelThreadIdQuery = (\n  { __typename?: 'query_root' }\n  & { channel_thread: Array<(\n    { __typename?: 'channel_thread' }\n    & Pick<Channel_Thread, 'id'>\n  )> }\n);\n\nexport type GetChannelThreadParentMessageQueryVariables = Exact<{\n  limit?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetChannelThreadParentMessageQuery = (\n  { __typename?: 'query_root' }\n  & { channel_thread_message: Array<(\n    { __typename?: 'channel_thread_message' }\n    & Pick<Channel_Thread_Message, 'channel_thread_id' | 'timestamp'>\n    & { channel_thread: (\n      { __typename?: 'channel_thread' }\n      & { message?: Maybe<(\n        { __typename?: 'message' }\n        & Pick<Message, 'text' | 'timestamp' | 'image' | 'id' | 'user_id'>\n        & { user: (\n          { __typename?: 'user' }\n          & Pick<User, 'auth0_user_id' | 'username'>\n        ) }\n      )> }\n    ) }\n  )> }\n);\n\nexport type GetChannelThreadQueryVariables = Exact<{\n  message_id?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetChannelThreadQuery = (\n  { __typename?: 'query_root' }\n  & { channel_thread: Array<(\n    { __typename?: 'channel_thread' }\n    & Pick<Channel_Thread, 'id'>\n    & { message?: Maybe<(\n      { __typename?: 'message' }\n      & Pick<Message, 'id' | 'image' | 'text' | 'deleted' | 'timestamp'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'auth0_user_id' | 'id' | 'username'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type GetPollQuestionsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetPollQuestionsQuery = (\n  { __typename?: 'query_root' }\n  & { questions: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'id' | 'owner_id' | 'text'>\n  )> }\n);\n\nexport type GetPollQuestionAnswersQueryVariables = Exact<{\n  pollQuestionId?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetPollQuestionAnswersQuery = (\n  { __typename?: 'query_root' }\n  & { poll_question: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'id' | 'text' | 'is_active'>\n  )>, poll_answers: Array<(\n    { __typename?: 'poll_anwers' }\n    & Pick<Poll_Anwers, 'question_id' | 'text' | 'id' | 'votes'>\n  )> }\n);\n\nexport type GetPublicChannelsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetPublicChannelsQuery = (\n  { __typename?: 'query_root' }\n  & { channels: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'id' | 'name'>\n    & { channel_polls: Array<(\n      { __typename?: 'channel_poll' }\n      & { poll_question: (\n        { __typename?: 'poll_questions' }\n        & Pick<Poll_Questions, 'is_active'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type GetChannelPollsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetChannelPollsQuery = (\n  { __typename?: 'query_root' }\n  & { channelPoll: Array<(\n    { __typename?: 'channel_poll' }\n    & Pick<Channel_Poll, 'channel_id' | 'id' | 'poll_questions'>\n  )> }\n);\n\nexport type GetChannelPollQuestionQueryVariables = Exact<{\n  channelId?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetChannelPollQuestionQuery = (\n  { __typename?: 'query_root' }\n  & { getChannelPoll: Array<(\n    { __typename?: 'channel_poll' }\n    & Pick<Channel_Poll, 'id'>\n    & { poll_question: (\n      { __typename?: 'poll_questions' }\n      & Pick<Poll_Questions, 'id' | 'text'>\n      & { poll_anwers: Array<(\n        { __typename?: 'poll_anwers' }\n        & Pick<Poll_Anwers, 'text' | 'question_id'>\n      )> }\n    ) }\n  )> }\n);\n\nexport type GetPollAnswerVotesQueryVariables = Exact<{\n  pollAnswerId: Scalars['Int'];\n}>;\n\n\nexport type GetPollAnswerVotesQuery = (\n  { __typename?: 'query_root' }\n  & { poll_anwers: Array<(\n    { __typename?: 'poll_anwers' }\n    & Pick<Poll_Anwers, 'id' | 'votes'>\n  )> }\n);\n\nexport type WatchMessagesSubscriptionVariables = Exact<{\n  channelId: Scalars['Int'];\n  limit?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type WatchMessagesSubscription = (\n  { __typename?: 'subscription_root' }\n  & { messages: Array<(\n    { __typename?: 'message' }\n    & Pick<Message, 'id' | 'text' | 'image' | 'timestamp' | 'deleted'>\n    & { user: (\n      { __typename?: 'user' }\n      & Pick<User, 'username' | 'auth0_user_id'>\n    ), channel: (\n      { __typename?: 'channel' }\n      & Pick<Channel, 'name'>\n    ) }\n  )> }\n);\n\nexport type WatchChannelThreadMessagesSubscriptionVariables = Exact<{\n  limit: Scalars['Int'];\n  message_id: Scalars['Int'];\n}>;\n\n\nexport type WatchChannelThreadMessagesSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channel_thread_message: Array<(\n    { __typename?: 'channel_thread_message' }\n    & Pick<Channel_Thread_Message, 'id' | 'message' | 'image' | 'channel_thread_id' | 'timestamp'>\n    & { user: (\n      { __typename?: 'user' }\n      & Pick<User, 'username' | 'id' | 'auth0_user_id'>\n    ) }\n  )> }\n);\n\nexport type WatchChannelThreadSubscriptionVariables = Exact<{\n  message_id?: Scalars['Int'];\n}>;\n\n\nexport type WatchChannelThreadSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channel_thread: Array<(\n    { __typename?: 'channel_thread' }\n    & Pick<Channel_Thread, 'id'>\n    & { message?: Maybe<(\n      { __typename?: 'message' }\n      & Pick<Message, 'id'>\n    )>, channel_thread_messages: Array<(\n      { __typename?: 'channel_thread_message' }\n      & Pick<Channel_Thread_Message, 'id' | 'message' | 'timestamp'>\n    )> }\n  )> }\n);\n\nexport type WatchThreadsSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchThreadsSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channel_thread: Array<(\n    { __typename?: 'channel_thread' }\n    & Pick<Channel_Thread, 'id' | 'message_id'>\n    & { message?: Maybe<(\n      { __typename?: 'message' }\n      & Pick<Message, 'image' | 'text' | 'deleted' | 'timestamp' | 'id' | 'user_id'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'auth0_user_id' | 'username'>\n      ), channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'id' | 'name'>\n      ) }\n    )>, channel_thread_messages: Array<(\n      { __typename?: 'channel_thread_message' }\n      & Pick<Channel_Thread_Message, 'id' | 'image' | 'message' | 'timestamp' | 'user_id'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'auth0_user_id' | 'username'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type WatchOnlineUsersSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchOnlineUsersSubscription = (\n  { __typename?: 'subscription_root' }\n  & { users: Array<(\n    { __typename?: 'user_online' }\n    & Pick<User_Online, 'id' | 'username' | 'auth0_user_id'>\n  )> }\n);\n\nexport type WatchChannelsSubscriptionVariables = Exact<{\n  channel_type: Channel_Type_Enum;\n}>;\n\n\nexport type WatchChannelsSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channels: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'name' | 'id' | 'is_private' | 'owner_id'>\n  )> }\n);\n\nexport type WatchDirectMessageChannelsSubscriptionVariables = Exact<{\n  channel_type: Channel_Type_Enum;\n  user_id?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type WatchDirectMessageChannelsSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channels: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'name' | 'id' | 'is_private' | 'owner_id'>\n    & { user_channels: Array<(\n      { __typename?: 'user_channels' }\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'username' | 'auth0_user_id'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type WatchUsersSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchUsersSubscription = (\n  { __typename?: 'subscription_root' }\n  & { user: Array<(\n    { __typename?: 'user' }\n    & Pick<User, 'username' | 'auth0_user_id'>\n  )> }\n);\n\nexport type WatchUsersWhoHaveNotSubscribedToChannelSubscriptionVariables = Exact<{\n  user_id: Scalars['String'];\n  channel_id: Scalars['Int'];\n}>;\n\n\nexport type WatchUsersWhoHaveNotSubscribedToChannelSubscription = (\n  { __typename?: 'subscription_root' }\n  & { user: Array<(\n    { __typename?: 'user' }\n    & Pick<User, 'auth0_user_id' | 'username'>\n  )> }\n);\n\nexport type WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscriptionVariables = Exact<{\n  user_id: Scalars['String'];\n}>;\n\n\nexport type WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription = (\n  { __typename?: 'subscription_root' }\n  & { user: Array<(\n    { __typename?: 'user' }\n    & Pick<User, 'auth0_user_id' | 'username'>\n    & { user_channels: Array<(\n      { __typename?: 'user_channels' }\n      & Pick<User_Channels, 'channel_id'>\n      & { channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'name'>\n        & { user_channels: Array<(\n          { __typename?: 'user_channels' }\n          & { user: (\n            { __typename?: 'user' }\n            & Pick<User, 'auth0_user_id' | 'username'>\n          ) }\n        )> }\n      ) }\n    )> }\n  )> }\n);\n\nexport type WatchUsersWhoHaveSubscribedToChannelSubscriptionVariables = Exact<{\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n}>;\n\n\nexport type WatchUsersWhoHaveSubscribedToChannelSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channel: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'id'>\n    & { user_channels: Array<(\n      { __typename?: 'user_channels' }\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'auth0_user_id' | 'username'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type GetUserIsTypingSubscriptionVariables = Exact<{\n  self_id: Scalars['String'];\n  channel_id: Scalars['Int'];\n}>;\n\n\nexport type GetUserIsTypingSubscription = (\n  { __typename?: 'subscription_root' }\n  & { user_typing: Array<(\n    { __typename?: 'user_typing' }\n    & Pick<User_Typing, 'last_typed' | 'username'>\n  )> }\n);\n\nexport type WatchNewMessagesSubscriptionVariables = Exact<{\n  channelId: Scalars['Int'];\n}>;\n\n\nexport type WatchNewMessagesSubscription = (\n  { __typename?: 'subscription_root' }\n  & { newMessages: Array<(\n    { __typename?: 'message' }\n    & Pick<Message, 'id' | 'text' | 'timestamp'>\n    & { user: (\n      { __typename?: 'user' }\n      & Pick<User, 'username'>\n    ) }\n  )> }\n);\n\nexport type WatchChannelsLastMessageIdSubscriptionVariables = Exact<{\n  channel_type?: Channel_Type_Enum;\n}>;\n\n\nexport type WatchChannelsLastMessageIdSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channels: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'name' | 'id' | 'is_private' | 'owner_id'>\n    & { messages: Array<(\n      { __typename?: 'message' }\n      & Pick<Message, 'id'>\n    )> }\n  )> }\n);\n\nexport type WatchMessageCursorSubscriptionVariables = Exact<{\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n}>;\n\n\nexport type WatchMessageCursorSubscription = (\n  { __typename?: 'subscription_root' }\n  & { message_cursor: Array<(\n    { __typename?: 'message_cursor' }\n    & Pick<Message_Cursor, 'channel_id' | 'message_id' | 'user_id'>\n  )> }\n);\n\nexport type WatchGetPollQuestionsSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchGetPollQuestionsSubscription = (\n  { __typename?: 'subscription_root' }\n  & { questions: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'id' | 'text' | 'created_at' | 'updated_at' | 'owner_id' | 'is_active'>\n    & { channel_polls: Array<(\n      { __typename?: 'channel_poll' }\n      & { channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'name'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type WatchGetChannelPollQuestionPublishStateSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchGetChannelPollQuestionPublishStateSubscription = (\n  { __typename?: 'subscription_root' }\n  & { getChannelPollQuestionPublishState: Array<(\n    { __typename?: 'channel_poll' }\n    & Pick<Channel_Poll, 'channel_id' | 'id' | 'poll_questions'>\n    & { channel: (\n      { __typename?: 'channel' }\n      & Pick<Channel, 'name'>\n    ), poll_question: (\n      { __typename?: 'poll_questions' }\n      & Pick<Poll_Questions, 'text' | 'is_active'>\n    ) }\n  )> }\n);\n\nexport type WatchGetPollQuestionSubscriptionVariables = Exact<{\n  pollQuestionId?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type WatchGetPollQuestionSubscription = (\n  { __typename?: 'subscription_root' }\n  & { poll_question: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'id' | 'text' | 'is_active'>\n  )> }\n);\n\nexport type WatchGetPollAnswersSubscriptionVariables = Exact<{\n  pollQuestionId: Scalars['Int'];\n}>;\n\n\nexport type WatchGetPollAnswersSubscription = (\n  { __typename?: 'subscription_root' }\n  & { poll_answers: Array<(\n    { __typename?: 'poll_anwers' }\n    & Pick<Poll_Anwers, 'question_id' | 'text' | 'id' | 'votes'>\n  )> }\n);\n\nexport type WatchChannelPollQuestionSubscriptionVariables = Exact<{\n  channelId: Scalars['Int'];\n}>;\n\n\nexport type WatchChannelPollQuestionSubscription = (\n  { __typename?: 'subscription_root' }\n  & { getChannelPoll: Array<(\n    { __typename?: 'channel_poll' }\n    & Pick<Channel_Poll, 'id'>\n    & { poll_question: (\n      { __typename?: 'poll_questions' }\n      & Pick<Poll_Questions, 'id' | 'text'>\n      & { poll_anwers: Array<(\n        { __typename?: 'poll_anwers' }\n        & Pick<Poll_Anwers, 'text' | 'votes' | 'id'>\n      )> }\n    ) }\n  )> }\n);\n\nexport type WatchPollAnswerVotesSubscriptionVariables = Exact<{\n  pollAnswerId: Scalars['Int'];\n}>;\n\n\nexport type WatchPollAnswerVotesSubscription = (\n  { __typename?: 'subscription_root' }\n  & { pollAnswerVotes: Array<(\n    { __typename?: 'poll_anwers' }\n    & Pick<Poll_Anwers, 'id' | 'votes'>\n  )> }\n);\n\nexport type GetPollQuestionStateSubscriptionVariables = Exact<{\n  pollQuestionId: Scalars['Int'];\n}>;\n\n\nexport type GetPollQuestionStateSubscription = (\n  { __typename?: 'subscription_root' }\n  & { poll_questions: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'is_active'>\n  )> }\n);\n\nexport type WatchGetChannelsSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchGetChannelsSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channel: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'id' | 'name'>\n    & { channel_polls: Array<(\n      { __typename?: 'channel_poll' }\n      & Pick<Channel_Poll, 'channel_id'>\n      & { poll_question: (\n        { __typename?: 'poll_questions' }\n        & Pick<Poll_Questions, 'id' | 'text'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type WatchChannelHasActivePollSubscriptionVariables = Exact<{\n  currentChannelId: Scalars['Int'];\n}>;\n\n\nexport type WatchChannelHasActivePollSubscription = (\n  { __typename?: 'subscription_root' }\n  & { poll_questions: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'id' | 'text'>\n  )> }\n);\n\nexport type WatchChannelPollActiveStateSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchChannelPollActiveStateSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channel_poll: Array<(\n    { __typename?: 'channel_poll' }\n    & Pick<Channel_Poll, 'id'>\n    & { channel: (\n      { __typename?: 'channel' }\n      & Pick<Channel, 'name'>\n      & { channel_polls: Array<(\n        { __typename?: 'channel_poll' }\n        & { poll_question: (\n          { __typename?: 'poll_questions' }\n          & Pick<Poll_Questions, 'created_at'>\n        ) }\n      )> }\n    ) }\n  )> }\n);\n\nexport type WatchCheckUserHasVotedSubscriptionVariables = Exact<{\n  pollQuestionId?: Maybe<Scalars['Int']>;\n  auth0UserId?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type WatchCheckUserHasVotedSubscription = (\n  { __typename?: 'subscription_root' }\n  & { user_votes: Array<(\n    { __typename?: 'user_votes' }\n    & Pick<User_Votes, 'auth0_user_id' | 'poll_question_id' | 'poll_answer_id'>\n  )> }\n);\n\n\nexport const InsertMessageDocument = gql`\n    mutation insertMessage($message: message_insert_input!) {\n  insert_message(objects: [$message]) {\n    returning {\n      id\n      timestamp\n      text\n      user {\n        username\n      }\n      channel {\n        name\n      }\n    }\n  }\n}\n    `;\nexport type InsertMessageMutationFn = Apollo.MutationFunction<InsertMessageMutation, InsertMessageMutationVariables>;\n\n/**\n * __useInsertMessageMutation__\n *\n * To run a mutation, you first call `useInsertMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useInsertMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [insertMessageMutation, { data, loading, error }] = useInsertMessageMutation({\n *   variables: {\n *      message: // value for 'message'\n *   },\n * });\n */\nexport function useInsertMessageMutation(baseOptions?: Apollo.MutationHookOptions<InsertMessageMutation, InsertMessageMutationVariables>) {\n        return Apollo.useMutation<InsertMessageMutation, InsertMessageMutationVariables>(InsertMessageDocument, baseOptions);\n      }\nexport type InsertMessageMutationHookResult = ReturnType<typeof useInsertMessageMutation>;\nexport type InsertMessageMutationResult = Apollo.MutationResult<InsertMessageMutation>;\nexport type InsertMessageMutationOptions = Apollo.BaseMutationOptions<InsertMessageMutation, InsertMessageMutationVariables>;\nexport const UpdateMessageDocument = gql`\n    mutation updateMessage($_eq: Int!, $text: String!, $deleted: Boolean = false) {\n  update_message(where: {id: {_eq: $_eq}}, _set: {text: $text, deleted: $deleted}) {\n    affected_rows\n  }\n}\n    `;\nexport type UpdateMessageMutationFn = Apollo.MutationFunction<UpdateMessageMutation, UpdateMessageMutationVariables>;\n\n/**\n * __useUpdateMessageMutation__\n *\n * To run a mutation, you first call `useUpdateMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateMessageMutation, { data, loading, error }] = useUpdateMessageMutation({\n *   variables: {\n *      _eq: // value for '_eq'\n *      text: // value for 'text'\n *      deleted: // value for 'deleted'\n *   },\n * });\n */\nexport function useUpdateMessageMutation(baseOptions?: Apollo.MutationHookOptions<UpdateMessageMutation, UpdateMessageMutationVariables>) {\n        return Apollo.useMutation<UpdateMessageMutation, UpdateMessageMutationVariables>(UpdateMessageDocument, baseOptions);\n      }\nexport type UpdateMessageMutationHookResult = ReturnType<typeof useUpdateMessageMutation>;\nexport type UpdateMessageMutationResult = Apollo.MutationResult<UpdateMessageMutation>;\nexport type UpdateMessageMutationOptions = Apollo.BaseMutationOptions<UpdateMessageMutation, UpdateMessageMutationVariables>;\nexport const DeleteMessageDocument = gql`\n    mutation deleteMessage($message_id: Int) {\n  delete_message(where: {id: {_eq: $message_id}}) {\n    affected_rows\n  }\n}\n    `;\nexport type DeleteMessageMutationFn = Apollo.MutationFunction<DeleteMessageMutation, DeleteMessageMutationVariables>;\n\n/**\n * __useDeleteMessageMutation__\n *\n * To run a mutation, you first call `useDeleteMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteMessageMutation, { data, loading, error }] = useDeleteMessageMutation({\n *   variables: {\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useDeleteMessageMutation(baseOptions?: Apollo.MutationHookOptions<DeleteMessageMutation, DeleteMessageMutationVariables>) {\n        return Apollo.useMutation<DeleteMessageMutation, DeleteMessageMutationVariables>(DeleteMessageDocument, baseOptions);\n      }\nexport type DeleteMessageMutationHookResult = ReturnType<typeof useDeleteMessageMutation>;\nexport type DeleteMessageMutationResult = Apollo.MutationResult<DeleteMessageMutation>;\nexport type DeleteMessageMutationOptions = Apollo.BaseMutationOptions<DeleteMessageMutation, DeleteMessageMutationVariables>;\nexport const SetUserOnlineDocument = gql`\n    mutation setUserOnline($user_id: String!) {\n  update_user(_set: {last_seen: \"now()\"}, where: {auth0_user_id: {_eq: $user_id}}) {\n    affected_rows\n  }\n}\n    `;\nexport type SetUserOnlineMutationFn = Apollo.MutationFunction<SetUserOnlineMutation, SetUserOnlineMutationVariables>;\n\n/**\n * __useSetUserOnlineMutation__\n *\n * To run a mutation, you first call `useSetUserOnlineMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetUserOnlineMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setUserOnlineMutation, { data, loading, error }] = useSetUserOnlineMutation({\n *   variables: {\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useSetUserOnlineMutation(baseOptions?: Apollo.MutationHookOptions<SetUserOnlineMutation, SetUserOnlineMutationVariables>) {\n        return Apollo.useMutation<SetUserOnlineMutation, SetUserOnlineMutationVariables>(SetUserOnlineDocument, baseOptions);\n      }\nexport type SetUserOnlineMutationHookResult = ReturnType<typeof useSetUserOnlineMutation>;\nexport type SetUserOnlineMutationResult = Apollo.MutationResult<SetUserOnlineMutation>;\nexport type SetUserOnlineMutationOptions = Apollo.BaseMutationOptions<SetUserOnlineMutation, SetUserOnlineMutationVariables>;\nexport const AddChannelDocument = gql`\n    mutation addChannel($channel: channel_insert_input!) {\n  insert_channel(objects: [$channel]) {\n    returning {\n      id\n      name\n      owner_id\n      is_private\n    }\n  }\n}\n    `;\nexport type AddChannelMutationFn = Apollo.MutationFunction<AddChannelMutation, AddChannelMutationVariables>;\n\n/**\n * __useAddChannelMutation__\n *\n * To run a mutation, you first call `useAddChannelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddChannelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addChannelMutation, { data, loading, error }] = useAddChannelMutation({\n *   variables: {\n *      channel: // value for 'channel'\n *   },\n * });\n */\nexport function useAddChannelMutation(baseOptions?: Apollo.MutationHookOptions<AddChannelMutation, AddChannelMutationVariables>) {\n        return Apollo.useMutation<AddChannelMutation, AddChannelMutationVariables>(AddChannelDocument, baseOptions);\n      }\nexport type AddChannelMutationHookResult = ReturnType<typeof useAddChannelMutation>;\nexport type AddChannelMutationResult = Apollo.MutationResult<AddChannelMutation>;\nexport type AddChannelMutationOptions = Apollo.BaseMutationOptions<AddChannelMutation, AddChannelMutationVariables>;\nexport const ValidateAndAddDirectMessageChannelDocument = gql`\n    mutation validateAndAddDirectMessageChannel($name: String!, $user_id1: String!, $user_id2: String!) {\n  validateAndAddDirectMessageChannel(name: $name, user_id1: $user_id1, user_id2: $user_id2) {\n    id\n    name\n  }\n}\n    `;\nexport type ValidateAndAddDirectMessageChannelMutationFn = Apollo.MutationFunction<ValidateAndAddDirectMessageChannelMutation, ValidateAndAddDirectMessageChannelMutationVariables>;\n\n/**\n * __useValidateAndAddDirectMessageChannelMutation__\n *\n * To run a mutation, you first call `useValidateAndAddDirectMessageChannelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useValidateAndAddDirectMessageChannelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [validateAndAddDirectMessageChannelMutation, { data, loading, error }] = useValidateAndAddDirectMessageChannelMutation({\n *   variables: {\n *      name: // value for 'name'\n *      user_id1: // value for 'user_id1'\n *      user_id2: // value for 'user_id2'\n *   },\n * });\n */\nexport function useValidateAndAddDirectMessageChannelMutation(baseOptions?: Apollo.MutationHookOptions<ValidateAndAddDirectMessageChannelMutation, ValidateAndAddDirectMessageChannelMutationVariables>) {\n        return Apollo.useMutation<ValidateAndAddDirectMessageChannelMutation, ValidateAndAddDirectMessageChannelMutationVariables>(ValidateAndAddDirectMessageChannelDocument, baseOptions);\n      }\nexport type ValidateAndAddDirectMessageChannelMutationHookResult = ReturnType<typeof useValidateAndAddDirectMessageChannelMutation>;\nexport type ValidateAndAddDirectMessageChannelMutationResult = Apollo.MutationResult<ValidateAndAddDirectMessageChannelMutation>;\nexport type ValidateAndAddDirectMessageChannelMutationOptions = Apollo.BaseMutationOptions<ValidateAndAddDirectMessageChannelMutation, ValidateAndAddDirectMessageChannelMutationVariables>;\nexport const AddChannelUserDocument = gql`\n    mutation addChannelUser($channel_id: Int!, $user_id: String!) {\n  addChannelUser(user_id: $user_id, channel_id: $channel_id) {\n    affected_rows\n  }\n}\n    `;\nexport type AddChannelUserMutationFn = Apollo.MutationFunction<AddChannelUserMutation, AddChannelUserMutationVariables>;\n\n/**\n * __useAddChannelUserMutation__\n *\n * To run a mutation, you first call `useAddChannelUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddChannelUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addChannelUserMutation, { data, loading, error }] = useAddChannelUserMutation({\n *   variables: {\n *      channel_id: // value for 'channel_id'\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useAddChannelUserMutation(baseOptions?: Apollo.MutationHookOptions<AddChannelUserMutation, AddChannelUserMutationVariables>) {\n        return Apollo.useMutation<AddChannelUserMutation, AddChannelUserMutationVariables>(AddChannelUserDocument, baseOptions);\n      }\nexport type AddChannelUserMutationHookResult = ReturnType<typeof useAddChannelUserMutation>;\nexport type AddChannelUserMutationResult = Apollo.MutationResult<AddChannelUserMutation>;\nexport type AddChannelUserMutationOptions = Apollo.BaseMutationOptions<AddChannelUserMutation, AddChannelUserMutationVariables>;\nexport const SendTypingEventDocument = gql`\n    mutation sendTypingEvent($user_id: String!, $channel_id: Int!) {\n  update_user(_set: {last_typed: \"now()\", last_typed_channel: $channel_id}, where: {auth0_user_id: {_eq: $user_id}}) {\n    affected_rows\n  }\n}\n    `;\nexport type SendTypingEventMutationFn = Apollo.MutationFunction<SendTypingEventMutation, SendTypingEventMutationVariables>;\n\n/**\n * __useSendTypingEventMutation__\n *\n * To run a mutation, you first call `useSendTypingEventMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSendTypingEventMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [sendTypingEventMutation, { data, loading, error }] = useSendTypingEventMutation({\n *   variables: {\n *      user_id: // value for 'user_id'\n *      channel_id: // value for 'channel_id'\n *   },\n * });\n */\nexport function useSendTypingEventMutation(baseOptions?: Apollo.MutationHookOptions<SendTypingEventMutation, SendTypingEventMutationVariables>) {\n        return Apollo.useMutation<SendTypingEventMutation, SendTypingEventMutationVariables>(SendTypingEventDocument, baseOptions);\n      }\nexport type SendTypingEventMutationHookResult = ReturnType<typeof useSendTypingEventMutation>;\nexport type SendTypingEventMutationResult = Apollo.MutationResult<SendTypingEventMutation>;\nexport type SendTypingEventMutationOptions = Apollo.BaseMutationOptions<SendTypingEventMutation, SendTypingEventMutationVariables>;\nexport const UpsertMessageCursorDocument = gql`\n    mutation upsertMessageCursor($channel_id: Int!, $message_id: Int!, $user_id: String!) {\n  insert_message_cursor(objects: {channel_id: $channel_id, message_id: $message_id, user_id: $user_id}, on_conflict: {constraint: message_cursor_channel_id_user_id_key, update_columns: message_id}) {\n    returning {\n      channel_id\n      message_id\n      user_id\n    }\n  }\n}\n    `;\nexport type UpsertMessageCursorMutationFn = Apollo.MutationFunction<UpsertMessageCursorMutation, UpsertMessageCursorMutationVariables>;\n\n/**\n * __useUpsertMessageCursorMutation__\n *\n * To run a mutation, you first call `useUpsertMessageCursorMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpsertMessageCursorMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [upsertMessageCursorMutation, { data, loading, error }] = useUpsertMessageCursorMutation({\n *   variables: {\n *      channel_id: // value for 'channel_id'\n *      message_id: // value for 'message_id'\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useUpsertMessageCursorMutation(baseOptions?: Apollo.MutationHookOptions<UpsertMessageCursorMutation, UpsertMessageCursorMutationVariables>) {\n        return Apollo.useMutation<UpsertMessageCursorMutation, UpsertMessageCursorMutationVariables>(UpsertMessageCursorDocument, baseOptions);\n      }\nexport type UpsertMessageCursorMutationHookResult = ReturnType<typeof useUpsertMessageCursorMutation>;\nexport type UpsertMessageCursorMutationResult = Apollo.MutationResult<UpsertMessageCursorMutation>;\nexport type UpsertMessageCursorMutationOptions = Apollo.BaseMutationOptions<UpsertMessageCursorMutation, UpsertMessageCursorMutationVariables>;\nexport const InsertChannelThreadMessageDocument = gql`\n    mutation insertChannelThreadMessage($channel_thread_id: Int!, $message: String!, $user_id: String!, $image: String) {\n  insert_channel_thread_message(objects: {user_id: $user_id, channel_thread_id: $channel_thread_id, message: $message, image: $image}) {\n    affected_rows\n    returning {\n      id\n      image\n      message\n      timestamp\n      user_id\n      user {\n        auth0_user_id\n        username\n      }\n    }\n  }\n}\n    `;\nexport type InsertChannelThreadMessageMutationFn = Apollo.MutationFunction<InsertChannelThreadMessageMutation, InsertChannelThreadMessageMutationVariables>;\n\n/**\n * __useInsertChannelThreadMessageMutation__\n *\n * To run a mutation, you first call `useInsertChannelThreadMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useInsertChannelThreadMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [insertChannelThreadMessageMutation, { data, loading, error }] = useInsertChannelThreadMessageMutation({\n *   variables: {\n *      channel_thread_id: // value for 'channel_thread_id'\n *      message: // value for 'message'\n *      user_id: // value for 'user_id'\n *      image: // value for 'image'\n *   },\n * });\n */\nexport function useInsertChannelThreadMessageMutation(baseOptions?: Apollo.MutationHookOptions<InsertChannelThreadMessageMutation, InsertChannelThreadMessageMutationVariables>) {\n        return Apollo.useMutation<InsertChannelThreadMessageMutation, InsertChannelThreadMessageMutationVariables>(InsertChannelThreadMessageDocument, baseOptions);\n      }\nexport type InsertChannelThreadMessageMutationHookResult = ReturnType<typeof useInsertChannelThreadMessageMutation>;\nexport type InsertChannelThreadMessageMutationResult = Apollo.MutationResult<InsertChannelThreadMessageMutation>;\nexport type InsertChannelThreadMessageMutationOptions = Apollo.BaseMutationOptions<InsertChannelThreadMessageMutation, InsertChannelThreadMessageMutationVariables>;\nexport const DeleteThreadMessageDocument = gql`\n    mutation deleteThreadMessage($message_id: Int!) {\n  delete_channel_thread_message(where: {id: {_eq: $message_id}}) {\n    affected_rows\n  }\n}\n    `;\nexport type DeleteThreadMessageMutationFn = Apollo.MutationFunction<DeleteThreadMessageMutation, DeleteThreadMessageMutationVariables>;\n\n/**\n * __useDeleteThreadMessageMutation__\n *\n * To run a mutation, you first call `useDeleteThreadMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteThreadMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteThreadMessageMutation, { data, loading, error }] = useDeleteThreadMessageMutation({\n *   variables: {\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useDeleteThreadMessageMutation(baseOptions?: Apollo.MutationHookOptions<DeleteThreadMessageMutation, DeleteThreadMessageMutationVariables>) {\n        return Apollo.useMutation<DeleteThreadMessageMutation, DeleteThreadMessageMutationVariables>(DeleteThreadMessageDocument, baseOptions);\n      }\nexport type DeleteThreadMessageMutationHookResult = ReturnType<typeof useDeleteThreadMessageMutation>;\nexport type DeleteThreadMessageMutationResult = Apollo.MutationResult<DeleteThreadMessageMutation>;\nexport type DeleteThreadMessageMutationOptions = Apollo.BaseMutationOptions<DeleteThreadMessageMutation, DeleteThreadMessageMutationVariables>;\nexport const InsertChannelThreadDocument = gql`\n    mutation insertChannelThread($message_id: Int!) {\n  insert_channel_thread(objects: {message_id: $message_id}) {\n    returning {\n      message {\n        image\n        text\n        timestamp\n        id\n        user {\n          auth0_user_id\n          id\n          username\n        }\n      }\n    }\n  }\n}\n    `;\nexport type InsertChannelThreadMutationFn = Apollo.MutationFunction<InsertChannelThreadMutation, InsertChannelThreadMutationVariables>;\n\n/**\n * __useInsertChannelThreadMutation__\n *\n * To run a mutation, you first call `useInsertChannelThreadMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useInsertChannelThreadMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [insertChannelThreadMutation, { data, loading, error }] = useInsertChannelThreadMutation({\n *   variables: {\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useInsertChannelThreadMutation(baseOptions?: Apollo.MutationHookOptions<InsertChannelThreadMutation, InsertChannelThreadMutationVariables>) {\n        return Apollo.useMutation<InsertChannelThreadMutation, InsertChannelThreadMutationVariables>(InsertChannelThreadDocument, baseOptions);\n      }\nexport type InsertChannelThreadMutationHookResult = ReturnType<typeof useInsertChannelThreadMutation>;\nexport type InsertChannelThreadMutationResult = Apollo.MutationResult<InsertChannelThreadMutation>;\nexport type InsertChannelThreadMutationOptions = Apollo.BaseMutationOptions<InsertChannelThreadMutation, InsertChannelThreadMutationVariables>;\nexport const AddPollQuestionDocument = gql`\n    mutation addPollQuestion($text: String, $owner_id: String) {\n  insert_poll_questions(objects: {text: $text, owner_id: $owner_id}) {\n    affected_rows\n  }\n}\n    `;\nexport type AddPollQuestionMutationFn = Apollo.MutationFunction<AddPollQuestionMutation, AddPollQuestionMutationVariables>;\n\n/**\n * __useAddPollQuestionMutation__\n *\n * To run a mutation, you first call `useAddPollQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddPollQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addPollQuestionMutation, { data, loading, error }] = useAddPollQuestionMutation({\n *   variables: {\n *      text: // value for 'text'\n *      owner_id: // value for 'owner_id'\n *   },\n * });\n */\nexport function useAddPollQuestionMutation(baseOptions?: Apollo.MutationHookOptions<AddPollQuestionMutation, AddPollQuestionMutationVariables>) {\n        return Apollo.useMutation<AddPollQuestionMutation, AddPollQuestionMutationVariables>(AddPollQuestionDocument, baseOptions);\n      }\nexport type AddPollQuestionMutationHookResult = ReturnType<typeof useAddPollQuestionMutation>;\nexport type AddPollQuestionMutationResult = Apollo.MutationResult<AddPollQuestionMutation>;\nexport type AddPollQuestionMutationOptions = Apollo.BaseMutationOptions<AddPollQuestionMutation, AddPollQuestionMutationVariables>;\nexport const AddAnswerToQuestionDocument = gql`\n    mutation addAnswerToQuestion($text: String!, $pollQuestionId: Int!) {\n  insert_poll_anwers(objects: {question_id: $pollQuestionId, text: $text}) {\n    affected_rows\n  }\n}\n    `;\nexport type AddAnswerToQuestionMutationFn = Apollo.MutationFunction<AddAnswerToQuestionMutation, AddAnswerToQuestionMutationVariables>;\n\n/**\n * __useAddAnswerToQuestionMutation__\n *\n * To run a mutation, you first call `useAddAnswerToQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddAnswerToQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addAnswerToQuestionMutation, { data, loading, error }] = useAddAnswerToQuestionMutation({\n *   variables: {\n *      text: // value for 'text'\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useAddAnswerToQuestionMutation(baseOptions?: Apollo.MutationHookOptions<AddAnswerToQuestionMutation, AddAnswerToQuestionMutationVariables>) {\n        return Apollo.useMutation<AddAnswerToQuestionMutation, AddAnswerToQuestionMutationVariables>(AddAnswerToQuestionDocument, baseOptions);\n      }\nexport type AddAnswerToQuestionMutationHookResult = ReturnType<typeof useAddAnswerToQuestionMutation>;\nexport type AddAnswerToQuestionMutationResult = Apollo.MutationResult<AddAnswerToQuestionMutation>;\nexport type AddAnswerToQuestionMutationOptions = Apollo.BaseMutationOptions<AddAnswerToQuestionMutation, AddAnswerToQuestionMutationVariables>;\nexport const AddPublishPollQuestionToChannelDocument = gql`\n    mutation addPublishPollQuestionToChannel($channelID: Int!, $pollQuestionID: Int!) {\n  channelPoll: insert_channel_poll(objects: {channel_id: $channelID, poll_questions: $pollQuestionID, id: $channelID}, on_conflict: {constraint: channel_poll_pkey, update_columns: poll_questions, where: {id: {_eq: $channelID}}}) {\n    affected_rows\n    returning {\n      channel_id\n      id\n      poll_questions\n    }\n  }\n}\n    `;\nexport type AddPublishPollQuestionToChannelMutationFn = Apollo.MutationFunction<AddPublishPollQuestionToChannelMutation, AddPublishPollQuestionToChannelMutationVariables>;\n\n/**\n * __useAddPublishPollQuestionToChannelMutation__\n *\n * To run a mutation, you first call `useAddPublishPollQuestionToChannelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddPublishPollQuestionToChannelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addPublishPollQuestionToChannelMutation, { data, loading, error }] = useAddPublishPollQuestionToChannelMutation({\n *   variables: {\n *      channelID: // value for 'channelID'\n *      pollQuestionID: // value for 'pollQuestionID'\n *   },\n * });\n */\nexport function useAddPublishPollQuestionToChannelMutation(baseOptions?: Apollo.MutationHookOptions<AddPublishPollQuestionToChannelMutation, AddPublishPollQuestionToChannelMutationVariables>) {\n        return Apollo.useMutation<AddPublishPollQuestionToChannelMutation, AddPublishPollQuestionToChannelMutationVariables>(AddPublishPollQuestionToChannelDocument, baseOptions);\n      }\nexport type AddPublishPollQuestionToChannelMutationHookResult = ReturnType<typeof useAddPublishPollQuestionToChannelMutation>;\nexport type AddPublishPollQuestionToChannelMutationResult = Apollo.MutationResult<AddPublishPollQuestionToChannelMutation>;\nexport type AddPublishPollQuestionToChannelMutationOptions = Apollo.BaseMutationOptions<AddPublishPollQuestionToChannelMutation, AddPublishPollQuestionToChannelMutationVariables>;\nexport const SetPollAnswerVoteDocument = gql`\n    mutation setPollAnswerVote($pollAnswerId: Int!, $newVote: Int!) {\n  updatePollAnswer: update_poll_anwers(where: {id: {_eq: $pollAnswerId}}, _set: {votes: $newVote}) {\n    affected_rows\n    returning {\n      votes\n    }\n  }\n}\n    `;\nexport type SetPollAnswerVoteMutationFn = Apollo.MutationFunction<SetPollAnswerVoteMutation, SetPollAnswerVoteMutationVariables>;\n\n/**\n * __useSetPollAnswerVoteMutation__\n *\n * To run a mutation, you first call `useSetPollAnswerVoteMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetPollAnswerVoteMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setPollAnswerVoteMutation, { data, loading, error }] = useSetPollAnswerVoteMutation({\n *   variables: {\n *      pollAnswerId: // value for 'pollAnswerId'\n *      newVote: // value for 'newVote'\n *   },\n * });\n */\nexport function useSetPollAnswerVoteMutation(baseOptions?: Apollo.MutationHookOptions<SetPollAnswerVoteMutation, SetPollAnswerVoteMutationVariables>) {\n        return Apollo.useMutation<SetPollAnswerVoteMutation, SetPollAnswerVoteMutationVariables>(SetPollAnswerVoteDocument, baseOptions);\n      }\nexport type SetPollAnswerVoteMutationHookResult = ReturnType<typeof useSetPollAnswerVoteMutation>;\nexport type SetPollAnswerVoteMutationResult = Apollo.MutationResult<SetPollAnswerVoteMutation>;\nexport type SetPollAnswerVoteMutationOptions = Apollo.BaseMutationOptions<SetPollAnswerVoteMutation, SetPollAnswerVoteMutationVariables>;\nexport const SetPublishPollQuestionStateDocument = gql`\n    mutation setPublishPollQuestionState($pollQuestionId: Int!, $is_active: Boolean = false) {\n  setPollQuestionState: update_poll_questions(where: {id: {_eq: $pollQuestionId}}, _set: {is_active: $is_active}) {\n    affected_rows\n    returning {\n      is_active\n    }\n  }\n  delete_channel_poll(where: {poll_question: {id: {_eq: $pollQuestionId}}}) {\n    affected_rows\n  }\n}\n    `;\nexport type SetPublishPollQuestionStateMutationFn = Apollo.MutationFunction<SetPublishPollQuestionStateMutation, SetPublishPollQuestionStateMutationVariables>;\n\n/**\n * __useSetPublishPollQuestionStateMutation__\n *\n * To run a mutation, you first call `useSetPublishPollQuestionStateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetPublishPollQuestionStateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setPublishPollQuestionStateMutation, { data, loading, error }] = useSetPublishPollQuestionStateMutation({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *      is_active: // value for 'is_active'\n *   },\n * });\n */\nexport function useSetPublishPollQuestionStateMutation(baseOptions?: Apollo.MutationHookOptions<SetPublishPollQuestionStateMutation, SetPublishPollQuestionStateMutationVariables>) {\n        return Apollo.useMutation<SetPublishPollQuestionStateMutation, SetPublishPollQuestionStateMutationVariables>(SetPublishPollQuestionStateDocument, baseOptions);\n      }\nexport type SetPublishPollQuestionStateMutationHookResult = ReturnType<typeof useSetPublishPollQuestionStateMutation>;\nexport type SetPublishPollQuestionStateMutationResult = Apollo.MutationResult<SetPublishPollQuestionStateMutation>;\nexport type SetPublishPollQuestionStateMutationOptions = Apollo.BaseMutationOptions<SetPublishPollQuestionStateMutation, SetPublishPollQuestionStateMutationVariables>;\nexport const DeletePollQuestionDocument = gql`\n    mutation deletePollQuestion($pollQuestionId: Int!) {\n  delete_poll_anwers(where: {question_id: {_eq: $pollQuestionId}}) {\n    affected_rows\n  }\n  deletePollQuestion: delete_poll_questions(where: {id: {_eq: $pollQuestionId}, is_active: {_neq: true}}) {\n    affected_rows\n  }\n}\n    `;\nexport type DeletePollQuestionMutationFn = Apollo.MutationFunction<DeletePollQuestionMutation, DeletePollQuestionMutationVariables>;\n\n/**\n * __useDeletePollQuestionMutation__\n *\n * To run a mutation, you first call `useDeletePollQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePollQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePollQuestionMutation, { data, loading, error }] = useDeletePollQuestionMutation({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useDeletePollQuestionMutation(baseOptions?: Apollo.MutationHookOptions<DeletePollQuestionMutation, DeletePollQuestionMutationVariables>) {\n        return Apollo.useMutation<DeletePollQuestionMutation, DeletePollQuestionMutationVariables>(DeletePollQuestionDocument, baseOptions);\n      }\nexport type DeletePollQuestionMutationHookResult = ReturnType<typeof useDeletePollQuestionMutation>;\nexport type DeletePollQuestionMutationResult = Apollo.MutationResult<DeletePollQuestionMutation>;\nexport type DeletePollQuestionMutationOptions = Apollo.BaseMutationOptions<DeletePollQuestionMutation, DeletePollQuestionMutationVariables>;\nexport const DeletePollQuestionFromChannelDocument = gql`\n    mutation deletePollQuestionFromChannel($pollQuestionId: Int!, $channelId: Int!) {\n  delete_channel_poll(where: {poll_questions: {_eq: $pollQuestionId}, channel_id: {_eq: $channelId}}) {\n    affected_rows\n  }\n}\n    `;\nexport type DeletePollQuestionFromChannelMutationFn = Apollo.MutationFunction<DeletePollQuestionFromChannelMutation, DeletePollQuestionFromChannelMutationVariables>;\n\n/**\n * __useDeletePollQuestionFromChannelMutation__\n *\n * To run a mutation, you first call `useDeletePollQuestionFromChannelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePollQuestionFromChannelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePollQuestionFromChannelMutation, { data, loading, error }] = useDeletePollQuestionFromChannelMutation({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useDeletePollQuestionFromChannelMutation(baseOptions?: Apollo.MutationHookOptions<DeletePollQuestionFromChannelMutation, DeletePollQuestionFromChannelMutationVariables>) {\n        return Apollo.useMutation<DeletePollQuestionFromChannelMutation, DeletePollQuestionFromChannelMutationVariables>(DeletePollQuestionFromChannelDocument, baseOptions);\n      }\nexport type DeletePollQuestionFromChannelMutationHookResult = ReturnType<typeof useDeletePollQuestionFromChannelMutation>;\nexport type DeletePollQuestionFromChannelMutationResult = Apollo.MutationResult<DeletePollQuestionFromChannelMutation>;\nexport type DeletePollQuestionFromChannelMutationOptions = Apollo.BaseMutationOptions<DeletePollQuestionFromChannelMutation, DeletePollQuestionFromChannelMutationVariables>;\nexport const UpdatePollAnswerTextDocument = gql`\n    mutation updatePollAnswerText($text: String!, $pollAnswerId: Int!) {\n  pollAnswerText: update_poll_anwers(where: {id: {_eq: $pollAnswerId}}, _set: {text: $text}) {\n    affected_rows\n    returning {\n      text\n    }\n  }\n}\n    `;\nexport type UpdatePollAnswerTextMutationFn = Apollo.MutationFunction<UpdatePollAnswerTextMutation, UpdatePollAnswerTextMutationVariables>;\n\n/**\n * __useUpdatePollAnswerTextMutation__\n *\n * To run a mutation, you first call `useUpdatePollAnswerTextMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePollAnswerTextMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePollAnswerTextMutation, { data, loading, error }] = useUpdatePollAnswerTextMutation({\n *   variables: {\n *      text: // value for 'text'\n *      pollAnswerId: // value for 'pollAnswerId'\n *   },\n * });\n */\nexport function useUpdatePollAnswerTextMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePollAnswerTextMutation, UpdatePollAnswerTextMutationVariables>) {\n        return Apollo.useMutation<UpdatePollAnswerTextMutation, UpdatePollAnswerTextMutationVariables>(UpdatePollAnswerTextDocument, baseOptions);\n      }\nexport type UpdatePollAnswerTextMutationHookResult = ReturnType<typeof useUpdatePollAnswerTextMutation>;\nexport type UpdatePollAnswerTextMutationResult = Apollo.MutationResult<UpdatePollAnswerTextMutation>;\nexport type UpdatePollAnswerTextMutationOptions = Apollo.BaseMutationOptions<UpdatePollAnswerTextMutation, UpdatePollAnswerTextMutationVariables>;\nexport const DeletePollAnswerIdDocument = gql`\n    mutation deletePollAnswerId($pollAnswerId: Int!) {\n  delete_poll_anwers(where: {id: {_eq: $pollAnswerId}}) {\n    affected_rows\n  }\n}\n    `;\nexport type DeletePollAnswerIdMutationFn = Apollo.MutationFunction<DeletePollAnswerIdMutation, DeletePollAnswerIdMutationVariables>;\n\n/**\n * __useDeletePollAnswerIdMutation__\n *\n * To run a mutation, you first call `useDeletePollAnswerIdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePollAnswerIdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePollAnswerIdMutation, { data, loading, error }] = useDeletePollAnswerIdMutation({\n *   variables: {\n *      pollAnswerId: // value for 'pollAnswerId'\n *   },\n * });\n */\nexport function useDeletePollAnswerIdMutation(baseOptions?: Apollo.MutationHookOptions<DeletePollAnswerIdMutation, DeletePollAnswerIdMutationVariables>) {\n        return Apollo.useMutation<DeletePollAnswerIdMutation, DeletePollAnswerIdMutationVariables>(DeletePollAnswerIdDocument, baseOptions);\n      }\nexport type DeletePollAnswerIdMutationHookResult = ReturnType<typeof useDeletePollAnswerIdMutation>;\nexport type DeletePollAnswerIdMutationResult = Apollo.MutationResult<DeletePollAnswerIdMutation>;\nexport type DeletePollAnswerIdMutationOptions = Apollo.BaseMutationOptions<DeletePollAnswerIdMutation, DeletePollAnswerIdMutationVariables>;\nexport const SetUserVotePollQuestionDocument = gql`\n    mutation setUserVotePollQuestion($userName: String, $auth0UserId: String, $pollQuestionId: Int, $pollAnswerId: Int) {\n  insert_user_votes(objects: {username: $userName, auth0_user_id: $auth0UserId, poll_question_id: $pollQuestionId, poll_answer_id: $pollAnswerId}) {\n    affected_rows\n  }\n}\n    `;\nexport type SetUserVotePollQuestionMutationFn = Apollo.MutationFunction<SetUserVotePollQuestionMutation, SetUserVotePollQuestionMutationVariables>;\n\n/**\n * __useSetUserVotePollQuestionMutation__\n *\n * To run a mutation, you first call `useSetUserVotePollQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetUserVotePollQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setUserVotePollQuestionMutation, { data, loading, error }] = useSetUserVotePollQuestionMutation({\n *   variables: {\n *      userName: // value for 'userName'\n *      auth0UserId: // value for 'auth0UserId'\n *      pollQuestionId: // value for 'pollQuestionId'\n *      pollAnswerId: // value for 'pollAnswerId'\n *   },\n * });\n */\nexport function useSetUserVotePollQuestionMutation(baseOptions?: Apollo.MutationHookOptions<SetUserVotePollQuestionMutation, SetUserVotePollQuestionMutationVariables>) {\n        return Apollo.useMutation<SetUserVotePollQuestionMutation, SetUserVotePollQuestionMutationVariables>(SetUserVotePollQuestionDocument, baseOptions);\n      }\nexport type SetUserVotePollQuestionMutationHookResult = ReturnType<typeof useSetUserVotePollQuestionMutation>;\nexport type SetUserVotePollQuestionMutationResult = Apollo.MutationResult<SetUserVotePollQuestionMutation>;\nexport type SetUserVotePollQuestionMutationOptions = Apollo.BaseMutationOptions<SetUserVotePollQuestionMutation, SetUserVotePollQuestionMutationVariables>;\nexport const GetMessagesDocument = gql`\n    query getMessages($last_received_id: Int, $last_received_ts: timestamptz, $channel: String) {\n  channel(where: {name: {_eq: $channel}}) {\n    messages(order_by: {timestamp: asc}, where: {_and: {id: {_neq: $last_received_id}, timestamp: {_gte: $last_received_ts}}}) {\n      id\n      text\n      timestamp\n      user {\n        username\n      }\n      channel {\n        name\n      }\n      channel_threads {\n        id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetMessagesQuery__\n *\n * To run a query within a React component, call `useGetMessagesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMessagesQuery({\n *   variables: {\n *      last_received_id: // value for 'last_received_id'\n *      last_received_ts: // value for 'last_received_ts'\n *      channel: // value for 'channel'\n *   },\n * });\n */\nexport function useGetMessagesQuery(baseOptions?: Apollo.QueryHookOptions<GetMessagesQuery, GetMessagesQueryVariables>) {\n        return Apollo.useQuery<GetMessagesQuery, GetMessagesQueryVariables>(GetMessagesDocument, baseOptions);\n      }\nexport function useGetMessagesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMessagesQuery, GetMessagesQueryVariables>) {\n          return Apollo.useLazyQuery<GetMessagesQuery, GetMessagesQueryVariables>(GetMessagesDocument, baseOptions);\n        }\nexport type GetMessagesQueryHookResult = ReturnType<typeof useGetMessagesQuery>;\nexport type GetMessagesLazyQueryHookResult = ReturnType<typeof useGetMessagesLazyQuery>;\nexport type GetMessagesQueryResult = Apollo.QueryResult<GetMessagesQuery, GetMessagesQueryVariables>;\nexport const GetMessagesSumDocument = gql`\n    query getMessagesSum {\n  channel_aggregate(where: {channel_type: {_eq: CHAT_MESSAGE}}, order_by: {name: asc}) {\n    nodes {\n      messages(distinct_on: channel_id) {\n        channel_id\n        channel {\n          name\n        }\n      }\n      messages_aggregate {\n        aggregate {\n          count\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetMessagesSumQuery__\n *\n * To run a query within a React component, call `useGetMessagesSumQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMessagesSumQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMessagesSumQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetMessagesSumQuery(baseOptions?: Apollo.QueryHookOptions<GetMessagesSumQuery, GetMessagesSumQueryVariables>) {\n        return Apollo.useQuery<GetMessagesSumQuery, GetMessagesSumQueryVariables>(GetMessagesSumDocument, baseOptions);\n      }\nexport function useGetMessagesSumLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMessagesSumQuery, GetMessagesSumQueryVariables>) {\n          return Apollo.useLazyQuery<GetMessagesSumQuery, GetMessagesSumQueryVariables>(GetMessagesSumDocument, baseOptions);\n        }\nexport type GetMessagesSumQueryHookResult = ReturnType<typeof useGetMessagesSumQuery>;\nexport type GetMessagesSumLazyQueryHookResult = ReturnType<typeof useGetMessagesSumLazyQuery>;\nexport type GetMessagesSumQueryResult = Apollo.QueryResult<GetMessagesSumQuery, GetMessagesSumQueryVariables>;\nexport const GetChannelsDocument = gql`\n    query getChannels {\n  channels: channel {\n    name\n    id\n    is_private\n    owner_id\n  }\n}\n    `;\n\n/**\n * __useGetChannelsQuery__\n *\n * To run a query within a React component, call `useGetChannelsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetChannelsQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelsQuery, GetChannelsQueryVariables>) {\n        return Apollo.useQuery<GetChannelsQuery, GetChannelsQueryVariables>(GetChannelsDocument, baseOptions);\n      }\nexport function useGetChannelsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelsQuery, GetChannelsQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelsQuery, GetChannelsQueryVariables>(GetChannelsDocument, baseOptions);\n        }\nexport type GetChannelsQueryHookResult = ReturnType<typeof useGetChannelsQuery>;\nexport type GetChannelsLazyQueryHookResult = ReturnType<typeof useGetChannelsLazyQuery>;\nexport type GetChannelsQueryResult = Apollo.QueryResult<GetChannelsQuery, GetChannelsQueryVariables>;\nexport const GetUserListDocument = gql`\n    query getUserList {\n  users: user {\n    username\n    id\n    auth0_user_id\n    last_seen\n  }\n}\n    `;\n\n/**\n * __useGetUserListQuery__\n *\n * To run a query within a React component, call `useGetUserListQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserListQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserListQuery(baseOptions?: Apollo.QueryHookOptions<GetUserListQuery, GetUserListQueryVariables>) {\n        return Apollo.useQuery<GetUserListQuery, GetUserListQueryVariables>(GetUserListDocument, baseOptions);\n      }\nexport function useGetUserListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserListQuery, GetUserListQueryVariables>) {\n          return Apollo.useLazyQuery<GetUserListQuery, GetUserListQueryVariables>(GetUserListDocument, baseOptions);\n        }\nexport type GetUserListQueryHookResult = ReturnType<typeof useGetUserListQuery>;\nexport type GetUserListLazyQueryHookResult = ReturnType<typeof useGetUserListLazyQuery>;\nexport type GetUserListQueryResult = Apollo.QueryResult<GetUserListQuery, GetUserListQueryVariables>;\nexport const GetChannelByNameDocument = gql`\n    query getChannelByName($name: String!) {\n  channel(where: {name: {_eq: $name}}) {\n    name\n    id\n    is_private\n    owner_id\n    channel_type\n  }\n}\n    `;\n\n/**\n * __useGetChannelByNameQuery__\n *\n * To run a query within a React component, call `useGetChannelByNameQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelByNameQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelByNameQuery({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useGetChannelByNameQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelByNameQuery, GetChannelByNameQueryVariables>) {\n        return Apollo.useQuery<GetChannelByNameQuery, GetChannelByNameQueryVariables>(GetChannelByNameDocument, baseOptions);\n      }\nexport function useGetChannelByNameLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelByNameQuery, GetChannelByNameQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelByNameQuery, GetChannelByNameQueryVariables>(GetChannelByNameDocument, baseOptions);\n        }\nexport type GetChannelByNameQueryHookResult = ReturnType<typeof useGetChannelByNameQuery>;\nexport type GetChannelByNameLazyQueryHookResult = ReturnType<typeof useGetChannelByNameLazyQuery>;\nexport type GetChannelByNameQueryResult = Apollo.QueryResult<GetChannelByNameQuery, GetChannelByNameQueryVariables>;\nexport const GetAuth0UserByIdDocument = gql`\n    query getAuth0UserById($user_id: String) {\n  user(where: {auth0_user_id: {_eq: $user_id}}) {\n    id\n    username\n    auth0_user_id\n    user_channels {\n      channel {\n        name\n        id\n        is_private\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetAuth0UserByIdQuery__\n *\n * To run a query within a React component, call `useGetAuth0UserByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAuth0UserByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAuth0UserByIdQuery({\n *   variables: {\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useGetAuth0UserByIdQuery(baseOptions?: Apollo.QueryHookOptions<GetAuth0UserByIdQuery, GetAuth0UserByIdQueryVariables>) {\n        return Apollo.useQuery<GetAuth0UserByIdQuery, GetAuth0UserByIdQueryVariables>(GetAuth0UserByIdDocument, baseOptions);\n      }\nexport function useGetAuth0UserByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAuth0UserByIdQuery, GetAuth0UserByIdQueryVariables>) {\n          return Apollo.useLazyQuery<GetAuth0UserByIdQuery, GetAuth0UserByIdQueryVariables>(GetAuth0UserByIdDocument, baseOptions);\n        }\nexport type GetAuth0UserByIdQueryHookResult = ReturnType<typeof useGetAuth0UserByIdQuery>;\nexport type GetAuth0UserByIdLazyQueryHookResult = ReturnType<typeof useGetAuth0UserByIdLazyQuery>;\nexport type GetAuth0UserByIdQueryResult = Apollo.QueryResult<GetAuth0UserByIdQuery, GetAuth0UserByIdQueryVariables>;\nexport const GetChannelThreadIdDocument = gql`\n    query getChannelThreadId($message_id: Int) {\n  channel_thread(where: {message_id: {_eq: $message_id}}) {\n    id\n  }\n}\n    `;\n\n/**\n * __useGetChannelThreadIdQuery__\n *\n * To run a query within a React component, call `useGetChannelThreadIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelThreadIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelThreadIdQuery({\n *   variables: {\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useGetChannelThreadIdQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelThreadIdQuery, GetChannelThreadIdQueryVariables>) {\n        return Apollo.useQuery<GetChannelThreadIdQuery, GetChannelThreadIdQueryVariables>(GetChannelThreadIdDocument, baseOptions);\n      }\nexport function useGetChannelThreadIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelThreadIdQuery, GetChannelThreadIdQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelThreadIdQuery, GetChannelThreadIdQueryVariables>(GetChannelThreadIdDocument, baseOptions);\n        }\nexport type GetChannelThreadIdQueryHookResult = ReturnType<typeof useGetChannelThreadIdQuery>;\nexport type GetChannelThreadIdLazyQueryHookResult = ReturnType<typeof useGetChannelThreadIdLazyQuery>;\nexport type GetChannelThreadIdQueryResult = Apollo.QueryResult<GetChannelThreadIdQuery, GetChannelThreadIdQueryVariables>;\nexport const GetChannelThreadParentMessageDocument = gql`\n    query getChannelThreadParentMessage($limit: Int, $message_id: Int) {\n  channel_thread_message(limit: $limit, order_by: {id: asc}, where: {channel_thread: {message_id: {_eq: $message_id}}}) {\n    channel_thread_id\n    timestamp\n    channel_thread {\n      message {\n        text\n        timestamp\n        image\n        id\n        user_id\n        user {\n          auth0_user_id\n          username\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetChannelThreadParentMessageQuery__\n *\n * To run a query within a React component, call `useGetChannelThreadParentMessageQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelThreadParentMessageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelThreadParentMessageQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useGetChannelThreadParentMessageQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelThreadParentMessageQuery, GetChannelThreadParentMessageQueryVariables>) {\n        return Apollo.useQuery<GetChannelThreadParentMessageQuery, GetChannelThreadParentMessageQueryVariables>(GetChannelThreadParentMessageDocument, baseOptions);\n      }\nexport function useGetChannelThreadParentMessageLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelThreadParentMessageQuery, GetChannelThreadParentMessageQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelThreadParentMessageQuery, GetChannelThreadParentMessageQueryVariables>(GetChannelThreadParentMessageDocument, baseOptions);\n        }\nexport type GetChannelThreadParentMessageQueryHookResult = ReturnType<typeof useGetChannelThreadParentMessageQuery>;\nexport type GetChannelThreadParentMessageLazyQueryHookResult = ReturnType<typeof useGetChannelThreadParentMessageLazyQuery>;\nexport type GetChannelThreadParentMessageQueryResult = Apollo.QueryResult<GetChannelThreadParentMessageQuery, GetChannelThreadParentMessageQueryVariables>;\nexport const GetChannelThreadDocument = gql`\n    query getChannelThread($message_id: Int) {\n  channel_thread(where: {message_id: {_eq: $message_id}}) {\n    id\n    message {\n      id\n      image\n      text\n      deleted\n      timestamp\n      user {\n        auth0_user_id\n        id\n        username\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetChannelThreadQuery__\n *\n * To run a query within a React component, call `useGetChannelThreadQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelThreadQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelThreadQuery({\n *   variables: {\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useGetChannelThreadQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelThreadQuery, GetChannelThreadQueryVariables>) {\n        return Apollo.useQuery<GetChannelThreadQuery, GetChannelThreadQueryVariables>(GetChannelThreadDocument, baseOptions);\n      }\nexport function useGetChannelThreadLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelThreadQuery, GetChannelThreadQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelThreadQuery, GetChannelThreadQueryVariables>(GetChannelThreadDocument, baseOptions);\n        }\nexport type GetChannelThreadQueryHookResult = ReturnType<typeof useGetChannelThreadQuery>;\nexport type GetChannelThreadLazyQueryHookResult = ReturnType<typeof useGetChannelThreadLazyQuery>;\nexport type GetChannelThreadQueryResult = Apollo.QueryResult<GetChannelThreadQuery, GetChannelThreadQueryVariables>;\nexport const GetPollQuestionsDocument = gql`\n    query getPollQuestions {\n  questions: poll_questions {\n    id\n    owner_id\n    text\n  }\n}\n    `;\n\n/**\n * __useGetPollQuestionsQuery__\n *\n * To run a query within a React component, call `useGetPollQuestionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPollQuestionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPollQuestionsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetPollQuestionsQuery(baseOptions?: Apollo.QueryHookOptions<GetPollQuestionsQuery, GetPollQuestionsQueryVariables>) {\n        return Apollo.useQuery<GetPollQuestionsQuery, GetPollQuestionsQueryVariables>(GetPollQuestionsDocument, baseOptions);\n      }\nexport function useGetPollQuestionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPollQuestionsQuery, GetPollQuestionsQueryVariables>) {\n          return Apollo.useLazyQuery<GetPollQuestionsQuery, GetPollQuestionsQueryVariables>(GetPollQuestionsDocument, baseOptions);\n        }\nexport type GetPollQuestionsQueryHookResult = ReturnType<typeof useGetPollQuestionsQuery>;\nexport type GetPollQuestionsLazyQueryHookResult = ReturnType<typeof useGetPollQuestionsLazyQuery>;\nexport type GetPollQuestionsQueryResult = Apollo.QueryResult<GetPollQuestionsQuery, GetPollQuestionsQueryVariables>;\nexport const GetPollQuestionAnswersDocument = gql`\n    query getPollQuestionAnswers($pollQuestionId: Int) {\n  poll_question: poll_questions(where: {id: {_eq: $pollQuestionId}}) {\n    id\n    text\n    is_active\n  }\n  poll_answers: poll_anwers(where: {poll_question: {id: {_eq: $pollQuestionId}}}) {\n    question_id\n    text\n    id\n    votes\n  }\n}\n    `;\n\n/**\n * __useGetPollQuestionAnswersQuery__\n *\n * To run a query within a React component, call `useGetPollQuestionAnswersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPollQuestionAnswersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPollQuestionAnswersQuery({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useGetPollQuestionAnswersQuery(baseOptions?: Apollo.QueryHookOptions<GetPollQuestionAnswersQuery, GetPollQuestionAnswersQueryVariables>) {\n        return Apollo.useQuery<GetPollQuestionAnswersQuery, GetPollQuestionAnswersQueryVariables>(GetPollQuestionAnswersDocument, baseOptions);\n      }\nexport function useGetPollQuestionAnswersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPollQuestionAnswersQuery, GetPollQuestionAnswersQueryVariables>) {\n          return Apollo.useLazyQuery<GetPollQuestionAnswersQuery, GetPollQuestionAnswersQueryVariables>(GetPollQuestionAnswersDocument, baseOptions);\n        }\nexport type GetPollQuestionAnswersQueryHookResult = ReturnType<typeof useGetPollQuestionAnswersQuery>;\nexport type GetPollQuestionAnswersLazyQueryHookResult = ReturnType<typeof useGetPollQuestionAnswersLazyQuery>;\nexport type GetPollQuestionAnswersQueryResult = Apollo.QueryResult<GetPollQuestionAnswersQuery, GetPollQuestionAnswersQueryVariables>;\nexport const GetPublicChannelsDocument = gql`\n    query getPublicChannels {\n  channels: channel(where: {is_private: {_neq: true}}) {\n    id\n    name\n    channel_polls(where: {poll_question: {is_active: {_eq: true}}}) {\n      poll_question {\n        is_active\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetPublicChannelsQuery__\n *\n * To run a query within a React component, call `useGetPublicChannelsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPublicChannelsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPublicChannelsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetPublicChannelsQuery(baseOptions?: Apollo.QueryHookOptions<GetPublicChannelsQuery, GetPublicChannelsQueryVariables>) {\n        return Apollo.useQuery<GetPublicChannelsQuery, GetPublicChannelsQueryVariables>(GetPublicChannelsDocument, baseOptions);\n      }\nexport function useGetPublicChannelsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPublicChannelsQuery, GetPublicChannelsQueryVariables>) {\n          return Apollo.useLazyQuery<GetPublicChannelsQuery, GetPublicChannelsQueryVariables>(GetPublicChannelsDocument, baseOptions);\n        }\nexport type GetPublicChannelsQueryHookResult = ReturnType<typeof useGetPublicChannelsQuery>;\nexport type GetPublicChannelsLazyQueryHookResult = ReturnType<typeof useGetPublicChannelsLazyQuery>;\nexport type GetPublicChannelsQueryResult = Apollo.QueryResult<GetPublicChannelsQuery, GetPublicChannelsQueryVariables>;\nexport const GetChannelPollsDocument = gql`\n    query getChannelPolls {\n  channelPoll: channel_poll {\n    channel_id\n    id\n    poll_questions\n  }\n}\n    `;\n\n/**\n * __useGetChannelPollsQuery__\n *\n * To run a query within a React component, call `useGetChannelPollsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelPollsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelPollsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetChannelPollsQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelPollsQuery, GetChannelPollsQueryVariables>) {\n        return Apollo.useQuery<GetChannelPollsQuery, GetChannelPollsQueryVariables>(GetChannelPollsDocument, baseOptions);\n      }\nexport function useGetChannelPollsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelPollsQuery, GetChannelPollsQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelPollsQuery, GetChannelPollsQueryVariables>(GetChannelPollsDocument, baseOptions);\n        }\nexport type GetChannelPollsQueryHookResult = ReturnType<typeof useGetChannelPollsQuery>;\nexport type GetChannelPollsLazyQueryHookResult = ReturnType<typeof useGetChannelPollsLazyQuery>;\nexport type GetChannelPollsQueryResult = Apollo.QueryResult<GetChannelPollsQuery, GetChannelPollsQueryVariables>;\nexport const GetChannelPollQuestionDocument = gql`\n    query getChannelPollQuestion($channelId: Int) {\n  getChannelPoll: channel_poll(where: {channel_id: {_eq: $channelId}, is_active: {_eq: true}}) {\n    id\n    poll_question {\n      id\n      text\n      poll_anwers(where: {poll_question: {}}) {\n        text\n        question_id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetChannelPollQuestionQuery__\n *\n * To run a query within a React component, call `useGetChannelPollQuestionQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelPollQuestionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelPollQuestionQuery({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useGetChannelPollQuestionQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelPollQuestionQuery, GetChannelPollQuestionQueryVariables>) {\n        return Apollo.useQuery<GetChannelPollQuestionQuery, GetChannelPollQuestionQueryVariables>(GetChannelPollQuestionDocument, baseOptions);\n      }\nexport function useGetChannelPollQuestionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelPollQuestionQuery, GetChannelPollQuestionQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelPollQuestionQuery, GetChannelPollQuestionQueryVariables>(GetChannelPollQuestionDocument, baseOptions);\n        }\nexport type GetChannelPollQuestionQueryHookResult = ReturnType<typeof useGetChannelPollQuestionQuery>;\nexport type GetChannelPollQuestionLazyQueryHookResult = ReturnType<typeof useGetChannelPollQuestionLazyQuery>;\nexport type GetChannelPollQuestionQueryResult = Apollo.QueryResult<GetChannelPollQuestionQuery, GetChannelPollQuestionQueryVariables>;\nexport const GetPollAnswerVotesDocument = gql`\n    query getPollAnswerVotes($pollAnswerId: Int!) {\n  poll_anwers(where: {id: {_eq: $pollAnswerId}}) {\n    id\n    votes\n  }\n}\n    `;\n\n/**\n * __useGetPollAnswerVotesQuery__\n *\n * To run a query within a React component, call `useGetPollAnswerVotesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPollAnswerVotesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPollAnswerVotesQuery({\n *   variables: {\n *      pollAnswerId: // value for 'pollAnswerId'\n *   },\n * });\n */\nexport function useGetPollAnswerVotesQuery(baseOptions?: Apollo.QueryHookOptions<GetPollAnswerVotesQuery, GetPollAnswerVotesQueryVariables>) {\n        return Apollo.useQuery<GetPollAnswerVotesQuery, GetPollAnswerVotesQueryVariables>(GetPollAnswerVotesDocument, baseOptions);\n      }\nexport function useGetPollAnswerVotesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPollAnswerVotesQuery, GetPollAnswerVotesQueryVariables>) {\n          return Apollo.useLazyQuery<GetPollAnswerVotesQuery, GetPollAnswerVotesQueryVariables>(GetPollAnswerVotesDocument, baseOptions);\n        }\nexport type GetPollAnswerVotesQueryHookResult = ReturnType<typeof useGetPollAnswerVotesQuery>;\nexport type GetPollAnswerVotesLazyQueryHookResult = ReturnType<typeof useGetPollAnswerVotesLazyQuery>;\nexport type GetPollAnswerVotesQueryResult = Apollo.QueryResult<GetPollAnswerVotesQuery, GetPollAnswerVotesQueryVariables>;\nexport const WatchMessagesDocument = gql`\n    subscription watchMessages($channelId: Int!, $limit: Int) {\n  messages: message(order_by: {timestamp: desc}, limit: $limit, where: {channel: {id: {_eq: $channelId}}}) {\n    id\n    text\n    image\n    timestamp\n    deleted\n    user {\n      username\n      auth0_user_id\n    }\n    channel {\n      name\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchMessagesSubscription__\n *\n * To run a query within a React component, call `useWatchMessagesSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchMessagesSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchMessagesSubscription({\n *   variables: {\n *      channelId: // value for 'channelId'\n *      limit: // value for 'limit'\n *   },\n * });\n */\nexport function useWatchMessagesSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchMessagesSubscription, WatchMessagesSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchMessagesSubscription, WatchMessagesSubscriptionVariables>(WatchMessagesDocument, baseOptions);\n      }\nexport type WatchMessagesSubscriptionHookResult = ReturnType<typeof useWatchMessagesSubscription>;\nexport type WatchMessagesSubscriptionResult = Apollo.SubscriptionResult<WatchMessagesSubscription>;\nexport const WatchChannelThreadMessagesDocument = gql`\n    subscription watchChannelThreadMessages($limit: Int!, $message_id: Int!) {\n  channel_thread_message(limit: $limit, order_by: {id: desc}, where: {channel_thread: {message_id: {_eq: $message_id}}}) {\n    id\n    message\n    image\n    user {\n      username\n      id\n      auth0_user_id\n    }\n    channel_thread_id\n    timestamp\n  }\n}\n    `;\n\n/**\n * __useWatchChannelThreadMessagesSubscription__\n *\n * To run a query within a React component, call `useWatchChannelThreadMessagesSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelThreadMessagesSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelThreadMessagesSubscription({\n *   variables: {\n *      limit: // value for 'limit'\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useWatchChannelThreadMessagesSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelThreadMessagesSubscription, WatchChannelThreadMessagesSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelThreadMessagesSubscription, WatchChannelThreadMessagesSubscriptionVariables>(WatchChannelThreadMessagesDocument, baseOptions);\n      }\nexport type WatchChannelThreadMessagesSubscriptionHookResult = ReturnType<typeof useWatchChannelThreadMessagesSubscription>;\nexport type WatchChannelThreadMessagesSubscriptionResult = Apollo.SubscriptionResult<WatchChannelThreadMessagesSubscription>;\nexport const WatchChannelThreadDocument = gql`\n    subscription watchChannelThread($message_id: Int! = 571) {\n  channel_thread(where: {message_id: {_eq: $message_id}}) {\n    id\n    message {\n      id\n    }\n    channel_thread_messages(order_by: {id: desc}) {\n      id\n      message\n      timestamp\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchChannelThreadSubscription__\n *\n * To run a query within a React component, call `useWatchChannelThreadSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelThreadSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelThreadSubscription({\n *   variables: {\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useWatchChannelThreadSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelThreadSubscription, WatchChannelThreadSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelThreadSubscription, WatchChannelThreadSubscriptionVariables>(WatchChannelThreadDocument, baseOptions);\n      }\nexport type WatchChannelThreadSubscriptionHookResult = ReturnType<typeof useWatchChannelThreadSubscription>;\nexport type WatchChannelThreadSubscriptionResult = Apollo.SubscriptionResult<WatchChannelThreadSubscription>;\nexport const WatchThreadsDocument = gql`\n    subscription watchThreads {\n  channel_thread(order_by: {id: desc}) {\n    id\n    message_id\n    message {\n      image\n      text\n      deleted\n      timestamp\n      id\n      user {\n        auth0_user_id\n        username\n      }\n      user_id\n      channel {\n        id\n        name\n      }\n    }\n    channel_thread_messages {\n      id\n      image\n      message\n      timestamp\n      user_id\n      user {\n        auth0_user_id\n        username\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchThreadsSubscription__\n *\n * To run a query within a React component, call `useWatchThreadsSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchThreadsSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchThreadsSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchThreadsSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchThreadsSubscription, WatchThreadsSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchThreadsSubscription, WatchThreadsSubscriptionVariables>(WatchThreadsDocument, baseOptions);\n      }\nexport type WatchThreadsSubscriptionHookResult = ReturnType<typeof useWatchThreadsSubscription>;\nexport type WatchThreadsSubscriptionResult = Apollo.SubscriptionResult<WatchThreadsSubscription>;\nexport const WatchOnlineUsersDocument = gql`\n    subscription watchOnlineUsers {\n  users: user_online(order_by: {username: asc}) {\n    id\n    username\n    auth0_user_id\n  }\n}\n    `;\n\n/**\n * __useWatchOnlineUsersSubscription__\n *\n * To run a query within a React component, call `useWatchOnlineUsersSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchOnlineUsersSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchOnlineUsersSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchOnlineUsersSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchOnlineUsersSubscription, WatchOnlineUsersSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchOnlineUsersSubscription, WatchOnlineUsersSubscriptionVariables>(WatchOnlineUsersDocument, baseOptions);\n      }\nexport type WatchOnlineUsersSubscriptionHookResult = ReturnType<typeof useWatchOnlineUsersSubscription>;\nexport type WatchOnlineUsersSubscriptionResult = Apollo.SubscriptionResult<WatchOnlineUsersSubscription>;\nexport const WatchChannelsDocument = gql`\n    subscription watchChannels($channel_type: channel_type_enum!) {\n  channels: channel(where: {channel_type: {_eq: $channel_type}}, order_by: {name: asc, is_private: asc}) {\n    name\n    id\n    is_private\n    owner_id\n  }\n}\n    `;\n\n/**\n * __useWatchChannelsSubscription__\n *\n * To run a query within a React component, call `useWatchChannelsSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelsSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelsSubscription({\n *   variables: {\n *      channel_type: // value for 'channel_type'\n *   },\n * });\n */\nexport function useWatchChannelsSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelsSubscription, WatchChannelsSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelsSubscription, WatchChannelsSubscriptionVariables>(WatchChannelsDocument, baseOptions);\n      }\nexport type WatchChannelsSubscriptionHookResult = ReturnType<typeof useWatchChannelsSubscription>;\nexport type WatchChannelsSubscriptionResult = Apollo.SubscriptionResult<WatchChannelsSubscription>;\nexport const WatchDirectMessageChannelsDocument = gql`\n    subscription watchDirectMessageChannels($channel_type: channel_type_enum!, $user_id: String) {\n  channels: channel(where: {channel_type: {_eq: $channel_type}, _and: {user_channels: {user_id: {_eq: $user_id}}}}) {\n    name\n    id\n    is_private\n    owner_id\n    user_channels(where: {user_id: {_neq: $user_id}}) {\n      user {\n        username\n        auth0_user_id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchDirectMessageChannelsSubscription__\n *\n * To run a query within a React component, call `useWatchDirectMessageChannelsSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchDirectMessageChannelsSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchDirectMessageChannelsSubscription({\n *   variables: {\n *      channel_type: // value for 'channel_type'\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useWatchDirectMessageChannelsSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchDirectMessageChannelsSubscription, WatchDirectMessageChannelsSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchDirectMessageChannelsSubscription, WatchDirectMessageChannelsSubscriptionVariables>(WatchDirectMessageChannelsDocument, baseOptions);\n      }\nexport type WatchDirectMessageChannelsSubscriptionHookResult = ReturnType<typeof useWatchDirectMessageChannelsSubscription>;\nexport type WatchDirectMessageChannelsSubscriptionResult = Apollo.SubscriptionResult<WatchDirectMessageChannelsSubscription>;\nexport const WatchUsersDocument = gql`\n    subscription watchUsers {\n  user(order_by: {username: asc}) {\n    username\n    auth0_user_id\n  }\n}\n    `;\n\n/**\n * __useWatchUsersSubscription__\n *\n * To run a query within a React component, call `useWatchUsersSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchUsersSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchUsersSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchUsersSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchUsersSubscription, WatchUsersSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchUsersSubscription, WatchUsersSubscriptionVariables>(WatchUsersDocument, baseOptions);\n      }\nexport type WatchUsersSubscriptionHookResult = ReturnType<typeof useWatchUsersSubscription>;\nexport type WatchUsersSubscriptionResult = Apollo.SubscriptionResult<WatchUsersSubscription>;\nexport const WatchUsersWhoHaveNotSubscribedToChannelDocument = gql`\n    subscription watchUsersWhoHaveNotSubscribedToChannel($user_id: String!, $channel_id: Int!) {\n  user(where: {_not: {user_channels: {channel_id: {_eq: $channel_id}}}, auth0_user_id: {_neq: $user_id}}, order_by: {username: asc}) {\n    auth0_user_id\n    username\n  }\n}\n    `;\n\n/**\n * __useWatchUsersWhoHaveNotSubscribedToChannelSubscription__\n *\n * To run a query within a React component, call `useWatchUsersWhoHaveNotSubscribedToChannelSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchUsersWhoHaveNotSubscribedToChannelSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchUsersWhoHaveNotSubscribedToChannelSubscription({\n *   variables: {\n *      user_id: // value for 'user_id'\n *      channel_id: // value for 'channel_id'\n *   },\n * });\n */\nexport function useWatchUsersWhoHaveNotSubscribedToChannelSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchUsersWhoHaveNotSubscribedToChannelSubscription, WatchUsersWhoHaveNotSubscribedToChannelSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchUsersWhoHaveNotSubscribedToChannelSubscription, WatchUsersWhoHaveNotSubscribedToChannelSubscriptionVariables>(WatchUsersWhoHaveNotSubscribedToChannelDocument, baseOptions);\n      }\nexport type WatchUsersWhoHaveNotSubscribedToChannelSubscriptionHookResult = ReturnType<typeof useWatchUsersWhoHaveNotSubscribedToChannelSubscription>;\nexport type WatchUsersWhoHaveNotSubscribedToChannelSubscriptionResult = Apollo.SubscriptionResult<WatchUsersWhoHaveNotSubscribedToChannelSubscription>;\nexport const WatchUsersWhoHaveSubscribedToDirectMessageChannelDocument = gql`\n    subscription watchUsersWhoHaveSubscribedToDirectMessageChannel($user_id: String!) {\n  user(where: {auth0_user_id: {_neq: $user_id}}, order_by: {username: asc}) {\n    auth0_user_id\n    username\n    user_channels(where: {channel: {channel_type: {_eq: DIRECT_MESSAGE}}}) {\n      channel_id\n      channel {\n        name\n        user_channels(where: {user: {auth0_user_id: {_eq: $user_id}}}) {\n          user {\n            auth0_user_id\n            username\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription__\n *\n * To run a query within a React component, call `useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription({\n *   variables: {\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription, WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription, WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscriptionVariables>(WatchUsersWhoHaveSubscribedToDirectMessageChannelDocument, baseOptions);\n      }\nexport type WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscriptionHookResult = ReturnType<typeof useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription>;\nexport type WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscriptionResult = Apollo.SubscriptionResult<WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription>;\nexport const WatchUsersWhoHaveSubscribedToChannelDocument = gql`\n    subscription watchUsersWhoHaveSubscribedToChannel($channel_id: Int!, $user_id: String!) {\n  channel(where: {id: {_eq: $channel_id}}) {\n    id\n    user_channels(where: {user: {auth0_user_id: {_neq: $user_id}}}) {\n      user {\n        auth0_user_id\n        username\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchUsersWhoHaveSubscribedToChannelSubscription__\n *\n * To run a query within a React component, call `useWatchUsersWhoHaveSubscribedToChannelSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchUsersWhoHaveSubscribedToChannelSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchUsersWhoHaveSubscribedToChannelSubscription({\n *   variables: {\n *      channel_id: // value for 'channel_id'\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useWatchUsersWhoHaveSubscribedToChannelSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchUsersWhoHaveSubscribedToChannelSubscription, WatchUsersWhoHaveSubscribedToChannelSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchUsersWhoHaveSubscribedToChannelSubscription, WatchUsersWhoHaveSubscribedToChannelSubscriptionVariables>(WatchUsersWhoHaveSubscribedToChannelDocument, baseOptions);\n      }\nexport type WatchUsersWhoHaveSubscribedToChannelSubscriptionHookResult = ReturnType<typeof useWatchUsersWhoHaveSubscribedToChannelSubscription>;\nexport type WatchUsersWhoHaveSubscribedToChannelSubscriptionResult = Apollo.SubscriptionResult<WatchUsersWhoHaveSubscribedToChannelSubscription>;\nexport const GetUserIsTypingDocument = gql`\n    subscription getUserIsTyping($self_id: String!, $channel_id: Int!) {\n  user_typing(where: {auth0_user_id: {_neq: $self_id}, _and: {last_typed_channel: {_eq: $channel_id}}}, limit: 1, order_by: {last_typed: desc}) {\n    last_typed\n    username\n  }\n}\n    `;\n\n/**\n * __useGetUserIsTypingSubscription__\n *\n * To run a query within a React component, call `useGetUserIsTypingSubscription` and pass it any options that fit your needs.\n * When your component renders, `useGetUserIsTypingSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserIsTypingSubscription({\n *   variables: {\n *      self_id: // value for 'self_id'\n *      channel_id: // value for 'channel_id'\n *   },\n * });\n */\nexport function useGetUserIsTypingSubscription(baseOptions?: Apollo.SubscriptionHookOptions<GetUserIsTypingSubscription, GetUserIsTypingSubscriptionVariables>) {\n        return Apollo.useSubscription<GetUserIsTypingSubscription, GetUserIsTypingSubscriptionVariables>(GetUserIsTypingDocument, baseOptions);\n      }\nexport type GetUserIsTypingSubscriptionHookResult = ReturnType<typeof useGetUserIsTypingSubscription>;\nexport type GetUserIsTypingSubscriptionResult = Apollo.SubscriptionResult<GetUserIsTypingSubscription>;\nexport const WatchNewMessagesDocument = gql`\n    subscription watchNewMessages($channelId: Int!) {\n  newMessages: message(order_by: {id: desc}, limit: 1, where: {channel: {id: {_eq: $channelId}}}) {\n    id\n    text\n    timestamp\n    user {\n      username\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchNewMessagesSubscription__\n *\n * To run a query within a React component, call `useWatchNewMessagesSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchNewMessagesSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchNewMessagesSubscription({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useWatchNewMessagesSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchNewMessagesSubscription, WatchNewMessagesSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchNewMessagesSubscription, WatchNewMessagesSubscriptionVariables>(WatchNewMessagesDocument, baseOptions);\n      }\nexport type WatchNewMessagesSubscriptionHookResult = ReturnType<typeof useWatchNewMessagesSubscription>;\nexport type WatchNewMessagesSubscriptionResult = Apollo.SubscriptionResult<WatchNewMessagesSubscription>;\nexport const WatchChannelsLastMessageIdDocument = gql`\n    subscription watchChannelsLastMessageId($channel_type: channel_type_enum! = CHAT_MESSAGE) {\n  channels: channel(where: {channel_type: {_eq: $channel_type}}, order_by: {name: asc, is_private: asc}) {\n    name\n    id\n    is_private\n    owner_id\n    messages(order_by: {id: desc}, limit: 1) {\n      id\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchChannelsLastMessageIdSubscription__\n *\n * To run a query within a React component, call `useWatchChannelsLastMessageIdSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelsLastMessageIdSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelsLastMessageIdSubscription({\n *   variables: {\n *      channel_type: // value for 'channel_type'\n *   },\n * });\n */\nexport function useWatchChannelsLastMessageIdSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelsLastMessageIdSubscription, WatchChannelsLastMessageIdSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelsLastMessageIdSubscription, WatchChannelsLastMessageIdSubscriptionVariables>(WatchChannelsLastMessageIdDocument, baseOptions);\n      }\nexport type WatchChannelsLastMessageIdSubscriptionHookResult = ReturnType<typeof useWatchChannelsLastMessageIdSubscription>;\nexport type WatchChannelsLastMessageIdSubscriptionResult = Apollo.SubscriptionResult<WatchChannelsLastMessageIdSubscription>;\nexport const WatchMessageCursorDocument = gql`\n    subscription watchMessageCursor($channel_id: Int!, $user_id: String!) {\n  message_cursor(where: {user_id: {_eq: $user_id}, _and: {channel_id: {_eq: $channel_id}}}) {\n    channel_id\n    message_id\n    user_id\n  }\n}\n    `;\n\n/**\n * __useWatchMessageCursorSubscription__\n *\n * To run a query within a React component, call `useWatchMessageCursorSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchMessageCursorSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchMessageCursorSubscription({\n *   variables: {\n *      channel_id: // value for 'channel_id'\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useWatchMessageCursorSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchMessageCursorSubscription, WatchMessageCursorSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchMessageCursorSubscription, WatchMessageCursorSubscriptionVariables>(WatchMessageCursorDocument, baseOptions);\n      }\nexport type WatchMessageCursorSubscriptionHookResult = ReturnType<typeof useWatchMessageCursorSubscription>;\nexport type WatchMessageCursorSubscriptionResult = Apollo.SubscriptionResult<WatchMessageCursorSubscription>;\nexport const WatchGetPollQuestionsDocument = gql`\n    subscription WatchGetPollQuestions {\n  questions: poll_questions {\n    id\n    text\n    created_at\n    updated_at\n    owner_id\n    is_active\n    channel_polls {\n      channel {\n        name\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchGetPollQuestionsSubscription__\n *\n * To run a query within a React component, call `useWatchGetPollQuestionsSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchGetPollQuestionsSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchGetPollQuestionsSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchGetPollQuestionsSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchGetPollQuestionsSubscription, WatchGetPollQuestionsSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchGetPollQuestionsSubscription, WatchGetPollQuestionsSubscriptionVariables>(WatchGetPollQuestionsDocument, baseOptions);\n      }\nexport type WatchGetPollQuestionsSubscriptionHookResult = ReturnType<typeof useWatchGetPollQuestionsSubscription>;\nexport type WatchGetPollQuestionsSubscriptionResult = Apollo.SubscriptionResult<WatchGetPollQuestionsSubscription>;\nexport const WatchGetChannelPollQuestionPublishStateDocument = gql`\n    subscription watchGetChannelPollQuestionPublishState {\n  getChannelPollQuestionPublishState: channel_poll {\n    channel_id\n    id\n    poll_questions\n    channel {\n      name\n    }\n    poll_question {\n      text\n      is_active\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchGetChannelPollQuestionPublishStateSubscription__\n *\n * To run a query within a React component, call `useWatchGetChannelPollQuestionPublishStateSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchGetChannelPollQuestionPublishStateSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchGetChannelPollQuestionPublishStateSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchGetChannelPollQuestionPublishStateSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchGetChannelPollQuestionPublishStateSubscription, WatchGetChannelPollQuestionPublishStateSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchGetChannelPollQuestionPublishStateSubscription, WatchGetChannelPollQuestionPublishStateSubscriptionVariables>(WatchGetChannelPollQuestionPublishStateDocument, baseOptions);\n      }\nexport type WatchGetChannelPollQuestionPublishStateSubscriptionHookResult = ReturnType<typeof useWatchGetChannelPollQuestionPublishStateSubscription>;\nexport type WatchGetChannelPollQuestionPublishStateSubscriptionResult = Apollo.SubscriptionResult<WatchGetChannelPollQuestionPublishStateSubscription>;\nexport const WatchGetPollQuestionDocument = gql`\n    subscription watchGetPollQuestion($pollQuestionId: Int) {\n  poll_question: poll_questions(where: {id: {_eq: $pollQuestionId}}) {\n    id\n    text\n    is_active\n  }\n}\n    `;\n\n/**\n * __useWatchGetPollQuestionSubscription__\n *\n * To run a query within a React component, call `useWatchGetPollQuestionSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchGetPollQuestionSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchGetPollQuestionSubscription({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useWatchGetPollQuestionSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchGetPollQuestionSubscription, WatchGetPollQuestionSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchGetPollQuestionSubscription, WatchGetPollQuestionSubscriptionVariables>(WatchGetPollQuestionDocument, baseOptions);\n      }\nexport type WatchGetPollQuestionSubscriptionHookResult = ReturnType<typeof useWatchGetPollQuestionSubscription>;\nexport type WatchGetPollQuestionSubscriptionResult = Apollo.SubscriptionResult<WatchGetPollQuestionSubscription>;\nexport const WatchGetPollAnswersDocument = gql`\n    subscription watchGetPollAnswers($pollQuestionId: Int!) {\n  poll_answers: poll_anwers(where: {poll_question: {id: {_eq: $pollQuestionId}}}) {\n    question_id\n    text\n    id\n    votes\n  }\n}\n    `;\n\n/**\n * __useWatchGetPollAnswersSubscription__\n *\n * To run a query within a React component, call `useWatchGetPollAnswersSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchGetPollAnswersSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchGetPollAnswersSubscription({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useWatchGetPollAnswersSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchGetPollAnswersSubscription, WatchGetPollAnswersSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchGetPollAnswersSubscription, WatchGetPollAnswersSubscriptionVariables>(WatchGetPollAnswersDocument, baseOptions);\n      }\nexport type WatchGetPollAnswersSubscriptionHookResult = ReturnType<typeof useWatchGetPollAnswersSubscription>;\nexport type WatchGetPollAnswersSubscriptionResult = Apollo.SubscriptionResult<WatchGetPollAnswersSubscription>;\nexport const WatchChannelPollQuestionDocument = gql`\n    subscription watchChannelPollQuestion($channelId: Int!) {\n  getChannelPoll: channel_poll(where: {channel_id: {_eq: $channelId}, poll_question: {is_active: {_eq: true}}}) {\n    id\n    poll_question {\n      id\n      text\n      poll_anwers(where: {poll_question: {channel_polls: {channel_id: {_eq: $channelId}}}}) {\n        text\n        votes\n        id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchChannelPollQuestionSubscription__\n *\n * To run a query within a React component, call `useWatchChannelPollQuestionSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelPollQuestionSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelPollQuestionSubscription({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useWatchChannelPollQuestionSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelPollQuestionSubscription, WatchChannelPollQuestionSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelPollQuestionSubscription, WatchChannelPollQuestionSubscriptionVariables>(WatchChannelPollQuestionDocument, baseOptions);\n      }\nexport type WatchChannelPollQuestionSubscriptionHookResult = ReturnType<typeof useWatchChannelPollQuestionSubscription>;\nexport type WatchChannelPollQuestionSubscriptionResult = Apollo.SubscriptionResult<WatchChannelPollQuestionSubscription>;\nexport const WatchPollAnswerVotesDocument = gql`\n    subscription watchPollAnswerVotes($pollAnswerId: Int!) {\n  pollAnswerVotes: poll_anwers(where: {id: {_eq: $pollAnswerId}}) {\n    id\n    votes\n  }\n}\n    `;\n\n/**\n * __useWatchPollAnswerVotesSubscription__\n *\n * To run a query within a React component, call `useWatchPollAnswerVotesSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchPollAnswerVotesSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchPollAnswerVotesSubscription({\n *   variables: {\n *      pollAnswerId: // value for 'pollAnswerId'\n *   },\n * });\n */\nexport function useWatchPollAnswerVotesSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchPollAnswerVotesSubscription, WatchPollAnswerVotesSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchPollAnswerVotesSubscription, WatchPollAnswerVotesSubscriptionVariables>(WatchPollAnswerVotesDocument, baseOptions);\n      }\nexport type WatchPollAnswerVotesSubscriptionHookResult = ReturnType<typeof useWatchPollAnswerVotesSubscription>;\nexport type WatchPollAnswerVotesSubscriptionResult = Apollo.SubscriptionResult<WatchPollAnswerVotesSubscription>;\nexport const GetPollQuestionStateDocument = gql`\n    subscription getPollQuestionState($pollQuestionId: Int!) {\n  poll_questions(where: {id: {_eq: $pollQuestionId}}) {\n    is_active\n  }\n}\n    `;\n\n/**\n * __useGetPollQuestionStateSubscription__\n *\n * To run a query within a React component, call `useGetPollQuestionStateSubscription` and pass it any options that fit your needs.\n * When your component renders, `useGetPollQuestionStateSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPollQuestionStateSubscription({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useGetPollQuestionStateSubscription(baseOptions?: Apollo.SubscriptionHookOptions<GetPollQuestionStateSubscription, GetPollQuestionStateSubscriptionVariables>) {\n        return Apollo.useSubscription<GetPollQuestionStateSubscription, GetPollQuestionStateSubscriptionVariables>(GetPollQuestionStateDocument, baseOptions);\n      }\nexport type GetPollQuestionStateSubscriptionHookResult = ReturnType<typeof useGetPollQuestionStateSubscription>;\nexport type GetPollQuestionStateSubscriptionResult = Apollo.SubscriptionResult<GetPollQuestionStateSubscription>;\nexport const WatchGetChannelsDocument = gql`\n    subscription watchGetChannels {\n  channel(where: {is_private: {_eq: false}}) {\n    id\n    name\n    channel_polls {\n      channel_id\n      poll_question {\n        id\n        text\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchGetChannelsSubscription__\n *\n * To run a query within a React component, call `useWatchGetChannelsSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchGetChannelsSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchGetChannelsSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchGetChannelsSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchGetChannelsSubscription, WatchGetChannelsSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchGetChannelsSubscription, WatchGetChannelsSubscriptionVariables>(WatchGetChannelsDocument, baseOptions);\n      }\nexport type WatchGetChannelsSubscriptionHookResult = ReturnType<typeof useWatchGetChannelsSubscription>;\nexport type WatchGetChannelsSubscriptionResult = Apollo.SubscriptionResult<WatchGetChannelsSubscription>;\nexport const WatchChannelHasActivePollDocument = gql`\n    subscription watchChannelHasActivePoll($currentChannelId: Int!) {\n  poll_questions(where: {channel_polls: {channel_id: {_eq: $currentChannelId}}, _and: {is_active: {_eq: true}}}) {\n    id\n    text\n  }\n}\n    `;\n\n/**\n * __useWatchChannelHasActivePollSubscription__\n *\n * To run a query within a React component, call `useWatchChannelHasActivePollSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelHasActivePollSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelHasActivePollSubscription({\n *   variables: {\n *      currentChannelId: // value for 'currentChannelId'\n *   },\n * });\n */\nexport function useWatchChannelHasActivePollSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelHasActivePollSubscription, WatchChannelHasActivePollSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelHasActivePollSubscription, WatchChannelHasActivePollSubscriptionVariables>(WatchChannelHasActivePollDocument, baseOptions);\n      }\nexport type WatchChannelHasActivePollSubscriptionHookResult = ReturnType<typeof useWatchChannelHasActivePollSubscription>;\nexport type WatchChannelHasActivePollSubscriptionResult = Apollo.SubscriptionResult<WatchChannelHasActivePollSubscription>;\nexport const WatchChannelPollActiveStateDocument = gql`\n    subscription watchChannelPollActiveState {\n  channel_poll {\n    id\n    channel {\n      name\n      channel_polls {\n        poll_question {\n          created_at\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchChannelPollActiveStateSubscription__\n *\n * To run a query within a React component, call `useWatchChannelPollActiveStateSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelPollActiveStateSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelPollActiveStateSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchChannelPollActiveStateSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelPollActiveStateSubscription, WatchChannelPollActiveStateSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelPollActiveStateSubscription, WatchChannelPollActiveStateSubscriptionVariables>(WatchChannelPollActiveStateDocument, baseOptions);\n      }\nexport type WatchChannelPollActiveStateSubscriptionHookResult = ReturnType<typeof useWatchChannelPollActiveStateSubscription>;\nexport type WatchChannelPollActiveStateSubscriptionResult = Apollo.SubscriptionResult<WatchChannelPollActiveStateSubscription>;\nexport const WatchCheckUserHasVotedDocument = gql`\n    subscription watchCheckUserHasVoted($pollQuestionId: Int, $auth0UserId: String) {\n  user_votes(where: {poll_question_id: {_eq: $pollQuestionId}, auth0_user_id: {_eq: $auth0UserId}}) {\n    auth0_user_id\n    poll_question_id\n    poll_answer_id\n  }\n}\n    `;\n\n/**\n * __useWatchCheckUserHasVotedSubscription__\n *\n * To run a query within a React component, call `useWatchCheckUserHasVotedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchCheckUserHasVotedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchCheckUserHasVotedSubscription({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *      auth0UserId: // value for 'auth0UserId'\n *   },\n * });\n */\nexport function useWatchCheckUserHasVotedSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchCheckUserHasVotedSubscription, WatchCheckUserHasVotedSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchCheckUserHasVotedSubscription, WatchCheckUserHasVotedSubscriptionVariables>(WatchCheckUserHasVotedDocument, baseOptions);\n      }\nexport type WatchCheckUserHasVotedSubscriptionHookResult = ReturnType<typeof useWatchCheckUserHasVotedSubscription>;\nexport type WatchCheckUserHasVotedSubscriptionResult = Apollo.SubscriptionResult<WatchCheckUserHasVotedSubscription>;","import React from 'react';\nimport { ApolloProvider, HttpOptions } from '@apollo/react-hooks';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  createHttpLink,\n  split,\n} from '@apollo/client';\nimport { WebSocketLink, WebSocketParams } from '@apollo/client/link/ws';\nimport { setContext } from '@apollo/client/link/context';\nimport jwt_decode from 'jwt-decode';\n\ninterface Definition {\n  kind: string;\n  operation?: string;\n}\n\nexport type ApolloHeadersType = {\n  Authorization: string;\n};\n\nconst ApolloWrapper: React.FC<any> = ({ children }) => {\n  const { isAuthenticated, getAccessTokenSilently } = useAuth0();\n\n  const getHeaders = async () => {\n    const headers = {} as ApolloHeadersType;\n    if (isAuthenticated) {\n      const token: string = await getAccessTokenSilently();\n      parseTokenAndSetRoles(token);\n      headers.Authorization = `Bearer ${token}`;\n    }\n    return headers;\n  };\n\n  const parseTokenAndSetRoles = async (token: any) => {\n    const user: any = jwt_decode(token);\n    if (\n      user &&\n      user['https://hasura.io/jwt/claims'] &&\n      user['https://hasura.io/jwt/claims']['x-hasura-allowed-roles']\n    )\n      localStorage.setItem(\n        user.sub,\n        user['https://hasura.io/jwt/claims']['x-hasura-allowed-roles'],\n      );\n  };\n\n  const authMiddleware = setContext(async (operation, { originalHeaders }) => {\n    return {\n      headers: {\n        ...originalHeaders,\n        ...(await getHeaders()),\n      },\n    };\n  });\n\n  const httpLinkOptions: HttpOptions = {\n    uri: process.env.REACT_APP_HTTP_BACKEND_LINK,\n  };\n\n  const wsLinkOptions: WebSocketParams = {\n    uri: process.env.REACT_APP_WS_BACKEND_LINK || '',\n    options: {\n      reconnect: true,\n      lazy: true,\n      connectionParams: async () => {\n        return { headers: await getHeaders() };\n      },\n    },\n  };\n\n  const httpLink = createHttpLink(httpLinkOptions);\n  const wsLink = new WebSocketLink(wsLinkOptions);\n\n  const link = split(\n    // split based on operation type\n    ({ query }) => {\n      const { kind, operation }: Definition = getMainDefinition(query);\n      return kind === 'OperationDefinition' && operation === 'subscription';\n    },\n    wsLink,\n    authMiddleware.concat(httpLink),\n  );\n\n  /* Set up local cache */\n  const cache = new InMemoryCache();\n\n  /* Create Apollo Client */\n  const client = new ApolloClient({ link, cache });\n\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n};\n\nexport default ApolloWrapper;\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport typography from './typography';\nimport overrides from './overrides';\n\nexport const theme = createMuiTheme({\n  palette: {\n    common: {\n      black: '#000000',\n      white: '#f9cd8b',\n    },\n    type: 'dark',\n    background: {\n      paper: '#070922',\n      default: '#070922',\n    },\n    primary: {\n      light: '#81D4FA',\n      main: '#0288D1',\n      dark: 'rgba(255, 255, 255, .01)',\n      contrastText: '#EF6C00',\n    },\n    secondary: {\n      light: '#FFA726',\n      main: '#f57c00',\n      dark: '#EF6C00',\n      contrastText: '#ffffff',\n    },\n    error: {\n      light: '#E91E63',\n      main: '#AD1457',\n      dark: '#880E4F',\n    },\n    success: {\n      light: '#0f5',\n      main: '#0f0',\n      dark: '#222',\n    },\n  },\n\n  shape: {\n    borderRadius: 2,\n  },\n  mixins: {\n    toolbar: {\n      // backgroundColor: '#151c66',\n    },\n  },\n  spacing: 0,\n  props: {\n    MuiCheckbox: {\n      style: {\n        fontSize: 10,\n      },\n    },\n    MuiChip: {\n      style: {\n        padding: 3,\n      },\n    },\n    MuiList: {\n      style: {\n        padding: 0,\n      },\n    },\n    MuiListItemIcon: {\n      style: {\n        color: '#0288D1',\n      },\n    },\n    MuiPaper: {\n      draggable: false,\n      elevation: 0,\n      style: {\n        overflow: 'hidden',\n      },\n    },\n    MuiAppBar: {\n      style: {\n        top: 'auto',\n        bottom: 0,\n      },\n    },\n    MuiButton: {\n      disableElevation: false,\n      color: 'secondary',\n      variant: 'outlined',\n      size: 'small',\n      disableFocusRipple: false,\n      disableTouchRipple: false,\n    },\n  },\n  typography,\n  overrides,\n});\n","export default {\n  fontSize: 14,\n  body1: {\n    fontSize: 16,\n    color: '#0288D1',\n  },\n  body2: {\n    fontSize: 16,\n    fontWeight: 500,\n    // color: '#f9cd8b',\n  },\n  button: {\n    fontSize: 12,\n    fontWeight: 400,\n  },\n  h1: {\n    fontWeight: 700,\n    fontSize: 20,\n    paddingBottom: 16,\n  },\n  h2: {\n    fontWeight: 700,\n    fontSize: 18,\n    marginTop: 16,\n  },\n  h3: {\n    fontWeight: 700,\n    fontSize: 16,\n    marginTop: 16,\n    marginBottom: 16,\n  },\n  h4: {\n    fontWeight: 700,\n    fontSize: 14,\n    marginTop: 16,\n  },\n  h5: {\n    fontWeight: 700,\n    fontSize: 12,\n    marginTop: 16,\n  },\n  h6: {\n    fontWeight: 700,\n    fontSize: 10,\n    color: '#0288D1',\n  },\n};\n","export default {\n  MuiCssBaseline: {\n    '@global': {\n      '*': {\n        'scrollbar-width': '1rem',\n      },\n      '*::-webkit-scrollbar': {\n        width: '.5rem',\n        height: '1rem',\n      },\n      '*::-webkit-scrollbar-track': {\n        '-webkit-box-shadow': 'inset 0 0 6px rgba(0,0,0,0.00)',\n      },\n      '*::-webkit-scrollbar-thumb': {\n        backgroundColor: 'rgb(245 124 0)',\n        borderRadius: 0,\n      },\n      a: {\n        textDecoration: 'none',\n      },\n    },\n  },\n  MuiToolbar: {\n    root: {\n      overflow: 'hidden',\n    },\n  },\n  MuiPopover: {\n    root: {\n      background: 'rgba(245, 122, 0, .7)',\n    },\n  },\n  MuiBackdrop: {\n    root: {\n      backgroundColor: 'rgba(0, 0, 0, .95)',\n    },\n  },\n  MuiFab: {\n    root: {\n      borderRadius: 0,\n    },\n    primary: {\n      color: '#fff',\n      boxShadow: 'none',\n    },\n    label: {},\n  },\n  MuiSpeedDial: {\n    direction: 'left',\n    directionUp: { marginBottom: 0 },\n    actions: {\n      display: 'unset',\n      backgroundColor: 'transparent',\n    },\n  },\n  MuiSpeedDialAction: {\n    fab: {\n      backgroundColor: 'transparent',\n      '&:hover': {\n        borderRadius: 3,\n        padding: 10,\n      },\n    },\n    staticTooltip: {\n      // opacity: 1,\n    },\n    tooltipOpen: true,\n    tooltipPlacement: 'top-end',\n    tooltipPlacementLeft: {},\n    staticTooltipLabel: {\n      right: '100%',\n      whiteSpace: 'nowrap',\n    },\n  },\n  MuiTableCell: {\n    root: {\n      borderBottom: 'none',\n    },\n  },\n  MuiInputBase: {\n    root: {},\n  },\n  MuiList: {\n    root: {\n      '&:hover': {\n        // backgroundColor: 'red',\n      },\n    },\n  },\n  MuiListItemIcon: {\n    root: {\n      '& :hover': {\n        color: '#F57C00',\n      },\n    },\n  },\n  MuiContainer: {\n    root: {\n      padding: 0,\n      margin: 0,\n    },\n  },\n  MuiListItemText: {\n    root: {\n      padding: 0,\n      margin: 0,\n      '& span': {\n        padding: 0,\n        fontSize: '.875rem',\n      },\n      '& h6': {\n        fontSize: '.857rem',\n      },\n      '& a': {\n        color: '#fff',\n      },\n      '& a:hover': {\n        color: 'yellow',\n      },\n    },\n  },\n  MuiDivider: {\n    root: {\n      margin: 10,\n      opacity: 0.5,\n    },\n  },\n  MuiTypography: {},\n  MuiButton: {\n    contained: {\n      boxShadow: 'none',\n    },\n  },\n  MuiIconButton: {\n    root: {\n      padding: '3px',\n    },\n  },\n  MuiAccordionSummary: {\n    expandIcon: {\n      background: '#f57c00',\n    },\n  },\n};\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport Button from '@material-ui/core/Button';\n\nconst Login: React.FC<any> = () => {\n  const { loginWithRedirect } = useAuth0();\n\n  const checkAndLogin = () => {\n    loginWithRedirect();\n  };\n\n  return (\n    <>\n      <Button\n        size=\"large\"\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={checkAndLogin}\n        aria-label=\"Login To Chat\"\n      >\n        Login\n      </Button>\n    </>\n  );\n};\n\nexport default Login;\n","import React from 'react';\nimport { Box, Container, Grid, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Login from '../Login';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column',\n    height: '100vh',\n  },\n  title: {\n    fontSize: '2rem',\n    fontWeight: 700,\n    textTransform: 'uppercase',\n    paddingTop: theme.spacing(5),\n  },\n}));\n\nconst SignIn: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Grid container className={classes.root}>\n        <Grid item>\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n            <img src=\"/logo-chicken-chat.png\" alt=\"Chicken Chat\" />\n          </Box>\n          <Typography className={classes.title} variant=\"h2\">\n            Welcome to Chicken Chat\n          </Typography>\n          <Typography color=\"textPrimary\" variant=\"body1\">\n            Please register or login. Lets go an cackle your nonsense!\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Login />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default SignIn;\n","import React from 'react';\nimport { Box } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  toolbarIcon: {\n    ...theme.mixins.toolbar,\n  },\n}));\n\nconst NotFound: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.root}>\n      <h2>Upppsss ....! Something went wrong!</h2>\n    </Box>\n  );\n};\n\nexport default NotFound;\n","import React from 'react';\nimport { Box, CircularProgress } from '@material-ui/core';\n\nconst Loader = () => {\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      flexDirection=\"column\"\n      flex={1}\n    >\n      <CircularProgress\n        color=\"secondary\"\n        size={20}\n        style={{ margin: '10px' }}\n      />\n    </Box>\n  );\n};\n\nexport default Loader;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { withAuthenticationRequired } from '@auth0/auth0-react';\nimport Loader from './shared/Loader';\n\ninterface PrivateRouteProps {\n  component: any;\n  path: any;\n}\n\nconst PrivateRoute: React.FC<PrivateRouteProps> = ({ component, ...args }) => {\n  return (\n    <Route\n      component={withAuthenticationRequired(component, {\n        onRedirecting: () => (\n          <>\n            <Loader />\n          </>\n        ),\n      })}\n      {...args}\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import { atom } from 'recoil';\n\nexport const testState = atom({\n  key: 'testState',\n});\n\nexport const currentChannelState = atom({\n  key: 'currentChannelState',\n});\n\nexport const getPollQuestionAnswers = atom({\n  key: 'getPollQuestionAnswersState',\n  default: 1,\n});\n\nexport const giphyState = atom({\n  key: 'giphyState',\n});\n\nexport const deletedMessageState = atom({\n  key: 'deletedMessageState',\n  default: false,\n});\n\nexport const deletedThreadMessageState = atom({\n  key: 'deletedThreadMessageState',\n  default: false,\n});\n","import React from 'react';\nimport { Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  large: {\n    backgroundSize: 'cover',\n    marginTop: theme.spacing(2),\n    width: theme.spacing(10),\n    height: theme.spacing(10),\n  },\n}));\n\nconst Logo = () => {\n  const classes = useStyles();\n\n  return (\n    <Avatar\n      className={classes.large}\n      alt=\"Chicken Fest\"\n      src=\"/chicken-chat-logo.svg\"\n    />\n  );\n};\n\nexport default Logo;\n","import React from 'react';\nimport { Avatar, Badge, ListItemIcon } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useWatchOnlineUsersSubscription } from '../../api/generated/graphql';\nimport Alert from '@material-ui/lab/Alert';\n\nconst useStyles = makeStyles((theme) => ({\n  badgeOnline: {\n    backgroundColor: '#44b700',\n    color: '#44b700',\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n    '&::after': {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      borderRadius: '50%',\n      animation: '$ripple 1.2s infinite ease-in-out',\n      border: '1px solid currentColor',\n      content: '\"\"',\n    },\n  },\n  badgeOffline: {\n    backgroundColor: '#f2115e',\n    color: '#f2115e',\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n    '&::after': {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      borderRadius: '50%',\n      animation: '$ripple 1.2s infinite ease-in-out',\n      border: '1px solid currentColor',\n      content: '\"\"',\n    },\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    backgroundColor: '#000000',\n    color: '#ffffff',\n    fontSize: 12,\n    fontWeight: 'bold',\n    border: '2px solid #f57c00',\n  },\n}));\n\ninterface OnlineUserStatusProps {\n  user: any;\n}\n\nconst OnlineUserStatus: React.FC<OnlineUserStatusProps> = ({ user }) => {\n  const classes = useStyles();\n\n  const {\n    data: onlineUsers,\n    error: onlineUsersError,\n  } = useWatchOnlineUsersSubscription();\n\n  if (onlineUsersError) {\n    console.log('OnlineUserStatusError', onlineUsersError);\n    return <Alert severity=\"error\">A OnlineUserStatusError occured.</Alert>;\n  }\n\n  const setOnlineUsersStatus = (user_id: string) => {\n    if (user_id === undefined) return { badge: classes.badgeOffline };\n\n    const onlineUser = onlineUsers?.users.filter((u) => {\n      return user_id === u.auth0_user_id ? true : false;\n    });\n\n    return onlineUser?.length\n      ? { badge: classes.badgeOnline }\n      : { badge: classes.badgeOffline };\n  };\n\n  return (\n    <ListItemIcon>\n      <Badge classes={setOnlineUsersStatus(user.auth0_user_id)} variant=\"dot\">\n        <Avatar className={classes.avatar}>\n          {user.username.substring(0, 2).toUpperCase()}\n        </Avatar>\n      </Badge>\n    </ListItemIcon>\n  );\n};\n\nexport default OnlineUserStatus;\n","import React from 'react';\nimport { Box, Chip, LinearProgress, Typography } from '@material-ui/core';\nimport FaceIcon from '@material-ui/icons/Face';\nimport GroupIcon from '@material-ui/icons/Group';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  text: {\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '.875rem',\n    },\n  },\n}));\n\ninterface ResultGraphProps {\n  answerId: number;\n  userVote: number | undefined;\n  pollVotes: number;\n  text: string;\n  totalVotes: any;\n}\n\nconst ResultGraph: React.FC<ResultGraphProps> = ({\n  answerId,\n  userVote,\n  pollVotes,\n  text,\n  totalVotes,\n}) => {\n  const classes = useStyles();\n  const LinearProgressWithLabel = (props: any) => {\n    return (\n      <Box\n        width=\"100%\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        flexDirection=\"row\"\n      >\n        <Box width=\"100%\" mr={1}>\n          <LinearProgress\n            id={answerId}\n            color={userVote === answerId ? 'secondary' : 'primary'}\n            variant=\"determinate\"\n            {...props}\n          />\n        </Box>\n        <Box\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          flexDirection=\"row-reverse\"\n        >\n          <Chip\n            size=\"small\"\n            color={userVote === answerId ? 'secondary' : 'primary'}\n            variant={userVote === answerId ? 'default' : 'outlined'}\n            label={`${pollVotes} / ${props.value.toFixed(1)}%`}\n            icon={userVote === answerId ? <FaceIcon /> : <GroupIcon />}\n          />\n        </Box>\n      </Box>\n    );\n  };\n\n  return (\n    <Box\n      key={answerId}\n      width=\"100%\"\n      display=\"flex\"\n      alignItems=\"flex-start\"\n      flexDirection=\"column\"\n      mb={2}\n    >\n      <Typography variant=\"body1\" className={classes.text}>\n        {text}\n      </Typography>\n      <LinearProgressWithLabel\n        value={(100 * pollVotes) / totalVotes}\n        answerid={answerId}\n      />\n    </Box>\n  );\n};\n\nexport default ResultGraph;\n","import React, { useEffect } from 'react';\nimport { Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  pollSubmit: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\ninterface VoteButtonProps {\n  enabled: boolean;\n}\n\nconst VoteButton: React.FC<VoteButtonProps> = ({ enabled }) => {\n  const classes = useStyles();\n  return (\n    <>\n      <Button\n        type=\"submit\"\n        variant=\"contained\"\n        color=\"secondary\"\n        className={classes.pollSubmit}\n        disabled={enabled}\n        aria-label=\"submit vote\"\n      >\n        {enabled ? 'Choose Your Answer' : 'Vote'}\n      </Button>\n    </>\n  );\n};\n\nexport default VoteButton;\n","import React from 'react';\nimport { Badge, Chip } from '@material-ui/core';\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\n\ninterface ShowTotalVotesProps {\n  totalVotes: number;\n}\n\nconst ShowTotalVotes: React.FC<ShowTotalVotesProps> = ({ totalVotes }) => {\n  return (\n    <>\n      <Badge color=\"secondary\" badgeContent={totalVotes}>\n        <HowToVoteIcon color=\"primary\" />\n      </Badge>\n    </>\n  );\n};\n\nexport default ShowTotalVotes;\n","import React, { useEffect } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { currentChannelState } from '../../atom.js';\nimport ResultGraph from './ResultGraph';\nimport VoteButton from './VoteButton';\nimport ShowTotalVotes from './ShowTotalVotes';\nimport Loader from '../shared/Loader';\nimport {\n  Box,\n  Radio,\n  RadioGroup,\n  FormControlLabel,\n  FormControl,\n  Paper,\n  Typography,\n} from '@material-ui/core';\nimport {\n  useWatchChannelPollQuestionSubscription,\n  useWatchPollAnswerVotesSubscription,\n  useWatchCheckUserHasVotedSubscription,\n  useSetPollAnswerVoteMutation,\n  useSetUserVotePollQuestionMutation,\n} from '../../api/generated/graphql';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  pollCard: {\n    width: '100%',\n    padding: theme.spacing(5),\n    [theme.breakpoints.down('md')]: {\n      transform: 'scale(50%)',\n      padding: theme.spacing(2),\n      minWidth: '100%',\n    },\n  },\n  text: {\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '.875rem',\n    },\n  },\n}));\n\nconst PublishChannelPolling: React.FC = () => {\n  const classes = useStyles();\n  const { user } = useAuth0();\n  const [currentChannel, setCurrentChannelState] = useRecoilState<any>(\n    currentChannelState,\n  );\n  const [selectedPollAnswerId, setSelectedPollAnswerId] = React.useState<\n    number | null\n  >(null);\n\n  const {\n    data: getPollAnswerVotes,\n    loading: getPollAnswerVotesLoading,\n  } = useWatchPollAnswerVotesSubscription({\n    variables: {\n      pollAnswerId: selectedPollAnswerId ?? 0,\n    },\n  });\n\n  const { data, loading, error } = useWatchChannelPollQuestionSubscription({\n    variables: {\n      channelId: currentChannel?.id,\n    },\n  });\n\n  const [setPollAnswerVoteMutation] = useSetPollAnswerVoteMutation();\n\n  const totalVotes = () => {\n    let numbers: Array<any> = data?.getChannelPoll[0]?.poll_question\n      ?.poll_anwers!;\n    const count: any = [];\n    if (numbers !== undefined) {\n      numbers.map((num: any) => count.push(num.votes));\n      const result = count.reduce((a: number, b: number) => a + b);\n      return result;\n    } else {\n      return <Loader />;\n    }\n  };\n\n  const {\n    data: userVote,\n    loading: userVoteLoading,\n  } = useWatchCheckUserHasVotedSubscription({\n    variables: {\n      pollQuestionId: data?.getChannelPoll[0]?.poll_question?.id,\n      auth0UserId: user.sub,\n    },\n  });\n\n  const [setUserVotePollQuestionMutation] = useSetUserVotePollQuestionMutation({\n    variables: {\n      userName: user.username,\n      auth0UserId: user.sub,\n      pollQuestionId: data?.getChannelPoll[0]?.poll_question?.id,\n      pollAnswerId: selectedPollAnswerId,\n    },\n  });\n\n  const handleChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedPollAnswerId(parseInt(e.target.value));\n  };\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (selectedPollAnswerId === null) return;\n\n    let currentPollAnswerVotes = getPollAnswerVotes?.pollAnswerVotes[0].votes;\n\n    if (currentPollAnswerVotes !== undefined) {\n      currentPollAnswerVotes++;\n    }\n\n    if (currentPollAnswerVotes === undefined) return;\n    await setPollAnswerVoteMutation({\n      variables: {\n        pollAnswerId: selectedPollAnswerId,\n        newVote: currentPollAnswerVotes,\n      },\n    });\n\n    await setUserVotePollQuestionMutation({\n      variables: {\n        userName: user.nickname,\n        auth0UserId: user.sub,\n        pollQuestionId: data?.getChannelPoll[0]?.poll_question?.id,\n        pollAnswerId: selectedPollAnswerId,\n      },\n    });\n  };\n\n  if (loading || error || userVoteLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      {userVote?.user_votes?.length ? (\n        <Paper className={classes.pollCard}>\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            flexDirection=\"row\"\n            mb={3}\n          >\n            <Box>\n              <Typography variant=\"caption\">Anonymous poll</Typography>\n              {data?.getChannelPoll.map((channelPoll) => (\n                <Typography\n                  key={channelPoll.id}\n                  color=\"secondary\"\n                  variant=\"h2\"\n                  style={{ marginTop: 0 }}\n                >\n                  {channelPoll?.poll_question?.text}\n                </Typography>\n              ))}\n            </Box>\n            <ShowTotalVotes totalVotes={totalVotes()} />\n          </Box>\n\n          {data?.getChannelPoll[0]?.poll_question?.poll_anwers\n            .sort((a, b) => (a.id > b.id ? 1 : -1))\n            .map((pollVotes) => (\n              <ResultGraph\n                key={pollVotes.id}\n                answerId={pollVotes.id}\n                userVote={userVote?.user_votes[0]?.poll_answer_id}\n                pollVotes={pollVotes.votes}\n                text={pollVotes.text}\n                totalVotes={totalVotes()}\n              />\n            ))}\n        </Paper>\n      ) : (\n        <Paper className={classes.pollCard}>\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"flex-end\"\n            flexDirection=\"row\"\n            mb={3}\n          >\n            <Box>\n              <Typography variant=\"caption\">Anonymous poll</Typography>\n              <Typography variant=\"h2\" style={{ marginTop: 0 }}>\n                {data?.getChannelPoll[0]\n                  ? data?.getChannelPoll[0].poll_question?.text\n                  : 'no value'}\n              </Typography>\n            </Box>\n            <ShowTotalVotes totalVotes={totalVotes()} />\n          </Box>\n\n          <form onSubmit={handleSubmit}>\n            <FormControl component=\"fieldset\">\n              <RadioGroup\n                aria-label=\"poll\"\n                name=\"poll\"\n                value={selectedPollAnswerId}\n                onChange={handleChange}\n              >\n                {data?.getChannelPoll[0]?.poll_question?.poll_anwers\n                  .sort((a, b) => (a.id > b.id ? 1 : -1))\n                  .map((pollAnswer) => (\n                    <FormControlLabel\n                      key={pollAnswer.id}\n                      value={pollAnswer.id}\n                      control={\n                        <Radio\n                          value={pollAnswer.id}\n                          checked={selectedPollAnswerId === pollAnswer.id}\n                          onChange={handleChange}\n                        />\n                      }\n                      label={\n                        <Typography variant=\"body2\" className={classes.text}>\n                          {pollAnswer.text}\n                        </Typography>\n                      }\n                    />\n                  ))}\n              </RadioGroup>\n              <VoteButton enabled={false} />\n            </FormControl>\n          </form>\n        </Paper>\n      )}\n    </>\n  );\n};\n\nexport default PublishChannelPolling;\n","import React from 'react';\nimport { theme } from '../../theme/theme';\nimport { Badge, Box, Button, Popover } from '@material-ui/core';\nimport { useWatchChannelHasActivePollSubscription } from '../../api/generated/graphql';\nimport PopupState, { bindPopover } from 'material-ui-popup-state';\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\nimport Loader from '../shared/Loader';\nimport PublishChannelPolling from '../adminPollings/PublishChannelPolling';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { bindTrigger } from 'material-ui-popup-state/hooks';\nimport Logo from '../shared/Logo';\n\nconst useStyles = makeStyles((theme) => ({\n  popoverRoot: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100vw',\n  },\n  popupWidth: {\n    width: '30vw',\n    padding: theme.spacing(1),\n    [theme.breakpoints.down('lg')]: {\n      width: '40vw',\n    },\n    [theme.breakpoints.down('md')]: {\n      width: '50vw',\n    },\n    [theme.breakpoints.down('sm')]: {\n      width: '85vw',\n      margin: 0,\n    },\n    margin: theme.spacing(0),\n    paddingBottom: theme.spacing(2),\n  },\n  voteIcon: {\n    cursor: 'pointer',\n  },\n  badge: {\n    backgroundColor: '#44b700',\n    color: '#44b700',\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n    '&::after': {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      borderRadius: '50%',\n      animation: '$ripple 1.2s infinite ease-in-out',\n      border: '1px solid currentColor',\n      content: '\"\"',\n    },\n  },\n  '@keyframes ripple': {\n    '0%': {\n      transform: 'scale(.8)',\n      opacity: 1,\n    },\n    '100%': {\n      transform: 'scale(2.4)',\n      opacity: 0,\n    },\n  },\n}));\n\ninterface PollPopUpProps {\n  channelId: number;\n}\n\nconst PollPopUp: React.FC<PollPopUpProps> = ({ channelId }) => {\n  const classes = useStyles();\n  const { data, loading } = useWatchChannelHasActivePollSubscription({\n    variables: {\n      currentChannelId: channelId,\n    },\n  });\n\n  if (loading) {\n    return <Loader />;\n  }\n  return (\n    <>\n      {data?.poll_questions?.length === 1 ? (\n        <PopupState variant=\"popover\" popupId=\"pollingPopOver\">\n          {(popupState) => (\n            <>\n              <Badge variant=\"dot\" classes={{ badge: classes.badge }}>\n                <HowToVoteIcon\n                  color=\"primary\"\n                  {...bindTrigger(popupState)}\n                  className={classes.voteIcon}\n                />\n              </Badge>\n              <Popover\n                anchorReference={'none'} // set popup center window\n                classes={{\n                  root: classes.popoverRoot,\n                }}\n                {...bindPopover(popupState)}\n              >\n                <Box\n                  display=\"flex\"\n                  justifyContent=\"center\"\n                  alignItems=\"center\"\n                  flexDirection=\"column\"\n                  className={classes.popupWidth}\n                >\n                  <Logo />\n\n                  <PublishChannelPolling />\n                  <Button\n                    aria-label=\"close poll popover\"\n                    onClick={popupState.close}\n                    style={{ maxWidth: '10vw' }}\n                  >\n                    Close\n                  </Button>\n                </Box>\n              </Popover>\n            </>\n          )}\n        </PopupState>\n      ) : (\n        false\n      )}\n    </>\n  );\n};\n\nexport default PollPopUp;\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { IconButton } from '@material-ui/core';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\n\nconst Logout: React.FC = () => {\n  const { logout } = useAuth0();\n\n  return (\n    <>\n      <IconButton\n        color=\"primary\"\n        size=\"small\"\n        onClick={() => {\n          logout({\n            returnTo: process.env.REACT_APP_AUTH0_LOGOUT_URL,\n          });\n          window.localStorage.clear();\n        }}\n        aria-label=\"Logout\"\n      >\n        <ExitToAppIcon />\n      </IconButton>\n    </>\n  );\n};\n\nexport default Logout;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Drawer, makeStyles, Toolbar } from '@material-ui/core';\n\nconst drawerWidth = '100%';\n\nconst useStyles = makeStyles((theme) => ({\n  toolbar: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'flex-start',\n    [theme.breakpoints.up('md')]: {\n      paddingTop: theme.spacing(0),\n      paddingBottom: theme.spacing(5),\n    },\n    [theme.breakpoints.down('md')]: {\n      paddingTop: theme.spacing(0),\n      paddingLeft: theme.spacing(0),\n      paddingRight: theme.spacing(0),\n      paddingBottom: theme.spacing(2),\n    },\n    borderTop: 1,\n    borderTopStyle: 'solid',\n    borderTopColor: theme.palette.primary.dark,\n  },\n  drawerPaper: {\n    height: '100vh',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.easeInOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: drawerWidth,\n  },\n}));\n\ninterface MenuBarDrawerProps {\n  children: any;\n  open: boolean;\n}\n\nconst MenuBarDrawer: React.FC<MenuBarDrawerProps> = ({ children, open }) => {\n  const classes = useStyles();\n\n  return (\n    <Drawer\n      variant=\"temporary\"\n      elevation={0}\n      anchor=\"left\"\n      classes={{\n        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n      }}\n      open={open}\n    >\n      <Toolbar className={classes.toolbar}>{children}</Toolbar>\n    </Drawer>\n  );\n};\n\nexport default MenuBarDrawer;\n","import React from 'react';\nimport { theme } from '../../theme/theme';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Badge, Box, Chip, Tooltip } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport PeopleIcon from '@material-ui/icons/People';\nimport FaceIcon from '@material-ui/icons/Face';\nimport Loader from './Loader';\nimport { useWatchOnlineUsersSubscription } from '../../api/generated/graphql';\n\ninterface OnlineUsersProps {\n  user_id: string;\n}\n\nconst UserStatus: React.FC<OnlineUsersProps> = ({ user_id }) => {\n  const { data, loading, error } = useWatchOnlineUsersSubscription();\n  const { user } = useAuth0();\n  const usersOnline = data?.users.length ?? 0;\n\n  if (error) {\n    return <Alert severity=\"error\">Online users could not be loaded.</Alert>;\n  }\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <Box\n      display=\"flex\"\n      flex=\"1\"\n      justifyContent=\"flex-end\"\n      alignItems=\"center\"\n      style={{\n        marginRight: theme.spacing(3),\n        marginLeft: theme.spacing(2),\n      }}\n    >\n      <Chip\n        variant=\"outlined\"\n        color=\"primary\"\n        size=\"small\"\n        icon={<FaceIcon />}\n        label={user.nickname}\n        style={{ marginRight: 30 }}\n      />\n      <Tooltip title=\"Users online\" aria-label=\"Unsers online\" placement=\"top\">\n        <Badge color=\"secondary\" badgeContent={usersOnline}>\n          <PeopleIcon color=\"primary\" />\n        </Badge>\n      </Tooltip>\n    </Box>\n  );\n};\n\nexport default UserStatus;\n","import React, { useState, useEffect } from 'react';\nimport {\n  useWatchMessagesSubscription,\n  useWatchMessageCursorSubscription,\n} from '../../api/generated/graphql';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Chip } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    '& > *': {\n      margin: theme.spacing(0.5),\n    },\n  },\n  item: {\n    height: '16px',\n  },\n}));\n\ninterface UnreadMessageCounterProps {\n  channelId: number;\n}\n\nconst UnreadMessageCounter: React.FC<UnreadMessageCounterProps> = ({\n  channelId,\n}) => {\n  const classes = useStyles();\n  const { user, error: auth0Error } = useAuth0();\n  const [count, setCount] = useState<number | undefined>(0);\n\n  const { data, loading, error } = useWatchMessagesSubscription({\n    variables: {\n      channelId,\n    },\n    fetchPolicy: 'network-only',\n  });\n\n  const {\n    data: useWatchMessageCursorData,\n    loading: useWatchMessageCursorLoading,\n    error: useWatchMessageCursorError,\n  } = useWatchMessageCursorSubscription({\n    variables: {\n      user_id: user.sub,\n      channel_id: channelId,\n    },\n  });\n\n  useEffect(() => {\n    let messageId =\n      useWatchMessageCursorData?.message_cursor[0]?.message_id ?? undefined;\n\n    let messageCounterArray = data?.messages.filter((m) => {\n      if (messageId === undefined) return false;\n      return m.id > messageId;\n    });\n\n    setCount(messageCounterArray?.length);\n  }, [data, useWatchMessageCursorData]);\n\n  if (error || useWatchMessageCursorError || auth0Error) {\n    console.log(\n      'Error in MessageCounter Component',\n      error,\n      useWatchMessageCursorError,\n      auth0Error,\n    );\n  }\n\n  if (loading || useWatchMessageCursorLoading) {\n    return <React.Fragment></React.Fragment>;\n  }\n\n  return (\n    <>\n      {count && count !== undefined ? (\n        <div className={classes.root}>\n          <Chip\n            variant=\"outlined\"\n            size=\"small\"\n            label={count}\n            color=\"secondary\"\n            className={classes.item}\n          />\n        </div>\n      ) : (\n        ''\n      )}\n    </>\n  );\n};\n\nexport default UnreadMessageCounter;\n","import React, { useState } from 'react';\nimport { useWatchChannelsSubscription } from '../../api/generated/graphql';\nimport { Channel_Type_Enum } from '../../api/generated/graphql';\nimport { useRecoilState } from 'recoil';\nimport { currentChannelState } from '../../atom';\nimport {\n  Collapse,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport Loader from '../shared/Loader';\nimport PeopleIcon from '@material-ui/icons/People';\nimport PeopleOutlineIcon from '@material-ui/icons/PeopleOutline';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport EnhancedEncryptionOutlinedIcon from '@material-ui/icons/EnhancedEncryptionOutlined';\nimport UnreadMessageCounter from './UnreadMessageCounter';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link, useRouteMatch } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  badge: {\n    backgroundColor: '#0f0',\n  },\n}));\n\nconst Channels: React.FC<any> = () => {\n  const classes = useStyles();\n  const [currentChannel] = useRecoilState<any>(currentChannelState);\n  const [open, setOpen] = useState(true);\n  const match = useRouteMatch(`/channel/${currentChannel?.name}`);\n\n  const activeLink = () => {\n    return match ? 'secondary' : 'primary';\n  };\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  const { data, loading, error } = useWatchChannelsSubscription({\n    variables: {\n      channel_type: Channel_Type_Enum.ChatMessage,\n    },\n  });\n\n  if (error) {\n    return <Alert severity=\"error\">Channels could not be loaded.</Alert>;\n  }\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      <List component=\"div\" className={classes.root}>\n        <ListItem button onClick={handleClick} aria-label=\"open channel list\">\n          <ListItemIcon>\n            <PeopleOutlineIcon />\n          </ListItemIcon>\n          <ListItemText>\n            <Typography variant=\"h6\">Channels</Typography>\n          </ListItemText>\n          {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={open} timeout=\"auto\">\n          <List component=\"div\">\n            {data?.channels?.map((data: any, index) => (\n              <ListItem\n                key={index}\n                button\n                component={Link}\n                to={'/channel/' + data.name}\n                aria-label={`go to channel ${data.name}`}\n              >\n                {data?.id === currentChannel?.id ? (\n                  <>\n                    <ListItemIcon>\n                      {data.is_private === true ? (\n                        <EnhancedEncryptionOutlinedIcon color={activeLink()} />\n                      ) : (\n                        <PeopleIcon color={activeLink()} />\n                      )}\n                    </ListItemIcon>\n                    <ListItemText>\n                      <Typography variant=\"h6\" color={activeLink()}>\n                        {data.name}\n                      </Typography>\n                    </ListItemText>\n                  </>\n                ) : (\n                  <>\n                    <ListItemIcon>\n                      {data.is_private === true ? (\n                        <EnhancedEncryptionOutlinedIcon />\n                      ) : (\n                        <PeopleIcon />\n                      )}\n                    </ListItemIcon>\n                    <ListItemText primary={data?.name} />\n                    <UnreadMessageCounter channelId={data.id} />\n                  </>\n                )}\n              </ListItem>\n            ))}\n          </List>\n        </Collapse>\n      </List>\n    </>\n  );\n};\n\nexport default Channels;\n","import React from 'react';\nimport {\n  Collapse,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport Alert from '@material-ui/lab/Alert';\nimport PersonIcon from '@material-ui/icons/Person';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Loader from '../shared/Loader';\nimport { Link, useHistory, useRouteMatch } from 'react-router-dom';\nimport { useWatchDirectMessageChannelsSubscription } from '../../api/generated/graphql';\nimport { Channel_Type_Enum } from '../../api/generated/graphql';\nimport UnreadMessageCounter from './UnreadMessageCounter';\nimport { makeStyles } from '@material-ui/core/styles';\nimport OnlineUserStatus from '../shared/OnlineUserStatus';\nimport { useRecoilState } from 'recoil';\nimport { currentChannelState } from '../../atom';\n\nconst useStyles = makeStyles((theme) => ({\n  nested: {\n    paddingLeft: theme.spacing(0),\n  },\n  form: {\n    flexGrow: 1,\n    margin: theme.spacing(2),\n  },\n  submit: {\n    marginTop: theme.spacing(2),\n  },\n  itemText: {\n    color: theme.palette.primary.light,\n    fontWeight: 700,\n  },\n  link: {\n    color: '#0288D1',\n    fontSize: '0.875rem',\n  },\n}));\n\ninterface DirectMessageUserListProps {\n  user_id: string;\n}\n\nconst DirectMessageUserList: React.FC<DirectMessageUserListProps> = ({\n  user_id,\n}) => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n  let history = useHistory();\n  const [currentChannel] = useRecoilState<any>(currentChannelState);\n  const match = useRouteMatch(`/channel/${currentChannel?.name}`);\n\n  const { data, loading, error } = useWatchDirectMessageChannelsSubscription({\n    variables: {\n      channel_type: Channel_Type_Enum.DirectMessage,\n      user_id,\n    },\n  });\n\n  if (error) {\n    console.log('error', error);\n    return (\n      <Alert severity=\"error\">A DirectMessageUserListError occured.</Alert>\n    );\n  }\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  const activeLink = () => {\n    return match ? 'secondary' : 'primary';\n  };\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  const navigateToAddDirectMessageChannelMembers = () => {\n    history.push(`/addDirectMessageChannelMembers`);\n  };\n\n  return (\n    <>\n      <List component=\"div\">\n        <ListItem button onClick={handleClick}>\n          <ListItemIcon aria-label=\"open direct message list\">\n            <PersonIcon />\n          </ListItemIcon>\n          <ListItemText>\n            <Typography variant=\"h6\">Direct Messages</Typography>\n          </ListItemText>\n          <ListItemIcon>\n            <AddCircleOutlineIcon\n              color=\"secondary\"\n              onClick={navigateToAddDirectMessageChannelMembers}\n            />\n          </ListItemIcon>\n          {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={open} timeout=\"auto\">\n          <List component=\"div\">\n            {data?.channels.map((data: any) => (\n              <ListItem\n                button\n                component={Link}\n                key={data.name}\n                className={classes.link}\n                to={'/channel/' + data.name}\n                aria-label={data.user_channels[0]?.user.username}\n              >\n                <OnlineUserStatus user={data.user_channels[0]?.user} />\n                {data?.id === currentChannel?.id ? (\n                  <>\n                    <ListItemText>\n                      <Typography variant=\"h6\" color={activeLink()}>\n                        {data.user_channels[0]?.user.username}\n                      </Typography>\n                    </ListItemText>\n                  </>\n                ) : (\n                  <>\n                    <ListItemText>\n                      <Typography variant=\"h6\">\n                        {data.user_channels[0]?.user.username}\n                      </Typography>\n                    </ListItemText>\n                    <UnreadMessageCounter channelId={data.id} />\n                  </>\n                )}\n              </ListItem>\n            ))}\n          </List>\n        </Collapse>\n      </List>\n    </>\n  );\n};\n\nexport default DirectMessageUserList;\n","import React, { useState } from 'react';\nimport { Alert } from '@material-ui/lab';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport {\n  useAddChannelMutation,\n  useInsertMessageMutation,\n  Channel_Type_Enum,\n} from '../../api/generated/graphql';\nimport Loader from '../shared/Loader';\nimport {\n  Button,\n  Checkbox,\n  Collapse,\n  FormControlLabel,\n  Grid,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  TextField,\n  Typography,\n  Snackbar,\n} from '@material-ui/core';\nimport { theme } from '../../theme/theme';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\nimport GroupAddOutlinedIcon from '@material-ui/icons/GroupAddOutlined';\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\nimport { useHistory } from 'react-router';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  nested: {\n    paddingLeft: theme.spacing(0),\n  },\n  form: {\n    flexGrow: 1,\n    margin: theme.spacing(2),\n    marginTop: theme.spacing(0),\n  },\n  checkbox: {\n    color: theme.palette.secondary.main,\n  },\n  submit: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst AddChannel: React.FC = () => {\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n  const [open, setOpen] = React.useState(false);\n  const [openAlert, setOpenAlert] = React.useState(true);\n  const [channelName, setChannelName] = useState('');\n  const [channelIsPrivate, setChannelIsPrivate] = useState(false);\n  const { user } = useAuth0();\n\n  const [addChannel, { data, loading, error }] = useAddChannelMutation();\n\n  const [\n    sendMessage,\n    { data: sendUpdateMessageData },\n  ] = useInsertMessageMutation();\n\n  const { user: userAuth0, isLoading: loadingAuth0 } = useAuth0();\n  let history = useHistory();\n\n  const setSnackbarPosition = () => {\n    switch (matches) {\n      case true:\n        return 'right';\n      case false:\n        return 'center';\n\n      default:\n        return 'right';\n    }\n  };\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  const handleAlert = () => {\n    setOpenAlert(!openAlert);\n  };\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!channelName) return;\n    setOpenAlert(true);\n\n    const dataAddChannel = await addChannel({\n      variables: {\n        channel: {\n          owner_id: userAuth0.sub,\n          name: channelName.toLocaleLowerCase(),\n          is_private: channelIsPrivate,\n          channel_type: Channel_Type_Enum.ChatMessage,\n        },\n      },\n    });\n\n    await sendMessage({\n      variables: {\n        message: {\n          user_id: 'admin',\n          text: `Welcome to channel ${dataAddChannel.data?.insert_channel?.returning[0]?.name}`,\n          channel_id: dataAddChannel.data?.insert_channel?.returning[0]?.id,\n        },\n      },\n    });\n\n    setOpen(false);\n    setChannelName('');\n\n    history.push(`/channel/${channelName.toLocaleLowerCase()}`);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setChannelName(e.target.value);\n  };\n\n  const handleIsPrivateChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setChannelIsPrivate(e.target.checked);\n  };\n\n  if (error) {\n    console.log('error mutation', error);\n  }\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <List component=\"div\">\n      <ListItem id=\"collapse_add_channel\" button onClick={handleClick}>\n        <ListItemIcon aria-label=\"open add channel\">\n          {open ? <GroupAddIcon /> : <GroupAddOutlinedIcon />}\n        </ListItemIcon>\n        <ListItemText primary=\"Add Channel\" />\n        {open ? (\n          <RemoveCircleIcon fontSize=\"small\" />\n        ) : (\n          <AddCircle color=\"secondary\" fontSize=\"small\" />\n        )}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        {(loadingAuth0 || loading) && <Loader />}\n        <List component=\"div\">\n          {error && (\n            <ListItem className={classes.nested}>\n              <Snackbar\n                open={openAlert}\n                autoHideDuration={5000}\n                onClose={handleAlert}\n                anchorOrigin={{\n                  vertical: 'top',\n                  horizontal: setSnackbarPosition(),\n                }}\n              >\n                <Alert severity={'error'} onClose={handleAlert}>\n                  You can not use this name as it is already taken.\n                </Alert>\n              </Snackbar>\n            </ListItem>\n          )}\n          {data && (\n            <ListItem className={classes.nested}>\n              <Snackbar\n                open={openAlert}\n                autoHideDuration={5000}\n                onClose={handleAlert}\n                anchorOrigin={{\n                  vertical: 'top',\n                  horizontal: setSnackbarPosition(),\n                }}\n              >\n                <Alert severity={'success'} onClose={handleAlert}>\n                  Channel has been added.\n                </Alert>\n              </Snackbar>\n            </ListItem>\n          )}\n          <ListItem component=\"div\" className={classes.nested}>\n            <Grid container>\n              <form\n                id=\"add_channel\"\n                className={classes.form}\n                noValidate\n                autoComplete=\"off\"\n                onSubmit={handleSubmit}\n              >\n                <Grid item xs={12}>\n                  <TextField\n                    disabled={loadingAuth0 || loading}\n                    value={channelName}\n                    autoFocus={false}\n                    onChange={handleChange}\n                    autoComplete=\"off\"\n                    placeholder=\"Your channel name\"\n                    id=\"add-channel-input\"\n                    label=\"Add a new channel\"\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={channelIsPrivate}\n                        onChange={handleIsPrivateChange}\n                        color=\"secondary\"\n                        name=\"private\"\n                        className={classes.checkbox}\n                      />\n                    }\n                    label={\n                      <Typography variant=\"caption\" color=\"textSecondary\">\n                        Private Channel\n                      </Typography>\n                    }\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Button\n                    disabled={loadingAuth0 || loading}\n                    type=\"submit\"\n                    value=\"Submit\"\n                    endIcon={<AddCircle />}\n                    className={classes.submit}\n                    variant=\"outlined\"\n                    arial-label=\"Add channel\"\n                  >\n                    Add new channel\n                  </Button>\n                </Grid>\n              </form>\n            </Grid>\n          </ListItem>\n        </List>\n      </Collapse>\n    </List>\n  );\n};\n\nexport default AddChannel;\n","import React from 'react';\nimport {\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport ForumOutlinedIcon from '@material-ui/icons/ForumOutlined';\nimport { Link, useRouteMatch } from 'react-router-dom';\n\nconst ThreadsLink: React.FC<any> = () => {\n  const match = useRouteMatch('/channel/threads');\n\n  const activeLink = () => {\n    return match ? 'secondary' : 'primary';\n  };\n\n  return (\n    <>\n      <ListItem\n        button\n        component={Link}\n        to=\"/channel/threads\"\n        aria-label=\"Open Threads\"\n      >\n        <ListItemIcon>\n          <ForumOutlinedIcon />\n        </ListItemIcon>\n        <ListItemText>\n          <Typography variant=\"h6\" color={activeLink()}>\n            Threads\n          </Typography>\n        </ListItemText>\n      </ListItem>\n    </>\n  );\n};\n\nexport default ThreadsLink;\n","import React from 'react';\nimport {\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\nimport { Link, useRouteMatch } from 'react-router-dom';\n\nconst DashboardLink: React.FC = () => {\n  const match = useRouteMatch('/dashboard');\n\n  const activeLink = () => {\n    return match ? 'secondary' : 'primary';\n  };\n\n  return (\n    <>\n      <ListItem\n        button\n        component={Link}\n        to=\"/dashboard\"\n        aria-label=\"Open Dashboard\"\n      >\n        <ListItemIcon>\n          <HowToVoteIcon />\n        </ListItemIcon>\n        <ListItemText>\n          <Typography variant=\"h6\" color={activeLink()}>\n            Polling\n          </Typography>\n        </ListItemText>\n      </ListItem>\n    </>\n  );\n};\n\nexport default DashboardLink;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Box, Divider, Grid, IconButton } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { theme } from '../../theme/theme';\nimport ArrowForwardIos from '@material-ui/icons/ArrowForwardIos';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport UserStatus from './UserStatus';\nimport ChannelList from '../chat/ChannelList';\nimport DirectMessageUserList from '../chat/DirectMessageUserList';\nimport Logout from '../Logout';\nimport AddChannel from '../chat/AddChannel';\nimport ThreadsLink from '../shared/ThreadsLink';\nimport DashBoardLink from '../shared/DashBoardLink';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n    overflowY: 'scroll',\n    WebkitOverflowScrolling: 'touch',\n    [theme.breakpoints.up('sm')]: {\n      paddingBottom: theme.spacing(5),\n    },\n    [theme.breakpoints.down('sm')]: {\n      height: '100vh',\n    },\n  },\n  branding: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  logo: {\n    [theme.breakpoints.down('md')]: {\n      width: '150px',\n    },\n    [theme.breakpoints.up('md')]: {\n      width: '200px',\n    },\n  },\n  menuButton: {\n    width: theme.spacing(5),\n    height: theme.spacing(5),\n    backgroundColor: theme.palette.secondary.main,\n    marginLeft: 4,\n    '& .MuiIconButton-label': {\n      marginRight: 4,\n    },\n    justifyContent: 'flex-end',\n    marginTop: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n\n    [theme.breakpoints.up('md')]: {\n      display: 'none',\n    },\n  },\n  logout: {\n    paddingRight: theme.spacing(1),\n    height: 100,\n  },\n}));\n\ninterface SidebarProps {\n  handleDrawerClose: () => void;\n  open: boolean;\n}\n\nconst SideBar: React.FC<SidebarProps> = ({ handleDrawerClose, open }) => {\n  const classes = useStyles();\n  const { user } = useAuth0();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n  const { isAuthenticated } = useAuth0();\n  const role = localStorage.getItem(user.sub);\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        flex={1}\n        justifyContent=\"flex-start\"\n        alignItems=\"flex-start\"\n        className={classes.root}\n      >\n        <Box\n          display=\"flex\"\n          justifyContent=\"flex-start\"\n          flex={1}\n          flexDirection=\"column\"\n        >\n          {matches === true && (\n            <Grid item xs={12} className={classes.branding}>\n              <img\n                alt=\"The Great Chicken Fest\"\n                src=\"/the-great-chicken-fest.svg\"\n                className={classes.logo}\n              />\n            </Grid>\n          )}\n          <Grid item xs={12}>\n            <Box\n              display=\"flex\"\n              justifyContent=\"space-between\"\n              alignItems=\"center\"\n              style={{\n                marginTop: theme.spacing(0),\n                marginLeft: theme.spacing(1),\n              }}\n            >\n              <IconButton\n                aria-label=\"open menu\"\n                onClick={handleDrawerClose}\n                color=\"inherit\"\n                size=\"medium\"\n                className={clsx(classes.menuButton, open)}\n              >\n                <ArrowForwardIos />\n              </IconButton>\n              <UserStatus user_id={user.sub} />\n            </Box>\n            <Divider\n              style={{\n                marginTop: theme.spacing(1),\n                marginBottom: theme.spacing(2),\n              }}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            {isAuthenticated ? (\n              <>\n                <DirectMessageUserList user_id={user.sub} />\n                <Divider />\n                {role === 'admin' && <DashBoardLink />}\n                <ThreadsLink />\n                <Divider />\n                <ChannelList />\n                <Divider />\n                <AddChannel />\n                <Divider />\n              </>\n            ) : (\n              ''\n            )}\n            <Box\n              display=\"flex\"\n              justifyContent=\"flex-end\"\n              alignItems=\"flex-start\"\n              className={classes.logout}\n            >\n              <Logout />\n            </Box>\n          </Grid>\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport default SideBar;\n","import React from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { Chip } from '@material-ui/core';\nimport PeopleIcon from '@material-ui/icons/People';\nimport { useWatchUsersWhoHaveSubscribedToChannelSubscription } from '../../api/generated/graphql';\nimport Loader from './Loader';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  title: {\n    width: 180,\n    maxWidth: theme.spacing(22),\n  },\n}));\n\ninterface UserHeaderProps {\n  user: string;\n  channelId: number;\n}\n\nconst UserHeader: React.FC<UserHeaderProps> = ({ user, channelId }) => {\n  const classes = useStyles();\n\n  const { data, loading } = useWatchUsersWhoHaveSubscribedToChannelSubscription(\n    {\n      variables: {\n        channel_id: channelId,\n        user_id: user,\n      },\n    },\n  );\n\n  if (loading) return <Loader />;\n\n  return (\n    <Chip\n      size=\"small\"\n      variant=\"outlined\"\n      color=\"primary\"\n      label={data?.channel[0]?.user_channels[0]?.user?.username}\n      icon={<PeopleIcon />}\n      className={classes.title}\n      aria-label={`channel: ${data?.channel[0]?.user_channels[0]?.user?.username}`}\n    />\n  );\n};\n\nexport default UserHeader;\n","import React from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { theme } from '../../theme/theme';\nimport { useRecoilState } from 'recoil';\nimport { Box, Button, Chip, IconButton } from '@material-ui/core';\nimport { currentChannelState } from '../../atom';\nimport PeopleIcon from '@material-ui/icons/People';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport PollPopUp from '../../components/adminPollings/PollPopup';\nimport Logout from '../Logout';\nimport MenuBarDrawer from '../shared/MenuBarDrawer';\nimport SideBar from '../shared/SideBar';\nimport UserHeader from '../shared/UserHeader';\nimport { Channel_Type_Enum } from '../../api/generated/graphql';\nimport { useHistory } from 'react-router';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    justifyContent: 'space-between',\n    backgroundColor: theme.palette.background.default,\n    marginTop: theme.spacing(0),\n    paddingTop: theme.spacing(2),\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    zIndex: 1000,\n    [theme.breakpoints.up('md')]: {\n      position: 'fixed',\n      width: '75vw',\n    },\n    [theme.breakpoints.down('md')]: {\n      position: 'fixed',\n    },\n  },\n  outerContainer: {\n    paddingBottom: '75px',\n  },\n  menuButton: {\n    width: theme.spacing(5),\n    height: theme.spacing(5),\n    backgroundColor: theme.palette.secondary.main,\n    marginLeft: theme.spacing(0),\n    '& .MuiIconButton-label': {\n      marginLeft: theme.spacing(1),\n    },\n  },\n  title: {\n    width: 180,\n    maxWidth: theme.spacing(22),\n  },\n}));\n\ninterface MobileHeaderMenuProps {\n  channelName: string;\n  channel?: string;\n  user?: string;\n  showAddUserButton?: boolean;\n  isThreadList?: boolean;\n}\n\nconst MobileHeaderMenu: React.FC<MobileHeaderMenuProps> = ({\n  channelName,\n  user,\n  showAddUserButton,\n  channel,\n  isThreadList,\n}) => {\n  const classes = useStyles();\n  const [currentChannel] = useRecoilState<any>(currentChannelState);\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n  const [open, setOpen] = React.useState(false);\n  let history = useHistory();\n\n  const handleDrawerOpen = () => {\n    if (channel) {\n      history.push(`/channel/${channel}`);\n      return;\n    }\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const navigateToAddChannelMembers = () => {\n    history.push(`/addChannelMembers`);\n  };\n\n  return (\n    <Box component=\"article\" className={classes.outerContainer}>\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        flexDirection=\"row\"\n        width={1}\n        className={classes.root}\n        component=\"nav\"\n      >\n        {matches === false && (\n          <IconButton\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"open menu\"\n            onClick={handleDrawerOpen}\n          >\n            <ArrowBackIosIcon />\n          </IconButton>\n        )}\n        {currentChannel?.channel_type === Channel_Type_Enum.DirectMessage &&\n          user && <UserHeader channelId={currentChannel.id} user={user} />}\n        {currentChannel?.channel_type === Channel_Type_Enum.ChatMessage &&\n          currentChannel?.is_private === false &&\n          !isThreadList && (\n            <Chip\n              size=\"small\"\n              variant=\"outlined\"\n              color=\"primary\"\n              label={channelName}\n              icon={<PeopleIcon />}\n              className={classes.title}\n              aria-label={`channel: ${channelName}`}\n            />\n          )}\n        {currentChannel?.channel_type === Channel_Type_Enum.ChatMessage &&\n          currentChannel?.is_private === true &&\n          !isThreadList &&\n          !showAddUserButton && (\n            <Chip\n              size=\"small\"\n              variant=\"outlined\"\n              color=\"primary\"\n              label={channelName}\n              icon={<PeopleIcon />}\n              className={classes.title}\n              aria-label={`channel: ${channelName}`}\n            />\n          )}\n        {isThreadList && (\n          <Chip\n            size=\"small\"\n            variant=\"outlined\"\n            color=\"primary\"\n            label={channelName}\n            icon={<PeopleIcon />}\n            className={classes.title}\n            aria-label={`channel: ${channelName}`}\n          />\n        )}\n        {currentChannel?.channel_type === Channel_Type_Enum.ChatMessage &&\n          currentChannel?.is_private === true &&\n          showAddUserButton && (\n            <Box display=\"flex\" justifyContent=\"center\" component=\"article\">\n              <Button\n                color=\"secondary\"\n                variant=\"contained\"\n                type=\"button\"\n                onClick={navigateToAddChannelMembers}\n                aria-label=\"add user to channel\"\n              >\n                Add users to channel\n              </Button>\n            </Box>\n          )}\n        <PollPopUp channelId={currentChannel?.id} />\n        <Logout />\n      </Box>\n      <MenuBarDrawer open={open}>\n        <SideBar handleDrawerClose={handleDrawerClose} open={open} />\n      </MenuBarDrawer>\n    </Box>\n  );\n};\n\nexport default MobileHeaderMenu;\n","import React from 'react';\nimport { Alert } from '@material-ui/lab';\nimport {\n  Box,\n  Divider,\n  Grid,\n  List,\n  ListItem,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport {\n  useWatchUsersWhoHaveNotSubscribedToChannelSubscription,\n  useAddChannelUserMutation,\n} from '../../api/generated/graphql';\nimport { useRecoilState } from 'recoil';\nimport { currentChannelState } from '../../atom';\nimport { useHistory } from 'react-router-dom';\nimport Loader from '../shared/Loader';\nimport Logo from '../shared/Logo';\nimport { makeStyles } from '@material-ui/core/';\nimport OnlineUserStatus from '../shared/OnlineUserStatus';\nimport MobileHeaderMenu from './MobileHeaderMenu';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    overflowY: 'scroll',\n    height: '100vh',\n  },\n  spacer: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nconst AddChannelMembers: React.FC = () => {\n  const classes = useStyles();\n  let history = useHistory();\n  const { isLoading: loadingAuth0 } = useAuth0();\n\n  const [currentChannel, setCurrentChannel] = useRecoilState<any>(\n    currentChannelState,\n  );\n\n  if (!currentChannel) history.push('/channel/general');\n\n  const {\n    data: users,\n    loading,\n    error,\n  } = useWatchUsersWhoHaveNotSubscribedToChannelSubscription({\n    variables: {\n      user_id: currentChannel?.owner_id,\n      channel_id: currentChannel?.id,\n    },\n  });\n\n  const [\n    addChannelUserMutation,\n    { error: addChannelUserError },\n  ] = useAddChannelUserMutation();\n\n  const handleUsersToggle = async (event: any, user_id: string) => {\n    await addChannelUserMutation({\n      variables: {\n        channel_id: currentChannel?.id,\n        user_id,\n      },\n    });\n  };\n\n  const handleClick = () => {\n    history.push(`/channel/${currentChannel?.name}`);\n  };\n\n  if (error || addChannelUserError)\n    console.log('error on user subscription', error);\n\n  return (\n    <>\n      <Grid item xs={12} md={9} className={classes.root} component=\"section\">\n        <MobileHeaderMenu channelName={currentChannel?.name} />\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n          <Logo />\n        </Box>\n        <Box\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          flexDirection=\"column\"\n          mt={0}\n          mb={5}\n        >\n          <Typography id=\"simple-modal-title\" variant=\"h2\">\n            Add users to {currentChannel?.name}\n          </Typography>\n          <Typography\n            color=\"secondary\"\n            variant=\"caption\"\n            id=\"simple-modal-description\"\n          >\n            {users && users.user.length > 0\n              ? 'Select users that you wanna add to this channel.'\n              : 'All users have subscribed to this channel.'}\n          </Typography>\n        </Box>\n        <Box>\n          {error && (\n            <Alert severity={'error'}>\n              Error - something weird happened...\n            </Alert>\n          )}\n\n          {(loadingAuth0 || loading) && <Loader />}\n\n          {!(loadingAuth0 || loading || error) && (\n            <>\n              <Divider className={classes.spacer} />\n              <List\n                component=\"nav\"\n                aria-label=\"secondary mailbox folders\"\n                className={classes.spacer}\n              >\n                {users &&\n                  users.user.map((u: any, index) => {\n                    return (\n                      <ListItem\n                        button\n                        key={index}\n                        onClick={(event) =>\n                          handleUsersToggle(event, u.auth0_user_id)\n                        }\n                      >\n                        <OnlineUserStatus user={u} />\n                        <ListItemText primary={u.username} />\n                      </ListItem>\n                    );\n                  })}\n              </List>\n              <Divider className={classes.spacer} />\n            </>\n          )}\n        </Box>\n      </Grid>\n    </>\n  );\n};\n\nexport default AddChannelMembers;\n","import React, { useEffect, useState } from 'react';\nimport {\n  Box,\n  Divider,\n  Grid,\n  List,\n  ListItem,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport {\n  useValidateAndAddDirectMessageChannelMutation,\n  useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription,\n  useUpsertMessageCursorMutation,\n  useInsertMessageMutation,\n} from '../../api/generated/graphql';\nimport { Alert } from '@material-ui/lab';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useHistory } from 'react-router';\nimport Loader from '../shared/Loader';\nimport Logo from '../shared/Logo';\nimport { makeStyles } from '@material-ui/core/styles';\nimport OnlineUserStatus from '../shared/OnlineUserStatus';\nimport MobileHeaderMenu from './MobileHeaderMenu';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    overflowY: 'scroll',\n    height: '100vh',\n  },\n  spacer: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nconst AddDirectMessageChannel: React.FC = () => {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = useState(null);\n  const { user } = useAuth0();\n  const [users, setUsers] = useState<any>(null);\n  const user_id = user.sub;\n  let history = useHistory();\n\n  const {\n    data,\n    loading,\n    error,\n  } = useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription({\n    variables: {\n      user_id,\n    },\n  });\n\n  const [\n    upsertMessageCursorMutation,\n    { error: upsertMessageError },\n  ] = useUpsertMessageCursorMutation();\n\n  const [\n    sendMessage,\n    { error: sendUpdateMessageError },\n  ] = useInsertMessageMutation();\n\n  const [\n    validateAndAddDirectMessageChannelMutation,\n    { error: addDMError },\n  ] = useValidateAndAddDirectMessageChannelMutation();\n\n  useEffect(() => {\n    const checkUserSubscriptions = async () => {\n      return data?.user.filter((u) => {\n        return (\n          u.user_channels.filter((user_channel) => {\n            return user_channel.channel.user_channels.length === 1;\n          }).length === 0\n        );\n      });\n    };\n    const check = async () => {\n      const users = await checkUserSubscriptions();\n      setUsers(users);\n    };\n    check();\n  }, [data]);\n\n  if (error || addDMError || upsertMessageError || sendUpdateMessageError) {\n    console.log('error', addDMError);\n    return <Alert severity=\"error\">Fetching users error...</Alert>;\n  }\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  const handleAddUser = async (user_id: string, dm_user: string) => {\n    setAnchorEl(null);\n    const { data } = await validateAndAddDirectMessageChannelMutation({\n      variables: {\n        name: uuidv4(),\n        user_id1: user_id,\n        user_id2: dm_user,\n      },\n    });\n\n    await sendMessage({\n      variables: {\n        message: {\n          user_id: 'admin',\n          text: `Welcome to your new direct message channel`,\n          channel_id: data?.validateAndAddDirectMessageChannel?.id,\n        },\n      },\n    });\n\n    if (\n      data?.validateAndAddDirectMessageChannel?.id &&\n      data?.validateAndAddDirectMessageChannel?.id > 0\n    )\n      upsertMessageCursorMutation({\n        variables: {\n          channel_id: data?.validateAndAddDirectMessageChannel?.id,\n          message_id: 1,\n          user_id: dm_user,\n        },\n      });\n\n    history.push(`/channel/${data?.validateAndAddDirectMessageChannel?.name}`);\n  };\n\n  const handleClick = () => {\n    history.push(`/channel/general`);\n  };\n\n  return (\n    <>\n      <Grid item xs={12} md={9} className={classes.root} component=\"section\">\n        <MobileHeaderMenu channelName={'general'} />\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n          <Logo />\n        </Box>\n        <Box\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          flexDirection=\"column\"\n          mb={5}\n        >\n          <Typography variant=\"h2\">Add a user</Typography>\n          <Typography\n            color=\"secondary\"\n            variant=\"caption\"\n            id=\"simple-modal-description\"\n          >\n            {users?.length\n              ? 'Select users that you wanna send direct messages to.'\n              : ''}\n          </Typography>\n        </Box>\n        <Box mb={5}>\n          <Divider className={classes.spacer} />\n          {users?.length && (\n            <List className={classes.spacer}>\n              {users?.map((dm_user: any, index: any) => {\n                return (\n                  <ListItem\n                    button\n                    key={index}\n                    onClick={() =>\n                      handleAddUser(user_id, dm_user.auth0_user_id)\n                    }\n                  >\n                    <OnlineUserStatus user={dm_user} />\n                    <ListItemText primary={dm_user.username} />\n                  </ListItem>\n                );\n              })}\n            </List>\n          )}\n          {users?.length === 0 && (\n            <Alert severity={'success'}>\n              All users have been added. U can send a message, by clicking on\n              the user in the menu sidebar in direct messages.\n            </Alert>\n          )}\n          <Divider className={classes.spacer} />\n        </Box>\n      </Grid>\n    </>\n  );\n};\n\nexport default AddDirectMessageChannel;\n","import React from 'react';\nimport moment from 'moment';\nimport { ThreadMessage } from '../../../interfaces/message.interface';\nimport {\n  Avatar,\n  Badge,\n  Box,\n  Chip,\n  Divider,\n  ListItem,\n  ListItemAvatar,\n  ListItemIcon,\n  Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  head: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    padding: theme.spacing(0),\n  },\n  [theme.breakpoints.up('md')]: {\n    messageText: {\n      paddingBottom: '1rem',\n      color: 'rgba(255, 255, 255, 0.7)',\n    },\n  },\n  [theme.breakpoints.down('md')]: {\n    messageText: {\n      paddingBottom: '1rem',\n      color: 'rgba(255, 255, 255, 0.7)',\n    },\n  },\n  [theme.breakpoints.down('sm')]: {\n    messageText: {\n      paddingBottom: '1rem',\n      color: 'rgba(255, 255, 255, 0.7)',\n    },\n  },\n  vspace: {\n    marginBottom: theme.spacing(1),\n  },\n  vspaceTop: {\n    marginBottom: theme.spacing(3),\n  },\n  vspaceBottom: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(0),\n  },\n  image: {\n    paddingBottom: '0.5rem',\n  },\n  avatar: {\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    backgroundColor: '#000000',\n    color: '#ffffff',\n    fontSize: 11,\n    fontWeight: 'bold',\n    border: '2px solid #f57c00',\n  },\n}));\n\ninterface ThreadInfoProps {\n  messages: ThreadMessage[];\n  channelThread: any;\n  currentChannel: any;\n  showThreadInfo?: boolean;\n}\n\nconst ThreadInfo: React.FC<ThreadInfoProps> = ({\n  messages,\n  channelThread,\n  currentChannel,\n  showThreadInfo,\n}) => {\n  const classes = useStyles();\n\n  const renderThreadInfo = (channelThread: any) => {\n    return (\n      <>\n        {showThreadInfo && (\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n            <Chip\n              variant=\"outlined\"\n              size=\"small\"\n              color=\"primary\"\n              label={<strong>Thread - {currentChannel.name} </strong>}\n            />\n          </Box>\n        )}\n        <Divider className={classes.vspaceTop} />\n        <ListItem\n          key={channelThread.message.id}\n          component=\"div\"\n          className={classes.head}\n        >\n          <Box\n            display=\"flex\"\n            justifyContent=\"flex-start\"\n            alignItems=\"flex-start\"\n          >\n            <ListItemAvatar>\n              <ListItemIcon>\n                <Badge variant=\"dot\">\n                  {!channelThread.message.deleted ? (\n                    <Avatar className={classes.avatar}>\n                      {channelThread.message.user.username\n                        .substring(0, 2)\n                        .toUpperCase()}\n                    </Avatar>\n                  ) : (\n                    <Avatar\n                      alt=\"Message has been removed\"\n                      src={`${window.location.origin}/deleted.png`}\n                    />\n                  )}\n                </Badge>\n              </ListItemIcon>\n            </ListItemAvatar>\n          </Box>\n          <Box component=\"div\" display=\"flex\" flexDirection=\"column\" flex=\"1\">\n            <Box\n              display=\"flex\"\n              justifyContent=\"space-between\"\n              alignItems=\"flex-start\"\n            >\n              <Box\n                display=\"flex\"\n                justifyContent=\"flex-start\"\n                alignItems=\"flex-start\"\n              >\n                <Typography color=\"secondary\" variant=\"caption\">\n                  {!channelThread.message.deleted ? (\n                    <>\n                      <strong>{channelThread.message.user.username} </strong>\n                    </>\n                  ) : (\n                    <strong>Oh sorry it seems...</strong>\n                  )}\n                </Typography>\n                <Typography\n                  variant=\"caption\"\n                  color=\"primary\"\n                  style={{ marginLeft: '8px' }}\n                >\n                  <i>{moment(channelThread.message.timestamp).fromNow()}</i>\n                </Typography>\n                <Divider className={classes.vspace} />\n              </Box>\n            </Box>\n            <Typography component=\"div\" className={classes.messageText}>\n              {channelThread.message.text}\n            </Typography>\n          </Box>\n        </ListItem>\n      </>\n    );\n  };\n\n  return <>{renderThreadInfo(channelThread)}</>;\n};\n\nexport default ThreadInfo;\n","import React from 'react';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport { IconButton } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { useDeleteThreadMessageMutation } from '../../../api/generated/graphql';\n\ninterface ThreadDeleteMessageProps {\n  messageId: number;\n}\n\nconst ThreadDeleteMessage: React.FC<ThreadDeleteMessageProps> = ({\n  messageId,\n}) => {\n  const [\n    deleteThreadMessageMutation,\n    { data, error },\n  ] = useDeleteThreadMessageMutation();\n\n  const handleDelete = (messageId: number) => {\n    deleteThreadMessageMutation({\n      variables: {\n        message_id: messageId,\n      },\n    });\n  };\n\n  if (\n    error ||\n    (data?.delete_channel_thread_message?.affected_rows !== undefined &&\n      data?.delete_channel_thread_message?.affected_rows === 0)\n  ) {\n    return <Alert severity=\"error\">Message could not get deleted...</Alert>;\n  }\n\n  return (\n    <IconButton\n      onClick={() => handleDelete(messageId)}\n      aria-label={`delete message ${messageId}`}\n    >\n      <HighlightOffIcon color=\"primary\" fontSize=\"small\" />\n    </IconButton>\n  );\n};\n\nexport default ThreadDeleteMessage;\n","import React from 'react';\nimport moment from 'moment';\nimport { ThreadMessage } from '../../../interfaces/message.interface';\nimport ThreadInfo from './ThreadInfo';\nimport ThreadDeleteMessage from './ThreadDeleteMessage';\nimport {\n  Avatar,\n  Badge,\n  Box,\n  Divider,\n  ListItem,\n  ListItemAvatar,\n  ListItemIcon,\n  Typography,\n  Button,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    padding: theme.spacing(2),\n    overflowWrap: 'break-word',\n    wordBreak: 'break-all',\n  },\n  [theme.breakpoints.up('md')]: {\n    messageText: {\n      paddingBottom: '1rem',\n    },\n    reply: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n      color: '#ffffff',\n    },\n  },\n  [theme.breakpoints.down('md')]: {\n    messageText: {\n      paddingBottom: '1rem',\n    },\n    reply: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n      color: '#ffffff',\n    },\n  },\n  [theme.breakpoints.down('sm')]: {\n    messageText: {\n      paddingBottom: '1rem',\n    },\n    reply: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n      color: '#ffffff',\n    },\n  },\n  vspace: {\n    marginBottom: theme.spacing(1),\n  },\n  vspaceTop: {\n    marginBottom: theme.spacing(3),\n  },\n  vspaceBottom: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(0),\n  },\n  image: {\n    paddingBottom: '0.5rem',\n  },\n  avatar: {\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    backgroundColor: '#000000',\n    color: '#ffffff',\n    fontSize: 11,\n    fontWeight: 'bold',\n    border: '2px solid #f57c00',\n  },\n  loadMoreButton: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: theme.spacing(1),\n  },\n}));\n\ninterface ThreadMessageListProps {\n  messages: ThreadMessage[];\n  user: any;\n  channelThread: any;\n  currentChannel: any;\n  handleIncreaseLimit: any;\n  limit: number;\n  showThreadInfo?: boolean;\n}\n\nconst ThreadMessageList: React.FC<ThreadMessageListProps> = ({\n  messages,\n  user,\n  channelThread,\n  currentChannel,\n  handleIncreaseLimit,\n  limit,\n  showThreadInfo,\n}) => {\n  const classes = useStyles();\n\n  const renderMessage = (message: ThreadMessage) => {\n    return (\n      <ListItem key={message.id} component=\"div\" className={classes.root}>\n        <ListItemAvatar>\n          <ListItemIcon>\n            <Badge variant=\"dot\">\n              <Avatar className={classes.avatar}>\n                {message.user.username.substring(0, 2).toUpperCase()}\n              </Avatar>\n            </Badge>\n          </ListItemIcon>\n        </ListItemAvatar>\n\n        <Box component=\"div\" display=\"flex\" flexDirection=\"column\" flex=\"1\">\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"flex-start\"\n          >\n            <Box\n              display=\"flex\"\n              justifyContent=\"flex-start\"\n              alignItems=\"flex-start\"\n            >\n              <Typography variant=\"caption\">\n                <strong>{message.user.username} </strong>\n                <i>{moment(message.timestamp).fromNow()}</i>\n              </Typography>\n              <Divider className={classes.vspace} />\n            </Box>\n            <Box>\n              <Typography variant=\"caption\">\n                {user.sub === message.user.auth0_user_id ? (\n                  <ThreadDeleteMessage messageId={message.id} />\n                ) : (\n                  ''\n                )}\n              </Typography>\n            </Box>\n          </Box>\n          <Typography component=\"div\" className={classes.messageText}>\n            {message.message}\n          </Typography>\n          {message.image ? (\n            <Box className={classes.image}>\n              <img alt=\"Giphy Image\" src={message.image} />\n            </Box>\n          ) : (\n            ''\n          )}\n          <Divider className={classes.vspace} />\n        </Box>\n      </ListItem>\n    );\n  };\n\n  return (\n    <>\n      <ThreadInfo\n        messages={messages}\n        channelThread={channelThread}\n        currentChannel={currentChannel}\n        showThreadInfo={showThreadInfo}\n      />\n      <Box className={classes.loadMoreButton}>\n        {messages?.length === limit && (\n          <Button\n            onClick={() => handleIncreaseLimit()}\n            aria-label=\"load more messages\"\n          >\n            load more (+{limit})\n          </Button>\n        )}\n      </Box>\n\n      {messages\n        ? [...messages]\n            ?.reverse()\n            ?.map((message: ThreadMessage) => renderMessage(message))\n        : ''}\n    </>\n  );\n};\n\nexport default ThreadMessageList;\n","import React, { useState } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { GiphyFetch } from '@giphy/js-fetch-api';\nimport { giphyState } from '../../atom';\nimport { Box, TextField } from '@material-ui/core';\nimport { Carousel } from '@giphy/react-components';\nimport { IGif } from '@giphy/js-types';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  giphySearchInput: {\n    display: 'flex',\n    flex: 1,\n    paddingBottom: theme.spacing(2),\n    marginTop: theme.spacing(1),\n    [theme.breakpoints.down('md')]: {\n      marginTop: theme.spacing(1),\n    },\n  },\n  giphyCarousel: {\n    display: 'flex',\n    padding: theme.spacing(3),\n  },\n}));\n\nconst giphyFetch = new GiphyFetch('gNDqYmKTip2mgTRqQbS5BwslaLM8Jdq0');\n\ninterface GiphyCarouselProps {\n  hideGiphyCarousel: Function;\n}\n\nconst GiphyCarousel: React.FC<GiphyCarouselProps> = ({ hideGiphyCarousel }) => {\n  const classes = useStyles();\n  const [gif, setGif] = useRecoilState<IGif | null>(giphyState);\n  const [giphySearchString, setGiphySearchString] = useState('');\n\n  const onGifClick = (\n    gif: IGif,\n    e: React.SyntheticEvent<HTMLElement, Event>,\n  ) => {\n    e.preventDefault();\n    setGif(gif);\n    hideGiphyCarousel();\n  };\n\n  const handleOnChange = (ev: any) => {\n    setGiphySearchString(ev.target.value);\n  };\n\n  const fetchGifs = (offset: number) => {\n    return giphySearchString\n      ? giphyFetch.search(giphySearchString, { offset, limit: 5 })\n      : giphyFetch.trending({ offset, limit: 5 });\n  };\n\n  return (\n    <>\n      <Box display=\"flex\" flexDirection=\"column\" style={{ maxWidth: '100%' }}>\n        <Carousel\n          key={giphySearchString}\n          fetchGifs={fetchGifs}\n          onGifClick={onGifClick}\n          gifHeight={50}\n          gutter={6}\n        />\n        <TextField\n          className={classes.giphySearchInput}\n          size=\"small\"\n          label=\"Search giphy ...\"\n          variant=\"standard\"\n          onChange={handleOnChange}\n        />\n      </Box>\n    </>\n  );\n};\n\nexport default GiphyCarousel;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, Button } from '@material-ui/core';\nimport GiphyCarousel from './GiphyCarousel';\nimport AddGif from '@material-ui/icons/Gif';\nimport MenuBarDrawer from './MenuBarDrawer';\nimport SideBar from './SideBar';\n\nconst useStyles = makeStyles((theme) => ({\n  giphyImage: {\n    padding: theme.spacing(1),\n    marginTop: theme.spacing(2),\n  },\n  giphyButton: {\n    [theme.breakpoints.up('md')]: {\n      height: 56,\n    },\n  },\n}));\n\ninterface MenuBarProps {\n  children: any;\n  channelId: number;\n}\n\nconst MenuBar: React.FC<MenuBarProps> = ({ children, channelId }) => {\n  const classes = useStyles();\n\n  const [open, setOpen] = React.useState(false);\n  const [openGiphy, setOpenGiphy] = React.useState<boolean>(false);\n  const [showGiphyCarousel, setShowGiphyCarousel] = React.useState(false);\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handleGiphyClick = () => {\n    setShowGiphyCarousel(!showGiphyCarousel);\n    setOpenGiphy(!openGiphy);\n  };\n\n  const hideGiphyCarousel = () => {\n    setOpenGiphy(!openGiphy);\n    setShowGiphyCarousel(false);\n  };\n\n  return (\n    <>\n      <Box\n        style={{ display: showGiphyCarousel ? 'block' : 'none' }}\n        className={classes.giphyImage}\n        order={1}\n        flex=\"1\"\n        justifyContent=\"flex-start\"\n        alignItems=\"center\"\n      >\n        <GiphyCarousel hideGiphyCarousel={() => hideGiphyCarousel()} />\n      </Box>\n      <Box display=\"flex\" justifyContent=\"flex-end\" alignItems=\"flex-end\">\n        <Box flex={1}>\n          <Button\n            color={openGiphy === false ? 'primary' : 'secondary'}\n            size=\"large\"\n            onClick={handleGiphyClick}\n            className={classes.giphyButton}\n            aria-label=\"giphy\"\n          >\n            <AddGif />\n          </Button>\n        </Box>\n        <Box flex={16} justifyContent=\"flex-end\">\n          {children}\n        </Box>\n      </Box>\n      <MenuBarDrawer open={open}>\n        <SideBar handleDrawerClose={handleDrawerClose} open={open} />\n      </MenuBarDrawer>\n    </>\n  );\n};\n\nexport default MenuBar;\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Alert } from '@material-ui/lab';\nimport { useGetUserIsTypingSubscription } from '../../api/generated/graphql';\nimport { useRecoilState } from 'recoil';\nimport { currentChannelState } from '../../atom';\n\nconst TypingIndicator: React.FC = () => {\n  const { user } = useAuth0();\n\n  const [currentChannel, setCurrentChannel] = useRecoilState<any>(\n    currentChannelState,\n  );\n\n  const { data, loading, error } = useGetUserIsTypingSubscription({\n    variables: {\n      self_id: user.sub,\n      channel_id: currentChannel.id,\n    },\n  });\n\n  if (error) {\n    return <Alert severity=\"error\">Typing Indicator Error...</Alert>;\n  }\n\n  return (\n    <>\n      {!loading && data?.user_typing[0]?.username\n        ? `${data.user_typing[0].username} is typing ...`\n        : 'Type your message here ...'}\n    </>\n  );\n};\n\nexport default TypingIndicator;\n","import React, { useState } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport {\n  InputAdornment,\n  IconButton,\n  TextField,\n  Button,\n  Box,\n} from '@material-ui/core';\nimport { theme } from '../../../theme/theme';\nimport SendIcon from '@material-ui/icons/Send';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport {\n  useInsertChannelThreadMessageMutation,\n  useSendTypingEventMutation,\n} from '../../../api/generated/graphql';\nimport TypingIndicator from '../../shared/TypingIndicator';\nimport { useRecoilState } from 'recoil';\nimport { giphyState, deletedMessageState } from '../../../atom';\nimport { IGif } from '@giphy/js-types';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n  },\n  giphyImage: {\n    marginTop: theme.spacing(0),\n  },\n  form: {\n    display: 'flex',\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    flexDirection: 'column',\n    flexGrow: 1,\n    [theme.breakpoints.down('md')]: {\n      marginTop: theme.spacing(1),\n    },\n    [theme.breakpoints.up('md')]: {\n      marginTop: theme.spacing(0),\n    },\n  },\n  messageInput: {\n    [theme.breakpoints.down('md')]: {\n      fontSize: '1rem',\n    },\n    '&.MuiFormLabel-root.Mui-focused': {\n      color: theme.palette.secondary.main,\n    },\n  },\n  image: {\n    border: '2px solid ' + theme.palette.secondary.main,\n    height: 150,\n    marginBottom: theme.spacing(3),\n    [theme.breakpoints.up('md')]: {\n      maxHeight: 250,\n    },\n    [theme.breakpoints.down('lg')]: {\n      border: '2px solid ' + theme.palette.secondary.main,\n      height: 150,\n      maxWidth: '150vw',\n      maxHeight: '70vw',\n    },\n    [theme.breakpoints.down('md')]: {\n      border: '2px solid ' + theme.palette.secondary.main,\n      height: 120,\n      maxWidth: '100vw',\n      maxHeight: '50vw',\n    },\n  },\n}));\n\ninterface ThreadMessageInputProps {\n  channelId: number;\n  channelThreadId: number | undefined;\n}\n\nconst ThreadMessageInput: React.FC<ThreadMessageInputProps> = (props) => {\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n\n  const setTextFieldSize = () => {\n    switch (matches) {\n      case true:\n        return 'medium';\n\n      case false:\n        return 'small';\n\n      default:\n        return 'small';\n    }\n  };\n\n  const setButtonSize = () => {\n    switch (matches) {\n      case true:\n        return 'large';\n      case false:\n        return 'small';\n\n      default:\n        return 'small';\n    }\n  };\n\n  const { user } = useAuth0();\n  const [text, setText] = useState('');\n  const [gif, setGif] = useRecoilState<IGif | null>(giphyState);\n  const [deletedMessage, setdeletedMessage] = useRecoilState<boolean>(\n    deletedMessageState,\n  );\n\n  const channelId = props.channelId;\n\n  const [\n    sendTypingEventMutation,\n    { data, loading, error },\n  ] = useSendTypingEventMutation({\n    variables: {\n      user_id: user.sub,\n      channel_id: channelId,\n    },\n  });\n\n  const handleTyping = (text: string) => {\n    const textLength = text.length;\n    if ((textLength !== 0 && textLength % 5 === 0) || textLength === 1) {\n      sendTypingEventMutation();\n    }\n    setText(text);\n  };\n\n  const [\n    sendMessage,\n    { data: sendUpdateMessageData },\n  ] = useInsertChannelThreadMessageMutation();\n\n  const handleSubmit = async (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    if (text === '' && gif === null) {\n      return;\n    }\n\n    if (text.length > 2000) {\n      alert('Your text limit has reached the limit of 2000 characters');\n      return;\n    }\n\n    if (props.channelThreadId === undefined) {\n      return;\n    }\n\n    await sendMessage({\n      variables: {\n        channel_thread_id: props.channelThreadId,\n        message: text,\n        image: gif?.images?.fixed_width?.url,\n        user_id: user.sub,\n      },\n    });\n\n    setText('');\n    setGif(null);\n    setdeletedMessage(false);\n  };\n\n  return (\n    <Box className={classes.root}>\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        className={classes.giphyImage}\n      >\n        {gif && (\n          <img\n            className={classes.image}\n            alt=\"Giphy Image\"\n            src={gif?.images?.fixed_width?.url}\n            onClick={() => setGif(null)}\n          />\n        )}\n      </Box>\n      <form\n        noValidate\n        autoComplete=\"off\"\n        className={classes.form}\n        onSubmit={handleSubmit}\n      >\n        <TextField\n          value={text}\n          autoFocus={false}\n          onChange={(e) => {\n            handleTyping(e.target.value);\n          }}\n          focused\n          size={setTextFieldSize()}\n          variant=\"outlined\"\n          multiline\n          rows={1}\n          color=\"primary\"\n          autoComplete=\"off\"\n          id={`chat-message-input-${props.channelThreadId}`}\n          label={<TypingIndicator />}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  type=\"submit\"\n                  color=\"secondary\"\n                  aria-label=\"submit message\"\n                >\n                  <SendIcon />\n                </IconButton>\n              </InputAdornment>\n            ),\n            classes: {\n              input: classes.messageInput,\n            },\n          }}\n          InputLabelProps={{\n            className: classes.messageInput,\n          }}\n        />\n      </form>\n    </Box>\n  );\n};\n\nexport default ThreadMessageInput;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Box, List } from '@material-ui/core';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Alert } from '@material-ui/lab';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useRecoilState } from 'recoil';\nimport { currentChannelState } from '../../../atom';\nimport {\n  useWatchChannelThreadMessagesSubscription,\n  useGetChannelThreadQuery,\n} from '../../../api/generated/graphql';\nimport ThreadMessageList from './ThreadMessageList';\nimport Loader from '../../shared/Loader';\nimport { ThreadMessage } from '../../../interfaces/message.interface';\nimport { ThreadParams } from '../../../interfaces/param.interface';\nimport MenuBar from '../../shared/MenuBar';\nimport ThreadMessageInput from './ThreadMessageInput';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n    marginTop: theme.spacing(0),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(0),\n  },\n  messageInput: {\n    position: 'fixed',\n    bottom: 0,\n    padding: theme.spacing(2),\n    background: theme.palette.background.default,\n    zIndex: 1000,\n    [theme.breakpoints.up('lg')]: {\n      width: '75vw',\n    },\n    [theme.breakpoints.down('lg')]: {\n      width: '75vw',\n    },\n    [theme.breakpoints.down('md')]: {\n      width: '75vw',\n    },\n    [theme.breakpoints.down('sm')]: {\n      width: '100vw',\n    },\n  },\n}));\n\nconst Thread: React.FC = () => {\n  const classes = useStyles();\n  const [limit, setLimit] = useState(20);\n  const { user, error: auth0Error } = useAuth0();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const [currentChannel, setCurrentChannel] = useRecoilState<any>(\n    currentChannelState,\n  );\n  let history = useHistory();\n  const { messageId, channel } = useParams<ThreadParams>();\n\n  const { data, loading, error } = useWatchChannelThreadMessagesSubscription({\n    variables: {\n      limit,\n      message_id: parseInt(messageId),\n    },\n    fetchPolicy: 'network-only',\n  });\n\n  const {\n    data: getChannelThreadData,\n    loading: getChannelThreadLoading,\n    error: getChannelThreadError,\n  } = useGetChannelThreadQuery({\n    variables: {\n      message_id: parseInt(messageId),\n    },\n  });\n\n  const handleIncreaseLimit = () => {\n    setLimit(limit + 20);\n  };\n\n  const scrollToBottom = () => {\n    if (typeof messagesEndRef === 'object') {\n      messagesEndRef?.current?.scrollIntoView();\n    }\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      scrollToBottom();\n    }, 200);\n  }, [data]);\n\n  useEffect(() => {\n    if (currentChannel?.id === undefined) history.push(`/channel/${channel}`);\n  }, []);\n\n  if (loading || getChannelThreadLoading) return <Loader />;\n\n  if (error || getChannelThreadError) {\n    console.log('error', error);\n    return <Alert severity=\"error\">Thread Error</Alert>;\n  }\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\">\n      <Box className={classes.root}>\n        <List id=\"message-list\" component=\"div\">\n          <ThreadMessageList\n            messages={data?.channel_thread_message as ThreadMessage[]}\n            user={user}\n            channelThread={getChannelThreadData?.channel_thread[0]}\n            currentChannel={currentChannel}\n            handleIncreaseLimit={handleIncreaseLimit}\n            limit={limit}\n            showThreadInfo={false}\n          />\n        </List>\n        <div ref={messagesEndRef} />\n      </Box>\n      <Box className={classes.messageInput}>\n        <MenuBar channelId={currentChannel?.id}>\n          <ThreadMessageInput\n            channelId={currentChannel?.id}\n            channelThreadId={getChannelThreadData?.channel_thread[0]?.id}\n          />\n        </MenuBar>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Thread;\n","import React, { useState } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport {\n  Button,\n  Box,\n  Grid,\n  InputAdornment,\n  IconButton,\n  TextField,\n} from '@material-ui/core';\nimport { theme } from '../../../theme/theme';\nimport SendIcon from '@material-ui/icons/Send';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport {\n  useInsertChannelThreadMessageMutation,\n  useSendTypingEventMutation,\n} from '../../../api/generated/graphql';\nimport { useRecoilState } from 'recoil';\nimport { giphyState, deletedMessageState } from '../../../atom';\nimport { IGif } from '@giphy/js-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GiphyCarousel from '../../shared/GiphyCarousel';\nimport AddGif from '@material-ui/icons/Gif';\n\nconst useStyles = makeStyles((theme) => ({\n  giphyVisible: {\n    marginTop: theme.spacing(2),\n  },\n  giphyHidden: {\n    display: 'none',\n    marginTop: theme.spacing(2),\n  },\n  giphyImage: {\n    marginTop: theme.spacing(2),\n  },\n  form: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n  },\n  messageInput: {\n    [theme.breakpoints.down('md')]: {\n      fontSize: '1rem',\n    },\n    '&.MuiFormLabel-root.Mui-focused': {\n      color: theme.palette.secondary.main,\n    },\n  },\n  image: {\n    maxHeight: 55,\n    paddingRight: theme.spacing(1),\n  },\n  giphyButton: {\n    marginRight: theme.spacing(1),\n    [theme.breakpoints.up('md')]: {\n      height: 56,\n    },\n    [theme.breakpoints.down('md')]: {\n      height: 40,\n    },\n  },\n}));\n\ninterface ThreadListInputContainerProps {\n  channelId: number;\n  channelThreadId: number | undefined;\n}\n\nconst ThreadListInputContainer: React.FC<ThreadListInputContainerProps> = (\n  props,\n) => {\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.down('md'));\n  const [openGiphy, setOpenGiphy] = React.useState<boolean>(false);\n\n  const setTextFieldSize = () => {\n    switch (matches) {\n      case false:\n        return 'medium';\n      case true:\n        return 'small';\n\n      default:\n        return 'small';\n    }\n  };\n\n  const { user } = useAuth0();\n  const [text, setText] = useState('');\n  const [gif, setGif] = useRecoilState<IGif | null>(giphyState);\n  const [deletedMessage, setdeletedMessage] = useRecoilState<boolean>(\n    deletedMessageState,\n  );\n  const [showGiphyCarousel, setShowGiphyCarousel] = React.useState(false);\n  const channelId = props.channelId;\n\n  const [\n    sendTypingEventMutation,\n    { data, loading, error },\n  ] = useSendTypingEventMutation({\n    variables: {\n      user_id: user.sub,\n      channel_id: channelId,\n    },\n  });\n\n  const handleTyping = (text: string) => {\n    const textLength = text.length;\n    if ((textLength !== 0 && textLength % 5 === 0) || textLength === 1) {\n      sendTypingEventMutation();\n    }\n    setText(text);\n  };\n\n  const [\n    sendMessage,\n    { data: sendUpdateMessageData },\n  ] = useInsertChannelThreadMessageMutation();\n\n  const handleSubmit = async (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    if (text === '' && gif === null) {\n      return;\n    }\n\n    if (text.length > 2000) {\n      alert('Your text limit has reached the limit of 2000 characters');\n      return;\n    }\n\n    if (props.channelThreadId === undefined) {\n      return;\n    }\n\n    await sendMessage({\n      variables: {\n        channel_thread_id: props.channelThreadId,\n        message: text,\n        image: gif?.images?.fixed_width?.url,\n        user_id: user.sub,\n      },\n    });\n\n    setText('');\n    setGif(null);\n    setdeletedMessage(false);\n  };\n\n  const handleGiphyClick = () => {\n    setShowGiphyCarousel(!showGiphyCarousel);\n    setOpenGiphy(!openGiphy);\n  };\n\n  const hideGiphyCarousel = () => {\n    setShowGiphyCarousel(false);\n    setOpenGiphy(!openGiphy);\n  };\n\n  return (\n    <>\n      <Grid item xs={12} className={gif ? classes.giphyImage : ''}>\n        {gif && (\n          <img\n            className={classes.image}\n            alt={gif?.bitly_url}\n            src={gif?.images?.fixed_width?.url}\n            onClick={() => setGif(null)}\n          />\n        )}\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        className={\n          showGiphyCarousel ? classes.giphyVisible : classes.giphyHidden\n        }\n      >\n        <GiphyCarousel hideGiphyCarousel={() => hideGiphyCarousel()} />\n      </Grid>\n      <Box display=\"flex\" justifyContent=\"flex-end\" alignItems=\"flex-end\">\n        <Box>\n          <Button\n            variant=\"outlined\"\n            color={openGiphy === false ? 'primary' : 'secondary'}\n            onClick={handleGiphyClick}\n            className={classes.giphyButton}\n            aria-label=\"add giphy\"\n          >\n            <AddGif />\n          </Button>\n        </Box>\n        <Box flex={16} justifyContent=\"flex-end\">\n          <form\n            noValidate\n            autoComplete=\"off\"\n            className={classes.form}\n            onSubmit={handleSubmit}\n          >\n            <TextField\n              value={text}\n              autoFocus={false}\n              onChange={(e) => {\n                handleTyping(e.target.value);\n              }}\n              size={setTextFieldSize()}\n              variant=\"outlined\"\n              color=\"secondary\"\n              autoComplete=\"off\"\n              id={`chat-message-input-${props.channelThreadId}`}\n              label={'Crackle your message here ...'}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      type=\"submit\"\n                      color=\"secondary\"\n                      aria-label=\"send message\"\n                    >\n                      <SendIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n                classes: {\n                  input: classes.messageInput,\n                },\n              }}\n              InputLabelProps={{\n                className: classes.messageInput,\n              }}\n            />\n          </form>\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport default ThreadListInputContainer;\n","import React, { useState } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useWatchChannelThreadMessagesSubscription } from '../../../api/generated/graphql';\nimport { ThreadMessage } from '../../../interfaces/message.interface';\nimport { Alert } from '@material-ui/lab';\nimport { List } from '@material-ui/core';\nimport ThreadListInputContainer from './ThreadListInputContainer';\nimport ThreadMessageList from './ThreadMessageList';\n\ninterface ThreadListProps {\n  channelThread: any;\n}\n\nconst ThreadList: React.FC<ThreadListProps> = ({ channelThread }) => {\n  const [limit, setLimit] = useState(20);\n  const { user, error: auth0Error } = useAuth0();\n\n  const { data, error } = useWatchChannelThreadMessagesSubscription({\n    variables: {\n      limit,\n      message_id: channelThread.message_id,\n    },\n  });\n\n  const handleIncreaseLimit = () => {\n    setLimit(limit + 20);\n  };\n\n  if (error || auth0Error) {\n    console.log('error', error);\n    return <Alert severity=\"error\">Thread Error</Alert>;\n  }\n\n  return (\n    <>\n      <List component=\"div\">\n        <ThreadMessageList\n          messages={data?.channel_thread_message as ThreadMessage[]}\n          user={user}\n          channelThread={channelThread}\n          currentChannel={channelThread.message.channel}\n          handleIncreaseLimit={handleIncreaseLimit}\n          limit={limit}\n          showThreadInfo={true}\n        />\n        <ThreadListInputContainer\n          channelId={channelThread.message?.id}\n          channelThreadId={channelThread.id}\n        />\n      </List>\n    </>\n  );\n};\n\nexport default ThreadList;\n","import React from 'react';\nimport { useWatchThreadsSubscription } from '../../../api/generated/graphql';\nimport ThreadList from './ThreadList';\nimport { Alert } from '@material-ui/lab';\nimport { Box, Grid, makeStyles, Typography } from '@material-ui/core';\nimport Loader from '../../shared/Loader';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n    marginTop: theme.spacing(0),\n    paddingTop: theme.spacing(0),\n    paddingBottom: theme.spacing(0),\n  },\n  end: {\n    marginBottom: '2rem',\n  },\n  messageContainer: {\n    [theme.breakpoints.up('lg')]: {\n      padding: theme.spacing(10),\n      paddingTop: theme.spacing(4),\n      paddingBottom: theme.spacing(8),\n    },\n    [theme.breakpoints.down('md')]: {\n      padding: theme.spacing(2),\n      paddingTop: theme.spacing(4),\n      paddingBottom: theme.spacing(8),\n    },\n    [theme.breakpoints.down('sm')]: {\n      padding: theme.spacing(2),\n      paddingTop: theme.spacing(4),\n      paddingBottom: theme.spacing(4),\n    },\n  },\n}));\n\nconst ThreadListContainer: React.FC = () => {\n  const classes = useStyles();\n  const { data, error, loading } = useWatchThreadsSubscription();\n\n  if (error) {\n    console.log('error', error);\n    return <Alert severity=\"error\">Thread Error</Alert>;\n  }\n\n  if (loading) {\n    return (\n      <>\n        <Box\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          style={{ height: '100vh' }}\n        >\n          <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            flexDirection=\"column\"\n          >\n            <Loader />\n            <Typography variant=\"caption\" color=\"secondary\">\n              Loading threads\n            </Typography>\n          </Box>\n        </Box>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <div className={classes.root}>\n        <Grid container>\n          {data?.channel_thread?.map((channelThread, index) => {\n            if (channelThread.channel_thread_messages.length)\n              return (\n                <Grid\n                  key={index}\n                  item\n                  xs={12}\n                  className={classes.messageContainer}\n                >\n                  <ThreadList channelThread={channelThread} />\n                </Grid>\n              );\n          })}\n          <Box className={classes.end}>&nbsp;</Box>\n        </Grid>\n      </div>\n    </>\n  );\n};\n\nexport default ThreadListContainer;\n","import React from 'react';\nimport { Box, Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useParams } from 'react-router';\nimport { ThreadParams } from '../../../interfaces/param.interface';\nimport MobileHeaderMenu from '../MobileHeaderMenu';\nimport Thread from './Thread';\nimport ThreadListContainer from './ThreadListContainer';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexBasis: '100%',\n    flex: '1',\n    overflowY: 'scroll',\n    maxHeight: '90vh',\n    height: '90vh',\n  },\n  chatApp: {\n    height: '100vh',\n    overflowY: 'hidden',\n  },\n}));\n\nconst ThreadContainer: React.FC = () => {\n  const classes = useStyles();\n  const { channel } = useParams<ThreadParams>();\n\n  return (\n    <Grid item xs={12} md={9} className={classes.chatApp}>\n      <Box className={classes.root} component=\"article\">\n        {channel ? (\n          <>\n            <MobileHeaderMenu\n              channelName={`${channel ? `Thread - ${channel}` : 'Threadlist'}`}\n              channel={channel}\n            />\n            <Thread />\n          </>\n        ) : (\n          <>\n            <MobileHeaderMenu\n              channelName={`${channel ? `Thread - ${channel}` : 'Threadlist'}`}\n              channel={channel}\n              isThreadList={true}\n            />\n            <ThreadListContainer />\n          </>\n        )}\n      </Box>\n    </Grid>\n  );\n};\n\nexport default ThreadContainer;\n","import React, { useEffect } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useSetUserOnlineMutation } from '../../api/generated/graphql';\nimport ThreadContainer from '../chat/threads/ThreadContainer';\n\nconst ChatBoard: React.FC = () => {\n  const { user } = useAuth0();\n\n  const [sendUserIsOnline] = useSetUserOnlineMutation({\n    variables: { user_id: user?.sub },\n  });\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (user?.sub !== undefined) {\n        sendUserIsOnline();\n      }\n    }, 9000);\n    return function cleanup() {\n      clearInterval(interval);\n    };\n  }, []);\n\n  return <ThreadContainer />;\n};\n\nexport default ChatBoard;\n","import React from 'react';\nimport { useHistory } from 'react-router';\nimport {\n  useInsertChannelThreadMutation,\n  useWatchChannelThreadSubscription,\n} from '../../../api/generated/graphql';\nimport { Alert } from '@material-ui/lab';\nimport { IconButton } from '@material-ui/core';\nimport { Message } from '../../../interfaces/message.interface';\nimport ReplyIcon from '@material-ui/icons/Reply';\n\ninterface ThreadReplyProps {\n  channelName: string;\n  message: Message;\n}\n\nconst ThreadReply: React.FC<ThreadReplyProps> = (props) => {\n  const history = useHistory();\n\n  const {\n    data: channelThreadData,\n    loading: channelThreadLoading,\n    error: channelThreadError,\n  } = useWatchChannelThreadSubscription({\n    variables: {\n      message_id: props.message?.id,\n    },\n  });\n\n  const [\n    insertChannelThreadMutation,\n    { error },\n  ] = useInsertChannelThreadMutation({\n    variables: {\n      message_id: props.message?.id,\n    },\n  });\n\n  const navigateToThreadChannel = (e: React.SyntheticEvent) => {\n    e.stopPropagation();\n    history.push(`/channel/${props.channelName}/thread/${props.message?.id}`);\n  };\n\n  const handleClick = async (e: React.SyntheticEvent) => {\n    e.stopPropagation();\n    await insertChannelThreadMutation();\n    navigateToThreadChannel(e);\n  };\n\n  if (error || channelThreadError) return <Alert>Error in Thread Reply</Alert>;\n\n  if (channelThreadLoading)\n    return (\n      <>\n        <IconButton aria-label=\"reply to message\">\n          <ReplyIcon\n            color=\"primary\"\n            fontSize=\"small\"\n            style={{ transform: 'scaleX(-1)' }}\n            aria-label=\"reply to message\"\n          />\n        </IconButton>\n      </>\n    );\n\n  if (channelThreadData?.channel_thread?.length) {\n    return (\n      <>\n        <IconButton\n          onClick={(e) => navigateToThreadChannel(e)}\n          aria-label=\"reply to message\"\n        >\n          <ReplyIcon\n            color=\"primary\"\n            fontSize=\"small\"\n            style={{ transform: 'scaleX(-1)' }}\n            aria-label=\"reply to message\"\n          />\n        </IconButton>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <IconButton onClick={handleClick} aria-label=\"reply to message\">\n        <ReplyIcon\n          color=\"primary\"\n          fontSize=\"small\"\n          style={{ transform: 'scaleX(-1)' }}\n          aria-label=\"reply to message\"\n        />\n      </IconButton>\n    </>\n  );\n};\n\nexport default ThreadReply;\n","import React from 'react';\nimport { Typography, makeStyles } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport { Message } from '../../../interfaces/message.interface';\nimport { useWatchChannelThreadSubscription } from '../../../api/generated/graphql';\n\nconst useStyles = makeStyles((theme) => ({\n  [theme.breakpoints.up('md')]: {\n    messageText: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n    },\n  },\n  [theme.breakpoints.down('md')]: {\n    messageText: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n    },\n  },\n  [theme.breakpoints.down('sm')]: {\n    messageText: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n    },\n  },\n  link: {\n    color: '#ffffff',\n  },\n}));\n\ninterface ThreadReplyInProps {\n  channelName: string;\n  message: Message;\n}\n\nconst ThreadReplyIn: React.FC<ThreadReplyInProps> = ({\n  channelName,\n  message,\n}) => {\n  const classes = useStyles();\n\n  const {\n    data: channelThreadData,\n    loading: channelThreadLoading,\n    error: channelThreadError,\n  } = useWatchChannelThreadSubscription({\n    variables: {\n      message_id: message?.id,\n    },\n  });\n\n  return (\n    <>\n      {channelThreadData?.channel_thread[0]?.channel_thread_messages?.length ? (\n        <Typography component=\"div\" className={classes.messageText}>\n          <Link\n            className={classes.link}\n            to={{\n              pathname: `/channel/${channelName}/thread/${message?.id}`,\n            }}\n            aria-label={`reply to message in channel thread ${channelName}`}\n          >\n            {`${\n              channelThreadData?.channel_thread[0]?.channel_thread_messages\n                ?.length\n            } ${\n              channelThreadData?.channel_thread[0]?.channel_thread_messages\n                ?.length === 1\n                ? 'reply'\n                : 'replies'\n            } `}\n          </Link>\n          <i className={classes.lastReply}>\n            {`Last reply ${moment(\n              channelThreadData?.channel_thread[0]?.channel_thread_messages[0]\n                ?.timestamp,\n            ).fromNow()}`}\n          </i>\n        </Typography>\n      ) : (\n        ''\n      )}\n    </>\n  );\n};\n\nexport default ThreadReplyIn;\n","import React from 'react';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport { IconButton } from '@material-ui/core';\nimport { useDeleteMessageMutation } from '../../api/generated/graphql';\nimport { Alert } from '@material-ui/lab';\nimport { deletedMessageState } from '../../atom';\nimport { useSetRecoilState } from 'recoil';\n\ninterface DeleteMessageProps {\n  messageId: number;\n}\n\nconst DeleteMessage: React.FC<DeleteMessageProps> = ({ messageId }) => {\n  const setdeletedMessage = useSetRecoilState<boolean>(deletedMessageState);\n  const [deleteMessageMutation, { data, error }] = useDeleteMessageMutation();\n\n  const handleDelete = async (e: React.SyntheticEvent, messageId: number) => {\n    e.stopPropagation();\n    setdeletedMessage(true);\n    await deleteMessageMutation({\n      variables: {\n        message_id: messageId,\n      },\n    });\n  };\n\n  if (\n    error ||\n    (data?.delete_message?.affected_rows !== undefined &&\n      data?.delete_message?.affected_rows === 0)\n  ) {\n    return <Alert severity=\"error\">Message could not get deleted...</Alert>;\n  }\n\n  return (\n    <IconButton\n      onClick={(e) => handleDelete(e, messageId)}\n      aria-label={`Delete message id ${messageId}`}\n    >\n      <HighlightOffIcon color=\"primary\" fontSize=\"small\" />\n    </IconButton>\n  );\n};\n\nexport default DeleteMessage;\n","import React from 'react';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport { IconButton } from '@material-ui/core';\nimport { useUpdateMessageMutation } from '../../api/generated/graphql';\nimport { Alert } from '@material-ui/lab';\n\ninterface ReplaceMessageProps {\n  messageId: number;\n}\n\nconst ReplaceMessage: React.FC<ReplaceMessageProps> = ({ messageId }) => {\n  const [updateMessageMutation, { data, error }] = useUpdateMessageMutation();\n\n  const handleReplace = async (e: React.SyntheticEvent) => {\n    e.stopPropagation();\n\n    await updateMessageMutation({\n      variables: {\n        _eq: messageId,\n        text: '...this message was deleted.',\n        deleted: true,\n      },\n    });\n  };\n\n  if (\n    error ||\n    (data?.update_message?.affected_rows !== undefined &&\n      data?.update_message?.affected_rows === 0)\n  ) {\n    return <Alert severity=\"error\">Message could not get updated...</Alert>;\n  }\n\n  return (\n    <IconButton onClick={handleReplace} aria-label=\"Replace message\">\n      <HighlightOffIcon color=\"primary\" fontSize=\"small\" />\n    </IconButton>\n  );\n};\n\nexport default ReplaceMessage;\n","import React from 'react';\nimport { useWatchChannelThreadSubscription } from '../../api/generated/graphql';\nimport { Alert } from '@material-ui/lab';\nimport DeleteMessage from './DeleteMessage';\nimport ReplaceMessage from './ReplaceMessage';\n\ninterface DeleteMessageWrapperProps {\n  messageId: number;\n}\n\nconst DeleteMessageWrapper: React.FC<DeleteMessageWrapperProps> = ({\n  messageId,\n}) => {\n  const {\n    data: channelThreadData,\n    loading: channelThreadLoading,\n    error: channelThreadError,\n  } = useWatchChannelThreadSubscription({\n    variables: {\n      message_id: messageId,\n    },\n  });\n\n  if (channelThreadLoading) return <React.Fragment></React.Fragment>;\n\n  if (channelThreadError) {\n    return (\n      <Alert severity=\"error\">useWatchChannelThreadSubscription Error...</Alert>\n    );\n  }\n\n  if (channelThreadData?.channel_thread?.length)\n    return <ReplaceMessage messageId={messageId} />;\n\n  return <DeleteMessage messageId={messageId} />;\n};\n\nexport default DeleteMessageWrapper;\n","import React, { useState, useEffect } from 'react';\nimport { TextField, InputAdornment, IconButton } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { Message } from '../../interfaces/message.interface';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useUpdateMessageMutation } from '../../api/generated/graphql';\nimport SendIcon from '@material-ui/icons/Send';\nimport Loader from '../shared/Loader';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  form: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n  },\n  messageInput: {\n    [theme.breakpoints.down('md')]: {\n      fontSize: '1rem',\n    },\n    '&.MuiFormLabel-root.Mui-focused': {\n      color: theme.palette.secondary.main,\n    },\n  },\n}));\n\ninterface UpdateMessageProps {\n  message: Message;\n}\n\nconst UpdateMessage: React.FC<UpdateMessageProps> = ({ message }) => {\n  const classes = useStyles();\n  const [text, setText] = useState<string>('');\n\n  useEffect(() => {\n    setText(message.text);\n  }, [message]);\n\n  const [\n    updateMessageMutation,\n    { data, loading, error },\n  ] = useUpdateMessageMutation();\n\n  const handleUpdate = async (e: React.SyntheticEvent) => {\n    e.preventDefault();\n    if (text === '') return;\n    await updateMessageMutation({\n      variables: {\n        _eq: message.id,\n        text,\n      },\n    });\n  };\n\n  const handleTyping = (text: string) => {\n    setText(text);\n  };\n\n  if (loading) {\n    return (\n      <>\n        <Loader />\n      </>\n    );\n  }\n\n  if (\n    error ||\n    (data?.update_message?.affected_rows !== undefined &&\n      data?.update_message?.affected_rows === 0)\n  ) {\n    return <Alert severity=\"error\">Message could not get deleted...</Alert>;\n  }\n\n  return (\n    <div className={classes.root}>\n      <form noValidate autoComplete=\"off\" className={classes.form}>\n        <TextField\n          value={text}\n          autoFocus={true}\n          onChange={(e) => {\n            handleTyping(e.target.value);\n          }}\n          variant=\"outlined\"\n          color=\"secondary\"\n          autoComplete=\"off\"\n          multiline\n          rowsMax={4}\n          id=\"update-chat-message-input\"\n          label={'Update message...'}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  id=\"message_submit\"\n                  onClick={(e) => handleUpdate(e)}\n                  color=\"secondary\"\n                  aria-label=\"Send message\"\n                >\n                  <SendIcon />\n                </IconButton>\n              </InputAdornment>\n            ),\n            classes: {\n              input: classes.messageInput,\n            },\n          }}\n          InputLabelProps={{\n            className: classes.messageInput,\n          }}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default UpdateMessage;\n","import React, { useState, useRef, useEffect } from 'react';\nimport moment from 'moment';\nimport { Message } from '../../interfaces/message.interface';\nimport ThreadReply from './threads/ThreadReply';\nimport ThreadReplyIn from './threads/ThreadReplyIn';\nimport DeleteMessageWrapper from './DeleteMessageWrapper';\nimport UpdateMessage from './UpdateMessage';\nimport {\n  Avatar,\n  Badge,\n  Box,\n  Button,\n  Divider,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemIcon,\n  Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useRecoilValue } from 'recoil';\nimport { deletedMessageState } from '../../atom';\nimport { useParams } from 'react-router';\nimport { ChatParams } from '../../interfaces/param.interface';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginBottom: '90px',\n    overflowY: 'scroll',\n  },\n  listItem: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    padding: theme.spacing(2),\n    overflowWrap: 'break-word',\n    hyphens: 'auto',\n    textOverflow: 'ellipsis',\n\n    [theme.breakpoints.down('md')]: {\n      paddingTop: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      paddingLeft: theme.spacing(2),\n      paddingBottom: theme.spacing(0),\n    },\n  },\n  [theme.breakpoints.up('md')]: {\n    messageText: {\n      padding: '1rem',\n      '&:hover': {\n        backgroundColor: '#0f1448',\n        cursor: 'pointer',\n      },\n    },\n  },\n  [theme.breakpoints.down('md')]: {\n    messageText: {\n      paddingBottom: '.3rem',\n    },\n  },\n  vspace: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(1),\n\n    [theme.breakpoints.down('sm')]: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(0),\n    },\n  },\n  image: {\n    paddingBottom: '0.5rem',\n  },\n  giphy: {\n    [theme.breakpoints.down('sm')]: {\n      width: '100%',\n    },\n    [theme.breakpoints.up('md')]: {\n      width: '25%',\n    },\n  },\n  avatar: {\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    backgroundColor: '#000000',\n    color: '#ffffff',\n    fontSize: 11,\n    fontWeight: 'bold',\n    border: '2px solid #f57c00',\n  },\n  loadMoreButton: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n  },\n  divider: {\n    flex: 1,\n  },\n}));\n\ninterface MessageProps {\n  messages: Message[];\n  lastMessage: Message | null;\n  preLastMessageId: number | null;\n  user: any;\n  handleIncreaseLimit: any;\n  limit: number;\n  setRef: any;\n}\n\nconst MessageList: React.FC<MessageProps> = ({\n  messages,\n  lastMessage,\n  preLastMessageId,\n  user,\n  handleIncreaseLimit,\n  limit,\n  setRef,\n}) => {\n  const classes = useStyles();\n  const [showUpdate, setShowUpdate] = useState<boolean>(false);\n  const [showUpdateMessageId, setShowUpdateMessageId] = useState<number | null>(\n    null,\n  );\n  const { channel: channelName } = useParams<ChatParams>();\n  const deletedMessage = useRecoilValue<boolean>(deletedMessageState);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const handleShowUpdate = (message: Message) => {\n    if (message.user.auth0_user_id !== user.sub) return;\n    setShowUpdateMessageId(message.id);\n    setShowUpdate(!showUpdate);\n  };\n\n  useEffect(() => {\n    setRef(messagesEndRef);\n  }, []);\n\n  const renderMessage = (message: Message) => {\n    return (\n      <ListItem key={message.id} component=\"div\" className={classes.listItem}>\n        <ListItemAvatar>\n          <ListItemIcon\n            aria-label={message.user.username.substring(0, 2).toUpperCase()}\n          >\n            <Badge variant=\"dot\">\n              {!message.deleted ? (\n                <Avatar className={classes.avatar}>\n                  {message.user.username.substring(0, 2).toUpperCase()}\n                </Avatar>\n              ) : (\n                <Avatar\n                  alt=\"Message has been removed\"\n                  src={`${window.location.origin}/deleted.png`}\n                />\n              )}\n            </Badge>\n          </ListItemIcon>\n        </ListItemAvatar>\n\n        <Box component=\"div\" display=\"flex\" flexDirection=\"column\" flex=\"1\">\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n          >\n            <Box\n              component=\"div\"\n              display=\"flex\"\n              justifyContent=\"space-between\"\n              flexGrow=\"1\"\n              style={{ marginRight: 16 }}\n            >\n              <Typography color=\"secondary\" variant=\"caption\">\n                {!message.deleted ? (\n                  <>\n                    <strong>{message.user.username} </strong>\n                  </>\n                ) : (\n                  <strong>Oh sorry it seems...</strong>\n                )}\n              </Typography>\n              <Typography\n                variant=\"caption\"\n                color=\"primary\"\n                style={{ marginLeft: '8px' }}\n              >\n                {moment(message.timestamp).fromNow()}\n              </Typography>\n            </Box>\n            <Box>\n              <Box\n                display=\"flex\"\n                justifyContent=\"flex-start\"\n                alignItems=\"flex-start\"\n              >\n                <ThreadReply message={message} channelName={channelName} />\n\n                {!message.deleted ? (\n                  <React.Fragment>\n                    {user.sub === message.user.auth0_user_id && (\n                      <Typography variant=\"caption\">\n                        {!(\n                          showUpdate && showUpdateMessageId === message.id\n                        ) && <DeleteMessageWrapper messageId={message.id} />}\n                      </Typography>\n                    )}\n                  </React.Fragment>\n                ) : (\n                  ''\n                )}\n              </Box>\n            </Box>\n          </Box>\n\n          <Typography\n            component=\"p\"\n            color=\"textSecondary\"\n            className={classes.messageText}\n            onClick={() => handleShowUpdate(message)}\n          >\n            {showUpdate &&\n            showUpdateMessageId === message.id &&\n            user.sub === message.user.auth0_user_id &&\n            message.deleted === false ? (\n              <UpdateMessage message={message} />\n            ) : (\n              message.text\n            )}\n          </Typography>\n          {message?.image ? (\n            <Box className={classes.image}>\n              <img\n                alt=\"Giphy Image\"\n                src={message.image}\n                className={classes.giphy}\n              />\n            </Box>\n          ) : (\n            ''\n          )}\n          <Box>\n            <ThreadReplyIn message={message} channelName={channelName} />\n          </Box>\n          <Divider className={classes.vspace} />\n        </Box>\n      </ListItem>\n    );\n  };\n\n  return (\n    <>\n      {messages?.length === limit && (\n        <Box\n          display=\"flex\"\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          className={classes.loadMoreButton}\n        >\n          <Divider className={classes.divider} />\n          <Button\n            onClick={() => handleIncreaseLimit()}\n            aria-label=\"load more messages\"\n          >\n            load more (+{limit})\n          </Button>\n          <Divider className={classes.divider} />\n        </Box>\n      )}\n      <List id=\"message-list\" component=\"div\" className={classes.root}>\n        {[...messages]?.reverse()?.map((message, i) => renderMessage(message))}\n\n        {!deletedMessage &&\n        lastMessage &&\n        preLastMessageId !== 0 &&\n        preLastMessageId &&\n        preLastMessageId < lastMessage.id\n          ? renderMessage(lastMessage)\n          : ''}\n\n        <div ref={messagesEndRef}></div>\n      </List>\n    </>\n  );\n};\n\nexport default MessageList;\n","import React, { useState, useRef } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { TextField, Box, InputAdornment, IconButton } from '@material-ui/core';\nimport { theme } from '../../theme/theme';\nimport SendIcon from '@material-ui/icons/Send';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport {\n  useInsertMessageMutation,\n  useSendTypingEventMutation,\n} from '../../api/generated/graphql';\nimport TypingIndicator from '../shared/TypingIndicator';\nimport { useRecoilState } from 'recoil';\nimport { giphyState, deletedMessageState } from '../../atom';\nimport { IGif } from '@giphy/js-types';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n  },\n  giphyImage: {\n    marginTop: theme.spacing(0),\n  },\n  form: {\n    display: 'flex',\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    flexDirection: 'column',\n    flexGrow: 1,\n    [theme.breakpoints.down('md')]: {\n      marginTop: theme.spacing(1),\n    },\n    [theme.breakpoints.up('md')]: {\n      marginTop: theme.spacing(0),\n    },\n  },\n  messageInput: {\n    [theme.breakpoints.down('md')]: {\n      fontSize: '1rem',\n    },\n    '&.MuiFormLabel-root.Mui-focused': {\n      color: theme.palette.secondary.main,\n    },\n  },\n\n  image: {\n    border: '2px solid ' + theme.palette.secondary.main,\n    height: 150,\n    marginBottom: theme.spacing(3),\n    [theme.breakpoints.up('md')]: {\n      maxHeight: 250,\n    },\n    [theme.breakpoints.down('lg')]: {\n      border: '2px solid ' + theme.palette.secondary.main,\n      height: 150,\n      maxWidth: '150vw',\n      maxHeight: '70vw',\n    },\n    [theme.breakpoints.down('md')]: {\n      border: '2px solid ' + theme.palette.secondary.main,\n      height: 120,\n      maxWidth: '100vw',\n      maxHeight: '50vw',\n    },\n  },\n}));\n\ninterface MessageInputProps {\n  channelId: number;\n  handleSetLastMessage: Function;\n  preLastMessageId: number;\n  scrollToBottom: any;\n}\n\nconst MessageInput: React.FC<MessageInputProps> = (props) => {\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n\n  const setTextFieldSize = () => {\n    switch (matches) {\n      case true:\n        return 'medium';\n\n      case false:\n        return 'small';\n\n      default:\n        return 'small';\n    }\n  };\n\n  const { user } = useAuth0();\n  const [text, setText] = useState<string>('');\n  const [gif, setGif] = useRecoilState<IGif | null>(giphyState);\n\n  const [deletedMessage, setdeletedMessage] = useRecoilState<boolean>(\n    deletedMessageState,\n  );\n\n  let textInput = useRef<HTMLDivElement>(null);\n  const channelId = props.channelId;\n\n  const [\n    sendTypingEventMutation,\n    { data, loading, error },\n  ] = useSendTypingEventMutation({\n    variables: {\n      user_id: user.sub,\n      channel_id: channelId,\n    },\n  });\n\n  const handleTyping = (text: string) => {\n    const textLength = text.length;\n    if ((textLength !== 0 && textLength % 5 === 0) || textLength === 1) {\n      sendTypingEventMutation();\n    }\n    setText(text);\n  };\n\n  const [sendMessage] = useInsertMessageMutation();\n\n  const handleSubmit = async (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    if (text === '' && gif === null) {\n      return;\n    }\n\n    if (text.length > 2000) {\n      alert('Your text limit has reached the limit of 2000 characters');\n      return;\n    }\n\n    props.handleSetLastMessage({\n      id: props.preLastMessageId + 1,\n      user: {\n        username: user.nickname,\n      },\n      user_id: user.sub,\n      text: text,\n      image: gif?.images?.fixed_width?.url,\n      channel_id: channelId,\n    });\n\n    props.scrollToBottom(true);\n\n    await sendMessage({\n      variables: {\n        message: {\n          user_id: user.sub,\n          text: text,\n          image: gif?.images?.fixed_width?.url,\n          channel_id: channelId,\n        },\n      },\n    });\n\n    setText('');\n    setGif(null);\n    setdeletedMessage(false);\n    textInput?.current?.focus();\n  };\n\n  return (\n    <Box className={classes.root}>\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        className={classes.giphyImage}\n      >\n        {gif && (\n          <img\n            className={classes.image}\n            alt=\"Giphy\"\n            src={gif?.images?.fixed_width?.url}\n            onClick={() => setGif(null)}\n          />\n        )}\n      </Box>\n      <form\n        noValidate\n        autoComplete=\"off\"\n        className={classes.form}\n        onSubmit={handleSubmit}\n      >\n        <TextField\n          value={text}\n          autoFocus={false}\n          onChange={(e) => {\n            handleTyping(e.target.value);\n          }}\n          focused={true}\n          inputRef={textInput}\n          size={setTextFieldSize()}\n          variant=\"outlined\"\n          multiline\n          rows={1}\n          color=\"primary\"\n          autoComplete=\"off\"\n          id=\"chat-message-input\"\n          label={<TypingIndicator />}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  id=\"message_submit\"\n                  type=\"submit\"\n                  color=\"secondary\"\n                  aria-label=\"Send message\"\n                >\n                  <SendIcon />\n                </IconButton>\n              </InputAdornment>\n            ),\n            classes: {\n              input: classes.messageInput,\n            },\n          }}\n          InputLabelProps={{\n            className: classes.messageInput,\n          }}\n        />\n      </form>\n    </Box>\n  );\n};\n\nexport default MessageInput;\n","import React, { useState, useEffect } from 'react';\nimport { Box } from '@material-ui/core';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport { Message } from '../../interfaces/message.interface';\nimport {\n  useWatchMessagesSubscription,\n  Channel_Type_Enum,\n  useUpsertMessageCursorMutation,\n} from '../../api/generated/graphql';\nimport Alert from '@material-ui/lab/Alert';\nimport MenuBar from '../shared/MenuBar';\nimport Logo from '../shared/Logo';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { useParams } from 'react-router-dom';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MobileHeaderMenu from './MobileHeaderMenu';\nimport { ChatParams } from '../../interfaces/param.interface';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexBasis: '100%',\n    flex: '1',\n    maxHeight: '90vh',\n    height: '90vh',\n  },\n  messageInput: {\n    position: 'fixed',\n    bottom: 0,\n    padding: theme.spacing(2),\n    background: theme.palette.background.default,\n    zIndex: 1000,\n    [theme.breakpoints.up('md')]: {\n      width: '75vw',\n    },\n    [theme.breakpoints.up('lg')]: {\n      width: '75vw',\n    },\n    [theme.breakpoints.down('sm')]: {\n      width: '100vw',\n    },\n  },\n  polling: {\n    position: 'fixed',\n    overflow: 'hidden',\n    flex: 1,\n  },\n}));\n\ninterface ChatProps {\n  channelId: number;\n  isPrivate: boolean;\n  channelType: Channel_Type_Enum;\n}\n\nconst Chat: React.FC<ChatProps> = ({ channelId, isPrivate, channelType }) => {\n  const classes = useStyles();\n  const [limit, setLimit] = useState<number>(20);\n  const [lastMessage, setLastMessage] = useState<Message | null>(null);\n  const [ref, setRef] = useState<any>(null);\n  const { user } = useAuth0();\n\n  let preLastMessageId: number = 0;\n  const { channel: channelName } = useParams<ChatParams>();\n\n  const { data, loading, error } = useWatchMessagesSubscription({\n    variables: {\n      channelId: channelId,\n      limit: limit,\n    },\n    fetchPolicy: 'network-only',\n  });\n\n  const [upsertMessageCursorMutation] = useUpsertMessageCursorMutation();\n\n  const scrollToBottom = () => {\n    if (typeof ref === 'object') {\n      setTimeout(() => {\n        ref?.current?.scrollIntoView();\n      }, 100);\n    }\n  };\n\n  useEffect(() => {\n    if (data?.messages[0]?.id)\n      upsertMessageCursorMutation({\n        variables: {\n          channel_id: channelId,\n          message_id: data?.messages[0]?.id,\n          user_id: user.sub,\n        },\n      });\n  }, [data]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      scrollToBottom();\n    }, 1000);\n  }, [ref]);\n\n  if (error) {\n    return <Alert severity=\"error\">Messages could not be loaded.</Alert>;\n  }\n\n  if (loading) {\n    return (\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        flexDirection=\"column\"\n        style={{ height: '100vh' }}\n      >\n        <Box>\n          <Logo />\n          <LinearProgress color=\"secondary\" style={{ marginTop: '8px' }} />\n        </Box>\n      </Box>\n    );\n  }\n\n  if (data) {\n    preLastMessageId = data?.messages[0]?.id;\n  }\n\n  const handleIncreaseLimit = () => {\n    setLimit(limit + 20);\n  };\n\n  const handleSetLastMessage = (lastMessage: Message) => {\n    setLastMessage(lastMessage);\n  };\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\">\n      <MobileHeaderMenu\n        channelName={channelName}\n        user={user.sub}\n        showAddUserButton={true}\n      />\n      <Box className={classes.root} component=\"article\">\n        <MessageList\n          messages={data?.messages as Message[]}\n          lastMessage={lastMessage}\n          preLastMessageId={preLastMessageId}\n          user={user}\n          handleIncreaseLimit={handleIncreaseLimit}\n          limit={limit}\n          setRef={setRef}\n        />\n      </Box>\n      <Box className={classes.messageInput} component=\"footer\">\n        <MenuBar channelId={channelId}>\n          <MessageInput\n            channelId={channelId}\n            handleSetLastMessage={handleSetLastMessage}\n            preLastMessageId={preLastMessageId}\n            scrollToBottom={scrollToBottom}\n          />\n        </MenuBar>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Chat;\n","import React from 'react';\nimport { useParams } from 'react-router';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useRecoilState } from 'recoil';\nimport { useGetChannelByNameQuery } from '../../api/generated/graphql';\nimport { currentChannelState } from '../../atom';\nimport Chat from './Chat';\nimport Loader from '../shared/Loader';\nimport { ChatParams } from '../../interfaces/param.interface';\n\nconst ChatApp: React.FC = () => {\n  const [currentChannel, setCurrentChannel] = useRecoilState<any>(\n    currentChannelState,\n  );\n  const { isAuthenticated, isLoading: isLoadingAuth0, error } = useAuth0();\n  const { channel: channelName } = useParams<ChatParams>();\n\n  const {\n    data,\n    loading: channelLoading,\n    error: channelError,\n  } = useGetChannelByNameQuery({\n    variables: {\n      name: channelName,\n    },\n  });\n\n  if (isLoadingAuth0 || channelLoading) {\n    return <Loader />;\n  }\n\n  if (\n    !currentChannel ||\n    (currentChannel && currentChannel.name !== channelName)\n  ) {\n    setCurrentChannel(data?.channel[0]);\n  }\n\n  if (error || channelError) {\n    return <>Error: {error}</>;\n  }\n\n  return (\n    <>\n      {isAuthenticated && (\n        <Chat\n          channelId={currentChannel?.id}\n          isPrivate={currentChannel?.is_private}\n          channelType={currentChannel?.channel_type}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ChatApp;\n","import React from 'react';\nimport { Grid } from '@material-ui/core/';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ChatApp from './ChatApp';\n\nconst useStyles = makeStyles(() => ({\n  chatApp: {\n    height: '100vh',\n    overflowY: 'hidden',\n  },\n}));\n\nconst ChatContainer: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <Grid item xs={12} md={9} className={classes.chatApp} component=\"section\">\n      <ChatApp />\n    </Grid>\n  );\n};\n\nexport default ChatContainer;\n","import React, { useEffect } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport ChatContainer from '../chat/ChatContainer';\nimport { useSetUserOnlineMutation } from '../../api/generated/graphql';\n\nconst ChatBoard: React.FC = () => {\n  const { user } = useAuth0();\n\n  const [sendUserIsOnline] = useSetUserOnlineMutation({\n    variables: { user_id: user?.sub },\n  });\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (user?.sub !== undefined) {\n        sendUserIsOnline();\n      }\n    }, 9000);\n    return function cleanup() {\n      clearInterval(interval);\n    };\n  }, []);\n\n  return <ChatContainer />;\n};\n\nexport default ChatBoard;\n","import React from 'react';\nimport {\n  Avatar,\n  Box,\n  Paper,\n  Table,\n  TableBody,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableCell,\n  Typography,\n  CircularProgress,\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { useGetUserListQuery } from '../../api/generated/graphql';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: { overflowY: 'scroll', height: '100vh' },\n}));\n\nconst AdminUserList: React.FC = () => {\n  const classes = useStyles();\n  const { data, loading, error } = useGetUserListQuery({\n    variables: {},\n  });\n\n  if (loading) {\n    return <CircularProgress />;\n  }\n\n  if (error) {\n    return <Alert severity=\"error\">Users could not be loaded.</Alert>;\n  }\n\n  return (\n    <Box className={classes.root}>\n      <h2>Userlist</h2>\n      <p>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Tempore, quos\n        sunt magni natus suscipit nesciunt. Nostrum voluptatum suscipit\n        assumenda officia in! Incidunt similique a adipisci facere neque, cum\n        nesciunt reprehenderit.\n      </p>\n      {data && (\n        <TableContainer component={Paper}>\n          <Table aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Avatar</TableCell>\n                <TableCell>Username</TableCell>\n                <TableCell align=\"right\">UserId</TableCell>\n                <TableCell align=\"left\">Auth0</TableCell>\n                <TableCell align=\"left\">Last seen</TableCell>\n              </TableRow>\n            </TableHead>\n            {data.users.map((user) => (\n              <TableBody>\n                <TableRow key={user.id}>\n                  <TableCell>\n                    <Avatar\n                      alt={user.username}\n                      src=\"https://api.adorable.io/avatars/173/abott@adorable.png\"\n                    />\n                  </TableCell>\n                  <TableCell component=\"th\" scope=\"row\">\n                    <Typography variant=\"body2\">{user.username}</Typography>\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    <Typography variant=\"caption\">{user.id}</Typography>\n                  </TableCell>\n                  <TableCell align=\"left\">\n                    <Typography variant=\"body2\">\n                      {user.auth0_user_id}\n                    </Typography>\n                  </TableCell>\n                  <TableCell align=\"left\">\n                    {user.last_seen ? user.last_seen : 'Has not logged in yet.'}\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            ))}\n          </Table>\n        </TableContainer>\n      )}\n    </Box>\n  );\n};\n\nexport default AdminUserList;\n","import React, { useEffect } from 'react';\nimport { useDeletePollQuestionMutation } from '../../api/generated/graphql';\nimport { Button } from '@material-ui/core';\n\ninterface DeleteAnswerProps {\n  questionId: number;\n  setActiveState: boolean;\n  channelPollState?: Array<any>;\n}\n\nconst DeleteQuestion: React.FC<DeleteAnswerProps> = ({\n  questionId,\n  setActiveState,\n  channelPollState,\n}) => {\n  const [deleteQuestion, { error }] = useDeletePollQuestionMutation({\n    variables: {\n      pollQuestionId: questionId,\n    },\n  });\n\n  const handleQuestionDelete = async (questionId: number) => {\n    if (!questionId) return;\n\n    await deleteQuestion({\n      variables: {\n        pollQuestionId: questionId,\n      },\n    });\n  };\n\n  if (error) {\n    console.log(`Error on delete question ${questionId}`);\n  }\n\n  return (\n    <>\n      {setActiveState === true ? (\n        <Button variant=\"outlined\" size=\"small\" color=\"secondary\" disabled>\n          Poll locked\n        </Button>\n      ) : (\n        <Button\n          variant=\"contained\"\n          size=\"small\"\n          color=\"secondary\"\n          onClick={() => {\n            handleQuestionDelete(questionId);\n          }}\n          aria-label=\"Delete Question\"\n        >\n          Delete\n        </Button>\n      )}\n    </>\n  );\n};\n\nexport default DeleteQuestion;\n","import React, { useState, useEffect } from 'react';\nimport { theme } from '../../theme/theme';\nimport { useRecoilValue } from 'recoil';\nimport { getPollQuestionAnswers } from '../../atom';\nimport {\n  useWatchGetChannelsSubscription,\n  useWatchChannelPollActiveStateSubscription,\n  useAddPublishPollQuestionToChannelMutation,\n  useDeletePollQuestionFromChannelMutation,\n} from '../../api/generated/graphql';\nimport { Box, Chip } from '@material-ui/core';\nimport Loader from '../../components/shared/Loader';\n\ninterface GetChannelsProps {\n  questionId: number;\n  questionLocked: boolean;\n}\n\nconst GetChannels: React.FC<GetChannelsProps> = ({\n  questionId,\n  questionLocked,\n}) => {\n  const [questionIdState, setQuestionIdState] = React.useState(questionId);\n  const getPollQuestionId = useRecoilValue<number>(getPollQuestionAnswers);\n  const [channelId, setChannelID] = useState<string>('');\n  const { data, loading, error } = useWatchGetChannelsSubscription();\n  const {\n    data: checkActiveChannelState,\n  } = useWatchChannelPollActiveStateSubscription({\n    variables: {},\n  });\n\n  const [pollQuestionToChannel] = useAddPublishPollQuestionToChannelMutation();\n  const [\n    deletePollQuestionFromChannelMutation,\n    { error: deleteError },\n  ] = useDeletePollQuestionFromChannelMutation({\n    variables: {\n      pollQuestionId: getPollQuestionId,\n      channelId: parseInt(channelId),\n    },\n  });\n\n  useEffect(() => {\n    setQuestionIdState(questionId);\n  }, [questionId, questionIdState]);\n\n  if (loading) {\n    return (\n      <Box\n        width=\"100%\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <Loader />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return <p>Error loading.</p>;\n  }\n\n  const handlePublishOnChannel = async (kanalId: number) => {\n    await pollQuestionToChannel({\n      variables: {\n        channelID: kanalId,\n        pollQuestionID: getPollQuestionId,\n      },\n    });\n  };\n\n  const handleDeleteQuestionFromChannel = async (kanalId: number) => {\n    if (kanalId === undefined) return;\n\n    await deletePollQuestionFromChannelMutation({\n      variables: {\n        pollQuestionId: getPollQuestionId,\n        channelId: kanalId,\n      },\n    });\n\n    if (deleteError) {\n      console.log('error on delete question from channel');\n    }\n  };\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        justifyContent=\"flex-start\"\n        alignItems=\"flex-start\"\n        flexDirection=\"column\"\n        pb={1}\n      >\n        {data?.channel\n          .sort((a, b) => a.id - b.id)\n          .map((chn, index) => (\n            <Box\n              key={index}\n              display=\"flex\"\n              justifyContent=\"space-between\"\n              alignItems=\"center\"\n            >\n              <Box\n                display=\"flex\"\n                justifyContent=\"space-between\"\n                alignItems=\"center\"\n                flexDirection=\"row\"\n                flex={1}\n              >\n                <Chip\n                  disabled={\n                    chn.channel_polls[0]?.poll_question?.id !==\n                      questionIdState &&\n                    chn.channel_polls[0]?.poll_question?.id !== undefined\n                      ? true\n                      : false || !questionLocked\n                  }\n                  onClick={() => handlePublishOnChannel(chn.id)}\n                  onDelete={() => {\n                    handleDeleteQuestionFromChannel(chn.id);\n                  }}\n                  style={{\n                    marginTop: theme.spacing(1),\n                    marginRight: theme.spacing(1),\n                    maxWidth: 150,\n                  }}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  color={\n                    chn.channel_polls[0]?.channel_id === chn.id\n                      ? 'secondary'\n                      : 'primary'\n                  }\n                  label={chn.name}\n                />\n                <Chip\n                  variant={\n                    chn.channel_polls[0]?.poll_question?.text\n                      ? 'default'\n                      : 'outlined'\n                  }\n                  color={\n                    chn.channel_polls[0]?.poll_question?.text\n                      ? 'secondary'\n                      : 'primary'\n                  }\n                  label={\n                    chn.channel_polls[0]?.poll_question?.text\n                      ? chn.channel_polls[0]?.poll_question?.text\n                      : 'No poll set.'\n                  }\n                  size=\"small\"\n                  style={{\n                    marginTop: theme.spacing(1),\n                    width: 150,\n                    minWidth: 100,\n                    maxWidth: 150,\n                  }}\n                />\n              </Box>\n            </Box>\n          ))}\n      </Box>\n    </>\n  );\n};\n\nexport default GetChannels;\n","import React, { useEffect } from 'react';\nimport { Button } from '@material-ui/core';\nimport {\n  useWatchGetPollAnswersSubscription,\n  useSetPublishPollQuestionStateMutation,\n} from '../../api/generated/graphql';\nimport Loader from '../shared/Loader';\nimport LockIcon from '@material-ui/icons/Lock';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  lock: {\n    color: theme.palette.error.main,\n  },\n  unlock: {\n    color: theme.palette.success.main,\n  },\n}));\n\ninterface SetPollQuestionLockStateProps {\n  pollQuestionId: number;\n  setActiveState: boolean;\n}\n\nconst SetPollQuestionLockState: React.FC<SetPollQuestionLockStateProps> = ({\n  pollQuestionId,\n  setActiveState,\n}) => {\n  const classes = useStyles();\n  const [readyToPublish, setReadyToPublish] = React.useState<boolean>(\n    setActiveState,\n  );\n  const [setPollQuestionState] = useSetPublishPollQuestionStateMutation({\n    variables: {\n      pollQuestionId: pollQuestionId,\n      is_active: setActiveState,\n    },\n  });\n  const { data, loading } = useWatchGetPollAnswersSubscription({\n    variables: {\n      pollQuestionId: pollQuestionId,\n    },\n  });\n\n  useEffect(() => {\n    const totalAnswers = data?.poll_answers?.length;\n    if (totalAnswers && totalAnswers > 1) {\n      setReadyToPublish(false);\n    } else {\n      setReadyToPublish(true);\n    }\n  }, [readyToPublish, data]);\n\n  const handleSetPollQuestionPublishState = async () => {\n    await setPollQuestionState({\n      variables: {\n        pollQuestionId: pollQuestionId,\n        is_active: !setActiveState,\n      },\n    });\n  };\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      <Button\n        variant={readyToPublish === true ? 'outlined' : 'contained'}\n        color={readyToPublish ? 'primary' : 'secondary'}\n        disabled={readyToPublish}\n        endIcon={\n          setActiveState ? (\n            <LockIcon className={classes.lock} />\n          ) : (\n            <LockOpenIcon className={classes.unlock} />\n          )\n        }\n        onClick={handleSetPollQuestionPublishState}\n      >\n        {setActiveState ? 'locked' : 'unlocked'}\n      </Button>\n    </>\n  );\n};\n\nexport default SetPollQuestionLockState;\n","import React, { useEffect } from 'react';\nimport moment from 'moment';\nimport { theme } from '../../theme/theme';\nimport clsx from 'clsx';\nimport { Link } from 'react-router-dom';\nimport { useRecoilState } from 'recoil';\nimport {\n  Accordion,\n  AccordionActions,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Button,\n  Chip,\n  Typography,\n} from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport NotFound from '../shared/NotFound';\nimport {\n  useWatchGetPollQuestionsSubscription,\n  useWatchGetChannelsSubscription,\n} from '../../api/generated/graphql';\nimport { getPollQuestionAnswers } from '../../atom';\nimport DeleteQuestion from './DeleteQuestion';\nimport GetChannels from './GetChannels';\nimport Loader from '../shared/Loader';\nimport SetPollQuestionLockState from './SetPollQuestionLockState';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  play: {\n    color: theme.palette.error.main,\n  },\n  stop: {\n    color: theme.palette.success.main,\n  },\n  text: {\n    [theme.breakpoints.down('sm')]: {\n      fontSize: 14,\n      lineHeight: '15px',\n    },\n  },\n  details: {\n    alignItems: 'flex-start',\n  },\n  voteIcon: {\n    marginRight: theme.spacing(1),\n  },\n}));\n\nconst GetPollQuestions: React.FC = () => {\n  const classes = useStyles();\n  const { data, loading, error } = useWatchGetPollQuestionsSubscription({\n    variables: {},\n  });\n  const [pollQuestion, setPollQuestion] = useRecoilState<any>(\n    getPollQuestionAnswers,\n  );\n\n  const {\n    data: getChannel,\n    loading: loadingGetChannel,\n  } = useWatchGetChannelsSubscription();\n\n  const handleClick = (questionId: number) => {\n    setPollQuestion(questionId);\n  };\n\n  if (loading || loadingGetChannel) {\n    return <Loader />;\n  }\n\n  if (error) {\n    return <NotFound />;\n  }\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        style={{ marginRight: theme.spacing(2) }}\n      >\n        <Typography variant=\"h3\" style={{ padding: theme.spacing(2) }}>\n          Poll list overview:\n        </Typography>\n        <Chip\n          variant=\"outlined\"\n          size=\"small\"\n          color=\"secondary\"\n          label={'Total polls: ' + data?.questions.length}\n        />\n      </Box>\n      {data?.questions.length === 0 ? (\n        <Alert severity=\"info\">Please add a new question.</Alert>\n      ) : (\n        data?.questions\n          .sort((a, b) => a.id + b.id)\n          .map((question) => (\n            <Accordion key={question.id} defaultExpanded={false}>\n              <AccordionSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls={question.text}\n                id={question.text}\n              >\n                {question?.channel_polls.length > 0 ? (\n                  <HowToVoteIcon\n                    color=\"secondary\"\n                    className={classes.voteIcon}\n                  />\n                ) : (\n                  <HowToVoteIcon className={classes.voteIcon} />\n                )}\n                <Typography\n                  color={\n                    question?.channel_polls.length > 0 ? 'secondary' : 'primary'\n                  }\n                  component={Link}\n                  onClick={() => {\n                    handleClick(question.id);\n                  }}\n                  to={{\n                    pathname:\n                      '/dashboard/pollings/edit/question/' + question.id,\n                    state: { fromDashboard: true },\n                  }}\n                  className={classes.text}\n                >\n                  {question.text}\n                </Typography>\n              </AccordionSummary>\n              <AccordionDetails className={classes.details}>\n                <div\n                  onMouseEnter={() => {\n                    handleClick(question.id);\n                  }}\n                >\n                  <>\n                    <Typography variant=\"caption\">\n                      Where you want to publish this poll? Orange colored\n                      channels has an active poll.\n                    </Typography>\n                    <GetChannels\n                      questionId={question.id}\n                      questionLocked={question.is_active}\n                    />\n                  </>\n                </div>\n              </AccordionDetails>\n              <AccordionActions>\n                <SetPollQuestionLockState\n                  pollQuestionId={question.id}\n                  setActiveState={question.is_active}\n                />\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  component={Link}\n                  to={`/dashboard/pollings/edit/question/${question.id}`}\n                  aria-label=\"Poll Question\"\n                  size=\"small\"\n                >\n                  Edit\n                </Button>\n\n                <DeleteQuestion\n                  questionId={question.id}\n                  setActiveState={question.is_active}\n                />\n              </AccordionActions>\n            </Accordion>\n          ))\n      )}\n    </>\n  );\n};\n\nexport default GetPollQuestions;\n","import React, { useEffect } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useAddPollQuestionMutation } from '../../api/generated/graphql';\nimport { theme } from '../../theme/theme';\nimport {\n  Box,\n  FormGroup,\n  IconButton,\n  InputAdornment,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\nimport SendIcon from '@material-ui/icons/Send';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n  form: {},\n  messageInput: {\n    floatingLabelFocusStyle: {\n      color: theme.palette.secondary.dark,\n    },\n  },\n  messageButton: {\n    [theme.breakpoints.down('md')]: {\n      width: '100%',\n      size: 'small',\n    },\n    [theme.breakpoints.up('md')]: {\n      size: 'large',\n      width: '25%',\n    },\n    marginTop: theme.spacing(2),\n    marginLeft: theme.spacing(0),\n    backgroundColor: theme.palette.primary.dark,\n  },\n}));\n\nconst AddPollQuestion: React.FC = () => {\n  const classes = useStyles();\n  const { user: userAuth0 } = useAuth0();\n  const [addPollQuestionMutation] = useAddPollQuestionMutation();\n  const [pollTitle, setPollTitle] = React.useState<{ title: string }>({\n    title: '',\n  });\n\n  const handleChange = (e: any) => {\n    setPollTitle({ ...pollTitle, [e.target.id]: e.target.value });\n  };\n\n  const handleAddTitle = async (e: any) => {\n    e.preventDefault();\n\n    if (pollTitle.title === '') return;\n\n    await addPollQuestionMutation({\n      variables: {\n        text: pollTitle.title,\n        owner_id: userAuth0.sub,\n      },\n    });\n\n    setPollTitle({ title: '' });\n  };\n\n  useEffect(() => {}, [pollTitle]);\n\n  return (\n    <>\n      <Box className={classes.root}>\n        <Typography variant=\"h2\" style={{ paddingBottom: theme.spacing(1) }}>\n          Add new poll\n        </Typography>\n        <form\n          className={classes.form}\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleAddTitle}\n        >\n          <FormGroup>\n            <TextField\n              id=\"title\"\n              required\n              value={pollTitle.title}\n              onChange={handleChange}\n              size=\"small\"\n              variant=\"outlined\"\n              multiline\n              rows={1}\n              color=\"secondary\"\n              autoComplete=\"off\"\n              placeholder=\"Type your question here ...\"\n              label=\"Add a meaningful question\"\n              fullWidth\n              inputProps={{\n                maxLength: 200,\n              }}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      id=\"message_submit\"\n                      type=\"submit\"\n                      color=\"secondary\"\n                      aria-label=\"Send message\"\n                    >\n                      <SendIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n                classes: {\n                  input: classes.messageInput,\n                },\n              }}\n              InputLabelProps={{\n                className: classes.messageInput,\n              }}\n            />\n          </FormGroup>\n        </form>\n      </Box>\n    </>\n  );\n};\n\nexport default AddPollQuestion;\n","import React from 'react';\nimport { Box, Divider, Grid } from '@material-ui/core';\n\nimport GetPollQuestions from './GetPollQuestions';\nimport AddPollQuestion from './AddPollQuestion';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  divider: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst PollingDashBoard: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <AddPollQuestion />\n      <Divider className={classes.divider} />\n      <GetPollQuestions />\n    </>\n  );\n};\n\nexport default PollingDashBoard;\n","import React, { useEffect } from 'react';\nimport { Chip } from '@material-ui/core';\n\ninterface GetPollAnswerIdProps {\n  pollQuestionId: number;\n}\n\nconst GetPollAnswerId: React.FC<GetPollAnswerIdProps> = ({\n  pollQuestionId,\n}) => {\n  useEffect(() => {}, [pollQuestionId]);\n\n  return (\n    <>\n      <Chip\n        color=\"secondary\"\n        size=\"small\"\n        variant=\"outlined\"\n        label={'Poll question id: ' + pollQuestionId}\n      />\n    </>\n  );\n};\n\nexport default GetPollAnswerId;\n","import React, { useEffect } from 'react';\nimport { useDeletePollAnswerIdMutation } from '../../api/generated/graphql';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { IconButton } from '@material-ui/core';\n\ninterface DeleteAnswerProps {\n  answerId: number;\n  setActiveState: boolean;\n}\n\nconst DeleteAnswer: React.FC<DeleteAnswerProps> = ({\n  answerId,\n  setActiveState,\n}) => {\n  const [deletePollAnswerIdMutation] = useDeletePollAnswerIdMutation({\n    variables: {\n      pollAnswerId: answerId,\n    },\n  });\n\n  useEffect(() => {}, [answerId, setActiveState]);\n\n  const handleDeleteAnswer = async (answerId: number) => {\n    await deletePollAnswerIdMutation({\n      variables: {\n        pollAnswerId: answerId,\n      },\n    });\n  };\n\n  return (\n    <>\n      <IconButton\n        id=\"answer_update\"\n        type=\"submit\"\n        color=\"secondary\"\n        aria-label=\"Update answer text\"\n        disabled={setActiveState}\n        onClick={() => {\n          handleDeleteAnswer(answerId);\n        }}\n      >\n        <DeleteIcon />\n      </IconButton>\n    </>\n  );\n};\n\nexport default DeleteAnswer;\n","import React from 'react';\nimport {\n  useWatchGetPollAnswersSubscription,\n  useUpdatePollAnswerTextMutation,\n  useWatchGetPollQuestionSubscription,\n} from '../../api/generated/graphql';\nimport {\n  Badge,\n  Box,\n  Chip,\n  FormGroup,\n  InputAdornment,\n  IconButton,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\nimport UpdateIcon from '@material-ui/icons/Update';\nimport Alert from '@material-ui/lab/Alert';\nimport DeleteAnswer from './DeleteAnswer';\nimport Loader from '../shared/Loader';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  messageInput: {\n    floatingLabelFocusStyle: {\n      color: theme.palette.secondary.dark,\n    },\n    [theme.breakpoints.down('sm')]: {\n      fontSize: 14,\n    },\n  },\n}));\n\ninterface PollAnswerListProps {\n  pollQuestionId: number;\n}\n\nconst PollAnswerList: React.FC<PollAnswerListProps> = ({ pollQuestionId }) => {\n  const classes = useStyles();\n  const [updateEnabled, setUpdateEnabled] = React.useState(true);\n  const [answerTextUpdateId, setAnswerTextUpdateId] = React.useState<number>(0);\n  const [answerText, setAnswerText] = React.useState({\n    text: '',\n  });\n  const getPollQuestion = useWatchGetPollQuestionSubscription({\n    variables: {\n      pollQuestionId: pollQuestionId,\n    },\n  });\n  const { data, loading } = useWatchGetPollAnswersSubscription({\n    variables: {\n      pollQuestionId: pollQuestionId,\n    },\n  });\n  const [updatePollAnswerTextMutation] = useUpdatePollAnswerTextMutation({\n    variables: {\n      text: answerText.text,\n      pollAnswerId: answerTextUpdateId,\n    },\n  });\n\n  const handleAnswerChange = (index?: number, e?: any) => {\n    setAnswerText({ text: e.target.value });\n    setUpdateEnabled(false);\n  };\n\n  const handleUpdateAnswerText = async (answerId: number) => {\n    setAnswerTextUpdateId(answerId);\n\n    if (answerId === undefined || answerText.text === '') {\n      setUpdateEnabled(true);\n      return;\n    }\n\n    await updatePollAnswerTextMutation({\n      variables: {\n        text: Object.values(answerText)[0],\n        pollAnswerId: answerId,\n      },\n    });\n    answerText.text = '';\n    setUpdateEnabled(true);\n  };\n\n  if (getPollQuestion.loading || loading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      <Box display=\"flex\" justifyContent=\"flex-start\" alignItems=\"center\">\n        <Typography variant=\"h3\">Answers to these question</Typography>\n        <Chip\n          variant=\"outlined\"\n          size=\"small\"\n          color=\"primary\"\n          label={'Total answers: ' + data?.poll_answers.length}\n          style={{ marginLeft: '16px' }}\n        />\n      </Box>\n      {data?.poll_answers.length === 0 ? (\n        <Alert severity=\"info\">Please add an answer to the poll.</Alert>\n      ) : (\n        data?.poll_answers\n          .sort((a, b) => a.id - b.id)\n          .map((answer) => (\n            <FormGroup row key={answer.id}>\n              <TextField\n                key={answer.id}\n                name={answer.text + answer.id}\n                required\n                disabled={getPollQuestion?.data?.poll_question[0].is_active}\n                onChange={(e) => {\n                  handleAnswerChange(answer?.id, e);\n                  setAnswerTextUpdateId(answer.id);\n                }}\n                multiline\n                rows={1}\n                rowsMax={4}\n                size=\"small\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                autoComplete=\"off\"\n                placeholder={answer.text}\n                label={answer.text}\n                fullWidth\n                margin=\"dense\"\n                inputProps={{\n                  maxLength: 250,\n                }}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        key={answer.id}\n                        id=\"answer_update\"\n                        type=\"submit\"\n                        color=\"secondary\"\n                        aria-label=\"update_answer_text\"\n                        onClick={() => {\n                          handleUpdateAnswerText(answer.id);\n                        }}\n                        disabled={\n                          answer.id !== answerTextUpdateId\n                            ? true\n                            : false || updateEnabled === true\n                        }\n                      >\n                        <UpdateIcon />\n                      </IconButton>\n                      <DeleteAnswer\n                        answerId={answer.id}\n                        setActiveState={\n                          getPollQuestion?.data?.poll_question[0].is_active ||\n                          answer.votes !== 0\n                            ? true\n                            : false\n                        }\n                      />\n                      <Badge\n                        badgeContent={answer.votes ? answer.votes : 0}\n                        color=\"secondary\"\n                      >\n                        <HowToVoteIcon color=\"primary\" />\n                      </Badge>\n                    </InputAdornment>\n                  ),\n                  classes: {\n                    input: classes.messageInput,\n                  },\n                }}\n                InputLabelProps={{\n                  shrink: true,\n                  className: classes.messageInput,\n                }}\n              />\n            </FormGroup>\n          ))\n      )}\n    </>\n  );\n};\n\nexport default PollAnswerList;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  Box,\n  IconButton,\n  InputAdornment,\n  Divider,\n  FormGroup,\n  Grid,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport {\n  useWatchGetPollQuestionSubscription,\n  useAddAnswerToQuestionMutation,\n} from '../../api/generated/graphql';\nimport GetChannels from './GetChannels';\nimport GetPollAnswerId from './GetPollAnswerId';\nimport PollAnswerList from './PollAnswerList';\nimport SetPollQuestionLockState from './SetPollQuestionLockState';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n    marginTop: theme.spacing(5),\n  },\n  divider: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  form: {},\n  messageInput: {\n    floatingLabelFocusStyle: {\n      color: theme.palette.secondary.dark,\n    },\n    [theme.breakpoints.down('sm')]: {\n      fontSize: 14,\n    },\n  },\n  messageButton: {\n    [theme.breakpoints.down('md')]: {\n      width: '100%',\n      size: 'small',\n    },\n    [theme.breakpoints.up('md')]: {\n      size: 'large',\n      width: '25%',\n    },\n    marginTop: theme.spacing(2),\n    marginLeft: theme.spacing(0),\n    backgroundColor: theme.palette.primary.dark,\n  },\n}));\n\ninterface ParamType {\n  question: string;\n}\n\nconst PollAnswers: React.FC = () => {\n  const classes = useStyles();\n  const [answerNewText, setAnswerNewText] = React.useState({\n    text: '',\n  });\n  const [answerText, setAnswerText] = React.useState({\n    text: '',\n  });\n  const [answerTextUpdateId, setAnswerTextUpdateId] = React.useState<number>(0);\n  const [currentAnswerId, setCurrentAnswerId] = React.useState<number>(0);\n  const { question: pollQuestionId } = useParams<ParamType>();\n  const [pollQuestionActiveState] = React.useState<boolean>();\n\n  const getPollQuestion = useWatchGetPollQuestionSubscription({\n    variables: {\n      pollQuestionId: parseInt(pollQuestionId),\n    },\n  });\n\n  const [addPollQuestionMutation] = useAddAnswerToQuestionMutation();\n\n  const handleNewAnswerChange = (index?: number, e?: any) => {\n    setAnswerNewText({ text: e.target.value });\n    setCurrentAnswerId(e.target.id);\n  };\n\n  const handleAddAnswer = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (answerNewText.text === '') return;\n    await addPollQuestionMutation({\n      variables: {\n        text: answerNewText.text,\n        pollQuestionId: parseInt(pollQuestionId),\n      },\n    });\n\n    setAnswerNewText({ text: '' });\n  };\n\n  return (\n    <>\n      <Box className={classes.root}>\n        <GetPollAnswerId pollQuestionId={parseInt(pollQuestionId)} />\n\n        <Box\n          display=\"flex\"\n          justifyContent=\"space-between\"\n          alignItems=\"flex-end\"\n          mb={3}\n          mt={0}\n        >\n          <Typography variant=\"h2\">\n            {getPollQuestion?.data?.poll_question[0]?.text\n              ? getPollQuestion?.data?.poll_question[0]?.text\n              : 'no value'}\n          </Typography>\n        </Box>\n        <form\n          className={classes.form}\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleAddAnswer}\n        >\n          <FormGroup row>\n            <TextField\n              key={getPollQuestion?.data?.poll_question[0]?.id}\n              name=\"poll_answer\"\n              value={answerNewText.text}\n              required\n              id=\"outlined-multiline-static\"\n              label=\"Add an answer to these question\"\n              multiline\n              rows={1}\n              size=\"small\"\n              variant=\"outlined\"\n              color=\"secondary\"\n              autoComplete=\"off\"\n              placeholder=\"Type your answers here ...\"\n              disabled={getPollQuestion?.data?.poll_question[0]?.is_active}\n              onChange={(e) =>\n                handleNewAnswerChange(\n                  getPollQuestion?.data?.poll_question[0]?.id,\n                  e,\n                )\n              }\n              fullWidth\n              inputProps={{\n                maxLength: 150,\n              }}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      id=\"message_submit\"\n                      type=\"submit\"\n                      color=\"secondary\"\n                      aria-label=\"Send message\"\n                    >\n                      <SendIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n                classes: {\n                  input: classes.messageInput,\n                },\n              }}\n              InputLabelProps={{\n                className: classes.messageInput,\n              }}\n            />\n          </FormGroup>\n        </form>\n        <Divider className={classes.divider} />\n        <PollAnswerList pollQuestionId={parseInt(pollQuestionId)} />\n        <Divider className={classes.divider} />\n        <SetPollQuestionLockState\n          pollQuestionId={parseInt(pollQuestionId)}\n          setActiveState={\n            getPollQuestion?.data?.poll_question[0]?.is_active ? true : false\n          }\n        />\n      </Box>\n    </>\n  );\n};\n\nexport default PollAnswers;\n","import React from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { theme } from '../../theme/theme';\nimport { useRecoilState } from 'recoil';\nimport { Box, Chip, IconButton } from '@material-ui/core';\nimport { currentChannelState } from '../../atom';\nimport PeopleIcon from '@material-ui/icons/People';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport Logout from '../Logout';\nimport MenuBarDrawer from '../shared/MenuBarDrawer';\nimport SideBar from '../shared/SideBar';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    justifyContent: 'space-between',\n    backgroundColor: theme.palette.background.default,\n    marginTop: theme.spacing(0),\n    paddingTop: theme.spacing(2),\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    zIndex: 1000,\n    [theme.breakpoints.up('md')]: {\n      position: 'fixed',\n      width: '75vw',\n    },\n    [theme.breakpoints.down('md')]: {\n      position: 'fixed',\n    },\n  },\n  menuButton: {\n    width: theme.spacing(5),\n    height: theme.spacing(5),\n    backgroundColor: theme.palette.secondary.main,\n    marginLeft: theme.spacing(0),\n    '& .MuiIconButton-label': {\n      marginLeft: theme.spacing(1),\n    },\n  },\n  title: {\n    width: 180,\n    maxWidth: theme.spacing(22),\n  },\n}));\n\ninterface MobileHeaderMenuProps {\n  channelName: string;\n}\n\nconst MobileHeaderDashboardMenu: React.FC<MobileHeaderMenuProps> = ({\n  channelName,\n}) => {\n  const classes = useStyles();\n  const [currentChannel] = useRecoilState<any>(currentChannelState);\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        flexDirection=\"row\"\n        width={1}\n        className={classes.root}\n        component=\"header\"\n      >\n        {matches === false && (\n          <IconButton\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"open menu\"\n            onClick={handleDrawerOpen}\n          >\n            <ArrowBackIosIcon />\n          </IconButton>\n        )}\n        <Chip\n          size=\"small\"\n          variant=\"outlined\"\n          color=\"primary\"\n          label={channelName}\n          icon={<PeopleIcon />}\n          className={classes.title}\n          aria-label={`channel: ${channelName}`}\n        />\n        <Logout />\n      </Box>\n      <MenuBarDrawer open={open}>\n        <SideBar handleDrawerClose={handleDrawerClose} open={open} />\n      </MenuBarDrawer>\n    </>\n  );\n};\n\nexport default MobileHeaderDashboardMenu;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { theme } from '../../theme/theme';\nimport { Box, Divider, Grid, Typography } from '@material-ui/core/';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport AdminUserList from './AdminUserList';\nimport PollingDashBoard from '../adminPollings/PollingDashBoard';\nimport PollAnswers from '../adminPollings/PollAnswers';\nimport NotFound from '../shared/NotFound';\nimport MobileHeaderDashboardMenu from '../adminPollings/MobileHeaderDashboardMenu';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    overflowY: 'scroll',\n    maxHeight: '100vh',\n    height: '100vh',\n    padding: theme.spacing(0),\n  },\n  article: {\n    padding: theme.spacing(0),\n    paddingTop: theme.spacing(8),\n  },\n}));\n\nconst AdminContainer: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Grid item xs={12} md={9} component=\"section\" className={classes.root}>\n        <MobileHeaderDashboardMenu channelName=\"Dashboard\" />\n        <Box component=\"article\" className={classes.article}>\n          <Switch>\n            <Route exact path=\"/dashboard/users\" component={AdminUserList} />\n            <Route exact path=\"/dashboard\" component={PollingDashBoard} />\n            <Route\n              exact\n              path=\"/dashboard/pollings\"\n              component={PollingDashBoard}\n            />\n            <Route\n              exact\n              path=\"/dashboard/pollings/edit/question/:question\"\n              component={PollAnswers}\n            />\n            <Route component={NotFound} />\n          </Switch>\n        </Box>\n      </Grid>\n    </>\n  );\n};\n\nexport default AdminContainer;\n","import React, { useEffect } from 'react';\nimport AdminContainer from '../admin/AdminContainer';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useSetUserOnlineMutation } from '../../api/generated/graphql';\n\nconst AdminBoard: React.FC = () => {\n  const { user } = useAuth0();\n\n  const [sendUserIsOnline] = useSetUserOnlineMutation({\n    variables: { user_id: user?.sub },\n  });\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (user?.sub !== undefined) {\n        sendUserIsOnline();\n      }\n    }, 9000);\n    return function cleanup() {\n      clearInterval(interval);\n    };\n  }, []);\n\n  return <AdminContainer />;\n};\n\nexport default AdminBoard;\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { theme } from './theme/theme';\nimport {\n  Box,\n  Container,\n  Grid,\n  makeStyles,\n  useMediaQuery,\n} from '@material-ui/core';\nimport SignIn from './components/shared/SignIn';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport NotFound from './components/shared/NotFound';\nimport PrivateRoute from './components/PrivateRoute';\nimport AddChannelMembers from './components/chat/AddChannelMembers';\nimport AddDirectMessageChannel from './components/chat/AddDirectMessageChannel';\nimport ThreadBoard from './components/layout/ThreadBoard';\nimport ChatBoard from './components/layout/ChatBoard';\nimport AdminBoard from './components/layout/AdminBoard';\nimport Logo from './components/shared/Logo';\nimport SideBar from './components/shared/SideBar';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    // overflowY: 'scroll',\n    maxHeight: '100vh',\n    margin: 0,\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    overflowX: 'hidden',\n    height: '100vh',\n    [theme.breakpoints.down('md')]: {\n      overflowY: 'hidden',\n    },\n  },\n  sidebar: {\n    overflowY: 'hidden',\n    minHeight: '50vh',\n    display: 'flex',\n    alignItems: 'flex-start',\n  },\n}));\n\nconst App: React.FC = () => {\n  const { isAuthenticated, isLoading, user } = useAuth0();\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n\n  if (isLoading) {\n    return (\n      <>\n        <Box\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          flexDirection=\"column\"\n          style={{\n            height: '100vh',\n            backgroundColor: theme.palette.error.dark,\n          }}\n        >\n          <Box>\n            <Logo />\n            <LinearProgress color=\"primary\" style={{ marginTop: '16px' }} />\n          </Box>\n        </Box>\n      </>\n    );\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Container\n        component=\"main\"\n        disableGutters\n        maxWidth=\"xl\"\n        className={classes.container}\n      >\n        {matches === true && (\n          <Grid\n            item\n            xs={5}\n            sm={4}\n            md={3}\n            className={classes.sidebar}\n            component=\"nav\"\n          >\n            <SideBar handleDrawerClose={() => false} open={false} />\n          </Grid>\n        )}\n        <>\n          {isAuthenticated ? (\n            <Switch>\n              <Redirect exact from=\"/\" to=\"/channel/general\" />\n              <Redirect exact from=\"/channel\" to=\"/channel/general\" />\n\n              <PrivateRoute\n                path=\"/channel/:channel/thread/:messageId\"\n                component={ThreadBoard}\n              />\n              <PrivateRoute path=\"/channel/threads\" component={ThreadBoard} />\n              <PrivateRoute path=\"/channel/:channel\" component={ChatBoard} />\n\n              <PrivateRoute path=\"/add-user-to-channel\" component={ChatBoard} />\n              <PrivateRoute\n                path=\"/addChannelMembers\"\n                component={AddChannelMembers}\n              />\n              <PrivateRoute\n                path=\"/addDirectMessageChannelMembers\"\n                component={AddDirectMessageChannel}\n              />\n              <PrivateRoute path=\"/dashboard\" component={AdminBoard} />\n              <Route exact path=\"/404-not-found\" component={NotFound} />\n              <Redirect to=\"/404-not-found\" />\n            </Switch>\n          ) : (\n            <Switch>\n              <Redirect exact from=\"/\" to=\"/channel/general\" />\n              <Route path=\"/home\" component={SignIn} />\n              <PrivateRoute\n                path=\"/channel/:channel/thread/:messageId\"\n                component={ThreadBoard}\n              />\n              <PrivateRoute path=\"/channel/threads\" component={ThreadBoard} />\n              <PrivateRoute path=\"/channel/:channel\" component={ChatBoard} />\n              <PrivateRoute path=\"/dashboard\" component={AdminBoard} />\n              <Route exact path=\"/404-not-found\" component={NotFound} />\n              <Redirect to=\"/404-not-found\" />\n            </Switch>\n          )}\n        </>\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Auth0Provider } from '@auth0/auth0-react';\nimport ApolloWrapper from './components/ApolloWrapper';\nimport './index.css';\nimport App from './App';\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = (appState: any) => {\n  window.history.replaceState(\n    {},\n    document.title,\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname,\n  );\n};\n\nconst domain: string = process.env.REACT_APP_AUTH0_DOMAIN || '';\nconst clientId: string = process.env.REACT_APP_AUTH0_CLIENT_ID || '';\nconst redirectUri: string = process.env.REACT_APP_AUTH0_REDIRECT_URI || '';\nconst audience: string = process.env.REACT_APP_AUTH0_AUDIENCE || '';\n\nReactDOM.render(\n  <Auth0Provider\n    domain={domain}\n    clientId={clientId}\n    redirectUri={redirectUri}\n    onRedirectCallback={onRedirectCallback}\n    audience={audience}\n  >\n    <BrowserRouter>\n      <RecoilRoot>\n        <ApolloWrapper>\n          <React.Fragment>\n            <App />\n          </React.Fragment>\n        </ApolloWrapper>\n      </RecoilRoot>\n    </BrowserRouter>\n  </Auth0Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}