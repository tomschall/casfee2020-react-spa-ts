{"version":3,"sources":["api/generated/graphql.tsx","components/ApolloWrapper.tsx","theme/theme.tsx","theme/typography.ts","theme/overrides.ts","components/Login.tsx","components/shared/Logo.tsx","components/shared/SignIn.tsx","components/shared/NotFound.tsx","components/shared/Loader.tsx","components/PrivateRoute.tsx","atom.js","helpers/helpers.tsx","components/shared/OnlineUserStatus.tsx","components/admin/ResultGraph.tsx","components/admin/VoteButton.tsx","components/admin/ShowTotalVotes.tsx","components/admin/PublishChannelPolling.tsx","components/admin/PollPopup.tsx","components/Logout.tsx","components/shared/MenuBarDrawer.tsx","components/shared/UserStatus.tsx","components/chat/UnreadMessageCounter.tsx","components/chat/ChannelList.tsx","components/chat/DirectMessageUserList.tsx","components/chat/AddChannel.tsx","components/shared/ThreadsLink.tsx","components/shared/DashBoardLink.tsx","components/shared/SideBar.tsx","components/shared/UserHeader.tsx","components/chat/MobileHeaderMenu.tsx","components/chat/AddChannelMembers.tsx","components/chat/AddDirectMessageChannel.tsx","components/chat/threads/ThreadInfo.tsx","components/chat/threads/ThreadDeleteMessage.tsx","components/chat/threads/ThreadMessageList.tsx","components/shared/GiphyCarousel.tsx","components/shared/MenuBar.tsx","components/shared/TypingIndicator.tsx","components/chat/threads/ThreadMessageInput.tsx","components/chat/threads/Thread.tsx","components/chat/threads/ThreadListInputContainer.tsx","components/chat/threads/ThreadList.tsx","components/chat/threads/ThreadListContainer.tsx","components/chat/threads/ThreadContainer.tsx","components/layout/ThreadBoard.tsx","components/chat/threads/ThreadReply.tsx","components/chat/threads/ThreadReplyIn.tsx","components/chat/DeleteMessage.tsx","components/chat/ReplaceMessage.tsx","components/chat/DeleteMessageWrapper.tsx","components/chat/UpdateMessage.tsx","components/chat/MessageList.tsx","components/chat/MessageInput.tsx","components/chat/Chat.tsx","components/chat/ChatApp.tsx","components/chat/ChatContainer.tsx","components/layout/ChatBoard.tsx","components/admin/AdminUserList.tsx","components/admin/DeleteQuestion.tsx","components/admin/GetChannels.tsx","components/admin/SetPollQuestionLockState.tsx","components/admin/GetPollQuestions.tsx","components/admin/AddPollQuestion.tsx","components/admin/PollingDashBoard.tsx","components/admin/GetPollAnswerId.tsx","components/admin/DeleteAnswer.tsx","components/admin/PollAnswerList.tsx","components/admin/UpdatePollQuestion.tsx","components/admin/PollAnswers.tsx","components/admin/MobileHeaderDashboardMenu.tsx","components/admin/AdminContainer.tsx","components/layout/AdminBoard.tsx","App.tsx","index.tsx"],"names":["AddDirectMessageChannelChannelTypeEnum","MyMutationChannelTypeEnum","ValidateAndAddDirectMessageChannelTypeEnum","Channel_Constraint","Channel_Poll_Constraint","Channel_Poll_Select_Column","Channel_Poll_Update_Column","Channel_Select_Column","Channel_Thread_Constraint","Channel_Thread_Message_Constraint","Channel_Thread_Message_Select_Column","Channel_Thread_Message_Update_Column","Channel_Thread_Select_Column","Channel_Thread_Update_Column","Channel_Type_Constraint","Channel_Type_Enum","Channel_Type_Select_Column","Channel_Type_Update_Column","Channel_Update_Column","Message_Constraint","Message_Cursor_Constraint","Message_Cursor_Select_Column","Message_Cursor_Update_Column","Message_Select_Column","Message_Update_Column","Order_By","Poll_Anwers_Constraint","Poll_Anwers_Select_Column","Poll_Anwers_Update_Column","Poll_Questions_Constraint","Poll_Questions_Select_Column","Poll_Questions_Update_Column","User_Channels_Constraint","User_Channels_Select_Column","User_Channels_Update_Column","User_Constraint","User_Online_Select_Column","User_Select_Column","User_Typing_Select_Column","User_Update_Column","User_Votes_Constraint","User_Votes_Select_Column","User_Votes_Update_Column","ApolloWrapper","children","useAuth0","isAuthenticated","getAccessTokenSilently","getHeaders","a","headers","token","parseTokenAndSetRoles","Authorization","undefined","user","jwt_decode","sub","sessionStorage","setItem","authMiddleware","setContext","operation","originalHeaders","wsLinkOptions","uri","process","options","reconnect","lazy","connectionParams","httpLink","createHttpLink","wsLink","WebSocketLink","link","split","query","getMainDefinition","kind","concat","cache","InMemoryCache","client","ApolloClient","theme","createMuiTheme","palette","common","black","white","type","background","paper","default","primary","light","main","dark","contrastText","secondary","error","success","shape","borderRadius","mixins","toolbar","spacing","props","MuiCheckbox","style","fontSize","MuiChip","padding","MuiList","MuiListItemIcon","color","MuiPaper","draggable","elevation","overflow","MuiAppBar","top","bottom","MuiButton","disableElevation","variant","size","disableFocusRipple","disableTouchRipple","typography","body1","body2","fontWeight","button","h1","paddingBottom","h2","marginTop","h3","marginBottom","h4","h5","h6","overrides","MuiCssBaseline","width","height","backgroundColor","textDecoration","MuiToolbar","root","MuiPopover","MuiBackdrop","MuiFab","boxShadow","label","MuiSpeedDial","direction","directionUp","actions","display","MuiSpeedDialAction","fab","staticTooltip","tooltipOpen","tooltipPlacement","tooltipPlacementLeft","staticTooltipLabel","right","whiteSpace","MuiTableCell","borderBottom","MuiInputBase","MuiContainer","margin","MuiListItemText","MuiDivider","opacity","MuiTypography","contained","MuiIconButton","MuiAccordionSummary","expandIcon","Login","loginWithRedirect","Button","onClick","aria-label","useStyles","makeStyles","large","backgroundSize","Logo","classes","Avatar","className","alt","src","justifyContent","alignItems","flexDirection","alignContent","title","textTransform","paddingTop","SignIn","history","useHistory","push","Box","Typography","align","mb","toolbarIcon","NotFound","Loader","flex","CircularProgress","PrivateRoute","component","args","withAuthenticationRequired","onRedirecting","InsertMessageDocument","gql","useInsertMessageMutation","baseOptions","Apollo","UpdateMessageDocument","useUpdateMessageMutation","DeleteMessageDocument","SetUserOnlineDocument","useSetUserOnlineMutation","AddChannelDocument","ValidateAndAddDirectMessageChannelDocument","AddChannelUserDocument","SendTypingEventDocument","useSendTypingEventMutation","UpsertMessageCursorDocument","useUpsertMessageCursorMutation","InsertChannelThreadMessageDocument","useInsertChannelThreadMessageMutation","DeleteThreadMessageDocument","InsertChannelThreadDocument","AddPollQuestionDocument","AddAnswerToQuestionDocument","AddPublishPollQuestionToChannelDocument","SetPollAnswerVoteDocument","SetPublishPollQuestionStateDocument","DeletePollQuestionDocument","DeletePollQuestionFromChannelDocument","UpdatePollAnswerTextDocument","DeletePollAnswerIdDocument","SetUserVotePollQuestionDocument","UpdatePollQuestionDocument","GetUserListDocument","GetChannelByNameDocument","GetChannelThreadDocument","WatchMessagesDocument","useWatchMessagesSubscription","WatchChannelThreadMessagesDocument","useWatchChannelThreadMessagesSubscription","WatchChannelThreadDocument","useWatchChannelThreadSubscription","WatchThreadsDocument","WatchOnlineUsersDocument","useWatchOnlineUsersSubscription","WatchChannelsDocument","WatchDirectMessageChannelsDocument","WatchUsersWhoHaveNotSubscribedToChannelDocument","WatchUsersWhoHaveSubscribedToDirectMessageChannelDocument","WatchUsersWhoHaveSubscribedToChannelDocument","GetUserIsTypingDocument","WatchMessageCursorDocument","WatchGetPollQuestionsDocument","WatchGetPollQuestionDocument","useWatchGetPollQuestionSubscription","WatchGetPollAnswersDocument","useWatchGetPollAnswersSubscription","WatchChannelPollQuestionDocument","WatchPollAnswerVotesDocument","WatchGetChannelsDocument","useWatchGetChannelsSubscription","WatchChannelHasActivePollDocument","WatchCheckUserHasVotedDocument","atom","key","currentChannelState","getPollQuestionAnswers","giphyState","deletedMessageState","logToConsole","msg","rest","console","log","badgeOnline","position","left","animation","border","content","badgeOffline","avatar","OnlineUserStatus","showBadgeInChildren","onlineUsers","data","onlineUsersError","Alert","severity","username","ListItemIcon","Badge","user_id","badge","onlineUser","users","filter","u","auth0_user_id","length","setOnlineUsersStatus","substring","toUpperCase","text","breakpoints","down","ResultGraph","answerId","userVote","pollVotes","totalVotes","LinearProgressWithLabel","mr","LinearProgress","id","String","Chip","value","toFixed","icon","answerid","pollSubmit","VoteButton","enabled","disabled","ShowTotalVotes","badgeContent","pollCard","transform","minWidth","PublishChannelPolling","useRecoilState","currentChannel","React","useState","selectedPollAnswerId","setSelectedPollAnswerId","getPollAnswerVotes","variables","pollAnswerId","useWatchChannelPollQuestionSubscription","channelId","loading","useSetPollAnswerVoteMutation","setPollAnswerVoteMutation","numbers","getChannelPoll","poll_question","poll_anwers","count","map","num","votes","reduce","b","useWatchCheckUserHasVotedSubscription","pollQuestionId","auth0UserId","userVoteLoading","useSetUserVotePollQuestionMutation","userName","setUserVotePollQuestionMutation","handleChange","e","parseInt","target","handleSubmit","preventDefault","currentPollAnswerVotes","pollAnswerVotes","newVote","nickname","user_votes","Paper","channelPoll","sort","poll_answer_id","onSubmit","FormControl","RadioGroup","name","onChange","pollAnswer","FormControlLabel","control","Radio","checked","popoverRoot","popupWidth","voteIcon","cursor","PollPopUp","currentChannelId","poll_questions","popupId","popupState","bindTrigger","Popover","anchorReference","bindPopover","close","maxWidth","Logout","logout","IconButton","returnTo","window","clear","up","paddingLeft","paddingRight","drawerPaper","transition","transitions","create","easing","easeInOut","duration","enteringScreen","drawerPaperClose","overflowX","easeOut","leavingScreen","MenuBarDrawer","open","Drawer","anchor","clsx","Toolbar","UserStatus","usersOnline","marginRight","marginLeft","Tooltip","placement","flexWrap","item","UnreadMessageCounter","auth0Error","setCount","fetchPolicy","channel_id","useWatchMessageCursorData","useWatchMessageCursorLoading","useWatchMessageCursorError","useEffect","messageId","message_cursor","message_id","messageCounterArray","messages","m","Fragment","Channels","setOpen","match","useRouteMatch","activeLink","channel_type","ChatMessage","List","ListItem","ListItemText","Collapse","in","timeout","channels","index","Link","to","is_private","nested","form","flexGrow","submit","itemText","DirectMessageUserList","DirectMessage","user_channels","checkbox","AddChannel","matches","useMediaQuery","openAlert","setOpenAlert","channelName","setChannelName","channelIsPrivate","setChannelIsPrivate","addChannel","sendMessage","userAuth0","loadingAuth0","isLoading","setSnackbarPosition","handleAlert","channel","owner_id","toLocaleLowerCase","dataAddChannel","message","insert_channel","returning","unmountOnExit","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Grid","container","noValidate","autoComplete","xs","TextField","autoFocus","placeholder","fullWidth","Checkbox","endIcon","arial-label","ThreadsLink","DashboardLink","overflowY","WebkitOverflowScrolling","branding","logo","menuButton","SideBar","handleDrawerClose","role","getItem","Divider","DashBoardLink","ChannelList","UserHeader","zIndex","outerContainer","MobileHeaderMenu","showAddUserButton","isThreadList","spacer","AddChannelMembers","useAddChannelUserMutation","addChannelUserMutation","addChannelUserError","handleUsersToggle","md","mt","AddDirectMessageChannel","setAnchorEl","setUsers","upsertMessageCursorMutation","upsertMessageError","sendUpdateMessageError","useValidateAndAddDirectMessageChannelMutation","validateAndAddDirectMessageChannelMutation","addDMError","checkUserSubscriptions","user_channel","check","handleAddUser","dm_user","uuidv4","user_id1","user_id2","validateAndAddDirectMessageChannel","head","messageText","ThreadInfo","channelThread","showThreadInfo","vspaceTop","ListItemAvatar","deleted","avatarDeleted","moment","timestamp","fromNow","vspace","image","giphy","renderThreadInfo","ThreadDeleteMessage","deleteThreadMessageMutation","delete_channel_thread_message","affected_rows","handleDelete","overflowWrap","hyphens","textOverflow","reply","ThreadMessageList","handleIncreaseLimit","limit","loadMoreButton","reverse","renderMessage","giphySearchInput","giphyCarousel","giphyFetch","GiphyFetch","GiphyCarousel","hideGiphyCarousel","setGif","giphySearchString","setGiphySearchString","fetchGifs","offset","search","trending","onGifClick","gif","gifHeight","gutter","ev","giphyImage","giphyButton","MenuBar","openGiphy","setOpenGiphy","showGiphyCarousel","setShowGiphyCarousel","order","TypingIndicator","self_id","user_typing","messageInput","maxHeight","ThreadMessageInput","setText","setdeletedMessage","sendTypingEventMutation","trim","channelThreadId","channel_thread_id","images","fixed_width","url","textLength","handleTyping","onKeyPress","inputProps","maxLength","focused","setTextFieldSize","multiline","rows","InputProps","endAdornment","InputAdornment","input","InputLabelProps","Thread","setLimit","messagesEndRef","useRef","useParams","getChannelThreadData","getChannelThreadLoading","getChannelThreadError","setTimeout","channel_thread_message","current","scrollIntoView","scrollToBottom","channel_thread","ref","giphyVisible","giphyHidden","ThreadListInputContainer","alert","bitly_url","ThreadList","messageContainer","ThreadListContainer","channel_thread_messages","flexBasis","ThreadContainer","ChatBoard","sendUserIsOnline","interval","setInterval","clearInterval","ThreadReply","channelThreadData","channelThreadLoading","channelThreadError","insertChannelThreadMutation","navigateToThreadChannel","stopPropagation","handleClick","fontStyle","ThreadReplyIn","pathname","lastReply","DeleteMessage","useSetRecoilState","deleteMessageMutation","delete_message","ReplaceMessage","updateMessageMutation","handleReplace","_eq","update_message","DeleteMessageWrapper","UpdateMessage","handleUpdate","rowsMax","listItem","MessageList","lastMessage","preLastMessageId","setRef","showUpdate","setShowUpdate","showUpdateMessageId","setShowUpdateMessageId","deletedMessage","useRecoilValue","handleShowUpdate","divider","i","MessageInput","textInput","handleSetLastMessage","focus","inputRef","polling","Chat","setLastMessage","scrollIsInit","setScrollIsInit","useCallback","ChatApp","setCurrentChannel","isLoadingAuth0","channelLoading","channelError","chatApp","ChatContainer","AdminUserList","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","scope","last_seen","DeleteQuestion","questionId","setActiveState","deleteQuestion","handleQuestionDelete","startIcon","GetChannels","questionLocked","questionIdState","setQuestionIdState","getPollQuestionId","pollQuestionToChannel","useDeletePollQuestionFromChannelMutation","deletePollQuestionFromChannelMutation","deleteError","handlePublishOnChannel","chnId","channelID","pollQuestionID","handleDeleteQuestionFromChannel","pb","chn","channel_polls","onDelete","lock","unlock","SetPollQuestionLockState","readyToPublish","setReadyToPublish","is_active","setPollQuestionState","totalAnswers","poll_answers","handleSetPollQuestionPublishState","lineHeight","details","voteIconPublished","GetPollQuestions","setPollQuestion","loadingGetChannel","questions","question","Accordion","defaultExpanded","AccordionSummary","aria-controls","state","fromDashboard","AccordionDetails","onMouseEnter","AccordionActions","ButtonGroup","floatingLabelFocusStyle","messageButton","AddPollQuestion","addPollQuestionMutation","pollTitle","setPollTitle","fieldError","setFieldError","handleAddTitle","FormGroup","required","onFocus","PollingDashBoard","GetPollAnswerId","DeleteAnswer","deletePollAnswerIdMutation","handleDeleteAnswer","PollAnswerList","updateEnabled","setUpdateEnabled","answerTextUpdateId","setAnswerTextUpdateId","answerText","setAnswerText","getPollQuestion","updatePollAnswerTextMutation","handleUpdateAnswerText","Object","values","answer","row","handleAnswerChange","onBlur","onMouseOut","shrink","UpdatePollQuestion","pollQuestion","pollQuestionDisabled","pollQuestionText","setPollQuestionText","updateDisabled","updatePollQuestionMutation","handleUpdatePollQuestion","minHeight","handlePollQuestionChange","PollAnswers","answerNewText","setAnswerNewText","setCurrentAnswerId","handleAddAnswer","handleNewAnswerChange","MobileHeaderDashboardMenu","article","AdminContainer","exact","path","AdminBoard","sidebar","App","ThemeProvider","CssBaseline","Container","disableGutters","sm","from","ThreadBoard","ReactDOM","render","domain","clientId","redirectUri","onRedirectCallback","appState","replaceState","document","targetUrl","location","audience","getElementById"],"mappings":"iNA0BYA,EA4GAC,EA8JAC,EA6KAC,EA8LAC,EA0FAC,EAgFAC,EAyDAC,EA+KAC,EAiIAC,EAyGAC,EA8EAC,EAuGAC,EAkEAC,EA2HAC,EAKAC,EAoFAC,EAcAC,EAQAC,EAyLAC,EA4FAC,EA4FAC,EAgFAC,EAkKAC,EAiFAC,EA4xBAC,EA+GAC,EA8GAC,EAyFAC,EAuMAC,EAoGAC,EAsEAC,EAwuCAC,EAiFAC,EA0DAC,EAyCAC,EA0PAC,EAuHAC,EAuPAC,EAqHAC,EAiJAC,EAsGAC,EAsFAC,E,wJCzrMGC,GA7EqC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAChBC,cAA5CC,EAD4D,EAC5DA,gBAAiBC,EAD2C,EAC3CA,uBAEnBC,EAAU,yCAAG,+BAAAC,EAAA,yDACXC,EAAU,IACZJ,EAFa,gCAGaC,IAHb,OAGTI,EAHS,OAIfC,EAAsBD,GACtBD,EAAQG,cAAR,iBAAkCF,GALnB,gCAOVD,GAPU,2CAAH,qDAUVE,EAAqB,yCAAG,WAAOD,GAAP,gBAAAF,EAAA,8DAIbK,KAHTC,EAAwBC,aAAuBL,IAG9CM,UACoCH,IAAzCC,EAAK,sCAEHD,IADFC,EAAK,gCAAgC,0BANX,iDAY5BG,eAAeC,QACbJ,EAAKE,IACLF,EAAK,gCAAgC,2BAdX,2CAAH,sDAkBrBK,EAAiBC,aAAU,yCAAC,WAAOC,EAAP,mBAAAb,EAAA,6DAAoBc,EAApB,EAAoBA,gBAApB,sBAGzBA,EAHyB,iBAIlBf,IAJkB,gFAE9BE,QAF8B,mDAAD,yDAa3Bc,EAAiC,CACrCC,IAAKC,kCACLC,QAAS,CACPC,WAAW,EACXC,MAAM,EACNC,iBAAiB,WAAD,8BAAE,uBAAArB,EAAA,sEACQD,IADR,6CACPE,QADO,kDAAF,kDAAC,KAMfqB,EAAWC,0BAfoB,CACnCP,IAAKC,sCAeDO,EAAS,IAAIC,KAAcV,GAE3BW,EAAOC,kBAEX,YAAgB,IAAbC,EAAY,EAAZA,MAAY,EAC2BC,aAAkBD,GAAlDE,EADK,EACLA,KAAMjB,EADD,EACCA,UACd,MAAgB,wBAATiB,GAAgD,iBAAdjB,IAE3CW,EACAb,EAAeoB,OAAOT,IAIlBU,EAAQ,IAAIC,iBAGZC,EAAS,IAAIC,gBAAa,CAAET,OAAMM,UAExC,OAAO,kBAAC,kBAAD,CAAgBE,OAAQA,GAASvC,I,wDCzG7ByC,GAAQC,aAAe,CAClCC,QAAS,CACPC,OAAQ,CACNC,MAAO,UACPC,MAAO,WAETC,KAAM,OACNC,WAAY,CACVC,MAAO,UACPC,QAAS,WAEXC,QAAS,CACPC,MAAO,UACPC,KAAM,UACNC,KAAM,2BACNC,aAAc,WAEhBC,UAAW,CACTJ,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,WAEhBE,MAAO,CACLL,MAAO,UACPC,KAAM,UACNC,KAAM,WAERI,QAAS,CACPN,MAAO,OACPC,KAAM,OACNC,KAAM,SAIVK,MAAO,CACLC,aAAc,GAEhBC,OAAQ,CACNC,QAAS,IAIXC,QAAS,EACTC,MAAO,CACLC,YAAa,CACXC,MAAO,CACLC,SAAU,KAGdC,QAAS,CACPF,MAAO,CACLG,QAAS,IAGbC,QAAS,CACPJ,MAAO,CACLG,QAAS,IAGbE,gBAAiB,CACfL,MAAO,CACLM,MAAO,YAGXC,SAAU,CACRC,WAAW,EACXC,UAAW,EACXT,MAAO,CACLU,SAAU,WAGdC,UAAW,CACTX,MAAO,CACLY,IAAK,OACLC,OAAQ,IAGZC,UAAW,CACTC,kBAAkB,EAClBT,MAAO,YACPU,QAAS,WACTC,KAAM,QACNC,oBAAoB,EACpBC,oBAAoB,IAGxBC,WC3Fa,CACbnB,SAAU,GACVoB,MAAO,CACLpB,SAAU,GACVK,MAAO,WAETgB,MAAO,CACLrB,SAAU,GACVsB,WAAY,KAGdC,OAAQ,CACNvB,SAAU,GACVsB,WAAY,KAEdE,GAAI,CACFF,WAAY,IACZtB,SAAU,GACVyB,cAAe,IAEjBC,GAAI,CACFJ,WAAY,IACZtB,SAAU,GACV2B,UAAW,IAEbC,GAAI,CACFN,WAAY,IACZtB,SAAU,GACV2B,UAAW,GACXE,aAAc,IAEhBC,GAAI,CACFR,WAAY,IACZtB,SAAU,GACV2B,UAAW,IAEbI,GAAI,CACFT,WAAY,IACZtB,SAAU,GACV2B,UAAW,IAEbK,GAAI,CACFV,WAAY,IACZtB,SAAU,GACVK,MAAO,YDgDT4B,UE5Fa,CACbC,eAAgB,CACd,UAAW,CACT,IAAK,CACH,kBAAmB,QAErB,uBAAwB,CACtBC,MAAO,QACPC,OAAQ,QAEV,6BAA8B,CAC5B,qBAAsB,kCAExB,6BAA8B,CAC5BC,gBAAiB,iBACjB5C,aAAc,GAEhBvD,EAAG,CACDoG,eAAgB,UAItBC,WAAY,CACVC,KAAM,CACJ/B,SAAU,WAGdgC,WAAY,CACVD,KAAM,CACJ3D,WAAY,0BAGhB6D,YAAa,CACXF,KAAM,CACJH,gBAAiB,uBAGrBM,OAAQ,CACNH,KAAM,CACJ/C,aAAc,GAEhBT,QAAS,CACPqB,MAAO,OACPuC,UAAW,QAEbC,MAAO,IAETC,aAAc,CACZC,UAAW,OACXC,YAAa,CAAEnB,aAAc,GAC7BoB,QAAS,CACPC,QAAS,QACTb,gBAAiB,gBAGrBc,mBAAoB,CAClBC,IAAK,CACHf,gBAAiB,cACjB,UAAW,CACT5C,aAAc,EACdS,QAAS,KAGbmD,cAAe,GAGfC,aAAa,EACbC,iBAAkB,UAClBC,qBAAsB,GACtBC,mBAAoB,CAClBC,MAAO,OACPC,WAAY,WAGhBC,aAAc,CACZpB,KAAM,CACJqB,aAAc,SAGlBC,aAAc,CACZtB,KAAM,IAERrC,QAAS,CACPqC,KAAM,CACJ,UAAW,KAKfpC,gBAAiB,CACfoC,KAAM,CACJ,WAAY,CACVnC,MAAO,aAIb0D,aAAc,CACZvB,KAAM,CACJtC,QAAS,EACT8D,OAAQ,IAGZC,gBAAiB,CACfzB,KAAM,CACJtC,QAAS,EACT8D,OAAQ,EACR,SAAU,CACR9D,QAAS,EACTF,SAAU,WAEZ,OAAQ,CACNA,SAAU,WAEZ,MAAO,CACLK,MAAO,QAET,YAAa,CACXA,MAAO,YAIb6D,WAAY,CACV1B,KAAM,CACJwB,OAAQ,GACRG,QAAS,KAGbC,cAAe,GACfvD,UAAW,CACTwD,UAAW,CACTzB,UAAW,SAGf0B,cAAe,CACb9B,KAAM,CACJtC,QAAS,QAGbqE,oBAAqB,CACnBC,WAAY,CACV3F,WAAY,UAEZ,UAAW,CACTwD,gBAAiB,gC,sECzHVoC,GAlBS,WAAO,IACrBC,EAAsB5I,cAAtB4I,kBAER,OACE,oCACE,kBAACC,GAAA,EAAD,CACE3D,KAAK,SACLD,QAAQ,YACRV,MAAM,YACNuE,QAASF,EACTG,aAAW,iBALb,W,UCLAC,GAAYC,cAAW,SAACzG,GAAD,MAAY,CACvC0G,MAAO,CACLC,eAAgB,QAChBtD,UAAWrD,EAAMsB,QAAQ,GACzBuC,MAAO7D,EAAMsB,QAAQ,IACrBwC,OAAQ9D,EAAMsB,QAAQ,SAgBXsF,GAZF,WACX,IAAMC,EAAUL,KAEhB,OACE,kBAACM,GAAA,EAAD,CACEC,UAAWF,EAAQH,MACnBM,IAAI,eACJC,IAAI,4BCZJT,GAAYC,cAAW,SAACzG,GAAD,MAAY,CACvCkE,KAAM,CACJU,QAAS,OACTsC,eAAgB,SAChBC,WAAY,SACZC,cAAe,SACftD,OAAQ,QACRuD,aAAc,SACdzF,QAAS5B,EAAMsB,QAAQ,IAEzBgG,MAAO,CACL5F,SAAU,OACVsB,WAAY,IACZuE,cAAe,YACfC,WAAYxH,EAAMsB,QAAQ,QAkCfmG,GA9BU,WACvB,IAAMZ,EAAUL,KACR/I,EAAoBD,cAApBC,gBACJiK,EAAUC,eAId,OAFIlK,GAAiBiK,EAAQE,KAAR,oBAGnB,kBAACC,GAAA,EAAD,CAAKd,UAAWF,EAAQ3C,MACtB,kBAAC2D,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,SACfC,WAAW,SACXC,cAAc,UAEd,kBAAC,GAAD,MACA,kBAACU,GAAA,EAAD,CAAY/F,MAAM,YAAYU,QAAQ,KAAKsF,MAAM,UAAjD,4BAIF,kBAACF,GAAA,EAAD,CAAKjD,QAAQ,OAAOsC,eAAe,SAASC,WAAW,SAASa,GAAI,GAClE,kBAACF,GAAA,EAAD,CAAY/F,MAAM,cAAcU,QAAQ,QAAQsF,MAAM,UAAtD,iEAIF,kBAAC,GAAD,Q,UC/CAvB,GAAYC,cAAW,SAACzG,GAAD,MAAY,CACvCkE,KAAM,GACN+D,YAAY,eACPjI,EAAMoB,OAAOC,aAcL6G,GAVY,WACzB,IAAMrB,EAAUL,KAEhB,OACE,kBAACqB,GAAA,EAAD,CAAKd,UAAWF,EAAQ3C,MACtB,qE,oBCKSiE,GAlBA,WACb,OACE,kBAACN,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,SACfC,WAAW,SACXC,cAAc,SACdgB,KAAM,GAEN,kBAACC,GAAA,EAAD,CACEtG,MAAM,YACNW,KAAM,GACNjB,MAAO,CAAEiE,OAAQ,YCMV4C,GAXmC,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,UAAcC,EAAW,8BAC5E,OACE,kBAAC,KAAD,eACED,UAAWE,YAA2BF,EAAW,CAC/CG,cAAe,kBAAM,kBAAC,GAAD,UAEnBF,K,8mpBVUE7N,K,2BAAAA,E,gCAAAA,M,cA4GAC,K,2BAAAA,E,gCAAAA,M,cA8JAC,K,2BAAAA,E,gCAAAA,M,cA6KAC,K,kCAAAA,E,4BAAAA,M,cA8LAC,K,qCAAAA,M,cA0FAC,K,uBAAAA,E,QAAAA,E,qBAAAA,E,gCAAAA,M,cAgFAC,K,uBAAAA,E,QAAAA,E,qBAAAA,E,gCAAAA,M,cAyDAC,K,2BAAAA,E,QAAAA,E,uBAAAA,E,YAAAA,E,oBAAAA,M,cA+KAC,K,0DAAAA,E,yCAAAA,M,cAiIAC,K,wDAAAA,M,cAyGAC,K,oCAAAA,E,QAAAA,E,cAAAA,E,kBAAAA,E,sBAAAA,E,kBAAAA,M,cA8EAC,K,oCAAAA,E,QAAAA,E,cAAAA,E,kBAAAA,E,sBAAAA,E,kBAAAA,M,cAuGAC,K,QAAAA,E,wBAAAA,M,cAkEAC,K,QAAAA,E,wBAAAA,M,cA2HAC,K,qCAAAA,M,cAKAC,K,2BAAAA,E,gCAAAA,M,cAoFAC,K,kBAAAA,E,eAAAA,M,cAcAC,K,kBAAAA,E,eAAAA,M,cAQAC,K,2BAAAA,E,QAAAA,E,uBAAAA,E,YAAAA,E,oBAAAA,M,cAyLAC,K,4BAAAA,M,cA4FAC,K,wEAAAA,E,yCAAAA,M,cA4FAC,K,uBAAAA,E,QAAAA,E,uBAAAA,E,kBAAAA,M,cAgFAC,K,uBAAAA,E,QAAAA,E,uBAAAA,E,kBAAAA,M,cAkKAC,K,uBAAAA,E,kBAAAA,E,QAAAA,E,cAAAA,E,YAAAA,E,sBAAAA,E,kBAAAA,M,cAiFAC,K,uBAAAA,E,kBAAAA,E,QAAAA,E,cAAAA,E,YAAAA,E,sBAAAA,E,kBAAAA,M,cA4xBAC,K,UAAAA,E,gCAAAA,E,8BAAAA,E,YAAAA,E,kCAAAA,E,iCAAAA,M,cA+GAC,K,mCAAAA,M,cA8GAC,K,uBAAAA,E,QAAAA,E,yBAAAA,E,YAAAA,E,uBAAAA,E,iBAAAA,E,eAAAA,M,cAyFAC,K,uBAAAA,E,QAAAA,E,yBAAAA,E,YAAAA,E,uBAAAA,E,iBAAAA,E,eAAAA,M,cAuMAC,K,yCAAAA,M,cAoGAC,K,uBAAAA,E,QAAAA,E,qBAAAA,E,mBAAAA,E,YAAAA,E,wBAAAA,M,cAsEAC,K,uBAAAA,E,QAAAA,E,qBAAAA,E,mBAAAA,E,YAAAA,E,wBAAAA,M,cAwuCAC,K,uCAAAA,M,cAiFAC,K,uBAAAA,E,kBAAAA,M,cA0DAC,K,uBAAAA,E,kBAAAA,M,cAyCAC,K,4CAAAA,E,sBAAAA,M,cA0PAC,K,4BAAAA,E,QAAAA,E,qBAAAA,E,uBAAAA,E,qBAAAA,M,cAuHAC,K,4BAAAA,E,QAAAA,E,qBAAAA,E,uBAAAA,E,sCAAAA,E,qBAAAA,M,cAuPAC,K,4BAAAA,E,QAAAA,E,qBAAAA,E,uBAAAA,E,sCAAAA,E,qBAAAA,M,cAqHAC,K,4BAAAA,E,QAAAA,E,qBAAAA,E,uBAAAA,E,sCAAAA,E,qBAAAA,M,cAiJAC,K,iCAAAA,M,cAsGAC,K,4BAAAA,E,QAAAA,E,8BAAAA,E,kCAAAA,E,oBAAAA,E,oBAAAA,M,cAsFAC,K,4BAAAA,E,QAAAA,E,8BAAAA,E,kCAAAA,E,oBAAAA,E,oBAAAA,M,KA8nCL,IAAMsL,GAAwBC,eAAH,MAoC3B,SAASC,GAAyBC,GACjC,OAAOC,eAA0EJ,GAAuBG,GAKzG,IAAME,GAAwBJ,eAAH,MA4B3B,SAASK,GAAyBH,GACjC,OAAOC,eAA0EC,GAAuBF,GAKzG,IAAMI,GAAwBN,eAAH,MAgC3B,IAAMO,GAAwBP,eAAH,MA0B3B,SAASQ,GAAyBN,GACjC,OAAOC,eAA0EI,GAAuBL,GAKzG,IAAMO,GAAqBT,eAAH,MAqCxB,IAAMU,GAA6CV,eAAH,MAmChD,IAAMW,GAAyBX,eAAH,MAiC5B,IAAMY,GAA0BZ,eAAH,MA2B7B,SAASa,GAA2BX,GACnC,OAAOC,eAA8ES,GAAyBV,GAK/G,IAAMY,GAA8Bd,eAAH,MAgCjC,SAASe,GAA+Bb,GACvC,OAAOC,eAAsFW,GAA6BZ,GAK3H,IAAMc,GAAqChB,eAAH,MAwCxC,SAASiB,GAAsCf,GAC9C,OAAOC,eAAoGa,GAAoCd,GAKhJ,IAAMgB,GAA8BlB,eAAH,MAgCjC,IAAMmB,GAA8BnB,eAAH,MA4CjC,IAAMoB,GAA0BpB,eAAH,MAiC7B,IAAMqB,GAA8BrB,eAAH,MAiCjC,IAAMsB,GAA0CtB,eAAH,MAsC7C,IAAMuB,GAA4BvB,eAAH,MAoC/B,IAAMwB,GAAsCxB,eAAH,MAuCzC,IAAMyB,GAA6BzB,eAAH,MAmChC,IAAM0B,GAAwC1B,eAAH,MAiC3C,IAAM2B,GAA+B3B,eAAH,MAoClC,IAAM4B,GAA6B5B,eAAH,MAgChC,IAAM6B,GAAkC7B,eAAH,MAmCrC,IAAM8B,GAA6B9B,eAAH,MAiCJA,eAAH,MAgDMA,eAAH,MA4CAA,eAAH,MAmCzB,IAAM+B,GAAsB/B,eAAH,MAmCzB,IAAMgC,GAA2BhC,eAAH,MAqCGA,eAAH,MA0CKA,eAAH,MAiCcA,eAAH,MAgD3C,IAAMiC,GAA2BjC,eAAH,MA6CGA,eAAH,MAkCSA,eAAH,MAyCFA,eAAH,MAsCCA,eAAH,MAkCUA,eAAH,MAyCDA,eAAH,MAkChC,IAAMkC,GAAwBlC,eAAH,MAoC3B,SAASmC,GAA6BjC,GACrC,OAAOC,mBAAsF+B,GAAuBhC,GAIrH,IAAMkC,GAAqCpC,eAAH,MAkCxC,SAASqC,GAA0CnC,GAClD,OAAOC,mBAAgHiC,GAAoClC,GAI5J,IAAMoC,GAA6BtC,eAAH,MAgChC,SAASuC,GAAkCrC,GAC1C,OAAOC,mBAAgGmC,GAA4BpC,GAIpI,IAAMsC,GAAuBxC,eAAH,MAyD1B,IAAMyC,GAA2BzC,eAAH,MAyB9B,SAAS0C,GAAgCxC,GACxC,OAAOC,mBAA4FsC,GAA0BvC,GAI9H,IAAMyC,GAAwB3C,eAAH,MAgC3B,IAAM4C,GAAqC5C,eAAH,MAuCbA,eAAH,MA6BxB,IAAM6C,GAAkD7C,eAAH,MA+BrD,IAAM8C,GAA4D9C,eAAH,MA0C/D,IAAM+C,GAA+C/C,eAAH,MAoClD,IAAMgD,GAA0BhD,eAAH,MA+BIA,eAAH,MAkCaA,eAAH,MAmCxC,IAAMiD,GAA6BjD,eAAH,MAgChC,IAAMkD,GAAgClD,eAAH,MAsCqBA,eAAH,MAqCrD,IAAMmD,GAA+BnD,eAAH,MA0BlC,SAASoD,GAAoClD,GAC5C,OAAOC,mBAAoGgD,GAA8BjD,GAI1I,IAAMmD,GAA8BrD,eAAH,MA2BjC,SAASsD,GAAmCpD,GAC3C,OAAOC,mBAAkGkD,GAA6BnD,GAIvI,IAAMqD,GAAmCvD,eAAH,MAsCtC,IAAMwD,GAA+BxD,eAAH,MA8BGA,eAAH,MA6BlC,IAAMyD,GAA2BzD,eAAH,MA+B9B,SAAS0D,GAAgCxD,GACxC,OAAOC,mBAA4FsD,GAA0BvD,GAI9H,IAAMyD,GAAoC3D,eAAH,MA8BKA,eAAH,MAoCzC,IAAM4D,GAAiC5D,eAAH,MWzpTlB6D,eAAK,CAC5BC,IAAK,cADA,IAIMC,GAAsBF,eAAK,CACtCC,IAAK,wBAGME,GAAyBH,eAAK,CACzCC,IAAK,8BACLjM,QAAS,IAGEoM,GAAaJ,eAAK,CAC7BC,IAAK,eAGMI,GAAsBL,eAAK,CACtCC,IAAK,sBACLjM,SAAS,I,IAG8BgM,eAAK,CAC5CC,IAAK,4BACLjM,SAAS,I,kBCxBEsM,GAAe,SAC1BC,GAEG,IAAC,IAAD,qBADAC,EACA,iCADAA,EACA,mBACH,EAAAC,SAAQC,IAAR,SAAYH,GAAZ,OAAoBC,KCIhBzG,GAAYC,cAAW,SAACzG,GAAD,MAAY,CACvCoN,YAAa,CACXrJ,gBAAiB,UACjBhC,MAAO,UACPuC,UAAU,aAAD,OAAetE,EAAME,QAAQK,WAAWC,OACjD,WAAY,CACV6M,SAAU,WACVhL,IAAK,EACLiL,KAAM,EACNzJ,MAAO,OACPC,OAAQ,OACR3C,aAAc,MACdoM,UAAW,oCACXC,OAAQ,yBACRC,QAAS,OAGbC,aAAc,CACZ3J,gBAAiB,UACjBhC,MAAO,UACPuC,UAAU,aAAD,OAAetE,EAAME,QAAQK,WAAWC,OACjD,WAAY,CACV6M,SAAU,WACVhL,IAAK,EACLiL,KAAM,EACNzJ,MAAO,OACPC,OAAQ,OACR3C,aAAc,MACdoM,UAAW,oCACXC,OAAQ,yBACRC,QAAS,OAGbE,OAAQ,CACN9J,MAAO,GACPC,OAAQ,GACRC,gBAAiB,UACjBhC,MAAO,UACPL,SAAU,GACVsB,WAAY,OACZwK,OAAQ,yBA8DGI,GArD2C,SAAC,GAIpD,IAHL1P,EAGI,EAHJA,KACAX,EAEI,EAFJA,SAEI,IADJsQ,2BACI,SACEhH,EAAUL,KADZ,EAMA8E,KAFIwC,EAJJ,EAIFC,KACOC,EALL,EAKFhN,MAGF,GAAIgN,EAEF,OADAjB,GAAa,wBAAyBiB,GAC/B,kBAACC,GAAA,EAAD,CAAOC,SAAS,SAAhB,oCAgBT,OACE,oCACGhQ,GAAQA,EAAKiQ,UACZ,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CACExH,QAlBmB,SAACyH,GAC5B,QAAgBrQ,IAAZqQ,GAAqC,OAAZA,EAC3B,MAAO,CAAEC,MAAO1H,EAAQ6G,cAE1B,IAAMc,EAAU,OAAGV,QAAH,IAAGA,OAAH,EAAGA,EAAaW,MAAMC,QAAO,SAACC,GAC5C,OAAOL,IAAYK,EAAEC,iBAGvB,OAAiB,OAAVJ,QAAU,IAAVA,OAAA,EAAAA,EAAYK,QACf,CAAEN,MAAO1H,EAAQuG,aACjB,CAAEmB,MAAO1H,EAAQ6G,cAQJoB,CAAqB5Q,EAAK0Q,eACnCnM,QAAQ,OAEPoL,GAAuB,oCAAGtQ,IACzBsQ,GACA,oCACE,kBAAC/G,GAAA,EAAD,CAAQC,UAAWF,EAAQ8G,QACxBzP,EAAKiQ,SAASY,UAAU,EAAG,GAAGC,oB,yJC/F3CxI,GAAYC,cAAW,SAACzG,GAAD,MAAY,CACvCiP,KAAK,gBACFjP,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BzN,SAAU,gBAiFD0N,GA/DiC,SAAC,GAM1C,IALLC,EAKI,EALJA,SACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,UACAN,EAEI,EAFJA,KACAO,EACI,EADJA,WAEM3I,EAAUL,KACViJ,EAA0B,SAAClO,GAC/B,OACE,kBAACsG,GAAA,EAAD,CACEhE,MAAM,OACNe,QAAQ,OACRsC,eAAe,SACfC,WAAW,SACXC,cAAc,OAEd,kBAACS,GAAA,EAAD,CAAKhE,MAAM,OAAO6L,GAAI,GACpB,kBAACC,GAAA,EAAD,eACEC,GAAIC,OAAOR,GACXtN,MAAOuN,IAAaD,EAAW,YAAc,UAC7C5M,QAAQ,eACJlB,KAGR,kBAACsG,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,SACfC,WAAW,SACXC,cAAc,eAEd,kBAAC0I,GAAA,EAAD,CACEpN,KAAK,QACLX,MAAOuN,IAAaD,EAAW,YAAc,UAC7C5M,QAAS6M,IAAaD,EAAW,UAAY,WAC7C9K,MAAK,UAAKgL,EAAL,cAAoBhO,EAAMwO,MAAMC,QAAQ,GAAxC,KACLC,KAAMX,IAAaD,EAAW,kBAAC,KAAD,MAAe,kBAAC,KAAD,WAOvD,OACE,kBAACxH,GAAA,EAAD,CACE6E,IAAK2C,EACLxL,MAAM,OACNe,QAAQ,OACRuC,WAAW,aACXC,cAAc,SACdY,GAAI,GAEJ,kBAACF,GAAA,EAAD,CAAYrF,QAAQ,QAAQsE,UAAWF,EAAQoI,MAC5CA,GAEH,kBAACQ,EAAD,CACEM,MAAQ,IAAMR,EAAaC,EAC3BU,SAAUb,MChFZ7I,GAAYC,cAAW,SAACzG,GAAD,MAAY,CACvCmQ,WAAY,CACV9M,UAAWrD,EAAMsB,QAAQ,QA0Bd8O,GAlB+B,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACzCxJ,EAAUL,KAChB,OACE,oCACE,kBAACH,GAAA,EAAD,CACE/F,KAAK,SACLmC,QAAQ,YACRV,MAAM,YACNgF,UAAWF,EAAQsJ,WACnBG,SAAUD,EACV9J,aAAW,eAEV8J,EAAU,qBAAuB,UCN3BE,GAZuC,SAAC,GAAoB,IAAlBf,EAAiB,EAAjBA,WACvD,OACE,oCACGA,GACC,kBAACnB,GAAA,EAAD,CAAOtM,MAAM,YAAYyO,aAAchB,GACrC,kBAAC,KAAD,CAAezN,MAAM,e,kDCezByE,GAAYC,cAAW,SAACzG,GAAD,MAAY,CACvCyQ,SAAS,cACP5M,MAAO,OACPjC,QAAS5B,EAAMsB,QAAQ,IACtBtB,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BuB,UAAW,aACX9O,QAAS5B,EAAMsB,QAAQ,GACvBqP,SAAU,SAGd1B,KAAK,gBACFjP,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BzN,SAAU,gBAoMDkP,GA/LyB,WAAO,IAAD,oBjBs+SM9H,EiBr+S5CjC,EAAUL,KACRtI,EAASV,cAATU,KAFoC,EAGnB2S,yBAAwBlE,IAA1CmE,EAHqC,uBAOxCC,IAAMC,SAAiB,GAPiB,oBAK1CC,EAL0C,KAM1CC,EAN0C,KAS9BC,GjB69SoCrI,EiB79SuB,CACvEsI,UAAW,CACTC,aAAcJ,IjB49SLlI,mBAAoGqD,GAA8BtD,IiB99SvIiF,KAToC,EjBw8SvC,SAAiDjF,GAChD,OAAOC,mBAA4GoD,GAAkCrD,GiB17S1HwI,CAAwC,CACvEF,UAAW,CACTG,UAAS,OAAET,QAAF,IAAEA,OAAF,EAAEA,EAAgBlB,MAFvB7B,EAfoC,EAepCA,KAAMyD,EAf8B,EAe9BA,QAASxQ,EAfqB,EAerBA,MAfqB,EjBs7PvC,SAAsC8H,GACrC,OAAOC,eAAkFoB,GAA2BrB,GiBl6PtF2I,GAA7BC,EArBqC,qBAuBtClC,EAAa,WAAO,IAAD,IACnBmC,EAA0D,OAAG5D,QAAH,IAAGA,GAAH,UAAGA,EAC7D6D,eAAe,UAD2C,iBAAG,EAC1CC,qBADuC,aAAG,EAC3BC,YAChCC,EAAkB,GACxB,YAAgB9T,IAAZ0T,GACFA,EAAQK,KAAI,SAACC,GAAD,OACVF,EAAMnK,KAAKqK,EAAIC,UAEFH,EAAMI,QAAO,SAACvU,EAAWwU,GAAZ,OAA0BxU,EAAIwU,MAGrD,GAlCmC,EjByoTvC,SAA+CtJ,GAC9C,OAAOC,mBAAwGyD,GAAgC1D,GiBlmTjJuJ,CAAsC,CACxCjB,UAAW,CACTkB,eAAc,OAAEvE,QAAF,IAAEA,GAAF,UAAEA,EAAM6D,eAAe,UAAvB,iBAAE,EAAyBC,qBAA3B,aAAE,EAAwCjC,GACxD2C,YAAarU,EAAKE,OALdkR,EAtCoC,EAsC1CvB,KACSyE,EAvCiC,EAuC1ChB,QAvC0C,EjBwoQvC,SAA4C1I,GAC3C,OAAOC,eAA8F0B,GAAiC3B,GiB1lQlG2J,CAAmC,CAC3ErB,UAAW,CACTsB,SAAUxU,EAAKiQ,SACfoE,YAAarU,EAAKE,IAClBkU,eAAc,OAAEvE,QAAF,IAAEA,GAAF,UAAEA,EAAM6D,eAAe,UAAvB,iBAAE,EAAyBC,qBAA3B,aAAE,EAAwCjC,GACxDyB,aAAcJ,KALX0B,EA/CqC,qBAwDtCC,EAAY,yCAAG,WAAOC,GAAP,UAAAjV,EAAA,sDACnBsT,EAAwB4B,SAASD,EAAEE,OAAOhD,QADvB,2CAAH,sDAIZiD,EAAY,yCAAG,WAAOH,GAAP,oBAAAjV,EAAA,yDACnBiV,EAAEI,iBAE2B,OAAzBhC,EAHe,yDAOYhT,KAF3BiV,EALe,OAKU/B,QALV,IAKUA,OALV,EAKUA,EAAoBgC,gBAAgB,GAAGjB,QAGlEgB,SAG6BjV,IAA3BiV,EAXe,iEAYbxB,EAA0B,CAC9BN,UAAW,CACTC,aAAcJ,EACdmC,QAASF,KAfM,wBAmBbP,EAAgC,CACpCvB,UAAW,CACTsB,SAAUxU,EAAKmV,SACfd,YAAarU,EAAKE,IAClBkU,eAAc,OAAEvE,QAAF,IAAEA,GAAF,UAAEA,EAAM6D,eAAe,UAAvB,iBAAE,EAAyBC,qBAA3B,aAAE,EAAwCjC,GACxDyB,aAAcJ,KAxBC,4CAAH,sDA6BlB,OAAIO,GAAWxQ,GAASwR,EACf,kBAAC,GAAD,MAIP,qCACW,OAARlD,QAAQ,IAARA,GAAA,UAAAA,EAAUgE,kBAAV,eAAsBzE,QACrB,kBAAC0E,GAAA,EAAD,CAAOxM,UAAWF,EAAQ4J,UACxB,kBAAC5I,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,gBACfC,WAAW,SACXC,cAAc,MACdY,GAAI,GAEJ,kBAACH,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAYrF,QAAQ,WAApB,kBADF,OAEGsL,QAFH,IAEGA,OAFH,EAEGA,EAAM6D,eAAeI,KAAI,SAACwB,GAAD,aACxB,kBAAC1L,GAAA,EAAD,CACE4E,IAAK8G,EAAY5D,GACjB7N,MAAM,YACNU,QAAQ,KACRhB,MAAO,CAAE4B,UAAW,IAJtB,OAMGmQ,QANH,IAMGA,GANH,UAMGA,EAAa3B,qBANhB,aAMG,EAA4B5C,UAInC,kBAAC,GAAD,CAAgBO,WAAYA,OArBhC,OAwBGzB,QAxBH,IAwBGA,GAxBH,UAwBGA,EAAM6D,eAAe,UAxBxB,iBAwBG,EAAyBC,qBAxB5B,aAwBG,EAAwCC,YACtC2B,MAAK,SAAC7V,EAAGwU,GAAJ,OAAWxU,EAAEgS,GAAKwC,EAAExC,GAAK,GAAK,KACnCoC,KAAI,SAACzC,GAAD,aACH,kBAAC,GAAD,CACE7C,IAAK6C,EAAUK,GACfP,SAAUE,EAAUK,GACpBN,SAAQ,OAAEA,QAAF,IAAEA,GAAF,UAAEA,EAAUgE,WAAW,UAAvB,aAAE,EAAyBI,eACnCnE,UAAWA,EAAU2C,MACrBjD,KAAMM,EAAUN,KAChBO,WAAYA,UAKpB,kBAAC+D,GAAA,EAAD,CAAOxM,UAAWF,EAAQ4J,UACxB,kBAAC5I,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,gBACfC,WAAW,WACXC,cAAc,MACdY,GAAI,GAEJ,kBAACH,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAYrF,QAAQ,WAApB,kBACA,kBAACqF,GAAA,EAAD,CAAYrF,QAAQ,KAAKhB,MAAO,CAAE4B,UAAW,KACtC,OAAJ0K,QAAI,IAAJA,OAAA,EAAAA,EAAM6D,eAAe,IAArB,OACG7D,QADH,IACGA,GADH,UACGA,EAAM6D,eAAe,GAAGC,qBAD3B,aACG,EAAuC5C,KACvC,aAGR,kBAAC,GAAD,CAAgBO,WAAYA,OAG9B,0BAAMmE,SAAUX,GACd,kBAACY,GAAA,EAAD,CAAarL,UAAU,YACrB,kBAACsL,GAAA,EAAD,CACEtN,aAAW,OACXuN,KAAK,OACL/D,MAAOkB,EACP8C,SAAUnB,GAJZ,OAMG7E,QANH,IAMGA,GANH,UAMGA,EAAM6D,eAAe,UANxB,iBAMG,EAAyBC,qBAN5B,aAMG,EAAwCC,YACtC2B,MAAK,SAAC7V,EAAGwU,GAAJ,OAAWxU,EAAEgS,GAAKwC,EAAExC,GAAK,GAAK,KACnCoC,KAAI,SAACgC,GAAD,OACH,kBAACC,GAAA,EAAD,CACEvH,IAAKsH,EAAWpE,GAChBG,MAAOiE,EAAWpE,GAClBsE,QACE,kBAACC,GAAA,EAAD,CACEpE,MAAOiE,EAAWpE,GAClBwE,QAASnD,IAAyB+C,EAAWpE,GAC7CmE,SAAUnB,IAGdrO,MACE,kBAACuD,GAAA,EAAD,CAAYrF,QAAQ,QAAQsE,UAAWF,EAAQoI,MAC5C+E,EAAW/E,YAMxB,kBAAC,GAAD,CAAYoB,SAAS,S,UCxN7B7J,GAAYC,cAAW,SAACzG,GAAD,YAAY,CACvCqU,YAAa,CACXzP,QAAS,OACTsC,eAAgB,SAChBC,WAAY,SACZtD,MAAO,SAETyQ,YAAU,GACRzQ,MAAO,OACPjC,QAAS5B,EAAMsB,QAAQ,IAFf,eAGPtB,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BtL,MAAO,SAJD,eAMP7D,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BtL,MAAO,SAPD,eASP7D,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BtL,MAAO,OACP6B,OAAQ,IAXF,wBAaA1F,EAAMsB,QAAQ,IAbd,+BAcOtB,EAAMsB,QAAQ,IAdrB,GAgBViT,SAAU,CACRC,OAAQ,WAEVjG,MAAO,CACLxK,gBAAiB,UACjBhC,MAAO,UACPuC,UAAU,aAAD,OAAetE,EAAME,QAAQK,WAAWC,OACjD,WAAY,CACV6M,SAAU,WACVhL,IAAK,EACLiL,KAAM,EACNzJ,MAAO,OACPC,OAAQ,OACR3C,aAAc,MACdoM,UAAW,oCACXC,OAAQ,yBACRC,QAAS,OAGb,oBAAqB,CACnB,KAAM,CACJiD,UAAW,YACX7K,QAAS,GAEX,OAAQ,CACN6K,UAAW,aACX7K,QAAS,QAqEA4O,GA5D6B,SAAC,GAAmB,IAAD,ElB6iTN3L,EkB7iTVyI,EAAgB,EAAhBA,UACvC1K,EAAUL,KAD6C,GlB6iTNsC,EkB3iTY,CACjEsI,UAAW,CACTsD,iBAAkBnD,IlB0iTTxI,mBAA8GwD,GAAmCzD,IkB5iTtJiF,EAFqD,EAErDA,KAMR,OAR6D,EAE/CyD,QAOL,kBAAC,GAAD,MAGP,oCACoC,KAA7B,OAAJzD,QAAI,IAAJA,GAAA,UAAAA,EAAM4G,sBAAN,eAAsB9F,SACrB,kBAAC,KAAD,CAAYpM,QAAQ,UAAUmS,QAAQ,mBACnC,SAACC,GAAD,OACC,oCACE,kBAACxG,GAAA,EAAD,CAAO5L,QAAQ,MAAMoE,QAAS,CAAE0H,MAAO1H,EAAQ0H,QAC7C,kBAAC,KAAD,eACExM,MAAM,WACF+S,uBAAYD,GAFlB,CAGE9N,UAAWF,EAAQ0N,aAGvB,kBAACQ,GAAA,EAAD,eACEC,gBAAiB,OACjBnO,QAAS,CACP3C,KAAM2C,EAAQwN,cAEZY,uBAAYJ,IAEhB,kBAAChN,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,SACfC,WAAW,SACXC,cAAc,SACdL,UAAWF,EAAQyN,YAEnB,kBAAC,GAAD,MAEA,kBAAC,GAAD,MACA,kBAACjO,GAAA,EAAD,CACEE,aAAW,qBACXD,QAASuO,EAAWK,MACpBzT,MAAO,CAAE0T,SAAU,SAHrB,iB,qBCnFHC,GAtBU,WAAO,IACtBC,EAAW7X,cAAX6X,OAER,OACE,oCACE,kBAACC,GAAA,EAAD,CACEvT,MAAM,UACNW,KAAK,QACL4D,QAAS,WACP+O,EAAO,CACLE,SAAU1W,2BAEZ2W,OAAOnX,eAAeoX,SAExBlP,aAAW,UAEX,kBAAC,KAAD,S,4BCfFC,GAAYC,cAAW,SAACzG,GAAD,YAAY,CACvCqB,SAAO,GACLuD,QAAS,OACTsC,eAAgB,SAChBC,WAAY,cAHP,eAIJnH,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5BlO,WAAYxH,EAAMsB,QAAQ,GAC1B6B,cAAenD,EAAMsB,QAAQ,KAN1B,eAQJtB,EAAMkP,YAAYC,KAAK,MAAQ,CAC9B3H,WAAYxH,EAAMsB,QAAQ,GAC1BqU,YAAa3V,EAAMsB,QAAQ,GAC3BsU,aAAc5V,EAAMsB,QAAQ,GAC5B6B,cAAenD,EAAMsB,QAAQ,KAZ1B,2BAcM,GAdN,gCAeW,SAfX,gCAgBWtB,EAAME,QAAQQ,QAAQG,MAhBjC,GAkBPgV,YAAa,CACX/R,OAAQ,QACRD,MAvBgB,OAwBhBiS,WAAY9V,EAAM+V,YAAYC,OAAO,QAAS,CAC5CC,OAAQjW,EAAM+V,YAAYE,OAAOC,UACjCC,SAAUnW,EAAM+V,YAAYI,SAASC,kBAGzCC,iBAAkB,CAChBC,UAAW,SACXR,WAAY9V,EAAM+V,YAAYC,OAAO,QAAS,CAC5CC,OAAQjW,EAAM+V,YAAYE,OAAOM,QACjCJ,SAAUnW,EAAM+V,YAAYI,SAASK,gBAEvC3S,MAnCgB,YA6DL4S,GAlBqC,SAAC,GAAwB,IAAtBlZ,EAAqB,EAArBA,SAAUmZ,EAAW,EAAXA,KACzD7P,EAAUL,KAEhB,OACE,kBAACmQ,GAAA,EAAD,CACElU,QAAQ,YACRP,UAAW,EACX0U,OAAO,OACP/P,QAAS,CACPrG,MAAOqW,aAAKhQ,EAAQgP,aAAca,GAAQ7P,EAAQwP,mBAEpDK,KAAMA,GAEN,kBAACI,GAAA,EAAD,CAAS/P,UAAWF,EAAQxF,SAAU9D,K,+BCL7BwZ,GAzCgC,SAAC,GAAgB,EAAdzI,QAAe,IAAD,IAC7BhD,KAAzByC,EADsD,EACtDA,KAAMyD,EADgD,EAChDA,QAASxQ,EADuC,EACvCA,MACf9C,EAASV,cAATU,KACF8Y,EAAW,iBAAGjJ,QAAH,IAAGA,OAAH,EAAGA,EAAMU,MAAMI,cAAf,QAAyB,EAM1C,OAJI7N,GACF+L,GAAa,mBAAoB/L,GAG/BwQ,EACK,kBAAC,GAAD,MAIP,kBAAC3J,GAAA,EAAD,CACEjD,QAAQ,OACRwD,KAAK,IACLlB,eAAe,WACfC,WAAW,SACX1F,MAAO,CACLwV,YAAajX,GAAMsB,QAAQ,GAC3B4V,WAAYlX,GAAMsB,QAAQ,KAG5B,kBAACwO,GAAA,EAAD,CACErN,QAAQ,WACRV,MAAM,UACNW,KAAK,QACLuN,KAAM,kBAAC,KAAD,MACN1L,MAAOrG,EAAKmV,SACZ5R,MAAO,CAAEwV,YAAa,MAExB,kBAACE,GAAA,EAAD,CAAS7P,MAAM,eAAef,aAAW,gBAAgB6Q,UAAU,OACjE,kBAAC/I,GAAA,EAAD,CAAOtM,MAAM,YAAYyO,aAAcwG,GACrC,kBAAC,KAAD,CAAYjV,MAAM,gB,6FCtCtByE,GAAYC,cAAW,SAACzG,GAAD,MAAY,CACvCkE,KAAM,CACJU,QAAS,OACTsC,eAAgB,SAChBmQ,SAAU,OACV,QAAS,CACP3R,OAAQ1F,EAAMsB,QAAQ,MAG1BgW,KAAM,CACJxT,OAAQ,YA6EGyT,GArEmD,SAAC,GAE5D,ItBuyS2CzO,EsBxyShDyI,EACI,EADJA,UAEM1K,EAAUL,KADZ,EAEgChJ,cAA5BU,EAFJ,EAEIA,KAAasZ,EAFjB,EAEUxW,MAFV,EAGsBgQ,mBAA6B,GAHnD,oBAGGe,EAHH,KAGU0F,EAHV,OAK6B1M,GAA6B,CAC5DqG,UAAW,CACTG,aAEFmG,YAAa,iBAJP3J,EALJ,EAKIA,KAAMyD,EALV,EAKUA,QAASxQ,EALnB,EAKmBA,MALnB,GtBuyS4C8H,EsBvxSV,CACpCsI,UAAW,CACT9C,QAASpQ,EAAKE,IACduZ,WAAYpG,ItBqxSHxI,mBAAgG8C,GAA4B/C,IsB3xSjI8O,EAbJ,EAaF7J,KACS8J,EAdP,EAcFrG,QACOsG,EAfL,EAeF9W,MA6BF,OArBA+W,qBAAU,WAAO,IAAD,IACVC,EAAS,iBACXJ,QADW,IACXA,GADW,UACXA,EAA2BK,eAAe,UAD/B,aACX,EAA8CC,kBADnC,aACiDja,EAE1Dka,EAAmB,OAAGpK,QAAH,IAAGA,OAAH,EAAGA,EAAMqK,SAAS1J,QAAO,SAAC2J,GAC/C,YAAkBpa,IAAd+Z,GACGK,EAAEzI,GAAKoI,KAGhBP,EAAQ,OAACU,QAAD,IAACA,OAAD,EAACA,EAAqBtJ,UAC7B,CAACd,EAAM6J,KAEN5W,GAAS8W,GAA8BN,IACzCzK,GACE,0CACA/L,EACA8W,EACAN,GAIAhG,GAAWqG,EACN,kBAAC,IAAMS,SAAP,MAIP,oCACGvG,QAAmB9T,IAAV8T,EACR,yBAAKhL,UAAWF,EAAQ3C,MACtB,kBAAC4L,GAAA,EAAD,CACErN,QAAQ,WACRC,KAAK,QACL6B,MAAOwN,EACPhQ,MAAM,YACNgF,UAAWF,EAAQyQ,QAIvB,KCjEF9Q,GAAYC,cAAW,SAACzG,GAAD,MAAY,CACvCkE,KAAM,CACJL,MAAO,QAET0K,MAAO,CACLxK,gBAAiB,YA4FNwU,GAxFY,WAAO,IAAD,EvB6+RYzP,EuB5+RrCjC,EAAUL,KADe,EAENqK,yBAAwBlE,IAA1CmE,EAFwB,uBAGPE,oBAAS,GAHF,oBAGxB0F,EAHwB,KAGlB8B,EAHkB,KAIzBC,EAAQC,aAAc,YAAD,cAAa5H,QAAb,IAAaA,OAAb,EAAaA,EAAgBgD,OAElD6E,EAAa,WACjB,OAAOF,EAAQ,YAAc,WAPA,GvB6+RY3P,EuB/9RmB,CAC5DsI,UAAW,CACTwH,aAAcld,EAAkBmd,cvB89RvB9P,mBAAsFwC,GAAuBzC,IuBh+RlHiF,EAduB,EAcvBA,KAAMyD,EAdiB,EAcjBA,QAASxQ,EAdQ,EAcRA,MAMvB,OAAIA,GACF+L,GAAa,+BAAgC/L,GACtC,kBAACiN,GAAA,EAAD,CAAOC,SAAS,SAAhB,kCAGLsD,EACK,kBAAC,GAAD,MAIP,oCACE,kBAACsH,GAAA,EAAD,CAAMvQ,UAAU,MAAMxB,UAAWF,EAAQ3C,MACvC,kBAAC6U,GAAA,EAAD,CAAU9V,QAAM,EAACqD,QAtBH,WAClBkS,GAAS9B,IAqBkCnQ,aAAW,qBAChD,kBAAC6H,GAAA,EAAD,KACE,kBAAC,KAAD,OAEF,kBAAC4K,GAAA,EAAD,KACE,kBAAClR,GAAA,EAAD,CAAYrF,QAAQ,MAApB,aAEDiU,EAAO,kBAAC,KAAD,MAAiB,kBAAC,KAAD,OAE3B,kBAACuC,GAAA,EAAD,CAAUC,GAAIxC,EAAMyC,QAAQ,QAC1B,kBAACL,GAAA,EAAD,CAAMvQ,UAAU,OAAhB,OACGwF,QADH,IACGA,GADH,UACGA,EAAMqL,gBADT,aACG,EAAgBpH,KAAI,SAACjE,EAAMsL,GAAP,OACnB,kBAACN,GAAA,EAAD,CACErM,IAAK2M,EACLpW,QAAM,EACNsF,UAAW+Q,IACXC,GAAI,YAAcxL,EAAK+F,KACvBvN,aAAA,wBAA6BwH,EAAK+F,QAE7B,OAAJ/F,QAAI,IAAJA,OAAA,EAAAA,EAAM6B,OAAN,OAAakB,QAAb,IAAaA,OAAb,EAAaA,EAAgBlB,IAC5B,oCACE,kBAACxB,GAAA,EAAD,MACuB,IAApBL,EAAKyL,WACJ,kBAAC,KAAD,CAAgCzX,MAAO4W,MAEvC,kBAAC,KAAD,CAAY5W,MAAO4W,OAGvB,kBAACK,GAAA,EAAD,KACE,kBAAClR,GAAA,EAAD,CAAYrF,QAAQ,KAAKV,MAAO4W,KAC7B5K,EAAK+F,QAKZ,oCACE,kBAAC1F,GAAA,EAAD,MACuB,IAApBL,EAAKyL,WACJ,kBAAC,KAAD,MAEA,kBAAC,KAAD,OAGJ,kBAACR,GAAA,EAAD,CAActY,QAAO,OAAEqN,QAAF,IAAEA,OAAF,EAAEA,EAAM+F,OAC7B,kBAAC,GAAD,CAAsBvC,UAAWxD,EAAK6B,e,0CCrFpDpJ,GAAYC,cAAW,SAACzG,GAAD,MAAY,CACvCyZ,OAAQ,CACN9D,YAAa3V,EAAMsB,QAAQ,IAE7BoY,KAAM,CACJC,SAAU,EACVjU,OAAQ1F,EAAMsB,QAAQ,IAExBsY,OAAQ,CACNvW,UAAWrD,EAAMsB,QAAQ,IAE3BuY,SAAU,CACR9X,MAAO/B,EAAME,QAAQQ,QAAQC,MAC7BqC,WAAY,KAEd1D,KAAM,CACJyC,MAAO,UACPL,SAAU,gBAwGCoY,GAhGqD,SAAC,GAE9D,IAAD,ExBkgSoDhR,EwBngSxDwF,EACI,EADJA,QAEMzH,EAAUL,KADZ,EAEoBuK,IAAMC,UAAS,GAFnC,oBAEG0F,EAFH,KAES8B,EAFT,KAGA9Q,EAAUC,eAHV,EAIqBkJ,yBAAwBlE,IAA1CmE,EAJH,qBAKE2H,EAAQC,aAAc,YAAD,cAAa5H,QAAb,IAAaA,OAAb,EAAaA,EAAgBgD,OALpD,GxBkgSoDhL,EwB3/RmB,CACzEsI,UAAW,CACTwH,aAAcld,EAAkBqe,cAChCzL,YxBy/RSvF,mBAAgHyC,GAAoC1C,IwB5/RzJiF,EAPJ,EAOIA,KAAMyD,EAPV,EAOUA,QAASxQ,EAPnB,EAOmBA,MAOvB,GAAIA,EAEF,OADA+L,GAAa,uCAAwC/L,GAEnD,kBAACiN,GAAA,EAAD,CAAOC,SAAS,SAAhB,yCAIJ,GAAIsD,EACF,OAAO,kBAAC,GAAD,MAeT,OACE,oCACE,kBAACsH,GAAA,EAAD,CAAMvQ,UAAU,OACd,kBAACwQ,GAAA,EAAD,CAAU9V,QAAM,EAACqD,QAXH,WAClBkS,GAAS9B,KAWH,kBAACtI,GAAA,EAAD,CAAc7H,aAAW,4BACvB,kBAAC,KAAD,OAEF,kBAACyS,GAAA,EAAD,KACE,kBAAClR,GAAA,EAAD,CAAYrF,QAAQ,MAApB,oBAEF,kBAAC2L,GAAA,EAAD,KACE,kBAAC,KAAD,CACErM,MAAM,YACNuE,QAjBqC,WAC/CoB,EAAQE,KAAR,uCAmBO8O,EAAO,kBAAC,KAAD,MAAiB,kBAAC,KAAD,OAE3B,kBAACuC,GAAA,EAAD,CAAUC,GAAIxC,EAAMyC,QAAQ,QAC1B,kBAACL,GAAA,EAAD,CAAMvQ,UAAU,OAAhB,OACGwF,QADH,IACGA,GADH,UACGA,EAAMqL,gBADT,aACG,EAAgBpH,KAAI,SAACjE,GAAD,mBACnB,kBAACgL,GAAA,EAAD,CACE9V,QAAM,EACNsF,UAAW+Q,IACX5M,IAAKqB,EAAK+F,KACV/M,UAAWF,EAAQvH,KACnBia,GAAI,YAAcxL,EAAK+F,KACvBvN,aAAA,UAAYwH,EAAKiM,cAAc,UAA/B,aAAY,EAAuB9b,KAAKiQ,UAExC,kBAAC,GAAD,CAAkBjQ,KAAI,UAAE6P,EAAKiM,cAAc,UAArB,aAAE,EAAuB9b,QAC1C,OAAJ6P,QAAI,IAAJA,OAAA,EAAAA,EAAM6B,OAAN,OAAakB,QAAb,IAAaA,OAAb,EAAaA,EAAgBlB,IAC5B,oCACE,kBAACoJ,GAAA,EAAD,KACE,kBAAClR,GAAA,EAAD,CAAYrF,QAAQ,KAAKV,MA5CpC0W,EAAQ,YAAc,WA4CX,UACG1K,EAAKiM,cAAc,UADtB,aACG,EAAuB9b,KAAKiQ,YAKnC,oCACE,kBAAC6K,GAAA,EAAD,KACE,kBAAClR,GAAA,EAAD,CAAYrF,QAAQ,MAApB,UACGsL,EAAKiM,cAAc,UADtB,aACG,EAAuB9b,KAAKiQ,WAGjC,kBAAC,GAAD,CAAsBoD,UAAWxD,EAAK6B,e,kHCtGpDpJ,GAAYC,cAAW,SAACzG,GAAD,MAAY,CACvCyZ,OAAQ,CACN9D,YAAa3V,EAAMsB,QAAQ,IAE7BoY,KAAM,CACJC,SAAU,EACVjU,OAAQ1F,EAAMsB,QAAQ,GACtB+B,UAAWrD,EAAMsB,QAAQ,IAE3B2Y,SAAU,CACRlY,MAAO/B,EAAME,QAAQa,UAAUH,MAEjCgZ,OAAQ,CACNvW,UAAWrD,EAAMsB,QAAQ,QAuMd4Y,GAnMc,WAC3B,IzB+hPoCpR,EyB/hP9BjC,EAAUL,KACV2T,EAAUC,aAAcpa,GAAMkP,YAAYwG,GAAG,OAFlB,EAGT3E,IAAMC,UAAS,GAHN,oBAG1B0F,EAH0B,KAGpB8B,EAHoB,OAICzH,IAAMC,UAAS,GAJhB,oBAI1BqJ,EAJ0B,KAIfC,EAJe,OAKKtJ,mBAAS,IALd,oBAK1BuJ,EAL0B,KAKbC,EALa,OAMexJ,oBAAS,GANxB,oBAM1ByJ,EAN0B,KAMRC,EANQ,OzBiiPpB3R,eAAoEM,GAAoBP,GyBjiPpE,oBAO1B6R,EAP0B,YAOZ5M,EAPY,EAOZA,KAAMyD,EAPM,EAONA,QAASxQ,EAPH,EAOGA,MAPH,EASX6H,KAAf+R,EAT0B,uBAWoBpd,cAAvCqd,EAXmB,EAWzB3c,KAA4B4c,EAXH,EAWRC,UACrBrT,EAAUC,eAERqT,EAAsB,WAC1B,OAAQb,GACN,KAAK,EACH,MAAO,QACT,KAAK,EACH,MAAO,SAET,QACE,MAAO,UAQPc,EAAc,WAClBX,GAAcD,IAGVrH,EAAY,yCAAG,WAAOH,GAAP,4BAAAjV,EAAA,yDACnBiV,EAAEI,iBAEGsH,EAHc,wDAInBD,GAAa,GAJM,SAMUK,EAAW,CACtCvJ,UAAW,CACT8J,QAAS,CACPC,SAAUN,EAAUzc,IACpB0V,KAAMyG,EAAYa,oBAClB5B,WAAYiB,EACZ7B,aAAcld,EAAkBmd,gBAZnB,cAMbwC,EANa,gBAiBbT,EAAY,CAChBxJ,UAAW,CACTkK,QAAS,CACPhN,QAAS,QACTW,KAAK,sBAAD,iBAAwBoM,EAAetN,YAAvC,iBAAwB,EAAqBwN,sBAA7C,iBAAwB,EAAqCC,UAAU,UAAvE,aAAwB,EAAmD1H,MAC/E6D,WAAU,UAAE0D,EAAetN,YAAjB,iBAAE,EAAqBwN,sBAAvB,iBAAE,EAAqCC,UAAU,UAAjD,aAAE,EAAmD5L,OAtBlD,OA2BnB4I,GAAQ,GACRgC,EAAe,IAEf9S,EAAQE,KAAR,mBAAyB2S,EAAYa,sBA9BlB,4CAAH,sDA6ClB,OAJIpa,GACF+L,GAAa,mBAAoB/L,GAG/BwQ,EACK,kBAAC,GAAD,MAIP,kBAACsH,GAAA,EAAD,CAAMvQ,UAAU,OACd,kBAACwQ,GAAA,EAAD,CAAUnJ,GAAG,uBAAuB3M,QAAM,EAACqD,QA3D3B,WAClBkS,GAAS9B,KA2DL,kBAACtI,GAAA,EAAD,CAAc7H,aAAW,oBACtBmQ,EAAO,kBAAC,KAAD,MAAmB,kBAAC,KAAD,OAE7B,kBAACsC,GAAA,EAAD,CAActY,QAAQ,gBACrBgW,EACC,kBAAC,KAAD,CAAkBhV,SAAS,UAE3B,kBAAC,KAAD,CAAWK,MAAM,YAAYL,SAAS,WAG1C,kBAACuX,GAAA,EAAD,CAAUC,GAAIxC,EAAMyC,QAAQ,OAAOsC,eAAa,IAC5CX,GAAgBtJ,IAAY,kBAAC,GAAD,MAC9B,kBAACsH,GAAA,EAAD,CAAMvQ,UAAU,OACbvH,GACC,kBAAC+X,GAAA,EAAD,CAAUhS,UAAWF,EAAQ4S,QAC3B,kBAACiC,GAAA,EAAD,CACEhF,KAAM2D,EACNsB,iBAAkB,IAClBC,QAASX,EACTY,aAAc,CACZC,SAAU,MACVC,WAAYf,MAGd,kBAAC/M,GAAA,EAAD,CAAOC,SAAU,QAAS0N,QAASX,GAAnC,uDAMLlN,GACC,kBAACgL,GAAA,EAAD,CAAUhS,UAAWF,EAAQ4S,QAC3B,kBAACiC,GAAA,EAAD,CACEhF,KAAM2D,EACNsB,iBAAkB,IAClBC,QAASX,EACTY,aAAc,CACZC,SAAU,MACVC,WAAYf,MAGd,kBAAC/M,GAAA,EAAD,CAAOC,SAAU,UAAW0N,QAASX,GAArC,6BAMN,kBAAClC,GAAA,EAAD,CAAUxQ,UAAU,MAAMxB,UAAWF,EAAQ4S,QAC3C,kBAACuC,GAAA,EAAD,CAAMC,WAAS,GACb,0BACErM,GAAG,cACH7I,UAAWF,EAAQ6S,KACnBwC,YAAU,EACVC,aAAa,MACbxI,SAAUX,GAEV,kBAACgJ,GAAA,EAAD,CAAM1E,MAAI,EAAC8E,GAAI,IACb,kBAACC,GAAA,EAAD,CACE/L,SAAUwK,GAAgBtJ,EAC1BzB,MAAOwK,EACP+B,WAAW,EACXvI,SAhFG,SAAClB,GACpB2H,EAAe3H,EAAEE,OAAOhD,QAgFRoM,aAAa,MACbI,YAAY,oBACZ3M,GAAG,oBACHrL,MAAM,oBACNiY,WAAS,KAGb,kBAACR,GAAA,EAAD,CAAM1E,MAAI,EAAC8E,GAAI,IACb,kBAACnI,GAAA,EAAD,CACEC,QACE,kBAACuI,GAAA,EAAD,CACErI,QAASqG,EACT1G,SAzFQ,SAAClB,GAC7B6H,EAAoB7H,EAAEE,OAAOqB,UAyFTrS,MAAM,YACN+R,KAAK,UACL/M,UAAWF,EAAQoT,WAGvB1V,MACE,kBAACuD,GAAA,EAAD,CAAYrF,QAAQ,UAAUV,MAAM,iBAApC,sBAMN,kBAACia,GAAA,EAAD,CAAM1E,MAAI,EAAC8E,GAAI,IACb,kBAAC/V,GAAA,EAAD,CACEiK,SAAUwK,GAAgBtJ,EAC1BlR,KAAK,SACLyP,MAAM,SACN2M,QAAS,kBAAC,KAAD,MACT3V,UAAWF,EAAQ+S,OACnBnX,QAAQ,WACRka,cAAY,eAPd,2B,qBC1LHC,GA5Be,WAC5B,IAAMnE,EAAQC,aAAc,oBAM5B,OACE,oCACE,kBAACK,GAAA,EAAD,CACE9V,QAAM,EACNsF,UAAW+Q,IACXC,GAAG,mBACHhT,aAAW,gBAEX,kBAAC6H,GAAA,EAAD,KACE,kBAAC,KAAD,OAEF,kBAAC4K,GAAA,EAAD,KACE,kBAAClR,GAAA,EAAD,CAAYrF,QAAQ,KAAKV,MAfxB0W,EAAQ,YAAc,WAevB,eCSKoE,GA5BiB,WAC9B,IAAMpE,EAAQC,aAAc,cAM5B,OACE,oCACE,kBAACK,GAAA,EAAD,CACE9V,QAAM,EACNsF,UAAW+Q,IACXC,GAAG,aACHhT,aAAW,kBAEX,kBAAC6H,GAAA,EAAD,KACE,kBAAC,KAAD,OAEF,kBAAC4K,GAAA,EAAD,KACE,kBAAClR,GAAA,EAAD,CAAYrF,QAAQ,KAAKV,MAfxB0W,EAAQ,YAAc,WAevB,eCbJjS,GAAYC,cAAW,SAACzG,GAAD,cAAY,CACvCkE,MAAI,GACFJ,OAAQ,QACRgZ,UAAW,SACXC,wBAAyB,SAHvB,eAID/c,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5BvS,cAAenD,EAAMsB,QAAQ,KAL7B,eAODtB,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BrL,OAAQ,UARR,GAWJkZ,SAAU,CACRpY,QAAS,OACTsC,eAAgB,SAChBC,WAAY,UAEd8V,MAAI,oBACDjd,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BtL,MAAO,UAFP,eAID7D,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5B7R,MAAO,UALP,GAQJqZ,WAAW,cACTrZ,MAAO7D,EAAMsB,QAAQ,GACrBwC,OAAQ9D,EAAMsB,QAAQ,GACtByC,gBAAiB/D,EAAME,QAAQa,UAAUH,KACzCsW,WAAY,EACZ,yBAA0B,CACxBD,YAAa,GAEf/P,eAAgB,WAChB7D,UAAWrD,EAAMsB,QAAQ,GACzB2V,YAAajX,EAAMsB,QAAQ,GAC3BiC,aAAcvD,EAAMsB,QAAQ,IAE3BtB,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5B9Q,QAAS,SAGbyQ,OAAQ,CACNO,aAAc5V,EAAMsB,QAAQ,GAC5BwC,OAAQ,SAmGGqZ,GA1FyB,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,kBAAmB1G,EAAW,EAAXA,KACtD7P,EAAUL,KACRtI,EAASV,cAATU,KACFic,EAAUC,aAAcpa,GAAMkP,YAAYwG,GAAG,OAC3CjY,EAAoBD,cAApBC,gBACF4f,EAAOhf,eAAeif,QAAQpf,EAAKE,KAEzC,OACE,oCACE,kBAACyJ,GAAA,EAAD,CACEjD,QAAQ,OACRwD,KAAM,EACNlB,eAAe,aACfC,WAAW,aACXJ,UAAWF,EAAQ3C,MAEnB,kBAAC2D,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,aACfkB,KAAM,EACNhB,cAAc,WAED,IAAZ+S,GACC,kBAAC6B,GAAA,EAAD,CAAM1E,MAAI,EAAC8E,GAAI,GAAIrV,UAAWF,EAAQmW,UACpC,yBACEhW,IAAI,yBACJC,IAAI,8BACJF,UAAWF,EAAQoW,QAIzB,kBAACjB,GAAA,EAAD,CAAM1E,MAAI,EAAC8E,GAAI,IACb,kBAACvU,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,gBACfC,WAAW,SACX1F,MAAO,CACL4B,UAAWrD,GAAMsB,QAAQ,GACzB4V,WAAYlX,GAAMsB,QAAQ,KAG5B,kBAACgU,GAAA,EAAD,CACE/O,aAAW,YACXD,QAAS8W,EACTrb,MAAM,UACNW,KAAK,SACLqE,UAAW8P,aAAKhQ,EAAQqW,WAAYxG,IAEpC,kBAAC,KAAD,OAEF,kBAAC,GAAD,CAAYpI,QAASpQ,EAAKE,OAE5B,kBAACmf,GAAA,EAAD,CACE9b,MAAO,CACL4B,UAAWrD,GAAMsB,QAAQ,GACzBiC,aAAcvD,GAAMsB,QAAQ,OAIlC,kBAAC0a,GAAA,EAAD,CAAM1E,MAAI,EAAC8E,GAAI,IACZ3e,EACC,oCACE,kBAAC,GAAD,CAAuB6Q,QAASpQ,EAAKE,MACrC,kBAACmf,GAAA,EAAD,MACU,UAATF,GAAoB,kBAACG,GAAD,MACrB,kBAAC,GAAD,MACA,kBAACD,GAAA,EAAD,MACA,kBAACE,GAAD,MACA,kBAACF,GAAA,EAAD,MACA,kBAAC,GAAD,MACA,kBAACA,GAAA,EAAD,OAGF,GAEF,kBAAC1V,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,WACfC,WAAW,aACXJ,UAAWF,EAAQwO,QAEnB,kBAAC,GAAD,YC7IR7O,GAAYC,cAAW,SAACzG,GAAD,MAAmB,CAC9CsH,MAAO,CACLzD,MAAO,IACPsR,SAAUnV,EAAMsB,QAAQ,SAyCboc,GAjC+B,SAAC,GAAmB,IAAD,gB7B6qSG5U,E6B7qSnByI,EAAgB,EAAhBA,UACzC1K,EAAUL,KACRtI,EAASV,cAATU,KAFuD,G7B6qSG4K,E6BxqShE,CACEsI,UAAW,CACTuG,WAAYpG,EACZjD,QAASpQ,EAAKE,M7BsqSP2K,mBAAoI4C,GAA8C7C,I6B1qSvLiF,EAJuD,EAIvDA,KASR,OAb+D,EAIjDyD,QASM,kBAAC,GAAD,MAGlB,kBAAC,GAAD,CACEtT,KAAI,OAAE6P,QAAF,IAAEA,GAAF,UAAEA,EAAMmN,QAAQ,UAAhB,iBAAE,EAAkBlB,cAAc,UAAlC,aAAE,EAAoC9b,KAC1C2P,qBAAqB,GAErB,kBAACiC,GAAA,EAAD,CACEpN,KAAK,QACLD,QAAQ,WACRV,MAAM,UACNwC,MAAK,OAAEwJ,QAAF,IAAEA,GAAF,UAAEA,EAAMmN,QAAQ,UAAhB,iBAAE,EAAkBlB,cAAc,UAAlC,iBAAE,EAAoC9b,YAAtC,aAAE,EAA0CiQ,SACjD8B,KAAM,kBAAC,KAAD,MACNlJ,UAAWF,EAAQS,MACnBf,aAAA,0BAAwBwH,QAAxB,IAAwBA,GAAxB,UAAwBA,EAAMmN,QAAQ,UAAtC,iBAAwB,EAAkBlB,cAAc,UAAxD,iBAAwB,EAAoC9b,YAA5D,aAAwB,EAA0CiQ,cC7BpE3H,GAAYC,cAAW,SAACzG,GAAD,YAAmB,CAC9CkE,MAAI,GACFgD,eAAgB,gBAChBnD,gBAAiB/D,EAAME,QAAQK,WAAWE,QAC1C4C,UAAWrD,EAAMsB,QAAQ,GACzBkG,WAAYxH,EAAMsB,QAAQ,GAC1BqU,YAAa3V,EAAMsB,QAAQ,GAC3BsU,aAAc5V,EAAMsB,QAAQ,GAC5B6B,cAAenD,EAAMsB,QAAQ,GAC7Bqc,OAAQ,KARN,eASD3d,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5BrI,SAAU,QACVxJ,MAAO,SAXP,eAaD7D,EAAMkP,YAAYC,KAAK,MAAQ,CAC9B9B,SAAU,UAdV,GAiBJuQ,eAAgB,CACdza,cAAe,QAEjB+Z,WAAY,CACVrZ,MAAO7D,EAAMsB,QAAQ,GACrBwC,OAAQ9D,EAAMsB,QAAQ,GACtByC,gBAAiB/D,EAAME,QAAQa,UAAUH,KACzCsW,WAAYlX,EAAMsB,QAAQ,GAC1B,yBAA0B,CACxB4V,WAAYlX,EAAMsB,QAAQ,KAG9BgG,MAAO,CACLzD,MAAO,IACPsR,SAAUnV,EAAMsB,QAAQ,SA8Hbuc,GAlH2C,SAAC,GAMpD,IALLtD,EAKI,EALJA,YACArc,EAII,EAJJA,KACA4f,EAGI,EAHJA,kBACA5C,EAEI,EAFJA,QACA6C,EACI,EADJA,aAEMlX,EAAUL,KADZ,EAEqBqK,yBAAwBlE,IAA1CmE,EAFH,qBAGEqJ,EAAUC,aAAcpa,GAAMkP,YAAYwG,GAAG,OAH/C,EAIoB3E,IAAMC,UAAS,GAJnC,oBAIG0F,EAJH,KAIS8B,EAJT,KAKA9Q,EAAUC,eAkBd,OACE,kBAACE,GAAA,EAAD,CAAKU,UAAU,UAAUxB,UAAWF,EAAQ+W,gBAC1C,kBAAC/V,GAAA,EAAD,CACEjD,QAAQ,OACRuC,WAAW,SACXC,cAAc,MACdvD,MAAO,EACPkD,UAAWF,EAAQ3C,KACnBqE,UAAU,QAEG,IAAZ4R,GACC,kBAAC7E,GAAA,EAAD,CACEvO,UAAWF,EAAQqW,WACnBnb,MAAM,UACNwE,aAAW,YACXD,QA/Be,WACnB4U,EACFxT,EAAQE,KAAR,mBAAyBsT,IAG3B1C,GAAQ,KA4BA,kBAAC,KAAD,QAGW,OAAd1H,QAAc,IAAdA,OAAA,EAAAA,EAAgB8H,gBAAiBld,EAAkBqe,eAClD7b,GAAQ,kBAAC,GAAD,CAAYqT,UAAWT,EAAelB,MACjC,OAAdkB,QAAc,IAAdA,OAAA,EAAAA,EAAgB8H,gBAAiBld,EAAkBmd,cACnB,KAAjB,OAAd/H,QAAc,IAAdA,OAAA,EAAAA,EAAgB0I,cACfuE,GACC,kBAACjO,GAAA,EAAD,CACEpN,KAAK,QACLD,QAAQ,WACRV,MAAM,UACNwC,MAAOgW,EACPtK,KAAM,kBAAC,KAAD,MACNlJ,UAAWF,EAAQS,MACnBf,aAAA,mBAAwBgU,MAGf,OAAdzJ,QAAc,IAAdA,OAAA,EAAAA,EAAgB8H,gBAAiBld,EAAkBmd,cACnB,KAAjB,OAAd/H,QAAc,IAAdA,OAAA,EAAAA,EAAgB0I,cACfuE,IACAD,GACC,kBAAChO,GAAA,EAAD,CACEpN,KAAK,QACLD,QAAQ,WACRV,MAAM,UACNwC,MAAOgW,EACPtK,KAAM,kBAAC,KAAD,MACNlJ,UAAWF,EAAQS,MACnBf,aAAA,mBAAwBgU,KAG7BwD,GACC,kBAACjO,GAAA,EAAD,CACEpN,KAAK,QACLD,QAAQ,WACRV,MAAM,UACNwC,MAAOgW,EACPtK,KAAM,kBAAC,KAAD,MACNlJ,UAAWF,EAAQS,MACnBf,aAAA,mBAAwBgU,MAGb,OAAdzJ,QAAc,IAAdA,OAAA,EAAAA,EAAgB8H,gBAAiBld,EAAkBmd,cACnB,KAAjB,OAAd/H,QAAc,IAAdA,OAAA,EAAAA,EAAgB0I,aAChBsE,GACE,kBAACjW,GAAA,EAAD,CAAKjD,QAAQ,OAAOsC,eAAe,SAASqB,UAAU,WACpD,kBAAClC,GAAA,EAAD,CACEtE,MAAM,YACNU,QAAQ,YACRnC,KAAK,SACLgG,QAxEsB,WAClCoB,EAAQE,KAAR,uBAwEYrB,aAAW,uBALb,yBAWN,kBAAC,GAAD,CAAWgL,UAAS,OAAET,QAAF,IAAEA,OAAF,EAAEA,EAAgBlB,KACtC,kBAAC,GAAD,OAEF,kBAAC,GAAD,CAAe8G,KAAMA,GACnB,kBAAC,GAAD,CAAS0G,kBAvFW,WACxB5E,GAAQ,IAsF2C9B,KAAMA,OC9IvDlQ,GAAYC,cAAW,SAACzG,GAAD,MAAY,CACvCkE,KAAM,CACJ4Y,UAAW,SACXhZ,OAAQ,SAEVka,OAAQ,CACN3a,UAAWrD,EAAMsB,QAAQ,QAsHd2c,GAlHqB,WAAO,IAAD,EAClCpX,EAAUL,KACZkB,EAAUC,eACKmT,EAAiBtd,cAA5Bud,UAHgC,EAKflK,yBAAwBlE,IAA1CmE,EALiC,qBAOnCA,GAAgBpJ,EAAQE,KAAK,oBAPM,I/B6kS6BkB,E+B7kS7B,G/B6kS6BA,E+BhkSV,CACzDsI,UAAW,CACT9C,QAAO,iBAAEwC,QAAF,IAAEA,OAAF,EAAEA,EAAgBqK,gBAAlB,QAA8B,GACrCxD,WAAU,OAAE7G,QAAF,IAAEA,OAAF,EAAEA,EAAgBlB,K/B8jSnB7G,mBAA0I0C,GAAiD3C,I+BpkShM2F,EAVgC,EAUtCV,KACAyD,EAXsC,EAWtCA,QACAxQ,EAZsC,EAYtCA,MAZsC,E/BgnPnC,SAAmC8H,GAClC,OAAOC,eAA4EQ,GAAwBT,G+B1lP7GoV,GAvBoC,oBAqBtCC,EArBsC,KAsB7BC,EAtB6B,KAsBpCpd,MAGEqd,EAAiB,yCAAG,WAAO/P,GAAP,UAAA1Q,EAAA,sEAClBugB,EAAuB,CAC3B/M,UAAW,CACTuG,WAAU,OAAE7G,QAAF,IAAEA,OAAF,EAAEA,EAAgBlB,GAC5BtB,aAJoB,2CAAH,sDAgBvB,OAPItN,GAASod,IACXrR,GACE,iDACA/L,EACAod,GAIF,oCACE,kBAACpC,GAAA,EAAD,CAAM1E,MAAI,EAAC8E,GAAI,GAAIkC,GAAI,EAAGvX,UAAWF,EAAQ3C,KAAMqE,UAAU,WAC3D,kBAAC,GAAD,CAAkBgS,YAAW,OAAEzJ,QAAF,IAAEA,OAAF,EAAEA,EAAgBgD,OAC/C,kBAACjM,GAAA,EAAD,CAAKjD,QAAQ,OAAOsC,eAAe,SAASC,WAAW,UACrD,kBAAC,GAAD,OAEF,kBAACU,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,SACfC,WAAW,SACXC,cAAc,SACdmX,GAAI,EACJvW,GAAI,GAEJ,kBAACF,GAAA,EAAD,CAAY8H,GAAG,qBAAqBnN,QAAQ,MAA5C,uBACgBqO,QADhB,IACgBA,OADhB,EACgBA,EAAgBgD,MAEhC,kBAAChM,GAAA,EAAD,CACE/F,MAAM,YACNU,QAAQ,UACRmN,GAAG,4BAEFnB,GAASA,EAAMvQ,KAAK2Q,OAAS,EAC1B,mDACA,+CAGR,kBAAChH,GAAA,EAAD,KACG7G,GACC,kBAACiN,GAAA,EAAD,CAAOC,SAAU,SAAjB,wCAKA4M,GAAgBtJ,IAAY,kBAAC,GAAD,QAE3BsJ,GAAgBtJ,GAAWxQ,IAC5B,oCACE,kBAACuc,GAAA,EAAD,CAASxW,UAAWF,EAAQmX,SAC5B,kBAAClF,GAAA,EAAD,CACEvQ,UAAU,MACVhC,aAAW,4BACXQ,UAAWF,EAAQmX,QAElBvP,GACCA,EAAMvQ,KAAK8T,KACT,SAACrD,EAA6C0K,GAC5C,OACE,kBAACN,GAAA,EAAD,CACE9V,QAAM,EACNyJ,IAAK2M,EACL/S,QAAS,WACHqI,EAAEC,eACJyP,EAAkB1P,EAAEC,iBAGvBD,GAAK,kBAAC,GAAD,CAAkBzQ,KAAI,OAAEyQ,QAAF,IAAEA,IAAK,KACnC,kBAACqK,GAAA,EAAD,CAActY,QAASiO,EAAER,gBAMrC,kBAACoP,GAAA,EAAD,CAASxW,UAAWF,EAAQmX,c,UCnHpCxX,GAAYC,cAAW,SAACzG,GAAD,MAAY,CACvCkE,KAAM,CACJ4Y,UAAW,SACXhZ,OAAQ,SAEVka,OAAQ,CACN3a,UAAWrD,EAAMsB,QAAQ,QAgLdkd,GA5K2B,WACxC,IhCsnS+E1V,EgCtnSzEjC,EAAUL,KAD8B,EAEtBwK,mBAAS,MAAxByN,EAFqC,qBAGtCvgB,EAASV,cAATU,KAHsC,EAIpB8S,mBAExB,MAN4C,oBAIvCvC,EAJuC,KAIhCiQ,EAJgC,KAOxCpQ,EAAUpQ,EAAKE,IACjBsJ,EAAUC,eARgC,GhCunSiCmB,EgCzmSV,CACnEsI,UAAW,CACT9C,YhCwmSSvF,mBAA8J2C,GAA2D5C,IgC7mSpOiF,EAX4C,EAW5CA,KACAyD,EAZ4C,EAY5CA,QACAxQ,EAb4C,EAa5CA,MAb4C,EAuB1C2I,KAvB0C,oBAqB5CgV,EArB4C,KAsBnCC,EAtBmC,KAsB1C5d,MAtB0C,EA4B1C6H,KA5B0C,oBA0B5C+R,EA1B4C,KA2BnCiE,EA3BmC,KA2B1C7d,MA3B0C,EhC+kPzC,SAAuD8H,GACtD,OAAOC,eAAoHO,GAA4CR,GgC/iPzKgW,GAjC0C,oBA+B5CC,EA/B4C,KAgCnCC,EAhCmC,KAgC1Che,MAoBJ,GAjBA+W,qBAAU,WACR,IAAMkH,EAAsB,yCAAG,uBAAArhB,EAAA,sFACtBmQ,QADsB,IACtBA,OADsB,EACtBA,EAAM7P,KAAKwQ,QAAO,SAACC,GACxB,OAGgB,IAFdA,EAAEqL,cAActL,QAAO,SAACwQ,GACtB,OAAqD,IAA9CA,EAAahE,QAAQlB,cAAcnL,UACzCA,WALsB,2CAAH,sDASjB,yCAAG,6BAAAjR,EAAA,sEACQqhB,IADR,OACNxQ,EADM,OAEZiQ,EAASjQ,GAFG,2CAAH,qDAIX0Q,KACC,CAACpR,IAEA/M,GAASge,GAAcJ,GAAsBC,EAQ/C,OAPA9R,GACE,gCACA/L,EACAge,EACAJ,EACAC,GAEK,kBAAC5Q,GAAA,EAAD,CAAOC,SAAS,SAAhB,2BAGT,GAAIsD,EACF,OAAO,kBAAC,GAAD,MAGT,IAAM4N,EAAa,yCAAG,WACpB9Q,EACA+Q,GAFoB,4BAAAzhB,EAAA,0DAIhB0Q,IAAW+Q,EAJK,wBAKlBZ,EAAY,MALM,SAMKM,EAA2C,CAChE3N,UAAW,CACT0C,KAAMwL,eACNC,SAAUjR,EACVkR,SAAUH,KAVI,uBAMVtR,EANU,EAMVA,KANU,SAcZ6M,EAAY,CAChBxJ,UAAW,CACTkK,QAAS,CACPhN,QAAS,QACTW,KAAK,6CACL0I,WAAU,OAAE5J,QAAF,IAAEA,GAAF,UAAEA,EAAM0R,0CAAR,aAAE,EAA0C7P,OAnB1C,QAyBZ,OAAJ7B,QAAI,IAAJA,GAAA,UAAAA,EAAM0R,0CAAN,eAA0C7P,MACtC,OAAJ7B,QAAI,IAAJA,GAAA,UAAAA,EAAM0R,0CAAN,eAA0C7P,IAAK,GAE/C+O,EAA4B,CAC1BvN,UAAW,CACTuG,WAAU,OAAE5J,QAAF,IAAEA,GAAF,UAAEA,EAAM0R,0CAAR,aAAE,EAA0C7P,GACtDsI,WAAY,EACZ5J,QAAS+Q,KAIf3X,EAAQE,KAAR,0BACcmG,QADd,IACcA,GADd,UACcA,EAAM0R,0CADpB,aACc,EAA0C3L,OArCtC,4CAAH,wDA0CnB,OACE,oCACE,kBAACkI,GAAA,EAAD,CAAM1E,MAAI,EAAC8E,GAAI,GAAIkC,GAAI,EAAGvX,UAAWF,EAAQ3C,KAAMqE,UAAU,WAC3D,kBAAC,GAAD,CAAkBgS,YAAa,YAC/B,kBAAC1S,GAAA,EAAD,CAAKjD,QAAQ,OAAOsC,eAAe,SAASC,WAAW,UACrD,kBAAC,GAAD,OAEF,kBAACU,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,SACfC,WAAW,SACXC,cAAc,SACdY,GAAI,GAEJ,kBAACF,GAAA,EAAD,CAAYrF,QAAQ,MAApB,cACA,kBAACqF,GAAA,EAAD,CACE/F,MAAM,YACNU,QAAQ,UACRmN,GAAG,6BAEG,OAALnB,QAAK,IAALA,OAAA,EAAAA,EAAOI,QACJ,uDACA,KAGR,kBAAChH,GAAA,EAAD,CAAKG,GAAI,GACP,kBAACuV,GAAA,EAAD,CAASxW,UAAWF,EAAQmX,UACtB,OAALvP,QAAK,IAALA,OAAA,EAAAA,EAAOI,SACN,kBAACiK,GAAA,EAAD,CAAM/R,UAAWF,EAAQmX,QAAzB,OACGvP,QADH,IACGA,OADH,EACGA,EAAOuD,KACN,SACEqN,EACAhG,GAEA,OACE,kBAACN,GAAA,EAAD,CACE9V,QAAM,EACNyJ,IAAK2M,EACL/S,QAAS,kBACP8Y,EAAc9Q,EAAS+Q,EAAQzQ,iBAGjC,kBAAC,GAAD,CAAkB1Q,KAAMmhB,IACxB,kBAACrG,GAAA,EAAD,CAActY,QAAS2e,EAAQlR,gBAOxB,KAAb,OAALM,QAAK,IAALA,OAAA,EAAAA,EAAOI,SACN,kBAACZ,GAAA,EAAD,CAAOC,SAAU,WAAjB,oHAKF,kBAACqP,GAAA,EAAD,CAASxW,UAAWF,EAAQmX,a,wCCxLhCxX,GAAYC,cAAW,SAACzG,GAAD,kBAC3B0f,KAAM,CACJ9a,QAAS,OACTsC,eAAgB,aAChBC,WAAY,aACZvF,QAAS5B,EAAMsB,QAAQ,KALE,eAO1BtB,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5BiK,YAAa,CACXxc,cAAe,OACfpB,MAAO,8BAVgB,eAa1B/B,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BwQ,YAAa,CACXxc,cAAe,OACfpB,MAAO,8BAhBgB,eAmB1B/B,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BwQ,YAAa,CACXxc,cAAe,OACfpB,MAAO,8BAtBgB,wBAyBnB,CACNwB,aAAcvD,EAAMsB,QAAQ,KA1BH,2BA4BhB,CACTiC,aAAcvD,EAAMsB,QAAQ,KA7BH,8BA+Bb,CACZ+B,UAAWrD,EAAMsB,QAAQ,GACzBiC,aAAcvD,EAAMsB,QAAQ,KAjCH,wBAmCnB,CACNuC,MAAO7D,EAAMsB,QAAQ,GACrBwC,OAAQ9D,EAAMsB,QAAQ,GACtByC,gBAAiB,UACjBhC,MAAO,UACPL,SAAU,GACVsB,WAAY,OACZwK,OAAQ,sBA1CiB,+BA4CZ,CACb3J,MAAO7D,EAAMsB,QAAQ,GACrBwC,OAAQ9D,EAAMsB,QAAQ,GACtByC,gBAAiB,UACjBhC,MAAO,UACPL,SAAU,GACVsB,WAAY,OACZwK,OAAQ,sBAnDiB,uBAqDpB,CACLrK,cAAe,WAtDU,4CAyDxBnD,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BtL,MAAO,SA1DgB,eA4DxB7D,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5B7R,MAAO,QA7DgB,SA0Ld+b,GAlH+B,SAAC,GAIxC,IAHLC,EAGI,EAHJA,cACA/O,EAEI,EAFJA,eACAgP,EACI,EADJA,eAEMjZ,EAAUL,KA0GhB,OAAO,oCAxGkB,SAACqZ,GAAkC,IAAD,cACzD,OACE,oCACGC,IACc,OAAbD,QAAa,IAAbA,GAAA,UAAAA,EAAevE,eAAf,mBAAwBJ,eAAxB,eAAiCtC,gBAC/Bld,EAAkBmd,aAClB,kBAAChR,GAAA,EAAD,CAAKjD,QAAQ,OAAOsC,eAAe,SAASC,WAAW,UACrD,kBAAC2I,GAAA,EAAD,CACErN,QAAQ,WACRC,KAAK,QACLX,MAAM,UACNwC,MAAO,mDAAkBuM,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAgBgD,KAAlC,QAIdgM,IACc,OAAbD,QAAa,IAAbA,GAAA,UAAAA,EAAevE,eAAf,mBAAwBJ,eAAxB,eAAiCtC,gBAC/Bld,EAAkBqe,eAClB,kBAAClS,GAAA,EAAD,CAAKjD,QAAQ,OAAOsC,eAAe,SAASC,WAAW,UACrD,kBAAC,GAAD,CAAYoK,UAAS,OAAEsO,QAAF,IAAEA,GAAF,UAAEA,EAAevE,eAAjB,iBAAE,EAAwBJ,eAA1B,aAAE,EAAiCtL,MAG9D,kBAAC2N,GAAA,EAAD,CAASxW,UAAWF,EAAQkZ,YAC5B,kBAAChH,GAAA,EAAD,CACErM,IAAKmT,EAAcvE,QAAQ1L,GAC3BrH,UAAU,MACVxB,UAAWF,EAAQ6Y,MAEnB,kBAAC7X,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,aACfC,WAAW,cAEX,kBAAC6Y,GAAA,EAAD,KACE,kBAAC5R,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAO5L,QAAQ,OACXod,EAAcvE,QAAQ2E,QAOtB,kBAACnZ,GAAA,EAAD,CACEC,UAAWF,EAAQqZ,cACnBlZ,IAAI,4BAFN,OANA,kBAACF,GAAA,EAAD,CAAQC,UAAWF,EAAQ8G,QACxBkS,EAAcvE,QAAQpd,KAAKiQ,SACzBY,UAAU,EAAG,GACbC,mBAcf,kBAACnH,GAAA,EAAD,CAAKU,UAAU,MAAM3D,QAAQ,OAAOwC,cAAc,SAASgB,KAAK,KAC9D,kBAACP,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,gBACfC,WAAW,cAEX,kBAACU,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,aACfC,WAAW,cAEX,kBAACW,GAAA,EAAD,CAAY/F,MAAM,YAAYU,QAAQ,WAClCod,EAAcvE,QAAQ2E,QAKtB,wDAJA,oCACE,gCAASJ,EAAcvE,QAAQpd,KAAKiQ,SAApC,OAMN,kBAACrG,GAAA,EAAD,CACErF,QAAQ,UACRV,MAAM,UACNN,MAAO,CAAEyV,WAAY,QAErB,2BAAIiJ,KAAON,EAAcvE,QAAQ8E,WAAWC,YAE9C,kBAAC9C,GAAA,EAAD,CAASxW,UAAWF,EAAQyZ,WAGhC,kBAACxY,GAAA,EAAD,CAAYS,UAAU,MAAMxB,UAAWF,EAAQ8Y,aAC5CE,EAAcvE,QAAQrM,OAExB,UAAA4Q,EAAcvE,eAAd,eAAuBiF,OACtB,kBAAC1Y,GAAA,EAAD,CAAKd,UAAWF,EAAQ0Z,OACtB,yBACEvZ,IAAK6Y,EAAcvE,QAAQiF,MAC3BtZ,IAAK4Y,EAAcvE,QAAQiF,MAC3BxZ,UAAWF,EAAQ2Z,SAIvB,MAQFC,CAAiBZ,K,oBC9Jda,GAlCiD,SAAC,GAE1D,IAAD,IlC+xPyC5X,EkChyP7CkP,EACI,EADJA,UACI,ElCgyPSjP,eAAsFe,GAA6BhB,GkChyP5H,oBAEF6X,EAFE,YAGA5S,EAHA,EAGAA,KAAM/M,EAHN,EAGMA,MAWV,OACEA,QACwD/C,KAAnD,OAAJ8P,QAAI,IAAJA,GAAA,UAAAA,EAAM6S,qCAAN,eAAqCC,gBACmB,KAAnD,OAAJ9S,QAAI,IAAJA,GAAA,UAAAA,EAAM6S,qCAAN,eAAqCC,eAEhC,kBAAC5S,GAAA,EAAD,CAAOC,SAAS,SAAhB,oCAIP,kBAACoH,GAAA,EAAD,CACEhP,QAAS,kBAlBQ,SAAC0R,GACpB2I,EAA4B,CAC1BvP,UAAW,CACT8G,WAAYF,KAeC8I,CAAa9I,IAC5BzR,aAAA,yBAA8ByR,IAE9B,kBAAC,KAAD,CAAkBjW,MAAM,UAAUL,SAAS,YCjBpC8E,GAAYC,cAAW,SAACzG,GAAD,gBAClCkE,KAAM,CACJU,QAAS,OACTsC,eAAgB,aAChBC,WAAY,aACZvF,QAAS5B,EAAMsB,QAAQ,GACvByf,aAAc,aACdC,QAAS,OACTC,aAAc,aARkB,eAUjCjhB,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5BiK,YAAa,CACX/d,QAAS,OACT+T,YAAa,QAEfuL,MAAO,CACLxf,SAAU,GACVyB,cAAe,OACfpB,MAAO,aAlBuB,eAqBjC/B,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BwQ,YAAa,CACX/d,QAAS,OACT+T,YAAa,QAEfuL,MAAO,CACLxf,SAAU,GACVyB,cAAe,OACfpB,MAAO,aA7BuB,eAgCjC/B,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BwQ,YAAa,CACX/d,QAAS,OACT+T,YAAa,QAEfuL,MAAO,CACLxf,SAAU,GACVyB,cAAe,OACfpB,MAAO,aAxCuB,wBA2C1B,CACNwB,aAAcvD,EAAMsB,QAAQ,KA5CI,2BA8CvB,CACTiC,aAAcvD,EAAMsB,QAAQ,KA/CI,8BAiDpB,CACZ+B,UAAWrD,EAAMsB,QAAQ,GACzBiC,aAAcvD,EAAMsB,QAAQ,KAnDI,uBAqD3B,CACL6B,cAAe,WAtDiB,wBAwD1B,CACNU,MAAO7D,EAAMsB,QAAQ,GACrBwC,OAAQ9D,EAAMsB,QAAQ,GACtByC,gBAAiB,UACjBhC,MAAO,UACPL,SAAU,GACVsB,WAAY,OACZwK,OAAQ,sBA/DwB,gCAiElB,CACd5I,QAAS,OACTsC,eAAgB,SAChBC,WAAY,SACZvF,QAAS5B,EAAMsB,QAAQ,KArES,KAmLrB6f,GAhG6C,SAAC,GAQtD,IAAD,IAPJ/I,EAOI,EAPJA,SACAla,EAMI,EANJA,KACA2hB,EAKI,EALJA,cACA/O,EAII,EAJJA,eACAsQ,EAGI,EAHJA,oBACAC,EAEI,EAFJA,MACAvB,EACI,EADJA,eAEMjZ,EAAUL,KA0DhB,OACE,oCACE,kBAAC,GAAD,CACEqZ,cAAeA,EACf/O,eAAgBA,EAChBgP,eAAgBA,IAElB,kBAACjY,GAAA,EAAD,CAAKd,UAAWF,EAAQya,iBACb,OAARlJ,QAAQ,IAARA,OAAA,EAAAA,EAAUvJ,UAAWwS,GACpB,kBAAChb,GAAA,EAAD,CACEC,QAAS,kBAAM8a,KACf7a,aAAW,sBAFb,eAIe8a,EAJf,MASHjJ,EAAQ,uBACHA,UADG,iBACP,EACImJ,iBAFG,aACP,EAEIvP,KAAI,SAACsJ,GAAD,OA7EQ,SAACA,GAA4B,IAAD,MAChD,OACE,kBAACvC,GAAA,EAAD,CAAUrM,IAAK4O,EAAQ1L,GAAIrH,UAAU,MAAMxB,UAAWF,EAAQ3C,MAC5D,kBAAC8b,GAAA,EAAD,KACE,kBAAC5R,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAO5L,QAAQ,OACb,kBAACqE,GAAA,EAAD,CAAQC,UAAWF,EAAQ8G,QAA3B,OACG2N,QADH,IACGA,GADH,UACGA,EAASpd,YADZ,aACG,EAAeiQ,SAASY,UAAU,EAAG,GAAGC,kBAMjD,kBAACnH,GAAA,EAAD,CAAKU,UAAU,MAAM3D,QAAQ,OAAOwC,cAAc,SAASgB,KAAK,KAC9D,kBAACP,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,gBACfC,WAAW,cAEX,kBAACU,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,aACfC,WAAW,cAEX,kBAACW,GAAA,EAAD,CAAYrF,QAAQ,WAClB,uCAAS6Y,QAAT,IAASA,GAAT,UAASA,EAASpd,YAAlB,aAAS,EAAeiQ,SAAxB,KACA,2BAAIgS,KAAO7E,EAAQ8E,WAAWC,YAEhC,kBAAC9C,GAAA,EAAD,CAASxW,UAAWF,EAAQyZ,UAE9B,kBAACzY,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAYrF,QAAQ,WACjBvE,EAAKE,OAAL,OAAakd,QAAb,IAAaA,GAAb,UAAaA,EAASpd,YAAtB,aAAa,EAAe0Q,eAC3B,kBAAC,GAAD,CAAqBoJ,UAAWsD,EAAQ1L,KAExC,MAKR,kBAAC9H,GAAA,EAAD,CAAYS,UAAU,MAAMxB,UAAWF,EAAQ8Y,aAC5CrE,EAAQA,SAEVA,EAAQiF,MACP,kBAAC1Y,GAAA,EAAD,CAAKd,UAAWF,EAAQ0Z,OACtB,yBAAKvZ,IAAKsU,EAAQiF,MAAOtZ,IAAKqU,EAAQiF,SAGxC,GAEF,kBAAChD,GAAA,EAAD,CAASxW,UAAWF,EAAQyZ,WA2BMkB,CAAclG,MAElD,kBAAC,GAAD,Q,oBC1LF9U,GAAYC,cAAW,SAACzG,GAAD,MAAY,CACvCyhB,iBAAiB,cACf7c,QAAS,OACTwD,KAAM,EACNjF,cAAenD,EAAMsB,QAAQ,GAC7B+B,UAAWrD,EAAMsB,QAAQ,IACxBtB,EAAMkP,YAAYC,KAAK,MAAQ,CAC9B9L,UAAWrD,EAAMsB,QAAQ,KAG7BogB,cAAe,CACb9c,QAAS,OACThD,QAAS5B,EAAMsB,QAAQ,QAIrBqgB,GAAa,IAAIC,cAAW,oCAsDnBC,GAhDqC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBAC/Cjb,EAAUL,KAD6D,EAE1DqK,yBAA4BhE,IAAtCkV,EAFoE,uBAG3B/Q,mBAAS,IAHkB,oBAGtEgR,EAHsE,KAGnDC,EAHmD,KA0B7E,OACE,oCACE,kBAACpa,GAAA,EAAD,CAAKjD,QAAQ,OAAOwC,cAAc,SAAS3F,MAAO,CAAE0T,SAAU,SAC5D,kBAAC,YAAD,CACEzI,IAAKsV,EACLE,UAXU,SAACC,GACjB,OAAOH,EACHL,GAAWS,OAAOJ,EAAmB,CAAEG,SAAQd,MAAO,IACtDM,GAAWU,SAAS,CAAEF,SAAQd,MAAO,KASnCiB,WA3BW,SACjBC,EACA1P,GAEAA,EAAEI,iBACF8O,EAAOQ,GACPT,KAsBMU,UAAW,GACXC,OAAQ,IAEV,kBAACpG,GAAA,EAAD,CACEtV,UAAWF,EAAQ4a,iBACnB/e,KAAK,QACL6B,MAAM,mBACN9B,QAAQ,WACRsR,SA3Be,SACrB2O,GAEAT,EAAqBS,EAAG3P,OAAOhD,a,qBCxC7BvJ,GAAYC,cAAW,SAACzG,GAAD,MAAY,CACvC2iB,WAAY,CACV/gB,QAAS5B,EAAMsB,QAAQ,GACvB+B,UAAWrD,EAAMsB,QAAQ,IAE3BshB,YAAY,gBACT5iB,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5B5R,OAAQ,SA+DC+e,GAxDyB,SAAC,GAAkB,IAAhBtlB,EAAe,EAAfA,SACnCsJ,EAAUL,KADwC,EAGhCuK,IAAMC,UAAS,GAHiB,oBAGjD0F,EAHiD,KAG3C8B,EAH2C,OAItBzH,IAAMC,UAAkB,GAJF,oBAIjD8R,EAJiD,KAItCC,EAJsC,OAKNhS,IAAMC,UAAS,GALT,oBAKjDgS,EALiD,KAK9BC,EAL8B,KAqBxD,OACE,oCACE,kBAACpb,GAAA,EAAD,CACEpG,MAAO,CAAEmD,QAASoe,EAAoB,QAAU,QAChDjc,UAAWF,EAAQ8b,WACnBO,MAAO,EACP9a,KAAK,IACLlB,eAAe,aACfC,WAAW,UAEX,kBAAC,GAAD,CAAe2a,kBAAmB,kBAdtCiB,GAAcD,QACdG,GAAqB,OAenB,kBAACpb,GAAA,EAAD,CAAKjD,QAAQ,OAAOsC,eAAe,WAAWC,WAAW,YACvD,kBAACU,GAAA,EAAD,CAAKO,KAAM,GACT,kBAAC/B,GAAA,EAAD,CACEtE,OAAqB,IAAd+gB,EAAsB,UAAY,YACzCpgB,KAAK,QACL4D,QA3Be,WACvB2c,GAAsBD,GACtBD,GAAcD,IA0BN/b,UAAWF,EAAQ+b,YACnBrc,aAAW,SAEX,kBAAC,KAAD,QAGJ,kBAACsB,GAAA,EAAD,CAAKO,KAAM,GAAIlB,eAAe,YAC3B3J,IAGL,kBAAC,GAAD,CAAemZ,KAAMA,GACnB,kBAAC,GAAD,CAAS0G,kBA3CW,WACxB5E,GAAQ,IA0C2C9B,KAAMA,O,8BCvC9CyM,GAzBmB,WAAO,IAAD,EtCwtSOra,EsCvtSrC5K,EAASV,cAATU,KAD8B,EAGb2S,yBAAwBlE,IAA1CmE,EAH+B,wBtCwtSOhI,EsCntSmB,CAC9DsI,UAAW,CACTgS,QAASllB,EAAKE,IACduZ,WAAY7G,EAAelB,KtCitSlB7G,mBAA0F6C,GAAyB9C,IsCptSxHiF,EAL8B,EAK9BA,KAAMyD,EALwB,EAKxBA,QAASxQ,EALe,EAKfA,MAWvB,OAJIA,GACF+L,GAAa,4BAA6B/L,GAI1C,qCACIwQ,IAAD,OAAYzD,QAAZ,IAAYA,GAAZ,UAAYA,EAAMsV,YAAY,UAA9B,aAAY,EAAsBlV,UAAlC,UACMJ,EAAKsV,YAAY,GAAGlV,SAD1B,kBAEG,+BCZJ3H,GAAYC,cAAW,SAACzG,GAAD,gBAAY,CACvCkE,KAAM,CACJU,QAAS,OACTwD,KAAM,EACNhB,cAAe,SACfF,eAAgB,iBAElByb,WAAY,CACVtf,UAAWrD,EAAMsB,QAAQ,IAE3BoY,MAAI,GACF9U,QAAS,OACTsS,WAAYlX,EAAMsB,QAAQ,GAC1B2V,YAAajX,EAAMsB,QAAQ,GAC3B8F,cAAe,SACfuS,SAAU,GALR,eAMD3Z,EAAMkP,YAAYC,KAAK,MAAQ,CAC9B9L,UAAWrD,EAAMsB,QAAQ,KAPzB,eASDtB,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5BrS,UAAWrD,EAAMsB,QAAQ,KAVzB,GAaJgiB,cAAY,oBACTtjB,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BzN,SAAU,SAFF,eAIV,kCAAmC,CACjCK,MAAO/B,EAAME,QAAQa,UAAUH,OALvB,GAQZ2f,OAAK,GACH/S,OAAQ,aAAexN,EAAME,QAAQa,UAAUH,KAC/CkD,OAAQ,IACRP,aAAcvD,EAAMsB,QAAQ,IAHzB,eAIFtB,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5B6N,UAAW,MALV,eAOFvjB,EAAMkP,YAAYC,KAAK,MAAQ,CAC9B3B,OAAQ,aAAexN,EAAME,QAAQa,UAAUH,KAC/CkD,OAAQ,IACRqR,SAAU,QACVoO,UAAW,SAXV,eAaFvjB,EAAMkP,YAAYC,KAAK,MAAQ,CAC9B3B,OAAQ,aAAexN,EAAME,QAAQa,UAAUH,KAC/CkD,OAAQ,IACRqR,SAAU,QACVoO,UAAW,SAjBV,OAkKQC,GAvI+C,SAACjiB,GAAW,IAAD,QACjEsF,EAAUL,KACV2T,EAAUC,aAAcpa,GAAMkP,YAAYwG,GAAG,OAe3CxX,EAASV,cAATU,KAjB+D,EAkB/C8S,mBAAS,IAlBsC,oBAkBhE/B,EAlBgE,KAkB1DwU,EAlB0D,OAmBjD5S,yBAA4BhE,IAnBqB,oBAmBhE0V,EAnBgE,KAmB3DR,EAnB2D,OAoBzClR,yBAAwB/D,IAA7C4W,EApB8D,qBAsBjEnS,EAAYhQ,EAAMgQ,UAtB+C,EAwBrC9H,GAA2B,CAC3D2H,UAAW,CACT9C,QAASpQ,EAAKE,IACduZ,WAAYpG,KAHToS,EAxBgE,uBAuCjD9Z,KAAf+Q,EAvCgE,qBAyCjE5H,EAAY,yCAAG,WACnBH,GADmB,oBAAAjV,EAAA,yDAGnBiV,EAAEI,kBAEIhE,EAAK2U,QAAWrB,IAAShhB,EAAMsiB,gBALlB,wDASb7W,EAAM,CACVoE,UAAW,CACT0S,kBAAmBviB,EAAMsiB,gBACzBvI,QAASrM,EACTsR,MAAK,OAAEgC,QAAF,IAAEA,GAAF,UAAEA,EAAKwB,cAAP,iBAAE,EAAaC,mBAAf,aAAE,EAA0BC,IACjC3V,QAASpQ,EAAKE,MAIlBqlB,EAAQ,IACR1B,EAAO,MACP2B,GAAkB,GApBC,SAsBb9I,EAAY5N,GAtBC,2CAAH,sDAyBlB,OACE,kBAACnF,GAAA,EAAD,CAAKd,UAAWF,EAAQ3C,MACtB,kBAAC2D,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,SACfC,WAAW,SACXJ,UAAWF,EAAQ8b,YAElBJ,GACC,yBACExb,UAAWF,EAAQ0Z,MACnBvZ,IAAG,OAAEub,QAAF,IAAEA,GAAF,UAAEA,EAAKwB,cAAP,iBAAE,EAAaC,mBAAf,aAAE,EAA0BC,IAC/Bhd,IAAG,OAAEsb,QAAF,IAAEA,GAAF,UAAEA,EAAKwB,cAAP,iBAAE,EAAaC,mBAAf,aAAE,EAA0BC,IAC/B3d,QAAS,kBAAMyb,EAAO,UAI5B,0BACE7F,YAAU,EACVC,aAAa,MACbpV,UAAWF,EAAQ6S,KACnB/F,SAAUX,GAEV,kBAACqJ,GAAA,EAAD,CACEtM,MAAOd,EACPqN,WAAW,EACXvI,SAAU,SAAClB,IA7DE,SAAC5D,GACpB,IAAMiV,EAAajV,EAAKJ,QACJ,IAAfqV,GAAoBA,EAAa,IAAM,GAAqB,IAAfA,IAChDP,IAEFF,EAAQxU,GAyDAkV,CAAatR,EAAEE,OAAOhD,QAExBqU,WAAY,SAACvR,GACG,UAAVA,EAAEnG,KACJsG,EAAaH,IAGjBwR,WAAY,CAAEC,UAAW,KACzBC,SAAO,EACP7hB,KAlGiB,WACvB,OAAQyX,GACN,KAAK,EACH,MAAO,SAET,KAAK,EAGL,QACE,MAAO,SAyFCqK,GACN/hB,QAAQ,WACRgiB,WAAS,EACTC,KAAM,EACN3iB,MAAM,UACNoa,aAAa,MACbvM,GAAE,6BAAwBrO,EAAMsiB,iBAChCtf,MAAO,kBAAC,GAAD,MACPogB,WAAY,CACVC,aACE,kBAACC,GAAA,EAAD,CAAgBxX,SAAS,OACvB,kBAACiI,GAAA,EAAD,CACEhV,KAAK,SACLyB,MAAM,YACNwE,aAAW,kBAEX,kBAAC,KAAD,QAINM,QAAS,CACPie,MAAOje,EAAQyc,eAGnByB,gBAAiB,CACfhe,UAAWF,EAAQyc,mBCnLzB9c,GAAYC,cAAW,SAACzG,GAAD,YAAY,CACvCkE,KAAM,CACJb,UAAWrD,EAAMsB,QAAQ,GACzBM,QAAS5B,EAAMsB,QAAQ,GACvB6B,cAAenD,EAAMsB,QAAQ,IAE/BgiB,cAAY,GACVjW,SAAU,QACV/K,OAAQ,EACRV,QAAS5B,EAAMsB,QAAQ,GACvBf,WAAYP,EAAME,QAAQK,WAAWE,QACrCkd,OAAQ,KALE,eAMT3d,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5B7R,MAAO,SAPC,eAST7D,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BtL,MAAO,SAVC,eAYT7D,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BtL,MAAO,SAbC,eAeT7D,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BtL,MAAO,UAhBC,OAwGCmhB,GAnFU,WAAO,IAAD,ExCihRUlc,EwChhRjCjC,EAAUL,KADa,EAEHwK,mBAAS,IAFN,oBAEtBqQ,EAFsB,KAEf4D,EAFe,KAGrB/mB,EAASV,cAATU,KACFgnB,EAAiBC,iBAAuB,MAJjB,EAKJtU,yBAAwBlE,IAA1CmE,EALsB,qBAMzBpJ,EAAUC,eANe,EAOEyd,eAAvBpN,EAPqB,EAOrBA,UAAWkD,EAPU,EAOVA,QAPU,EASIjQ,GAA0C,CACzEmG,UAAW,CACTiQ,QACAnJ,WAAYpF,SAASkF,IAEvBN,YAAa,iBALP3J,EATqB,EASrBA,KAAMyD,EATe,EASfA,QAASxQ,EATM,EASNA,MATM,GxCihRU8H,EwC5/QV,CAC3BsI,UAAW,CACT8G,WAAYpF,SAASkF,KxC2/QZjP,YAAuE8B,GAA0B/B,IwChgRtGuc,EAlBqB,EAkB3BtX,KACSuX,EAnBkB,EAmB3B9T,QACO+T,EApBoB,EAoB3BvkB,MA0BF,OATA+W,qBAAU,WACRyN,YAAW,WAAO,IAAD,EACXzX,IAAY,OAAJA,QAAI,IAAJA,GAAA,UAAAA,EAAM0X,8BAAN,eAA8B5W,QAAS,GARhC,WACoB,IAAD,EAAV,kBAAnBqW,IACK,OAAdA,QAAc,IAAdA,GAAA,UAAAA,EAAgBQ,eAAhB,SAAyBC,kBAOvBC,KAED,UACwB3nB,KAAT,OAAd6S,QAAc,IAAdA,OAAA,EAAAA,EAAgBlB,KAAkBlI,EAAQE,KAAR,mBAAyBsT,MAC9D,CAACnN,EAAMmN,EAASpK,EAAgBpJ,IAE/B8J,GAAW8T,EAAgC,kBAAC,GAAD,MAE3CtkB,GAASukB,GACXxY,GAAa,eAAgB/L,EAAOukB,GAC7B,kBAACtX,GAAA,EAAD,CAAOC,SAAS,SAAhB,iBAIP,kBAACrG,GAAA,EAAD,CAAKjD,QAAQ,OAAOwC,cAAc,UAChC,kBAACS,GAAA,EAAD,CAAKd,UAAWF,EAAQ3C,MACtB,kBAAC4U,GAAA,EAAD,CAAMlJ,GAAG,eAAerH,UAAU,OAChC,kBAAC,GAAD,CACE6P,SAAQ,OAAErK,QAAF,IAAEA,OAAF,EAAEA,EAAM0X,uBAChBvnB,KAAMA,EACN2hB,cAAa,OACXwF,QADW,IACXA,OADW,EACXA,EAAsBQ,eAAe,GAEvC/U,eAAgBA,EAChBsQ,oBArCkB,WAC1B6D,EAAS5D,EAAQ,KAqCTA,MAAOA,EACPvB,gBAAgB,KAGpB,yBAAKgG,IAAKZ,KAEZ,kBAACrd,GAAA,EAAD,CAAKd,UAAWF,EAAQyc,cACtB,kBAAC,GAAD,KACE,kBAAC,GAAD,CACE/R,UAAS,OAAET,QAAF,IAAEA,OAAF,EAAEA,EAAgBlB,GAC3BiU,gBAAe,OAAEwB,QAAF,IAAEA,GAAF,UAAEA,EAAsBQ,eAAe,UAAvC,aAAE,EAAyCjW,SCpGhEpJ,GAAYC,cAAW,SAACzG,GAAD,cAAY,CACvC+lB,aAAc,CACZ1iB,UAAWrD,EAAMsB,QAAQ,IAE3B0kB,YAAa,CACXphB,QAAS,OACTvB,UAAWrD,EAAMsB,QAAQ,IAE3BqhB,WAAY,CACVtf,UAAWrD,EAAMsB,QAAQ,IAE3BoY,KAAM,CACJrW,UAAWrD,EAAMsB,QAAQ,GACzBsD,QAAS,OACTwC,cAAe,SACfuS,SAAU,GAEZ2J,cAAY,oBACTtjB,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BzN,SAAU,SAFF,eAIV,kCAAmC,CACjCK,MAAO/B,EAAME,QAAQa,UAAUH,OALvB,GAQZ2f,MAAO,CACLgD,UAAW,GACX3N,aAAc5V,EAAMsB,QAAQ,IAE9BshB,aAAW,GACT3L,YAAajX,EAAMsB,QAAQ,IADlB,eAERtB,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5B5R,OAAQ,KAHD,eAKR9D,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BrL,OAAQ,KAND,OAyLEmiB,GAzK2D,SACxE1kB,GACI,IAAD,IACGsF,EAAUL,KACV2T,EAAUC,aAAcpa,GAAMkP,YAAYC,KAAK,OAFlD,EAG+B4B,IAAMC,UAAkB,GAHvD,oBAGI8R,EAHJ,KAGeC,EAHf,KAiBK7kB,EAASV,cAATU,KAjBL,EAkBqB8S,mBAAS,IAlB9B,oBAkBI/B,EAlBJ,KAkBUwU,EAlBV,OAmBmB5S,yBAA4BhE,IAnB/C,oBAmBI0V,EAnBJ,KAmBSR,EAnBT,OAoB2BlR,yBAAwB/D,IAA7C4W,EApBN,uBAqB+C3S,IAAMC,UAAS,GArB9D,oBAqBIgS,EArBJ,KAqBuBC,EArBvB,KAsBG1R,EAAYhQ,EAAMgQ,UAtBrB,EAwB+B9H,GAA2B,CAC3D2H,UAAW,CACT9C,QAASpQ,EAAKE,IACduZ,WAAYpG,KAHToS,EAxBJ,uBAuCmB9Z,KAAf+Q,EAvCJ,qBAyCG5H,EAAY,yCAAG,WACnBH,GADmB,kBAAAjV,EAAA,yDAGnBiV,EAAEI,iBAEW,KAAThE,GAAuB,OAARsT,EALA,sDASftT,EAAKJ,OAAS,KATC,uBAUjBqX,MAAM,4DAVW,kCAcWjoB,IAA1BsD,EAAMsiB,gBAdS,kEAkBbjJ,EAAY,CAChBxJ,UAAW,CACT0S,kBAAmBviB,EAAMsiB,gBACzBvI,QAASrM,EACTsR,MAAK,OAAEgC,QAAF,IAAEA,GAAF,UAAEA,EAAKwB,cAAP,iBAAE,EAAaC,mBAAf,aAAE,EAA0BC,IACjC3V,QAASpQ,EAAKE,OAvBC,QA2BnBqlB,EAAQ,IACR1B,EAAO,MACP2B,GAAkB,GA7BC,4CAAH,sDA0ClB,OACE,oCACE,kBAAC1H,GAAA,EAAD,CAAM1E,MAAI,EAAC8E,GAAI,GAAIrV,UAAWwb,EAAM1b,EAAQ8b,WAAa,IACtDJ,GACC,yBACExb,UAAWF,EAAQ0Z,MACnBvZ,IAAG,OAAEub,QAAF,IAAEA,OAAF,EAAEA,EAAK4D,UACVlf,IAAG,OAAEsb,QAAF,IAAEA,GAAF,UAAEA,EAAKwB,cAAP,iBAAE,EAAaC,mBAAf,aAAE,EAA0BC,IAC/B3d,QAAS,kBAAMyb,EAAO,UAI5B,kBAAC/F,GAAA,EAAD,CACE1E,MAAI,EACJ8E,GAAI,GACJrV,UACEic,EAAoBnc,EAAQkf,aAAelf,EAAQmf,aAGrD,kBAAC,GAAD,CAAelE,kBAAmB,kBAvBtCmB,GAAqB,QACrBF,GAAcD,OAwBZ,kBAACjb,GAAA,EAAD,CAAKjD,QAAQ,OAAOsC,eAAe,WAAWC,WAAW,YACvD,kBAACU,GAAA,EAAD,KACE,kBAACxB,GAAA,EAAD,CACE5D,QAAQ,WACRV,OAAqB,IAAd+gB,EAAsB,UAAY,YACzCxc,QApCe,WACvB2c,GAAsBD,GACtBD,GAAcD,IAmCN/b,UAAWF,EAAQ+b,YACnBrc,aAAW,aAEX,kBAAC,KAAD,QAGJ,kBAACsB,GAAA,EAAD,CAAKO,KAAM,GAAIlB,eAAe,YAC5B,0BACEgV,YAAU,EACVC,aAAa,MACbpV,UAAWF,EAAQ6S,KACnB/F,SAAUX,GAEV,kBAACqJ,GAAA,EAAD,CACEtM,MAAOd,EACPqN,WAAW,EACXvI,SAAU,SAAClB,IA/FF,SAAC5D,GACpB,IAAMiV,EAAajV,EAAKJ,QACJ,IAAfqV,GAAoBA,EAAa,IAAM,GAAqB,IAAfA,IAChDP,IAEFF,EAAQxU,GA2FIkV,CAAatR,EAAEE,OAAOhD,QAExBqU,WAAY,SAACvR,GACG,UAAVA,EAAEnG,KACJsG,EAAaH,IAGjBnQ,KAjIa,WACvB,OAAQyX,GACN,KAAK,EACH,MAAO,SACT,KAAK,EAGL,QACE,MAAO,SAyHKqK,GACN/hB,QAAQ,WACRV,MAAM,YACNoa,aAAa,MACbvM,GAAE,6BAAwBrO,EAAMsiB,iBAChCtf,MAAO,gCACPogB,WAAY,CACVC,aACE,kBAACC,GAAA,EAAD,CAAgBxX,SAAS,OACvB,kBAACiI,GAAA,EAAD,CACEhV,KAAK,SACLyB,MAAM,YACNwE,aAAW,gBAEX,kBAAC,KAAD,QAINM,QAAS,CACPie,MAAOje,EAAQyc,eAGnByB,gBAAiB,CACfhe,UAAWF,EAAQyc,qBC5KpB8C,GAzC+B,SAAC,GAAuB,IAAD,IAApBvG,EAAoB,EAApBA,cAAoB,EACzC7O,mBAAS,IADgC,oBAC5DqQ,EAD4D,KACrD4D,EADqD,OAE/BznB,cAA5BU,EAF2D,EAE3DA,KAAasZ,EAF8C,EAErDxW,MAFqD,EAI3CiK,GAA0C,CAChEmG,UAAW,CACTiQ,QACAnJ,WAAY2H,EAAc3H,cAHtBnK,EAJ2D,EAI3DA,KAAM/M,EAJqD,EAIrDA,MAWd,OAAIA,GAASwW,GACXzK,GAAa,eAAgB/L,EAAOwW,GAC7B,kBAACvJ,GAAA,EAAD,CAAOC,SAAS,SAAhB,iBAIP,oCACE,kBAAC4K,GAAA,EAAD,CAAMvQ,UAAU,OACd,kBAAC,GAAD,CACE6P,SAAQ,OAAErK,QAAF,IAAEA,OAAF,EAAEA,EAAM0X,uBAChBvnB,KAAMA,EACN2hB,cAAeA,EACf/O,eAAc,OAAE+O,QAAF,IAAEA,GAAF,UAAEA,EAAevE,eAAjB,aAAE,EAAwBJ,QACxCkG,oBAjBoB,WAC1B6D,EAAS5D,EAAQ,KAiBXA,MAAOA,EACPvB,gBAAgB,IAElB,kBAAC,GAAD,CACEvO,UAAS,UAAEsO,EAAcvE,eAAhB,aAAE,EAAuB1L,GAClCiU,gBAAiBhE,EAAcjQ,QCxCnCpJ,GAAYC,cAAW,SAACzG,GAAD,YAAY,CACvCkE,KAAM,CACJJ,OAAQ,QACRT,UAAWrD,EAAMsB,QAAQ,GACzBkG,WAAYxH,EAAMsB,QAAQ,GAC1B6B,cAAenD,EAAMsB,QAAQ,IAE/B+kB,kBAAgB,oBACbrmB,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5B9T,QAAS5B,EAAMsB,QAAQ,IACvB6B,cAAenD,EAAMsB,QAAQ,KAHjB,eAKbtB,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BvN,QAAS5B,EAAMsB,QAAQ,GACvB6B,cAAenD,EAAMsB,QAAQ,KAPjB,eASbtB,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BvN,QAAS5B,EAAMsB,QAAQ,GACvB6B,cAAenD,EAAMsB,QAAQ,KAXjB,4BAaFtB,EAAMsB,QAAQ,IAbZ,8BAcAtB,EAAMsB,QAAQ,IAdd,OA+EHglB,GA7DuB,WAAO,IAAD,E3Cg7RAxd,E2C/6RpCjC,EAAUL,KAD0B,E3Ci7R7BuC,mBAAoFqC,GAAsBtC,G2C/6R/GiF,EAFkC,EAElCA,KAAM/M,EAF4B,EAE5BA,MAAOwQ,EAFqB,EAErBA,QAErB,OAAIxQ,GACF+L,GAAa,eAAgB/L,GACtB,kBAACiN,GAAA,EAAD,CAAOC,SAAS,SAAhB,iBAGLsD,EAEA,oCACE,kBAAC3J,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,SACfC,WAAW,SACX1F,MAAO,CAAEqC,OAAQ,UAEjB,kBAAC+D,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,SACfC,WAAW,SACXC,cAAc,UAEd,kBAAC,GAAD,MACA,kBAACU,GAAA,EAAD,CAAYrF,QAAQ,UAAUV,MAAM,aAApC,sBAUR,oCACE,yBAAKgF,UAAWF,EAAQ3C,MACtB,kBAAC8X,GAAA,EAAD,CAAMC,WAAS,GAAf,OACGlO,QADH,IACGA,GADH,UACGA,EAAM8X,sBADT,aACG,EAAsB7T,KAAI,SAAC6N,EAAexG,GACzC,GAAIwG,GAAiBA,EAAc0G,wBAAwB1X,OACzD,OACE,oCACE,kBAACmN,GAAA,EAAD,CACEtP,IAAK2M,EACL/B,MAAI,EACJ8E,GAAI,GACJrV,UAAWF,EAAQwf,kBAEnB,kBAAC,GAAD,CACExG,cAAeA,aC1E/BrZ,GAAYC,cAAW,iBAAO,CAClCvC,KAAM,CACJU,QAAS,OACTwC,cAAe,SACfof,UAAW,OACXpe,KAAM,IACN0U,UAAW,SACXyG,UAAW,OACXzf,OAAQ,YA8BG2iB,GA1BmB,WAChC,IAAM5f,EAAUL,KACR0U,EAAYkK,eAAZlK,QAER,OACE,kBAACc,GAAA,EAAD,CAAM1E,MAAI,EAAC8E,GAAI,GAAIkC,GAAI,GACrB,kBAACzW,GAAA,EAAD,CAAKd,UAAWF,EAAQ3C,KAAMqE,UAAU,WACrC2S,EACC,oCACE,kBAAC,GAAD,CACEX,YAAW,mBAAcW,GACzBA,QAASA,IAEX,kBAAC,GAAD,OAGF,oCACE,kBAAC,GAAD,CAAkBX,YAAa,aAAcwD,cAAc,IAC3D,kBAAC,GAAD,UCbG2I,GArBa,WAAO,IACzBxoB,EAASV,cAATU,KADwB,EAGLkL,GAAyB,CAClDgI,UAAW,CAAE9C,QAAO,OAAEpQ,QAAF,IAAEA,OAAF,EAAEA,EAAME,OADvBuoB,EAHyB,qBAkBhC,OAXA5O,qBAAU,WACR,IAAM6O,EAAWC,aAAY,gBACT5oB,KAAV,OAAJC,QAAI,IAAJA,OAAA,EAAAA,EAAME,MACRuoB,MAED,KACH,OAAO,WACLG,cAAcF,MAEf,CAACD,EAAkBzoB,IAEf,kBAAC,GAAD,O,qBC4EM6oB,GAnFiC,SAACxlB,GAAW,IAAD,M9Cu0PZuH,E8Ct0PvCpB,EAAUC,eADyC,EAOrDwD,GAAkC,CACpCiG,UAAW,CACT8G,WAAU,UAAE3W,EAAM+Z,eAAR,aAAE,EAAe1L,MALvBoX,EAJiD,EAIvDjZ,KACSkZ,EAL8C,EAKvDzV,QACO0V,EANgD,EAMvDlmB,MANuD,G9Cu0PZ8H,E8CvzPV,CACjCsI,UAAW,CACT8G,WAAU,UAAE3W,EAAM+Z,eAAR,aAAE,EAAe1L,K9CszPlB7G,eAAsFgB,GAA6BjB,I8Cx0PvE,oBAcvDqe,EAduD,KAerDnmB,EAfqD,KAerDA,MAOEomB,EAA0B,SAACvU,GAA6B,IAAD,EAC3DA,EAAEwU,kBACF3f,EAAQE,KAAR,mBAAyBrG,EAAMgZ,YAA/B,6BAAqDhZ,EAAM+Z,eAA3D,aAAqD,EAAe1L,MAGhE0X,EAAW,yCAAG,WAAOzU,GAAP,UAAAjV,EAAA,6DAClBiV,EAAEwU,kBADgB,SAEZF,IAFY,OAGlBC,EAAwBvU,GAHN,2CAAH,sDAUjB,OAJI7R,GAASkmB,IACXna,GAAa,wBAAyB/L,EAAOkmB,GAG3CD,EAEA,oCACE,kBAAC3R,GAAA,EAAD,CAAY/O,aAAW,oBACrB,kBAAC,KAAD,CACExE,MAAM,UACNL,SAAS,QACTD,MAAO,CAAEiP,UAAW,cACpBnK,aAAW,wBAMrB,OAAIygB,QAAJ,IAAIA,GAAJ,UAAIA,EAAmBnB,sBAAvB,aAAI,EAAmChX,QAEnC,oCACE,kBAACyG,GAAA,EAAD,CACEhP,QAAS,SAACuM,GAAD,OAAOuU,EAAwBvU,IACxCtM,aAAW,oBAEX,kBAAC,KAAD,CACExE,MAAM,UACNL,SAAS,QACTD,MAAO,CAAEiP,UAAW,cACpBnK,aAAW,uBAQnB,oCACE,kBAAC+O,GAAA,EAAD,CAAYhP,QAASghB,EAAa/gB,aAAW,oBAC3C,kBAAC,KAAD,CACExE,MAAM,UACNL,SAAS,QACTD,MAAO,CAAEiP,UAAW,cACpBnK,aAAW,wBCpFfC,GAAYC,cAAW,SAACzG,GAAD,gBAC3B2f,YAAa,CACXxc,cAAe,OACf,UAAW,CACTa,eAAgB,eAJO,eAO1BhE,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5BiK,YAAa,CACXje,SAAU,MATa,eAY1B1B,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BwQ,YAAa,CACXje,SAAU,MAda,eAiB1B1B,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BwQ,YAAa,CACXxc,cAAe,WAnBQ,2BAsBhB,CACTpB,MAAO/B,EAAME,QAAQQ,QAAQE,KAC7B2mB,UAAW,SACX5R,YAAa3V,EAAMsB,QAAQ,KAzBF,KA4FdkmB,GA1DqC,SAAC,GAG9C,IAAD,gBAFJjN,EAEI,EAFJA,YACAe,EACI,EADJA,QAEMzU,EAAUL,KADZ,EAGuC2E,GAAkC,CAC3EiG,UAAW,CACT8G,WAAU,OAAEoD,QAAF,IAAEA,OAAF,EAAEA,EAAS1L,MAFXoX,EAHV,EAGIjZ,KAAyB/M,EAH7B,EAG6BA,MAUjC,OAJIA,GACF+L,GAAa,yBAA0B/L,GAIvC,qCACoB,OAAjBgmB,QAAiB,IAAjBA,GAAA,UAAAA,EAAmBnB,eAAe,UAAlC,mBAAsCU,+BAAtC,eAA+D1X,QAC9D,oCACE,kBAAC/G,GAAA,EAAD,CACErF,QAAQ,UACRV,MAAM,cACNwG,UAAW+Q,IACXvS,UAAWF,EAAQ8Y,YACnBpG,GAAI,CACFkO,SAAS,YAAD,OAAclN,EAAd,0BAAoCe,QAApC,IAAoCA,OAApC,EAAoCA,EAAS1L,KAEvDrJ,aAAA,6CAAkDgU,IARpD,iBAWIyM,QAXJ,IAWIA,GAXJ,UAWIA,EAAmBnB,eAAe,UAXtC,iBAWI,EAAsCU,+BAX1C,aAWI,EACI1X,OAZR,YAemB,KADE,OAAjBmY,QAAiB,IAAjBA,GAAA,UAAAA,EAAmBnB,eAAe,UAAlC,mBAAsCU,+BAAtC,eACI1X,QACA,QACA,YAGR,kBAAC/G,GAAA,EAAD,CACErF,QAAQ,UACRV,MAAM,gBACNgF,UAAWF,EAAQ6gB,WAHrB,qBAKiBvH,KAAM,OACnB6G,QADmB,IACnBA,GADmB,UACnBA,EAAmBnB,eAAe,UADf,iBACnB,EAAsCU,wBAAwB,UAD3C,aACnB,EACInG,WACJC,aAIN,KClDOsH,GAhCqC,SAAC,GAAmB,IAAD,IhDigP9B7e,EgDjgPckP,EAAgB,EAAhBA,UAC/C0L,EAAoBkE,4BAA2B9a,IADgB,EhDkgPxD/D,eAA0EG,GAAuBJ,GgDlgPzC,oBAE9D+e,EAF8D,YAErC9Z,EAFqC,EAErCA,KAAM/M,EAF+B,EAE/BA,MAEhC8f,EAAY,yCAAG,WAAOjO,EAAyBmF,GAAhC,UAAApa,EAAA,6DACnBiV,EAAEwU,kBACF3D,GAAkB,GAFC,SAGbmE,EAAsB,CAC1BzW,UAAW,CACT8G,WAAYF,KALG,2CAAH,wDAkBlB,OAPEhX,QACyC/C,KAApC,OAAJ8P,QAAI,IAAJA,GAAA,UAAAA,EAAM+Z,sBAAN,eAAsBjH,gBACmB,KAApC,OAAJ9S,QAAI,IAAJA,GAAA,UAAAA,EAAM+Z,sBAAN,eAAsBjH,iBAExB9T,GAAa,mCAAoC/L,GAIjD,kBAACsU,GAAA,EAAD,CACEhP,QAAS,SAACuM,GAAD,OAAOiO,EAAajO,EAAGmF,IAChCzR,aAAA,4BAAiCyR,IAEjC,kBAAC,KAAD,CAAkBjW,MAAM,UAAUL,SAAS,YCClCqmB,GA9BuC,SAAC,GAAmB,IAAD,IAAhB/P,EAAgB,EAAhBA,UAAgB,EACtB/O,KADsB,oBAChE+e,EADgE,YACvCja,EADuC,EACvCA,KAAM/M,EADiC,EACjCA,MAEhCinB,EAAa,yCAAG,WAAOpV,GAAP,UAAAjV,EAAA,6DACpBiV,EAAEwU,kBADkB,SAGdW,EAAsB,CAC1B5W,UAAW,CACT8W,IAAKlQ,EACL/I,KAAM,+BACNgR,SAAS,KAPO,2CAAH,sDAoBnB,OAPEjf,QACyC/C,KAApC,OAAJ8P,QAAI,IAAJA,GAAA,UAAAA,EAAMoa,sBAAN,eAAsBtH,gBACmB,KAApC,OAAJ9S,QAAI,IAAJA,GAAA,UAAAA,EAAMoa,sBAAN,eAAsBtH,iBAExB9T,GAAa,mCAAoC/L,GAIjD,kBAACsU,GAAA,EAAD,CAAYhP,QAAS2hB,EAAe1hB,aAAW,mBAC7C,kBAAC,KAAD,CAAkBxE,MAAM,UAAUL,SAAS,YCElC0mB,GA3BmD,SAAC,GAE5D,IAAD,EADJpQ,EACI,EADJA,UACI,EAKA7M,GAAkC,CACpCiG,UAAW,CACT8G,WAAYF,KALRgP,EAFJ,EAEFjZ,KACSkZ,EAHP,EAGFzV,QACO0V,EAJL,EAIFlmB,MAOF,OAAIimB,EAA6B,kBAAC,IAAM3O,SAAP,MAE7B4O,EAEA,kBAACjZ,GAAA,EAAD,CAAOC,SAAS,SAAhB,+CAIJ,OAAI8Y,QAAJ,IAAIA,GAAJ,UAAIA,EAAmBnB,sBAAvB,aAAI,EAAmChX,QAC9B,kBAAC,GAAD,CAAgBmJ,UAAWA,IAE7B,kBAAC,GAAD,CAAeA,UAAWA,KCzB7BxR,GAAYC,cAAW,SAACzG,GAAD,YAAY,CACvCkE,KAAM,CACJU,QAAS,OACTwC,cAAe,MACfF,eAAgB,iBAElBwS,KAAM,CACJrW,UAAWrD,EAAMsB,QAAQ,GACzBsD,QAAS,OACTwC,cAAe,SACfuS,SAAU,GAEZ2J,cAAY,oBACTtjB,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BzN,SAAU,SAFF,eAIV,kCAAmC,CACjCK,MAAO/B,EAAME,QAAQa,UAAUH,OALvB,OAyGCynB,GA3FqC,SAAC,GAAiB,IAAD,IAAd/M,EAAc,EAAdA,QAC/CzU,EAAUL,KADmD,EAE3CwK,mBAAiB,IAF0B,oBAE5D/B,EAF4D,KAEtDwU,EAFsD,KAInE1L,qBAAU,WACR0L,EAAQnI,EAAQrM,QACf,CAACqM,IAN+D,MAW/DrS,KAX+D,oBASjE+e,EATiE,YAU/Dja,EAV+D,EAU/DA,KAAMyD,EAVyD,EAUzDA,QAASxQ,EAVgD,EAUhDA,MAGbsnB,EAAY,yCAAG,WAAOzV,GAAP,UAAAjV,EAAA,yDACnBiV,EAAEI,iBACW,KAAThE,EAFe,iEAGb+Y,EAAsB,CAC1B5W,UAAW,CACT8W,IAAK5M,EAAQ1L,GACbX,UANe,2CAAH,sDAelB,OAAIuC,EAEA,oCACE,kBAAC,GAAD,SAMJxQ,QACyC/C,KAApC,OAAJ8P,QAAI,IAAJA,GAAA,UAAAA,EAAMoa,sBAAN,eAAsBtH,gBACmB,KAApC,OAAJ9S,QAAI,IAAJA,GAAA,UAAAA,EAAMoa,sBAAN,eAAsBtH,iBAExB9T,GAAa,mCAAoC/L,GAIjD,yBAAK+F,UAAWF,EAAQ3C,MACtB,0BAAMgY,YAAU,EAACC,aAAa,MAAMpV,UAAWF,EAAQ6S,MACrD,kBAAC2C,GAAA,EAAD,CACEtM,MAAOd,EACPqN,WAAW,EACXvI,SAAU,SAAClB,IA1BE,SAAC5D,GACpBwU,EAAQxU,GA0BAkV,CAAatR,EAAEE,OAAOhD,QAExBqU,WAAY,SAACvR,GACG,UAAVA,EAAEnG,KACJ4b,EAAazV,IAGjBpQ,QAAQ,WACRV,MAAM,YACNoa,aAAa,MACbsI,WAAS,EACT8D,QAAS,EACT3Y,GAAG,4BACHrL,MAAO,oBACPogB,WAAY,CACVC,aACE,kBAACC,GAAA,EAAD,CAAgBxX,SAAS,OACvB,kBAACiI,GAAA,EAAD,CACE1F,GAAG,iBACHtJ,QAAS,SAACuM,GAAD,OAAOyV,EAAazV,IAC7B9Q,MAAM,YACNwE,aAAW,gBAEX,kBAAC,KAAD,QAINM,QAAS,CACPie,MAAOje,EAAQyc,eAGnByB,gBAAiB,CACfhe,UAAWF,EAAQyc,oBC5FzB9c,GAAYC,cAAW,SAACzG,GAAD,kBAC3BkE,KAAM,CACJX,aAAc,OACduZ,UAAW,UAEb0L,SAAS,cACP5jB,QAAS,OACTsC,eAAgB,aAChBC,WAAY,aACZvF,QAAS5B,EAAMsB,QAAQ,GACvByf,aAAc,aACdC,QAAS,OACTC,aAAc,YAEbjhB,EAAMkP,YAAYC,KAAK,MAAQ,CAC9B3H,WAAYxH,EAAMsB,QAAQ,GAC1BsU,aAAc5V,EAAMsB,QAAQ,GAC5BqU,YAAa3V,EAAMsB,QAAQ,GAC3B6B,cAAenD,EAAMsB,QAAQ,MAlBN,eAqB1BtB,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5BiK,YAAa,CACX/d,QAAS,OACT+T,YAAa,OACb,UAAW,CACTnB,OAAQ,cA1Ba,eA8B1BxU,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BwQ,YAAa,CACX/d,QAAS,OACT+T,YAAa,OACbxS,cAAe,WAlCQ,sCAsCzBE,UAAWrD,EAAMsB,QAAQ,GACzBiC,aAAcvD,EAAMsB,QAAQ,IAE3BtB,EAAMkP,YAAYC,KAAK,MAAQ,CAC9B9L,UAAWrD,EAAMsB,QAAQ,GACzBiC,aAAcvD,EAAMsB,QAAQ,MA3CL,uBA8CpB,CACL6B,cAAe,WA/CU,4CAkDxBnD,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BtL,MAAO,SAnDgB,eAqDxB7D,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5B7R,MAAO,QAtDgB,4BAyDnB,CACNA,MAAO7D,EAAMsB,QAAQ,GACrBwC,OAAQ9D,EAAMsB,QAAQ,GACtByC,gBAAiB,UACjBhC,MAAO,UACPL,SAAU,GACVsB,WAAY,OACZwK,OAAQ,sBAhEiB,+BAkEZ,CACb3J,MAAO7D,EAAMsB,QAAQ,GACrBwC,OAAQ9D,EAAMsB,QAAQ,GACtByC,gBAAiB,UACjBhC,MAAO,UACPL,SAAU,GACVsB,WAAY,OACZwK,OAAQ,sBAzEiB,gCA2EX,CACd5I,QAAS,OACTsC,eAAgB,SAChBC,WAAY,SACZ9D,UAAWrD,EAAMsB,QAAQ,GACzBkG,WAAYxH,EAAMsB,QAAQ,GAC1B6B,cAAenD,EAAMsB,QAAQ,KAjFJ,yBAmFlB,CACP8G,KAAM,IApFmB,KAwRdqgB,GApL6B,SAAC,GAQtC,IAAD,IAPJrQ,EAOI,EAPJA,SACAsQ,EAMI,EANJA,YACAC,EAKI,EALJA,iBACAzqB,EAII,EAJJA,KACAkjB,EAGI,EAHJA,oBACAC,EAEI,EAFJA,MACAuH,EACI,EADJA,OAEM/hB,EAAUL,KADZ,EAEgCwK,oBAAkB,GAFlD,oBAEG6X,EAFH,KAEeC,EAFf,OAGkD9X,mBACpD,MAJE,oBAGG+X,EAHH,KAGwBC,EAHxB,KAMazO,EAAgB6K,eAAzBlK,QACF+N,EAAiBC,yBAAwBpc,IACzCoY,EAAiBC,iBAAuB,MAQ9CpN,qBAAU,WACR6Q,EAAO1D,KACN,CAAC0D,IAEJ,IAAMpH,EAAgB,SAAClG,GAAsB,IAAD,UAC1C,OACE,kBAACvC,GAAA,EAAD,CAAUrM,IAAK4O,EAAQ1L,GAAIrH,UAAU,MAAMxB,UAAWF,EAAQ2hB,UAC5D,kBAACxI,GAAA,EAAD,KACE,kBAAC5R,GAAA,EAAD,CACE7H,aAAA,OAAY+U,QAAZ,IAAYA,GAAZ,UAAYA,EAASpd,YAArB,aAAY,EAAeiQ,SAASY,UAAU,EAAG,GAAGC,eAEpD,kBAACX,GAAA,EAAD,CAAO5L,QAAQ,OACX6Y,EAAQ2E,QAKR,kBAACnZ,GAAA,EAAD,CACEC,UAAWF,EAAQqZ,cACnBlZ,IAAI,4BAFN,OAJA,kBAACF,GAAA,EAAD,CAAQC,UAAWF,EAAQ8G,QAA3B,OACG2N,QADH,IACGA,GADH,UACGA,EAASpd,YADZ,aACG,EAAeiQ,SAASY,UAAU,EAAG,GAAGC,kBAcnD,kBAACnH,GAAA,EAAD,CAAKU,UAAU,MAAM3D,QAAQ,OAAOwC,cAAc,SAASgB,KAAK,KAC9D,kBAACP,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,gBACfC,WAAW,UAEX,kBAACU,GAAA,EAAD,CACEU,UAAU,MACV3D,QAAQ,OACRsC,eAAe,gBACfyS,SAAS,IACTlY,MAAO,CAAEwV,YAAa,KAEtB,kBAACnP,GAAA,EAAD,CAAY/F,MAAM,YAAYU,QAAQ,WAClC6Y,EAAQ2E,QAKR,wDAJA,oCACE,uCAAS3E,QAAT,IAASA,GAAT,UAASA,EAASpd,YAAlB,aAAS,EAAeiQ,SAAxB,OAMN,kBAACrG,GAAA,EAAD,CACErF,QAAQ,UACRV,MAAM,UACNN,MAAO,CAAEyV,WAAY,QAEpBiJ,KAAO7E,EAAQ8E,WAAWC,YAG/B,kBAACxY,GAAA,EAAD,KACE,kBAACA,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,aACfC,WAAW,cAEX,kBAAC,GAAD,CAAamU,QAASA,EAASf,YAAaA,IAE1Ce,EAAQ2E,QAWR,GAVA,kBAAC,IAAM3H,SAAP,KACGpa,EAAKE,OAAL,OAAakd,QAAb,IAAaA,GAAb,UAAaA,EAASpd,YAAtB,aAAa,EAAe0Q,gBAC3B,kBAAC9G,GAAA,EAAD,CAAYrF,QAAQ,aAEhBomB,GAAcE,IAAwBzN,EAAQ1L,KAC3C,kBAAC,GAAD,CAAsBoI,UAAWsD,EAAQ1L,UAW5D,kBAAC9H,GAAA,EAAD,CACES,UAAU,IACVxG,MAAM,gBACNgF,UAAWF,EAAQ8Y,YACnBrZ,QAAS,kBA7FM,SAACgV,GAAsB,IAAD,GAClC,OAAPA,QAAO,IAAPA,GAAA,UAAAA,EAASpd,YAAT,eAAe0Q,iBAAkB1Q,EAAKE,MAC1C4qB,EAAuB1N,EAAQ1L,IAC/BkZ,GAAeD,IA0FQM,CAAiB7N,KAE/BuN,GACDE,IAAwBzN,EAAQ1L,IAChC1R,EAAKE,OAAL,OAAakd,QAAb,IAAaA,GAAb,UAAaA,EAASpd,YAAtB,aAAa,EAAe0Q,iBACR,IAApB0M,EAAQ2E,QACN,kBAAC,GAAD,CAAe3E,QAASA,IAExBA,EAAQrM,OAGJ,OAAPqM,QAAO,IAAPA,OAAA,EAAAA,EAASiF,OACR,kBAAC1Y,GAAA,EAAD,CAAKd,UAAWF,EAAQ0Z,OACtB,yBACEvZ,IAAKsU,EAAQiF,MACbtZ,IAAKqU,EAAQiF,MACbxZ,UAAWF,EAAQ2Z,SAIvB,GAEF,kBAAC3Y,GAAA,EAAD,KACE,kBAAC,GAAD,CAAeyT,QAASA,EAASf,YAAaA,KAEhD,kBAACgD,GAAA,EAAD,CAASxW,UAAWF,EAAQyZ,YAMpC,OACE,oCACE,kBAACxH,GAAA,EAAD,CAAMlJ,GAAG,eAAerH,UAAU,MAAMxB,UAAWF,EAAQ3C,OAChD,OAARkU,QAAQ,IAARA,OAAA,EAAAA,EAAUvJ,UAAWwS,GACpB,kBAACxZ,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,gBACfC,WAAW,SACXJ,UAAWF,EAAQya,eACnB/Y,UAAU,OAEV,kBAACgV,GAAA,EAAD,CAASxW,UAAWF,EAAQuiB,UAC5B,kBAAC/iB,GAAA,EAAD,CACEC,QAAS,kBAAM8a,KACf7a,aAAW,sBAFb,eAIe8a,EAJf,KAMA,kBAAC9D,GAAA,EAAD,CAASxW,UAAWF,EAAQuiB,WAhBlC,uBAoBOhR,UApBP,iBAoBG,EAAemJ,iBApBlB,aAoBG,EAA0BvP,KAAI,SAACsJ,EAAS+N,GAAV,OAAgB7H,EAAclG,OAE3D2N,GACFP,GACqB,IAArBC,GACAA,GACAA,EAAmBD,EAAY9Y,GAC3B4R,EAAckH,GACd,GAEJ,yBAAK5C,IAAKZ,OC5RZ1e,GAAYC,cAAW,SAACzG,GAAD,gBAAY,CACvCkE,KAAM,CACJU,QAAS,OACTwD,KAAM,EACNhB,cAAe,SACfF,eAAgB,iBAElByb,WAAY,CACVtf,UAAWrD,EAAMsB,QAAQ,IAE3BoY,MAAI,GACF9U,QAAS,OACTsS,WAAYlX,EAAMsB,QAAQ,GAC1B2V,YAAajX,EAAMsB,QAAQ,GAC3B8F,cAAe,SACfuS,SAAU,GALR,eAMD3Z,EAAMkP,YAAYC,KAAK,MAAQ,CAC9B9L,UAAWrD,EAAMsB,QAAQ,KAPzB,eASDtB,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5BrS,UAAWrD,EAAMsB,QAAQ,KAVzB,GAaJgiB,cAAY,oBACTtjB,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BzN,SAAU,SAFF,eAIV,kCAAmC,CACjCK,MAAO/B,EAAME,QAAQa,UAAUH,OALvB,GASZ2f,OAAK,GACH/S,OAAQ,aAAexN,EAAME,QAAQa,UAAUH,KAC/CkD,OAAQ,IACRP,aAAcvD,EAAMsB,QAAQ,IAHzB,eAIFtB,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5B6N,UAAW,MALV,eAOFvjB,EAAMkP,YAAYC,KAAK,MAAQ,CAC9B3B,OAAQ,aAAexN,EAAME,QAAQa,UAAUH,KAC/CkD,OAAQ,IACRqR,SAAU,QACVoO,UAAW,SAXV,eAaFvjB,EAAMkP,YAAYC,KAAK,MAAQ,CAC9B3B,OAAQ,aAAexN,EAAME,QAAQa,UAAUH,KAC/CkD,OAAQ,IACRqR,SAAU,QACVoO,UAAW,SAjBV,OAuLQ+F,GA1JmC,SAAC/nB,GAAW,IAAD,IACrDsF,EAAUL,KACV2T,EAAUC,aAAcpa,GAAMkP,YAAYwG,GAAG,OAe3CxX,EAASV,cAATU,KAjBmD,EAkBnC8S,mBAAiB,IAlBkB,oBAkBpD/B,EAlBoD,KAkB9CwU,EAlB8C,OAmBrC5S,yBAA4BhE,IAnBS,oBAmBpD0V,EAnBoD,KAmB/CR,EAnB+C,OAqB7BlR,yBAAwB/D,IAA7C4W,EArBkD,qBAuBvD6F,EAAYpE,iBAAuB,MACjC5T,EAAYhQ,EAAMgQ,UAxBmC,EA0BzB9H,GAA2B,CAC3D2H,UAAW,CACT9C,QAASpQ,EAAKE,IACduZ,WAAYpG,KAHToS,EA1BoD,uBA0CrC9a,KAAf+R,EA1CoD,qBA4CrD5H,EAAY,yCAAG,WAAOH,GAAP,0BAAAjV,EAAA,yDACnBiV,EAAEI,iBAEGhE,EAAK2U,QAAWrB,EAHF,wDAOnBhhB,EAAMioB,qBAAqB,CACzB5Z,GAAIrO,EAAMonB,iBAAmB,EAC7BzqB,KAAM,CACJiQ,SAAUjQ,EAAKmV,UAEjB/E,QAASpQ,EAAKE,IACd6Q,KAAMA,EACNsR,MAAK,OAAEgC,QAAF,IAAEA,GAAF,UAAEA,EAAKwB,cAAP,iBAAE,EAAaC,mBAAf,aAAE,EAA0BC,IACjCtM,WAAYpG,IAGdhQ,EAAMqkB,iBAEA5Y,EAAM,CACVoE,UAAW,CACTkK,QAAS,CACPhN,QAASpQ,EAAKE,IACd6Q,KAAMA,EACNsR,MAAK,OAAEgC,QAAF,IAAEA,GAAF,UAAEA,EAAKwB,cAAP,iBAAE,EAAaC,mBAAf,aAAE,EAA0BC,IACjCtM,WAAYpG,KAKlBkS,EAAQ,IACC,OAAT8F,QAAS,IAATA,GAAA,UAAAA,EAAW7D,eAAX,SAAoB+D,QACpB1H,EAAO,MACP2B,GAAkB,GAlCC,UAoCb9I,EAAY5N,GApCC,4CAAH,sDAuClB,OACE,kBAACnF,GAAA,EAAD,CAAKd,UAAWF,EAAQ3C,MACtB,kBAAC2D,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,SACfC,WAAW,SACXJ,UAAWF,EAAQ8b,YAElBJ,GACC,yBACExb,UAAWF,EAAQ0Z,MACnBvZ,IAAI,QACJC,IAAG,OAAEsb,QAAF,IAAEA,GAAF,UAAEA,EAAKwB,cAAP,iBAAE,EAAaC,mBAAf,aAAE,EAA0BC,IAC/B3d,QAAS,kBAAMyb,EAAO,UAI5B,0BACE7F,YAAU,EACVC,aAAa,MACbpV,UAAWF,EAAQ6S,KACnB/F,SAAUX,GAEV,kBAACqJ,GAAA,EAAD,CACEtM,MAAOd,EACPqN,WAAW,EACXvI,SAAU,SAAClB,IA5EE,SAAC5D,GACpB,IAAMiV,EAAajV,EAAKJ,QAEJ,IAAfqV,GAAoBA,EAAa,IAAM,GAAqB,IAAfA,IAChDP,IAEFF,EAAQxU,GAuEAkV,CAAatR,EAAEE,OAAOhD,QAExBwU,SAAS,EACTmF,SAAUH,EACVlF,WAAY,CAAEC,UAAW,KACzB5hB,KA/GiB,WACvB,OAAQyX,GACN,KAAK,EACH,MAAO,SAET,KAAK,EAGL,QACE,MAAO,SAsGCqK,GACN/hB,QAAQ,WACRgiB,WAAS,EACTC,KAAM,EACN3iB,MAAM,UACNoa,aAAa,MACbvM,GAAG,qBACHrL,MAAO,kBAAC,GAAD,MACP6f,WAAY,SAACvR,GACG,UAAVA,EAAEnG,KACJsG,EAAaH,IAGjB8R,WAAY,CACVC,aACE,kBAACC,GAAA,EAAD,CAAgBxX,SAAS,OACvB,kBAACiI,GAAA,EAAD,CACE1F,GAAG,iBACHtP,KAAK,SACLyB,MAAM,YACNwE,aAAW,gBAEX,kBAAC,KAAD,QAINM,QAAS,CACPie,MAAOje,EAAQyc,eAGnByB,gBAAiB,CACfhe,UAAWF,EAAQyc,mBC5MzB9c,GAAYC,cAAW,SAACzG,GAAD,YAAY,CACvCkE,KAAM,CACJU,QAAS,OACTwC,cAAe,SACfof,UAAW,OACXpe,KAAM,IACNmb,UAAW,OACXzf,OAAQ,QAEVwf,cAAY,GACVjW,SAAU,QACV/K,OAAQ,EACRV,QAAS5B,EAAMsB,QAAQ,GACvBf,WAAYP,EAAME,QAAQK,WAAWE,QACrCkd,OAAQ,KALE,eAMT3d,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5B7R,MAAO,SAPC,eAST7D,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5B7R,MAAO,SAVC,eAYT7D,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BtL,MAAO,UAbC,GAgBZ8lB,QAAS,CACPtc,SAAU,QACVlL,SAAU,SACViG,KAAM,OAgIKwhB,GAxHmB,SAAC,GAAmB,IA4E1C,EA5EyBrY,EAAgB,EAAhBA,UAC7B1K,EAAUL,KADmC,EAEzBwK,mBAAiB,IAFQ,oBAE5CqQ,EAF4C,KAErC4D,EAFqC,OAGbjU,mBAAyB,MAHZ,oBAG5C0X,EAH4C,KAG/BmB,EAH+B,OAI7B7Y,mBAAiD,MAJpB,oBAI5C8U,EAJ4C,KAIvC8C,EAJuC,OAKX5X,oBAAkB,GALP,oBAK5C8Y,EAL4C,KAK9BC,EAL8B,KAM3C7rB,EAASV,cAATU,KAEJyqB,EAA2B,EACdpO,EAAgB6K,eAAzBlK,QAT2C,EAWlBnQ,GAA6B,CAC5DqG,UAAW,CACTG,UAAWA,EACX8P,MAAOA,GAET3J,YAAa,iBALP3J,EAX2C,EAW3CA,KAAMyD,EAXqC,EAWrCA,QAASxQ,EAX4B,EAW5BA,MAX4B,EAmBb2I,KAA/BgV,EAnB4C,qBAqB7CiH,EAAiBoE,uBAAY,WACd,kBAARlE,GACTN,YAAW,WAAO,IAAD,EACZ,OAAHM,QAAG,IAAHA,GAAA,UAAAA,EAAKJ,eAAL,SAAcC,mBACb,OAEJ,CAACG,IAgCJ,GA9BA/N,qBAAU,WAAO,IAAD,KACd,OAAIhK,QAAJ,IAAIA,GAAJ,UAAIA,EAAMqK,SAAS,UAAnB,aAAI,EAAmBxI,KACrB+O,EAA4B,CAC1BvN,UAAW,CACTuG,WAAYpG,EACZ2G,WAAU,OAAEnK,QAAF,IAAEA,GAAF,UAAEA,EAAMqK,SAAS,UAAjB,aAAE,EAAmBxI,GAC/BtB,QAASpQ,EAAKE,OAIpBonB,YAAW,WAAO,IAAD,EACXsE,GAAgB/b,IAAY,OAAJA,QAAI,IAAJA,GAAA,UAAAA,EAAMqK,gBAAN,eAAgBvJ,QAAS,IACnD+W,IACAmE,GAAgB,MAEjB,OACF,CACDjE,EACA/X,EACAwD,EACArT,EAAKE,IACL0rB,EACAlE,EACAjH,IAGE3d,GACF+L,GAAa,gCAAiC/L,GAG5CwQ,EACF,OACE,kBAAC3J,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,SACfC,WAAW,SACXC,cAAc,SACd3F,MAAO,CAAEqC,OAAQ,UAEjB,kBAAC+D,GAAA,EAAD,KACE,kBAAC,GAAD,MACA,kBAAC8H,GAAA,EAAD,CAAgB5N,MAAM,YAAYN,MAAO,CAAE4B,UAAW,WAM1D0K,IACF4a,EAAgB,OAAG5a,QAAH,IAAGA,GAAH,UAAGA,EAAMqK,SAAS,UAAlB,aAAG,EAAmBxI,IAWxC,OACE,kBAAC/H,GAAA,EAAD,CAAKjD,QAAQ,OAAOwC,cAAc,UAChC,kBAAC,GAAD,CACEmT,YAAaA,EACbrc,KAAMA,EAAKE,IACX0f,mBAAmB,IAErB,kBAACjW,GAAA,EAAD,CAAKd,UAAWF,EAAQ3C,KAAMqE,UAAU,WACtC,kBAAC,GAAD,CACE6P,SAAQ,OAAErK,QAAF,IAAEA,OAAF,EAAEA,EAAMqK,SAChBsQ,YAAaA,EACbC,iBAAkBA,EAClBzqB,KAAMA,EACNkjB,oBArBoB,WAC1B6D,EAAS5D,EAAQ,KAqBXA,MAAOA,EACPuH,OAAQA,KAGZ,kBAAC/gB,GAAA,EAAD,CAAKd,UAAWF,EAAQyc,aAAc/a,UAAU,UAC9C,kBAAC,GAAD,KACE,kBAAC,GAAD,CACEgJ,UAAWA,EACXiY,qBA1BmB,SAACd,GAC5BmB,EAAenB,IA0BPC,iBAAkBA,EAClB/C,eAAgBA,QCzGbqE,GAjDW,WAAO,IvD64QQnhB,EuD74QT,EACc+H,yBAC1ClE,IAF4B,oBACvBmE,EADuB,KACPoZ,EADO,OAS1B1sB,cAHFC,EAN4B,EAM5BA,gBACW0sB,EAPiB,EAO5BpP,UACOvD,EARqB,EAQ5BxW,MAEeuZ,EAAgB6K,eAAzBlK,QAVsB,GvD64QSpS,EuD73QV,CAC3BsI,UAAW,CACT0C,KAAMyG,IvD43QGxR,YAAuE6B,GAA0B9B,IuDj4Q5GiF,EAb4B,EAa5BA,KACSqc,EAdmB,EAc5B5Y,QACO6Y,EAfqB,EAe5BrpB,MAOF,OAAImpB,GAAkBC,EACb,kBAAC,GAAD,SAILtZ,QAAuC7S,KAAjB,OAAJ8P,QAAI,IAAJA,OAAA,EAAAA,EAAMmN,QAAQ,KACjCpK,GACCA,EAAegD,OAASyG,QACHtc,KAAjB,OAAJ8P,QAAI,IAAJA,OAAA,EAAAA,EAAMmN,QAAQ,MAEhBgP,EAAiB,OAACnc,QAAD,IAACA,OAAD,EAACA,EAAMmN,QAAQ,IAG9B1D,GAAc6S,GAChBtd,GAAa,6BAA8ByK,EAAY6S,GAChD,kBAACpc,GAAA,EAAD,CAAOC,SAAS,SAAhB,+BAIP,oCACGzQ,GAAmBqT,GAClB,kBAAC,GAAD,CAAMS,UAAS,OAAET,QAAF,IAAEA,OAAF,EAAEA,EAAgBlB,QCnDnCpJ,GAAYC,cAAW,iBAAO,CAClC6jB,QAAS,CACPxmB,OAAQ,QACRgZ,UAAW,cAcAyN,GAViB,WAC9B,IAAM1jB,EAAUL,KAEhB,OACE,kBAACwV,GAAA,EAAD,CAAM1E,MAAI,EAAC8E,GAAI,GAAIkC,GAAI,EAAGvX,UAAWF,EAAQyjB,QAAS/hB,UAAU,WAC9D,kBAAC,GAAD,QCSSme,GArBa,WAAO,IACzBxoB,EAASV,cAATU,KADwB,EAGLkL,GAAyB,CAClDgI,UAAW,CAAE9C,QAAO,OAAEpQ,QAAF,IAAEA,OAAF,EAAEA,EAAME,OADvBuoB,EAHyB,qBAkBhC,OAXA5O,qBAAU,WACR,IAAM6O,EAAWC,aAAY,gBACT5oB,KAAV,OAAJC,QAAI,IAAJA,OAAA,EAAAA,EAAME,MACRuoB,MAED,KACH,OAAO,WACLG,cAAcF,MAEf,CAACD,EAAkBzoB,IAEf,kBAAC,GAAD,O,4DCJHsI,GAAYC,cAAW,SAACzG,GAAD,MAAY,CACvCkE,KAAM,CAAE4Y,UAAW,SAAUhZ,OAAQ,aAwExB0mB,GArEiB,WAC9B,I1D61QkC1hB,E0D71Q5BjC,EAAUL,KADoB,G1D81QFsC,E0D51QmB,CACnDsI,UAAW,I1D41QArI,YAA6D4B,GAAqB7B,I0D71QvFiF,EAF4B,EAE5BA,KAAMyD,EAFsB,EAEtBA,QAASxQ,EAFa,EAEbA,MAIvB,OAAIwQ,EACK,kBAACnJ,GAAA,EAAD,MAGLrH,GACF+L,GAAa,6BAA8B/L,GACpC,kBAACiN,GAAA,EAAD,CAAOC,SAAS,SAAhB,+BAIP,kBAACrG,GAAA,EAAD,CAAKd,UAAWF,EAAQ3C,MACtB,wCACA,mQAMC6J,GACC,kBAAC0c,GAAA,EAAD,CAAgBliB,UAAWgL,MACzB,kBAACmX,GAAA,EAAD,CAAOnkB,aAAW,gBAChB,kBAACokB,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,eACA,kBAACA,GAAA,EAAD,iBACA,kBAACA,GAAA,EAAD,CAAW9iB,MAAM,SAAjB,UACA,kBAAC8iB,GAAA,EAAD,CAAW9iB,MAAM,QAAjB,SACA,kBAAC8iB,GAAA,EAAD,CAAW9iB,MAAM,QAAjB,eAGHgG,EAAKU,MAAMuD,KAAI,SAAC9T,GAAD,OACd,kBAAC4sB,GAAA,EAAD,KACE,kBAACF,GAAA,EAAD,CAAUle,IAAKxO,EAAK0R,IAClB,kBAACib,GAAA,EAAD,KACE,kBAAC/jB,GAAA,EAAD,CACEE,IAAK9I,EAAKiQ,SACVlH,IAAI,4DAGR,kBAAC4jB,GAAA,EAAD,CAAWtiB,UAAU,KAAKwiB,MAAM,OAC9B,kBAACjjB,GAAA,EAAD,CAAYrF,QAAQ,SAASvE,EAAKiQ,WAEpC,kBAAC0c,GAAA,EAAD,CAAW9iB,MAAM,SACf,kBAACD,GAAA,EAAD,CAAYrF,QAAQ,WAAWvE,EAAK0R,KAEtC,kBAACib,GAAA,EAAD,CAAW9iB,MAAM,QACf,kBAACD,GAAA,EAAD,CAAYrF,QAAQ,SACjBvE,EAAK0Q,gBAGV,kBAACic,GAAA,EAAD,CAAW9iB,MAAM,QACd7J,EAAK8sB,UAAY9sB,EAAK8sB,UAAY,mC,4FCjBxCC,GApDqC,SAAC,GAG9C,I3D+hQuCniB,E2DjiQ5CoiB,EAEI,EAFJA,WACAC,EACI,EADJA,eACI,G3D+hQwCriB,E2D9hQsB,CAChEsI,UAAW,CACTkB,eAAgB4Y,I3D6hQPniB,eAAoFsB,GAA4BvB,I2DhiQzH,oBACGsiB,EADH,KACqBpqB,EADrB,KACqBA,MAMnBqqB,EAAoB,yCAAG,WAAOH,GAAP,UAAAttB,EAAA,yDACtBstB,EADsB,iEAGrBE,EAAe,CACnBha,UAAW,CACTkB,eAAgB4Y,KALO,2CAAH,sDAc1B,OAJIlqB,GACF+L,GAAa,2BAA4B/L,GAIzC,qCACsB,IAAnBmqB,EACC,kBAAC9kB,GAAA,EAAD,CACE3D,KAAK,QACLX,MAAM,YACNuO,UAAQ,EACRgb,UAAW,kBAAC,KAAD,OAJb,UASA,kBAACjlB,GAAA,EAAD,CACE3D,KAAK,QACLX,MAAM,YACNuE,QAAS,WACP+kB,EAAqBH,IAEvB3kB,aAAW,kBACX+kB,UAAW,kBAAC,KAAD,OAPb,YCmHOC,GAhJiC,SAAC,GAG1C,I5D06PoDziB,E4D56PzDoiB,EAEI,EAFJA,WACAM,EACI,EADJA,eACI,EAC0Cza,IAAMC,SAASka,GADzD,oBACGO,EADH,KACoBC,EADpB,KAEEC,EAAoBzC,yBAAuBtc,IAF7C,EAGgBoE,mBAAiB,IAA9BO,EAHH,uBAI6BjF,KAAzByB,EAJJ,EAIIA,KAAMyD,EAJV,EAIUA,QAASxQ,EAJnB,EAImBA,MAJnB,E5D26PS+H,eAA8GmB,GAAyCpB,G4Dt6P7J8iB,EALH,uB5DyjQC,SAAkD9iB,GACjD,OAAOC,eAA0GuB,GAAuCxB,G4DhjQ1J+iB,CAAyC,CAC3Cza,UAAW,CACTkB,eAAgBqZ,EAChBpa,UAAWuB,SAASvB,MAbpB,oBAQFua,EARE,KASOC,EATP,KASA/qB,MAYJ,GAJA+W,qBAAU,WACR2T,EAAmBR,KAClB,CAACA,EAAYO,IAEZja,EACF,OACE,kBAAC3J,GAAA,EAAD,CACEhE,MAAM,OACNe,QAAQ,OACRsC,eAAe,SACfC,WAAW,UAEX,kBAAC,GAAD,QAKFnG,GAAS+qB,IACXhf,GAAa,wCAAyC/L,EAAO+qB,GAG/D,IAAMC,EAAsB,yCAAG,WAAOC,GAAP,UAAAruB,EAAA,sEACvBguB,EAAsB,CAC1Bxa,UAAW,CACT8a,UAAWD,EACXE,eAAgBR,KAJS,2CAAH,sDAStBS,EAA+B,yCAAG,WAAOH,GAAP,UAAAruB,EAAA,8DACxBK,IAAVguB,EADkC,iEAGhCH,EAAsC,CAC1C1a,UAAW,CACTkB,eAAgBqZ,EAChBpa,UAAW0a,KANuB,2CAAH,sDAWrC,OACE,oCACE,kBAACpkB,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,aACfC,WAAW,aACXC,cAAc,SACdilB,GAAI,GALN,OAOGte,QAPH,IAOGA,OAPH,EAOGA,EAAMmN,QACJzH,MAAK,SAAC7V,EAAGwU,GAAJ,OAAUxU,EAAEgS,GAAKwC,EAAExC,MACxBoC,KAAI,SAACsa,EAAKjT,GAAN,qCACH,kBAACxR,GAAA,EAAD,CACE6E,IAAK2M,EACLzU,QAAQ,OACRsC,eAAe,gBACfC,WAAW,UAEX,kBAACU,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,gBACfC,WAAW,SACXC,cAAc,MACdgB,KAAM,GAEN,kBAAC0H,GAAA,EAAD,CACEQ,UACE,UAAAgc,EAAIC,cAAc,UAAlB,mBAAsB1a,qBAAtB,eAAqCjC,MACnC6b,QAC0CxtB,KAA5C,UAAAquB,EAAIC,cAAc,UAAlB,mBAAsB1a,qBAAtB,eAAqCjC,MAEvB4b,EAEhBllB,QAAS,kBAAM0lB,EAAuBM,EAAI1c,KAC1C4c,SAAU,WACRJ,EAAgCE,EAAI1c,KAEtCnO,MAAO,CACL4B,UAAWrD,GAAMsB,QAAQ,GACzB2V,YAAajX,GAAMsB,QAAQ,GAC3B6T,SAAU,KAEZ1S,QAAQ,WACRC,KAAK,QACLX,OACE,UAAAuqB,EAAIC,cAAc,UAAlB,eAAsB5U,cAAe2U,EAAI1c,GACrC,YACA,UAENrL,MAAO+nB,EAAIxY,OAEb,kBAAChE,GAAA,EAAD,CACErN,SACE,UAAA6pB,EAAIC,cAAc,UAAlB,mBAAsB1a,qBAAtB,eAAqC5C,MACjC,UACA,WAENlN,OACE,UAAAuqB,EAAIC,cAAc,UAAlB,mBAAsB1a,qBAAtB,eAAqC5C,MACjC,YACA,UAEN1K,OACE,UAAA+nB,EAAIC,cAAc,UAAlB,mBAAsB1a,qBAAtB,eAAqC5C,MAArC,UACIqd,EAAIC,cAAc,UADtB,iBACI,EAAsB1a,qBAD1B,aACI,EAAqC5C,KACrC,eAENvM,KAAK,QACLjB,MAAO,CACL4B,UAAWrD,GAAMsB,QAAQ,GACzBuC,MAAO,IACP8M,SAAU,IACVwE,SAAU,e,0CC5IxB3O,GAAYC,cAAW,SAACzG,GAAD,MAAY,CACvCysB,KAAM,CACJ1qB,MAAO/B,EAAME,QAAQc,MAAMJ,MAE7B8rB,OAAQ,CACN3qB,MAAO/B,EAAME,QAAQe,QAAQL,UAuElB+rB,GA9D2D,SAAC,GAGpE,I7D8+PgD7jB,E6Dh/PrDwJ,EAEI,EAFJA,eACA6Y,EACI,EADJA,eAEMtkB,EAAUL,KADZ,EAEwCuK,IAAMC,SAChDma,GAHE,oBAEGyB,EAFH,KAEmBC,EAFnB,Q7D8+PiD/jB,E6Dz+PiB,CACpEsI,UAAW,CACTkB,eAAgBA,EAChBwa,UAAW3B,I7Du+PFpiB,eAAsGqB,GAAqCtB,I6D1+PjJikB,EALH,uBAWsB7gB,GAAmC,CAC3DkF,UAAW,CACTkB,eAAgBA,KAFZvE,EAXJ,EAWIA,KAAMyD,EAXV,EAWUA,QAMduG,qBAAU,WAAO,IAAD,EACRiV,EAAY,OAAGjf,QAAH,IAAGA,GAAH,UAAGA,EAAMkf,oBAAT,aAAG,EAAoBpe,OAEvCge,IADEG,GAAgBA,EAAe,MAKlC,CAACJ,EAAgB7e,IAEpB,IAAMmf,EAAiC,yCAAG,uBAAAtvB,EAAA,sEAClCmvB,EAAqB,CACzB3b,UAAW,CACTkB,eAAgBA,EAChBwa,WAAY3B,KAJwB,2CAAH,qDASvC,OAAI3Z,EACK,kBAAC,GAAD,MAIP,oCACE,kBAACnL,GAAA,EAAD,CACEtE,MAAM,YACNuO,SAAUsc,EACVtB,UACEH,EACE,kBAAC,KAAD,CAAUpkB,UAAWF,EAAQ4lB,OAE7B,kBAAC,KAAD,CAAc1lB,UAAWF,EAAQ6lB,SAGrCpmB,QAAS4mB,GAER/B,EAAiB,SAAW,cCjD/B3kB,GAAYC,cAAW,SAACzG,GAAD,MAAY,CACvCuO,MAAO,CACLxK,gBAAiB/D,EAAME,QAAQc,MAAML,MACrCoB,MAAO/B,EAAME,QAAQc,MAAML,MAC3B2D,UAAU,aAAD,OAAetE,EAAME,QAAQK,WAAWC,OACjD,WAAY,CACV6M,SAAU,WACVhL,IAAK,EACLiL,KAAM,EACNzJ,MAAO,OACPC,OAAQ,OACR3C,aAAc,MACdoM,UAAW,oCACXC,OAAQ,yBACRC,QAAS,OAGb,oBAAqB,CACnB,KAAM,CACJiD,UAAW,YACX7K,QAAS,GAEX,OAAQ,CACN6K,UAAW,aACX7K,QAAS,IAGboJ,KAAK,cACHiI,WAAYlX,EAAMsB,QAAQ,IACzBtB,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BzN,SAAU,GACVyrB,WAAY,SAGhBC,QAAS,CACPjmB,WAAY,cAEdoN,SAAU,CACRxS,MAAO,QAETsrB,kBAAmB,CACjBtrB,MAAO/B,EAAME,QAAQQ,QAAQE,UAmIlB0sB,GA/HoB,WACjC,I9D6xSmDxkB,E8D7xS7CjC,EAAUL,KADuB,G9D8xSYsC,E8D5xSmB,CACpEsI,UAAW,I9D4xSArI,mBAAsG+C,GAA+BhD,I8D7xS1IiF,EAF+B,EAE/BA,KAAMyD,EAFyB,EAEzBA,QAASxQ,EAFgB,EAEhBA,MAFgB,EAKX6P,yBAAuBjE,IAA1C2gB,EAL8B,qBAOtBC,EAAsBlhB,KAA/BkF,QAEF8V,EAAc,SAAC4D,GACnBqC,EAAgBrC,IAGlB,OAAI1Z,GAAWgc,EACN,kBAAC,GAAD,OAGLxsB,GACF+L,GAAa,yBAA0B/L,GAIvC,oCACE,kBAAC6G,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,gBACfC,WAAW,SACX1F,MAAO,CAAEwV,YAAajX,GAAMsB,QAAQ,KAEpC,kBAACwG,GAAA,EAAD,CAAYrF,QAAQ,KAAKhB,MAAO,CAAEG,QAAS5B,GAAMsB,QAAQ,KAAzD,uBAGA,kBAACwO,GAAA,EAAD,CACErN,QAAQ,WACRC,KAAK,QACLX,MAAM,YACNwC,MAAO,wBAAkBwJ,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAM0f,UAAU5e,WAGjB,KAAvB,OAAJd,QAAI,IAAJA,OAAA,EAAAA,EAAM0f,UAAU5e,QACf,kBAACZ,GAAA,EAAD,CAAOC,SAAS,QAAhB,8BADD,OAGCH,QAHD,IAGCA,OAHD,EAGCA,EAAM0f,UACHha,MAAK,SAAC7V,EAAGwU,GAAJ,OAAUA,EAAExC,GAAKhS,EAAEgS,MACxBoC,KAAI,SAAC0b,EAAUrU,GAAX,OACH,kBAACsU,GAAA,EAAD,CAAWjhB,IAAK2M,EAAOuU,iBAAiB,GACtC,kBAACC,GAAA,EAAD,CACE3nB,WAAY,kBAAC,KAAD,MACZ4nB,gBAAeJ,EAASze,OAEf,OAARye,QAAQ,IAARA,OAAA,EAAAA,EAAUnB,cAAc1d,QAAS,EAChC,kBAACR,GAAA,EAAD,CACE5L,QAAQ,MACR+N,aAAckd,EAAS9d,GACvB/I,QAAS,CAAE0H,MAAO1H,EAAQ0H,QAE1B,kBAAC,KAAD,CAAexH,UAAWF,EAAQwmB,qBAGpC,kBAAC,KAAD,CAAetmB,UAAWF,EAAQ0N,WAGpC,kBAACzM,GAAA,EAAD,CACE/F,OACU,OAAR2rB,QAAQ,IAARA,OAAA,EAAAA,EAAUnB,cAAc1d,QAAS,EAAI,YAAc,UAErDtG,UAAW+Q,IACXhT,QAAS,WACPghB,EAAYoG,EAAS9d,KAEvB2J,GAAI,CACFkO,SACE,qCAAuCiG,EAAS9d,GAClDme,MAAO,CAAEC,eAAe,IAE1BjnB,UAAWF,EAAQoI,MAElBye,EAASze,OAGd,kBAACgf,GAAA,EAAD,CAAkBlnB,UAAWF,EAAQumB,SACnC,yBACEc,aAAc,WACZ5G,EAAYoG,EAAS9d,MAGvB,oCACE,kBAAC9H,GAAA,EAAD,CAAYrF,QAAQ,WAApB,oFAIA,kBAAC,GAAD,CACEyoB,WAAYwC,EAAS9d,GACrB4b,eAAgBkC,EAASZ,eAKjC,kBAACqB,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAa5rB,kBAAgB,EAACC,QAAQ,YACpC,kBAAC4D,GAAA,EAAD,CACEtE,MAAM,YACNwG,UAAW+Q,IACXC,GAAE,4CAAuCmU,EAAS9d,IAClDrJ,aAAW,gBACX7D,KAAK,QACL4oB,UAAW,kBAAC,KAAD,OANb,QAUA,kBAAC,GAAD,CACEhZ,eAAgBob,EAAS9d,GACzBub,eAAgBuC,EAASZ,YAE3B,kBAAC,GAAD,CACE5B,WAAYwC,EAAS9d,GACrBub,eAAgBuC,EAASZ,qB,UClLvCtmB,GAAYC,cAAW,SAACzG,GAAD,YAAY,CACvCkE,KAAM,CACJtC,QAAS5B,EAAMsB,QAAQ,IAEzBoY,KAAM,GACN4J,aAAc,CACZ+K,wBAAyB,CACvBtsB,MAAO/B,EAAME,QAAQa,UAAUF,OAGnCytB,eAAa,oBACVtuB,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BtL,MAAO,OACPnB,KAAM,UAHG,eAKV1C,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5BhT,KAAM,QACNmB,MAAO,QAPE,2BASA7D,EAAMsB,QAAQ,IATd,4BAUCtB,EAAMsB,QAAQ,IAVf,iCAWMtB,EAAME,QAAQQ,QAAQG,MAX5B,OAsIA0tB,GAvHmB,WAChC,I/D+0PyCzlB,E+D/0PnCjC,EAAUL,KACFqU,EAAcrd,cAApBU,KAF8B,E/Di1PzB6K,eAA8EiB,GAAyBlB,G+D90P7G0lB,EAH+B,uBAIJzd,IAAMC,SAA4B,CAClE1J,MAAO,KAL6B,oBAI/BmnB,EAJ+B,KAIpBC,EAJoB,OAOF1d,oBAAkB,GAPhB,oBAO/B2d,EAP+B,KAOnBC,EAPmB,KAStC7W,qBAAU,YACW,IAAf4W,GACFnJ,YAAW,WACTiJ,EAAUnnB,MAAQ,GAClBsnB,GAAc,KACb,OAEJ,CAACD,EAAYF,IAEhB,IAOMI,EAAc,yCAAG,WACrBhc,GADqB,UAAAjV,EAAA,yDAGrBiV,EAAEI,iBAEsB,KAApBwb,EAAUnnB,OAAiBmnB,EAAUnnB,MAAMsc,OAL1B,uBAMnBgL,GAAc,GACdH,EAAUnnB,MAAQ,GAPC,0BAUnBsnB,GAAc,GAVK,wBAafJ,EAAwB,CAC5Bpd,UAAW,CACTnC,KAAMwf,EAAUnnB,MAAMsc,OACtBzI,SAAUN,EAAUzc,OAhBH,QAoBrBswB,EAAa,CAAEpnB,MAAO,KApBD,4CAAH,sDAuBpB,OACE,oCACE,kBAACO,GAAA,EAAD,CAAKd,UAAWF,EAAQ3C,MACtB,kBAAC4D,GAAA,EAAD,CAAYrF,QAAQ,KAAKhB,MAAO,CAAE0B,cAAenD,GAAMsB,QAAQ,KAA/D,gBAGA,0BACEyF,UAAWF,EAAQ6S,KACnBwC,YAAU,EACVC,aAAa,MACbxI,SAAUkb,GAEV,kBAACC,GAAA,EAAD,KACE,kBAACzS,GAAA,EAAD,CACErb,MAAO2tB,EACP/e,GAAG,QACHlD,IAAK,EACLqiB,UAAQ,EACRhf,MAAO0e,EAAUnnB,MACjByM,SAAU,SAAClB,GAAD,OAjDD,SACnBA,GAEA+b,GAAc,GACdF,EAAa,eAAKD,EAAN,gBAAkB5b,EAAEE,OAAOnD,GAAKiD,EAAEE,OAAOhD,SA6C1B6C,CAAaC,IAC9BnQ,KAAK,QACLD,QAAQ,WACRgiB,WAAS,EACTC,KAAM,EACNvI,aAAa,MACbI,YAAY,8BACZ6H,WAAY,SAACvR,GACG,UAAVA,EAAEnG,KACJmiB,EAAehc,IAGnBmc,QAAS,WACPJ,GAAc,IAEhBrqB,OACiB,IAAfoqB,EACI,wBACA,8BAENnS,WAAS,EACT6H,WAAY,CACVC,UAAW,KAEbK,WAAY,CACVC,aACE,kBAACC,GAAA,EAAD,CAAgBxX,SAAS,OACvB,kBAACiI,GAAA,EAAD,CACE1F,GAAG,iBACHtP,KAAK,SACLyB,MAAM,YACNwE,aAAW,gBAEX,kBAAC,KAAD,QAINM,QAAS,CACPie,MAAOje,EAAQyc,eAGnByB,gBAAiB,CACfhe,UAAWF,EAAQyc,qBC/I7B9c,GAAYC,cAAW,SAACzG,GAAD,MAAY,CACvCopB,QAAS,CACP/lB,UAAWrD,EAAMsB,QAAQ,QAgBd2tB,GAZoB,WACjC,IAAMpoB,EAAUL,KAEhB,OACE,oCACE,kBAAC,GAAD,MACA,kBAAC+W,GAAA,EAAD,CAASxW,UAAWF,EAAQuiB,UAC5B,kBAAC,GAAD,QCKS8F,GAjByC,SAAC,GAElD,IADL5c,EACI,EADJA,eAIA,OAFAyF,qBAAU,cAAU,CAACzF,IAGnB,oCACE,kBAACxC,GAAA,EAAD,CACE/N,MAAM,YACNW,KAAK,QACLD,QAAQ,WACR8B,MAAO,qBAAuB+N,M,qBC8BvB6c,GAtCmC,SAAC,GAG5C,IlEqoQuCrmB,EkEvoQ5CuG,EAEI,EAFJA,SACA8b,EACI,EADJA,eACI,GlEqoQwCriB,EkEpoQuB,CACjEsI,UAAW,CACTC,aAAchC,IlEmoQLtG,eAAoFyB,GAA4B1B,IkEroQtHsmB,EADH,qBAOJrX,qBAAU,cAAU,CAAC1I,EAAU8b,IAE/B,IAAMkE,EAAkB,yCAAG,WAAOhgB,GAAP,UAAAzR,EAAA,sEACnBwxB,EAA2B,CAC/Bhe,UAAW,CACTC,aAAchC,KAHO,2CAAH,sDAQxB,OACE,oCACE,kBAACiG,GAAA,EAAD,CACE1F,GAAG,gBACHtP,KAAK,SACLyB,MAAM,YACNwE,aAAW,qBACX+J,SAAU6a,EACV7kB,QAAS,WACP+oB,EAAmBhgB,KAGrB,kBAAC,KAAD,SCnBF7I,GAAYC,cAAW,SAACzG,GAAD,MAAY,CACvCsjB,aAAa,cACX+K,wBAAyB,CACvBtsB,MAAO/B,EAAME,QAAQa,UAAUF,OAEhCb,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BzN,SAAU,SA6LD4tB,GApLuC,SAAC,GAAwB,InE4kQ/BxmB,EmE5kQSwJ,EAAqB,EAArBA,eACjDzL,EAAUL,KAD4D,EAElCuK,IAAMC,UAAS,GAFmB,oBAErEue,EAFqE,KAEtDC,EAFsD,OAGxBze,IAAMC,SAAiB,GAHC,oBAGrEye,EAHqE,KAGjDC,EAHiD,OAIxC1e,oBAAkB,GAJsB,oBAIrE2d,EAJqE,KAIzDC,EAJyD,OAKxC7d,IAAMC,SAAS,CACjD/B,KAAM,KANoE,oBAKrE0gB,EALqE,KAKzDC,EALyD,KAQtEC,EAAkB7jB,GAAoC,CAC1DoF,UAAW,CACTkB,eAAgBA,KAVwD,EAalDpG,GAAmC,CAC3DkF,UAAW,CACTkB,eAAgBA,KAFZvE,EAboE,EAapEA,KAAMyD,EAb8D,EAa9DA,QAb8D,GnE4kQ9B1I,EmE1jQyB,CACrEsI,UAAW,CACTnC,KAAM0gB,EAAW1gB,KACjBoC,aAAcoe,InEwjQL1mB,eAAwFwB,GAA8BzB,ImE3jQ5HgnB,EAlBqE,qBAyB5E/X,qBAAU,YACW,IAAf4W,GACFnJ,YAAW,WACToK,EAAc,CAAE3gB,KAAM,KACtB2f,GAAc,KACb,OAEJ,CAACD,EAAYgB,IAEhB,IASMI,EAAyB,SAAC1gB,GAG9B,GAFAqgB,EAAsBrgB,GAEE,KAApBsgB,EAAW1gB,OAAgB0gB,EAAW1gB,KAAK2U,OAI7C,OAHA4L,GAAiB,GACjBZ,GAAc,QACde,EAAW1gB,KAAO,IAGlB2f,GAAc,GAGhBkB,EAA6B,CAC3B1e,UAAW,CACTnC,KAAM+gB,OAAOC,OAAON,GAAY,GAChCte,aAAchC,KAGlBsgB,EAAW1gB,KAAO,GAClBugB,GAAiB,IAGnB,OAAIK,EAAgBre,SAAWA,EACtB,kBAAC,GAAD,MAIP,oCACE,kBAAC3J,GAAA,EAAD,CAAKjD,QAAQ,OAAOsC,eAAe,aAAaC,WAAW,UACzD,kBAACW,GAAA,EAAD,CAAYrF,QAAQ,MAApB,6BACA,kBAACqN,GAAA,EAAD,CACErN,QAAQ,WACRC,KAAK,QACLX,MAAM,UACNwC,MAAO,0BAAoBwJ,QAApB,IAAoBA,OAApB,EAAoBA,EAAMkf,aAAape,QAC9CpN,MAAO,CAAEyV,WAAY,WAGM,KAA1B,OAAJnJ,QAAI,IAAJA,OAAA,EAAAA,EAAMkf,aAAape,QAClB,kBAACZ,GAAA,EAAD,CAAOC,SAAS,QAAhB,gDADD,OAKCH,QALD,IAKCA,OALD,EAKCA,EAAMkf,aACHxZ,MAAK,SAAC7V,EAAGwU,GAAJ,OAAUxU,EAAEgS,GAAKwC,EAAExC,MACxBoC,KAAI,SAACke,GAAD,eACH,kBAACpB,GAAA,EAAD,CAAWqB,KAAG,EAACzjB,IAAKwjB,EAAOtgB,IACzB,kBAACyM,GAAA,EAAD,CACErb,MAAO2tB,EACPjiB,IAAKwjB,EAAOtgB,GACZkE,KAAMoc,EAAOjhB,KAAOihB,EAAOtgB,GAC3Bmf,UAAQ,EACRze,SAAQ,OAAEuf,QAAF,IAAEA,GAAF,UAAEA,EAAiB9hB,YAAnB,aAAE,EAAuB8D,cAAc,GAAGib,UAClD1I,WAAY,SAACvR,GACG,UAAVA,EAAEnG,MACJqjB,EAAuBG,EAAOtgB,IAC9B+f,EAAW1gB,KAAO,KAGtB8E,SAAU,SAAClB,IApEE,SACzBwG,EACAxG,GAEA,IAAI5D,GAAQ,OAAD4D,QAAC,IAADA,OAAA,EAAAA,EAAGE,OAAOhD,MAAM6T,SAAU,GACrCgM,EAAc,CAAE3gB,KAAMA,IACtBugB,GAAiB,GA+DHY,CAAkB,OAACF,QAAD,IAACA,KAAQtgB,GAAIiD,GAC/B6c,EAAsBQ,EAAOtgB,KAE/Bof,QAAS,SAACnc,GACR+b,GAAc,GACde,EAAW1gB,KAAO,IAEpBohB,OAAQ,WACNzB,GAAc,IAEhB0B,WAAY,WACV1B,GAAc,IAEhBlK,KAAM,EACNhiB,KAAK,QACLD,QAAQ,WACR0Z,aAAa,MACbI,YAAa2T,EAAOjhB,KACpB1K,MAAO2rB,EAAOjhB,KACduN,WAAS,EACT9W,OAAO,QACP2e,WAAY,CACVC,UAAW,KAEbK,WAAY,CACVC,aACE,kBAACC,GAAA,EAAD,CAAgBxX,SAAS,OACvB,kBAACiI,GAAA,EAAD,CACE5I,IAAKwjB,EAAOtgB,GACZA,GAAG,gBACHtP,KAAK,SACLyB,MAAM,YACNwE,aAAW,qBACXD,QAAS,WACPypB,EAAuBG,EAAOtgB,KAEhCU,SACE4f,EAAOtgB,KAAO6f,IAEiB,IAAlBF,GAGf,kBAAC,KAAD,OAEF,kBAAC,GAAD,CACElgB,SAAU6gB,EAAOtgB,GACjBub,mBACiB,OAAf0E,QAAe,IAAfA,GAAA,UAAAA,EAAiB9hB,YAAjB,eAAuB8D,cAAc,GAAGib,YACvB,IAAjBoD,EAAOhe,SAKX,kBAAC7D,GAAA,EAAD,CACEmC,aAAc0f,EAAOhe,MAAQge,EAAOhe,MAAQ,EAC5CnQ,MAAM,aAEN,kBAAC,KAAD,CAAeA,MAAM,cAI3B8E,QAAS,CACPie,MAAOje,EAAQyc,eAGnByB,gBAAiB,CACfwL,QAAQ,EACRxpB,UAAWF,EAAQyc,sBClM/B9c,GAAYC,cAAW,SAACzG,GAAD,MAAY,CACvCopB,QAAS,CACP/lB,UAAWrD,EAAMsB,QAAQ,GACzBiC,aAAcvD,EAAMsB,QAAQ,IAE9BoY,KAAM,CACJrW,UAAWrD,EAAMsB,QAAQ,GACzBiC,aAAcvD,EAAMsB,QAAQ,IAE9BgiB,aAAa,cACX+K,wBAAyB,CACvBtsB,MAAO/B,EAAME,QAAQa,UAAUF,OAEhCb,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BzN,SAAU,SA+ID8uB,GApIgD,SAAC,GAIzD,IAHLC,EAGI,EAHJA,aACAne,EAEI,EAFJA,eACAoe,EACI,EADJA,qBAEM7pB,EAAUL,KADZ,EAE4CwK,mBAASyf,GAFrD,oBAEGE,EAFH,KAEqBC,EAFrB,OAGuC5f,oBAAkB,GAHzD,oBAGG6f,EAHH,KAGmBrB,EAHnB,OAIgCxe,oBAAkB,GAJlD,oBAIG2d,EAJH,KAIeC,EAJf,KAMJ7W,qBAAU,YACW,IAAf4W,GACFnJ,YAAW,WACToL,EAAoB,IACpBhC,GAAc,KACb,OAEJ,CAACD,EAAYgC,IAbZ,IpE2qQwC7nB,EoE3qQxC,GpE2qQwCA,EoEzpQV,CAChCsI,UAAW,CACTkB,eAAgBA,EAChBrD,KAAM0hB,EAAiB/M,SpEupQd7a,eAAoF2B,GAA4B5B,IoE5qQzH,oBAgBFgoB,EAhBE,YAiBAtf,EAjBA,EAiBAA,QAASxQ,EAjBT,EAiBSA,MAeP+vB,EAAwB,yCAAG,uBAAAnzB,EAAA,yDAC1B+yB,EAAiB/M,QAA+B,KAArB+M,EADD,uBAE7B/B,GAAc,GACdgC,EAAoB,IAHS,0BAM7BhC,GAAc,GANe,uBASzBkC,EAA2B,CAC/B1f,UAAW,CACTkB,eAAgBA,EAChBrD,KAAM0hB,KAZqB,OAe/BC,EAAoB,IAfW,4CAAH,qDAkB9B,OAAIpf,GAAWxQ,EACN,kBAAC,GAAD,MAIP,oCACE,kBAAC8G,GAAA,EAAD,CAAYrF,QAAQ,KAAKhB,MAAO,CAAEuvB,UAAW,SAC1CP,GAGH,kBAAC3B,GAAA,EAAD,CAAWqB,KAAG,EAACppB,UAAWF,EAAQ6S,MAChC,kBAAC2C,GAAA,EAAD,CACErb,MAAO2tB,EACPjiB,IAAK4F,EACLwB,KAAK,cACL/D,MAAO4gB,EACP5B,UAAQ,EACRnf,GAAG,4BACHrL,OACiB,IAAfoqB,EACI,8BACA,uBAENlK,WAAS,EACTC,KAAM,EACNhiB,KAAK,QACLD,QAAQ,WACR0Z,aAAa,MACbI,YAAaoU,EACbrgB,SAAUogB,EACVlU,WAAS,EACT4H,WAAY,SAACvR,GACG,UAAVA,EAAEnG,KACJqkB,KAGJhd,SAAU,SAAClB,IA7Dc,SAC/BA,GAEA+d,EAAmB,OAAC/d,QAAD,IAACA,OAAD,EAACA,EAAGE,OAAOhD,OAC9Byf,GAAiB,GA0DTyB,CAAyBpe,IAE3Bwd,OAAQ,WACNzB,GAAc,IAEhB0B,WAAY,WACV1B,GAAc,IAEhBvK,WAAY,CACVC,UAAW,KAEbK,WAAY,CACVC,aACE,kBAACC,GAAA,EAAD,CAAgBxX,SAAS,OACvB,kBAACiI,GAAA,EAAD,CACE5I,IAAK4F,EACL1C,GAAG,kBACHtP,KAAK,SACLyB,MAAM,YACNwE,aAAW,kBACX+J,SAAUogB,GAAwBG,EAClCvqB,QAASyqB,GAET,kBAAC,KAAD,QAINlqB,QAAS,CACPie,MAAOje,EAAQyc,eAGnByB,gBAAiB,CACfhe,UAAWF,EAAQyc,iBAIzB,kBAAC/F,GAAA,EAAD,CAASxW,UAAWF,EAAQuiB,YC9I5B5iB,GAAYC,cAAW,SAACzG,GAAD,YAAY,CACvCkE,KAAM,CACJtC,QAAS5B,EAAMsB,QAAQ,GACvB+B,UAAWrD,EAAMsB,QAAQ,IAE3B8nB,QAAS,CACP/lB,UAAWrD,EAAMsB,QAAQ,GACzBiC,aAAcvD,EAAMsB,QAAQ,IAE9BoY,KAAM,GACN4J,aAAa,cACX+K,wBAAyB,CACvBtsB,MAAO/B,EAAME,QAAQa,UAAUF,OAEhCb,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BzN,SAAU,KAGd4sB,eAAa,oBACVtuB,EAAMkP,YAAYC,KAAK,MAAQ,CAC9BtL,MAAO,OACPnB,KAAM,UAHG,eAKV1C,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5BhT,KAAM,QACNmB,MAAO,QAPE,2BASA7D,EAAMsB,QAAQ,IATd,4BAUCtB,EAAMsB,QAAQ,IAVf,iCAWMtB,EAAME,QAAQQ,QAAQG,MAX5B,OAoMAqwB,GAjLe,WAAO,IAAD,4BrE41PWpoB,EqE31PvCjC,EAAUL,KADkB,EAEQuK,IAAMC,SAAS,CACvD/B,KAAM,KAH0B,oBAE3BkiB,EAF2B,KAEZC,EAFY,OAKHrgB,IAAMC,SAAiB,GAA7CqgB,EALyB,qBAMhB/e,EAAmB8S,eAA7BsI,SAN0B,EAOE1c,oBAAkB,GAPpB,oBAO3B2d,EAP2B,KAOfC,EAPe,KAS5BiB,EAAkB7jB,GAAoC,CAC1DoF,UAAW,CACTkB,eAAgBQ,SAASR,MAXK,ErE61PrBvJ,eAAsFkB,GAA6BnB,GqE90PzH0lB,EAf2B,qBAiBlCzW,qBAAU,YACW,IAAf4W,GACFnJ,YAAW,WACT4L,EAAiB,CAAEniB,KAAM,KACzB2f,GAAc,KACb,OAEJ,CAACD,EAAYwC,IAEhB,IAYMG,EAAkB,SACtBze,GAIA,GAFAA,EAAEI,kBAEGke,EAAcliB,KAAK2U,QAAiC,KAAvBuN,EAAcliB,KAG9C,OAFA2f,GAAc,QACduC,EAAcliB,KAAO,IAGrB2f,GAAc,GAEhBJ,EAAwB,CACtBpd,UAAW,CACTnC,KAAMkiB,EAAcliB,KAAK2U,OACzBtR,eAAgBQ,SAASR,MAI7B8e,EAAiB,CAAEniB,KAAM,MAG3B,OACE,oCACE,kBAACpH,GAAA,EAAD,CAAKd,UAAWF,EAAQ3C,MACtB,kBAAC,GAAD,CAAiBoO,eAAgBQ,SAASR,KAC1C,kBAAC,GAAD,CACEme,cACiB,OAAfZ,QAAe,IAAfA,GAAA,UAAAA,EAAiB9hB,YAAjB,mBAAuB8D,cAAc,UAArC,eAAyC5C,MAAzC,OACI4gB,QADJ,IACIA,GADJ,UACIA,EAAiB9hB,YADrB,iBACI,EAAuB8D,cAAc,UADzC,aACI,EAAyC5C,KACzC,GAENqD,eAAgBQ,SAASR,GACzBoe,wBACiB,OAAfb,QAAe,IAAfA,GAAA,UAAAA,EAAiB9hB,YAAjB,mBAAuB8D,cAAc,UAArC,eAAyCib,aAI7C,0BACE/lB,UAAWF,EAAQ6S,KACnBwC,YAAU,EACVC,aAAa,MACbxI,SAAU2d,GAEV,kBAACxC,GAAA,EAAD,CAAWqB,KAAG,GACZ,kBAAC9T,GAAA,EAAD,CACErb,MAAO2tB,EACP5e,MAAOohB,EAAcliB,KACrBvC,IAAG,OAAEmjB,QAAF,IAAEA,GAAF,UAAEA,EAAiB9hB,YAAnB,iBAAE,EAAuB8D,cAAc,UAAvC,aAAE,EAAyCjC,GAC9CkE,KAAK,cACLib,UAAQ,EACRnf,GAAG,4BACHrL,OACiB,IAAfoqB,EACI,sBACA,kCAENlK,WAAS,EACTC,KAAM,EACNhiB,KAAK,QACLD,QAAQ,WACR0Z,aAAa,MACbI,YAAY,6BACZjM,SAAQ,OAAEuf,QAAF,IAAEA,GAAF,UAAEA,EAAiB9hB,YAAnB,iBAAE,EAAuB8D,cAAc,UAAvC,aAAE,EAAyCib,UACnD1I,WAAY,SAACvR,GACG,UAAVA,EAAEnG,KACJ4kB,EAAgBze,IAGpBmc,QAAS,WACPJ,GAAc,IAEhByB,OAAQ,WACNzB,GAAc,IAEhB0B,WAAY,WACV1B,GAAc,IAEhB7a,SAAU,SAAClB,GAAD,eA1FQ,SAC5BwG,EACAxG,GAEA,IAAM5D,GAAgB,OAAD4D,QAAC,IAADA,OAAA,EAAAA,EAAGE,OAAOhD,QAAS,GAClCH,GAAc,OAADiD,QAAC,IAADA,OAAA,EAAAA,EAAGE,OAAOnD,KAAM,QACxB3R,IAAP2R,QAA6B3R,IAATgR,IACtBoiB,EAAmBve,SAASlD,IAC5BwhB,EAAiB,CAAEniB,KAAMA,KAmFfsiB,CAAqB,OACnB1B,QADmB,IACnBA,GADmB,UACnBA,EAAiB9hB,YADE,iBACnB,EAAuB8D,cAAc,UADlB,OACnB,EAAyCjC,GACzCiD,IAGJ2J,WAAS,EACT6H,WAAY,CACVC,UAAW,KAEbK,WAAY,CACVC,aACE,kBAACC,GAAA,EAAD,CAAgBxX,SAAS,OACvB,kBAACiI,GAAA,EAAD,CACE1F,GAAG,iBACHtP,KAAK,SACLyB,MAAM,YACNwE,aAAW,eACX+J,SAAQ,OACNuf,QADM,IACNA,GADM,UACNA,EAAiB9hB,YADX,iBACN,EAAuB8D,cAAc,UAD/B,aACN,EAAyCib,WAG3C,kBAAC,KAAD,QAINjmB,QAAS,CACPie,MAAOje,EAAQyc,eAGnByB,gBAAiB,CACfhe,UAAWF,EAAQyc,kBAK3B,kBAAC/F,GAAA,EAAD,CAASxW,UAAWF,EAAQuiB,UAC5B,kBAAC,GAAD,CAAgB9W,eAAgBQ,SAASR,KACzC,kBAACiL,GAAA,EAAD,CAASxW,UAAWF,EAAQuiB,UAC5B,kBAACgF,GAAA,EAAD,CAAa5rB,kBAAgB,EAACC,QAAQ,YACpC,kBAAC4D,GAAA,EAAD,CACEtE,MAAM,YACNwG,UAAW+Q,IACXC,GAAI,aACJhT,aAAA,oBACA+kB,UAAW,kBAAC,KAAD,OALb,QASA,kBAAC,GAAD,CACEhZ,eAAgBQ,SAASR,GACzB6Y,kBACiB,OAAf0E,QAAe,IAAfA,GAAA,UAAAA,EAAiB9hB,YAAjB,mBAAuB8D,cAAc,UAArC,eAAyCib,iBC1NjDtmB,GAAYC,cAAW,SAACzG,GAAD,YAAmB,CAC9CkE,MAAI,GACFgD,eAAgB,gBAChBnD,gBAAiB/D,EAAME,QAAQK,WAAWE,QAC1C4C,UAAWrD,EAAMsB,QAAQ,GACzBkG,WAAYxH,EAAMsB,QAAQ,GAC1BqU,YAAa3V,EAAMsB,QAAQ,GAC3BsU,aAAc5V,EAAMsB,QAAQ,GAC5B6B,cAAenD,EAAMsB,QAAQ,GAC7Bqc,OAAQ,KARN,eASD3d,EAAMkP,YAAYwG,GAAG,MAAQ,CAC5BrI,SAAU,QACVxJ,MAAO,SAXP,eAaD7D,EAAMkP,YAAYC,KAAK,MAAQ,CAC9B9B,SAAU,UAdV,GAiBJ6P,WAAY,CACVrZ,MAAO7D,EAAMsB,QAAQ,GACrBwC,OAAQ9D,EAAMsB,QAAQ,GACtByC,gBAAiB/D,EAAME,QAAQa,UAAUH,KACzCsW,WAAYlX,EAAMsB,QAAQ,GAC1B,yBAA0B,CACxB4V,WAAYlX,EAAMsB,QAAQ,KAG9BgG,MAAO,CACLzD,MAAO,IACPsR,SAAUnV,EAAMsB,QAAQ,SA6DbkwB,GArDoD,SAAC,GAE7D,IADLjX,EACI,EADJA,YAEM1T,EAAUL,KACV2T,EAAUC,aAAcpa,GAAMkP,YAAYwG,GAAG,OAF/C,EAGoB3E,IAAMC,UAAS,GAHnC,oBAGG0F,EAHH,KAGS8B,EAHT,KAaJ,OACE,oCACE,kBAAC3Q,GAAA,EAAD,CACEjD,QAAQ,OACRuC,WAAW,SACXC,cAAc,MACdvD,MAAO,EACPkD,UAAWF,EAAQ3C,KACnBqE,UAAU,WAEG,IAAZ4R,GACC,kBAAC7E,GAAA,EAAD,CACEvO,UAAWF,EAAQqW,WACnBnb,MAAM,UACNwE,aAAW,YACXD,QAvBe,WACvBkS,GAAQ,KAwBA,kBAAC,KAAD,OAGJ,kBAAC1I,GAAA,EAAD,CACEpN,KAAK,QACLD,QAAQ,WACRV,MAAM,UACNwC,MAAOgW,EACPtK,KAAM,kBAAC,KAAD,MACNlJ,UAAWF,EAAQS,MACnBf,aAAA,mBAAwBgU,KAE1B,kBAAC,GAAD,OAEF,kBAAC,GAAD,CAAe7D,KAAMA,GACnB,kBAAC,GAAD,CAAS0G,kBApCW,WACxB5E,GAAQ,IAmC2C9B,KAAMA,OClFvDlQ,GAAYC,cAAW,SAACzG,GAAD,MAAY,CACvCkE,KAAM,CACJ4Y,UAAW,SACXyG,UAAW,QACXzf,OAAQ,QACRlC,QAAS5B,EAAMsB,QAAQ,IAEzBmwB,QAAS,CACP7vB,QAAS5B,EAAMsB,QAAQ,GACvBkG,WAAYxH,EAAMsB,QAAQ,QAgEfowB,GA5DkB,WAC/B,IAAM7qB,EAAUL,KADqB,EAEHhJ,cAA1BU,EAF6B,EAE7BA,KAAMT,EAFuB,EAEvBA,gBACR4f,EAAOhf,eAAeif,QAAQpf,EAAKE,KAEzC,OACE,oCACGX,GAA4B,UAAT4f,EAClB,oCACE,kBAACrB,GAAA,EAAD,CACE1E,MAAI,EACJ8E,GAAI,GACJkC,GAAI,EACJ/V,UAAU,UACVxB,UAAWF,EAAQ3C,MAEnB,kBAAC,GAAD,CAA2BqW,YAAY,cACvC,kBAAC1S,GAAA,EAAD,CAAKU,UAAU,UAAUxB,UAAWF,EAAQ4qB,SAC1C,kBAAC,KAAD,KACE,kBAAC,KAAD,CACEE,OAAK,EACLC,KAAK,mBACLrpB,UAAWiiB,KAEb,kBAAC,KAAD,CAAOmH,OAAK,EAACC,KAAK,aAAarpB,UAAW0mB,KAC1C,kBAAC,KAAD,CACE0C,OAAK,EACLC,KAAK,sBACLrpB,UAAW0mB,KAEb,kBAAC,KAAD,CACE0C,OAAK,EACLC,KAAK,8CACLrpB,UAAW2oB,KAEb,kBAAC,KAAD,CAAO3oB,UAAWL,SAM1B,kBAAC8T,GAAA,EAAD,CAAM1E,MAAI,EAAC8E,GAAI,GAAIkC,GAAI,EAAG/V,UAAU,UAAUxB,UAAWF,EAAQ3C,MAC/D,kBAAC,GAAD,CAA2BqW,YAAY,mBACvC,kBAAC1S,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,SACfC,WAAW,SACX1F,MAAO,CAAEqC,OAAQ,QAASlC,QAAS5B,GAAMsB,QAAQ,KAEjD,kBAAC2M,GAAA,EAAD,CAAOC,SAAS,WAAhB,wGCjDG2jB,GArBc,WAAO,IAC1B3zB,EAASV,cAATU,KADyB,EAGNkL,GAAyB,CAClDgI,UAAW,CAAE9C,QAAO,OAAEpQ,QAAF,IAAEA,OAAF,EAAEA,EAAME,OADvBuoB,EAH0B,qBAkBjC,OAXA5O,qBAAU,WACR,IAAM6O,EAAWC,aAAY,gBACT5oB,KAAV,OAAJC,QAAI,IAAJA,OAAA,EAAAA,EAAME,MACRuoB,MAED,KACH,OAAO,WACLG,cAAcF,MAEf,CAACD,EAAkBzoB,IAEf,kBAAC,GAAD,OCEHsI,GAAYC,cAAW,SAACzG,GAAD,MAAY,CACvCic,UAAU,cAERsH,UAAW,QACX7d,OAAQ,EACRd,QAAS,OACTsC,eAAgB,aAChBC,WAAY,aACZmP,UAAW,SACXxS,OAAQ,SACP9D,EAAMkP,YAAYC,KAAK,MAAQ,CAC9B2N,UAAW,WAGfgV,QAAS,CACPhV,UAAW,SACXkU,UAAW,OACXpsB,QAAS,OACTuC,WAAY,kBA6FD4qB,GAzFO,WAAO,IAAD,EACav0B,cAA/BC,EADkB,EAClBA,gBAAiBsd,EADC,EACDA,UACnBlU,EAAUL,KACV2T,EAAUC,aAAcpa,GAAMkP,YAAYwG,GAAG,OAEnD,OAAIqF,EAEA,oCACE,kBAAClT,GAAA,EAAD,CACEjD,QAAQ,OACRsC,eAAe,SACfC,WAAW,SACXC,cAAc,SACd3F,MAAO,CACLqC,OAAQ,QACRC,gBAAiB/D,GAAME,QAAQc,MAAMH,OAGvC,kBAACgH,GAAA,EAAD,KACE,kBAAC,GAAD,MACA,kBAAC8H,GAAA,EAAD,CAAgB5N,MAAM,UAAUN,MAAO,CAAE4B,UAAW,aAQ5D,kBAAC2uB,GAAA,EAAD,CAAehyB,MAAOA,IACpB,kBAACiyB,GAAA,EAAD,MACCx0B,EACC,kBAACy0B,GAAA,EAAD,CACE3pB,UAAU,OACV4pB,gBAAc,EACdhd,SAAS,KACTpO,UAAWF,EAAQoV,WAEnB,qCACe,IAAZ9B,GACC,kBAAC6B,GAAA,EAAD,CACE1E,MAAI,EACJ8E,GAAI,EACJgW,GAAI,EACJ9T,GAAI,EACJvX,UAAWF,EAAQirB,QACnBvpB,UAAU,OAEV,kBAAC,GAAD,CAAS6U,kBAAmB,kBAAM,GAAO1G,MAAM,KAGnD,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAUib,OAAK,EAACU,KAAK,IAAI9Y,GAAG,qBAC5B,kBAAC,KAAD,CAAUoY,OAAK,EAACU,KAAK,WAAW9Y,GAAG,qBAEnC,kBAAC,GAAD,CACEqY,KAAK,sCACLrpB,UAAW+pB,KAEb,kBAAC,GAAD,CAAcV,KAAK,mBAAmBrpB,UAAW+pB,KACjD,kBAAC,GAAD,CAAcV,KAAK,oBAAoBrpB,UAAWme,KAElD,kBAAC,GAAD,CAAckL,KAAK,uBAAuBrpB,UAAWme,KACrD,kBAAC,GAAD,CACEkL,KAAK,qBACLrpB,UAAW0V,KAEb,kBAAC,GAAD,CACE2T,KAAK,kCACLrpB,UAAWiW,KAEb,kBAAC,GAAD,CAAcoT,KAAK,aAAarpB,UAAWspB,KAC3C,kBAAC,KAAD,CAAOF,OAAK,EAACC,KAAK,iBAAiBrpB,UAAWL,KAC9C,kBAAC,KAAD,CAAUqR,GAAG,sBAKnB,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAUoY,OAAK,EAACU,KAAK,WAAW9Y,GAAG,qBACnC,kBAAC,GAAD,CAAcqY,KAAK,oBAAoBrpB,UAAWme,KAClD,kBAAC,GAAD,CAAckL,KAAK,aAAarpB,UAAWspB,KAC3C,kBAAC,KAAD,CAAOD,KAAK,IAAIrpB,UAAWd,KAC3B,kBAAC,KAAD,CAAU8R,GAAG,SCtGvBgZ,IAASC,OACP,kBAAC,IAAD,CACEC,OAPmB5zB,0BAQnB6zB,SAPqB7zB,mCAQrB8zB,YAPwB9zB,yCAQxB+zB,mBApBuB,SAACC,GAC1Brd,OAAO9N,QAAQorB,aACb,GACAC,SAASzrB,MACTurB,GAAYA,EAASG,UACjBH,EAASG,UACTxd,OAAOyd,SAASxL,WAepByL,SARqBr0B,UAUrB,kBAAC,IAAD,KACE,kBAAC,aAAD,KACE,kBAAC,GAAD,KACE,kBAAC,IAAMyZ,SAAP,KACE,kBAAC,GAAD,WAMVya,SAASI,eAAe,W","file":"static/js/main.f34268e2.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  json: any;\n  timestamptz: any;\n  uuid: any;\n};\n\nexport type AddChannelUserOutput = {\n  __typename?: 'AddChannelUserOutput';\n  affected_rows: Scalars['Int'];\n};\n\nexport type AddChannelUserSubscriptionOutput = {\n  __typename?: 'AddChannelUserSubscriptionOutput';\n  affected_rows: Scalars['Int'];\n};\n\nexport enum AddDirectMessageChannelChannelTypeEnum {\n  /** this channel type is for chat messages in a private or public channel */\n  ChatMessage = 'CHAT_MESSAGE',\n  /** this channel type is for direct messages */\n  DirectMessage = 'DIRECT_MESSAGE'\n}\n\nexport type AddDirectMessageChannelOutput = {\n  __typename?: 'AddDirectMessageChannelOutput';\n  affected_rows: Scalars['Int'];\n};\n\n/** expression to compare columns of type Boolean. All fields are combined with logical 'AND'. */\nexport type Boolean_Comparison_Exp = {\n  _eq?: Maybe<Scalars['Boolean']>;\n  _gt?: Maybe<Scalars['Boolean']>;\n  _gte?: Maybe<Scalars['Boolean']>;\n  _in?: Maybe<Array<Scalars['Boolean']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Boolean']>;\n  _lte?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<Scalars['Boolean']>;\n  _nin?: Maybe<Array<Scalars['Boolean']>>;\n};\n\n/** expression to compare columns of type Int. All fields are combined with logical 'AND'. */\nexport type Int_Comparison_Exp = {\n  _eq?: Maybe<Scalars['Int']>;\n  _gt?: Maybe<Scalars['Int']>;\n  _gte?: Maybe<Scalars['Int']>;\n  _in?: Maybe<Array<Scalars['Int']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Int']>;\n  _lte?: Maybe<Scalars['Int']>;\n  _neq?: Maybe<Scalars['Int']>;\n  _nin?: Maybe<Array<Scalars['Int']>>;\n};\n\nexport type MyMutationBooleanComparisonExp = {\n  _eq?: Maybe<Scalars['Boolean']>;\n  _gt?: Maybe<Scalars['Boolean']>;\n  _gte?: Maybe<Scalars['Boolean']>;\n  _in?: Maybe<Array<Scalars['Boolean']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Boolean']>;\n  _lte?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<Scalars['Boolean']>;\n  _nin?: Maybe<Array<Scalars['Boolean']>>;\n};\n\nexport type MyMutationChannelBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationChannelBoolExp>>>;\n  _not?: Maybe<MyMutationChannelBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationChannelBoolExp>>>;\n  channelTypeByChannelType?: Maybe<MyMutationChannelTypeBoolExp>;\n  channel_polls?: Maybe<MyMutationChannelPollBoolExp>;\n  channel_type?: Maybe<MyMutationChannelTypeEnumComparisonExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  is_private?: Maybe<MyMutationBooleanComparisonExp>;\n  messages?: Maybe<MyMutationMessageBoolExp>;\n  name?: Maybe<MyMutationStringComparisonExp>;\n  owner_id?: Maybe<MyMutationStringComparisonExp>;\n  user?: Maybe<MyMutationUserBoolExp>;\n  user_channels?: Maybe<MyMutationUserChannelsBoolExp>;\n};\n\nexport type MyMutationChannelPollBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationChannelPollBoolExp>>>;\n  _not?: Maybe<MyMutationChannelPollBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationChannelPollBoolExp>>>;\n  channel?: Maybe<MyMutationChannelBoolExp>;\n  channel_id?: Maybe<MyMutationIntComparisonExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  poll_question?: Maybe<MyMutationPollQuestionsBoolExp>;\n  poll_questions?: Maybe<MyMutationIntComparisonExp>;\n};\n\nexport type MyMutationChannelThreadBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationChannelThreadBoolExp>>>;\n  _not?: Maybe<MyMutationChannelThreadBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationChannelThreadBoolExp>>>;\n  channel_thread_messages?: Maybe<MyMutationChannelThreadMessageBoolExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  message?: Maybe<MyMutationMessageBoolExp>;\n  message_id?: Maybe<MyMutationIntComparisonExp>;\n};\n\nexport type MyMutationChannelThreadMessageBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationChannelThreadMessageBoolExp>>>;\n  _not?: Maybe<MyMutationChannelThreadMessageBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationChannelThreadMessageBoolExp>>>;\n  channel_thread?: Maybe<MyMutationChannelThreadBoolExp>;\n  channel_thread_id?: Maybe<MyMutationIntComparisonExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  message?: Maybe<MyMutationStringComparisonExp>;\n  user?: Maybe<MyMutationUserBoolExp>;\n  user_id?: Maybe<MyMutationStringComparisonExp>;\n};\n\nexport type MyMutationChannelTypeBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationChannelTypeBoolExp>>>;\n  _not?: Maybe<MyMutationChannelTypeBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationChannelTypeBoolExp>>>;\n  channels?: Maybe<MyMutationChannelBoolExp>;\n  comment?: Maybe<MyMutationStringComparisonExp>;\n  value?: Maybe<MyMutationStringComparisonExp>;\n};\n\nexport enum MyMutationChannelTypeEnum {\n  /** this channel type is for chat messages in a private or public channel */\n  ChatMessage = 'CHAT_MESSAGE',\n  /** this channel type is for direct messages */\n  DirectMessage = 'DIRECT_MESSAGE'\n}\n\nexport type MyMutationChannelTypeEnumComparisonExp = {\n  _eq?: Maybe<MyMutationChannelTypeEnum>;\n  _in?: Maybe<Array<MyMutationChannelTypeEnum>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<MyMutationChannelTypeEnum>;\n  _nin?: Maybe<Array<MyMutationChannelTypeEnum>>;\n};\n\nexport type MyMutationIntComparisonExp = {\n  _eq?: Maybe<Scalars['Int']>;\n  _gt?: Maybe<Scalars['Int']>;\n  _gte?: Maybe<Scalars['Int']>;\n  _in?: Maybe<Array<Scalars['Int']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Int']>;\n  _lte?: Maybe<Scalars['Int']>;\n  _neq?: Maybe<Scalars['Int']>;\n  _nin?: Maybe<Array<Scalars['Int']>>;\n};\n\nexport type MyMutationMessageBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationMessageBoolExp>>>;\n  _not?: Maybe<MyMutationMessageBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationMessageBoolExp>>>;\n  channel?: Maybe<MyMutationChannelBoolExp>;\n  channel_id?: Maybe<MyMutationIntComparisonExp>;\n  channel_threads?: Maybe<MyMutationChannelThreadBoolExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  text?: Maybe<MyMutationStringComparisonExp>;\n  timestamp?: Maybe<MyMutationTimestamptzComparisonExp>;\n  user?: Maybe<MyMutationUserBoolExp>;\n  user_id?: Maybe<MyMutationStringComparisonExp>;\n};\n\nexport type MyMutationOutput = {\n  __typename?: 'MyMutationOutput';\n  affected_rows: Scalars['Int'];\n};\n\nexport type MyMutationPollAnwersBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationPollAnwersBoolExp>>>;\n  _not?: Maybe<MyMutationPollAnwersBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationPollAnwersBoolExp>>>;\n  created_at?: Maybe<MyMutationTimestamptzComparisonExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  poll_question?: Maybe<MyMutationPollQuestionsBoolExp>;\n  question_id?: Maybe<MyMutationIntComparisonExp>;\n  text?: Maybe<MyMutationStringComparisonExp>;\n  updated_at?: Maybe<MyMutationTimestamptzComparisonExp>;\n  user_id?: Maybe<MyMutationStringComparisonExp>;\n  votes?: Maybe<MyMutationIntComparisonExp>;\n};\n\nexport type MyMutationPollQuestionsBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationPollQuestionsBoolExp>>>;\n  _not?: Maybe<MyMutationPollQuestionsBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationPollQuestionsBoolExp>>>;\n  channel_polls?: Maybe<MyMutationChannelPollBoolExp>;\n  created_at?: Maybe<MyMutationTimestamptzComparisonExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  is_active?: Maybe<MyMutationBooleanComparisonExp>;\n  owner_id?: Maybe<MyMutationStringComparisonExp>;\n  poll_anwers?: Maybe<MyMutationPollAnwersBoolExp>;\n  text?: Maybe<MyMutationStringComparisonExp>;\n  updated_at?: Maybe<MyMutationTimestamptzComparisonExp>;\n};\n\nexport type MyMutationStringComparisonExp = {\n  _eq?: Maybe<Scalars['String']>;\n  _gt?: Maybe<Scalars['String']>;\n  _gte?: Maybe<Scalars['String']>;\n  _ilike?: Maybe<Scalars['String']>;\n  _in?: Maybe<Array<Scalars['String']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _like?: Maybe<Scalars['String']>;\n  _lt?: Maybe<Scalars['String']>;\n  _lte?: Maybe<Scalars['String']>;\n  _neq?: Maybe<Scalars['String']>;\n  _nilike?: Maybe<Scalars['String']>;\n  _nin?: Maybe<Array<Scalars['String']>>;\n  _nlike?: Maybe<Scalars['String']>;\n  _nsimilar?: Maybe<Scalars['String']>;\n  _similar?: Maybe<Scalars['String']>;\n};\n\nexport type MyMutationTimestamptzComparisonExp = {\n  _eq?: Maybe<Scalars['timestamptz']>;\n  _gt?: Maybe<Scalars['timestamptz']>;\n  _gte?: Maybe<Scalars['timestamptz']>;\n  _in?: Maybe<Array<Scalars['timestamptz']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['timestamptz']>;\n  _lte?: Maybe<Scalars['timestamptz']>;\n  _neq?: Maybe<Scalars['timestamptz']>;\n  _nin?: Maybe<Array<Scalars['timestamptz']>>;\n};\n\nexport type MyMutationUserBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationUserBoolExp>>>;\n  _not?: Maybe<MyMutationUserBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationUserBoolExp>>>;\n  auth0_user_id?: Maybe<MyMutationStringComparisonExp>;\n  channel_thread_messages?: Maybe<MyMutationChannelThreadMessageBoolExp>;\n  channels?: Maybe<MyMutationChannelBoolExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  last_seen?: Maybe<MyMutationTimestamptzComparisonExp>;\n  last_typed?: Maybe<MyMutationTimestamptzComparisonExp>;\n  messages?: Maybe<MyMutationMessageBoolExp>;\n  user_channels?: Maybe<MyMutationUserChannelsBoolExp>;\n  username?: Maybe<MyMutationStringComparisonExp>;\n};\n\nexport type MyMutationUserChannelsBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationUserChannelsBoolExp>>>;\n  _not?: Maybe<MyMutationUserChannelsBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationUserChannelsBoolExp>>>;\n  channel?: Maybe<MyMutationChannelBoolExp>;\n  channel_id?: Maybe<MyMutationIntComparisonExp>;\n  user?: Maybe<MyMutationUserBoolExp>;\n  user_id?: Maybe<MyMutationStringComparisonExp>;\n};\n\nexport type SampleInput = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\nexport type SampleOutput = {\n  __typename?: 'SampleOutput';\n  accessToken: Scalars['String'];\n};\n\n/** expression to compare columns of type String. All fields are combined with logical 'AND'. */\nexport type String_Comparison_Exp = {\n  _eq?: Maybe<Scalars['String']>;\n  _gt?: Maybe<Scalars['String']>;\n  _gte?: Maybe<Scalars['String']>;\n  _ilike?: Maybe<Scalars['String']>;\n  _in?: Maybe<Array<Scalars['String']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _like?: Maybe<Scalars['String']>;\n  _lt?: Maybe<Scalars['String']>;\n  _lte?: Maybe<Scalars['String']>;\n  _neq?: Maybe<Scalars['String']>;\n  _nilike?: Maybe<Scalars['String']>;\n  _nin?: Maybe<Array<Scalars['String']>>;\n  _nlike?: Maybe<Scalars['String']>;\n  _nsimilar?: Maybe<Scalars['String']>;\n  _similar?: Maybe<Scalars['String']>;\n};\n\nexport enum ValidateAndAddDirectMessageChannelTypeEnum {\n  /** this channel type is for chat messages in a private or public channel */\n  ChatMessage = 'CHAT_MESSAGE',\n  /** this channel type is for direct messages */\n  DirectMessage = 'DIRECT_MESSAGE'\n}\n\n/** columns and relationships of \"channel\" */\nexport type Channel = {\n  __typename?: 'channel';\n  /** An object relationship */\n  channelTypeByChannelType: Channel_Type;\n  /** An array relationship */\n  channel_polls: Array<Channel_Poll>;\n  /** An aggregated array relationship */\n  channel_polls_aggregate: Channel_Poll_Aggregate;\n  channel_type: Channel_Type_Enum;\n  id: Scalars['Int'];\n  is_private: Scalars['Boolean'];\n  /** An array relationship */\n  messages: Array<Message>;\n  /** An aggregated array relationship */\n  messages_aggregate: Message_Aggregate;\n  name: Scalars['String'];\n  owner_id?: Maybe<Scalars['String']>;\n  /** An object relationship */\n  user?: Maybe<User>;\n  /** An array relationship */\n  user_channels: Array<User_Channels>;\n  /** An aggregated array relationship */\n  user_channels_aggregate: User_Channels_Aggregate;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelChannel_PollsArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelChannel_Polls_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelMessagesArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelMessages_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelUser_ChannelsArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelUser_Channels_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n/** aggregated selection of \"channel\" */\nexport type Channel_Aggregate = {\n  __typename?: 'channel_aggregate';\n  aggregate?: Maybe<Channel_Aggregate_Fields>;\n  nodes: Array<Channel>;\n};\n\n/** aggregate fields of \"channel\" */\nexport type Channel_Aggregate_Fields = {\n  __typename?: 'channel_aggregate_fields';\n  avg?: Maybe<Channel_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Channel_Max_Fields>;\n  min?: Maybe<Channel_Min_Fields>;\n  stddev?: Maybe<Channel_Stddev_Fields>;\n  stddev_pop?: Maybe<Channel_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Channel_Stddev_Samp_Fields>;\n  sum?: Maybe<Channel_Sum_Fields>;\n  var_pop?: Maybe<Channel_Var_Pop_Fields>;\n  var_samp?: Maybe<Channel_Var_Samp_Fields>;\n  variance?: Maybe<Channel_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"channel\" */\nexport type Channel_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Channel_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"channel\" */\nexport type Channel_Aggregate_Order_By = {\n  avg?: Maybe<Channel_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Channel_Max_Order_By>;\n  min?: Maybe<Channel_Min_Order_By>;\n  stddev?: Maybe<Channel_Stddev_Order_By>;\n  stddev_pop?: Maybe<Channel_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Channel_Stddev_Samp_Order_By>;\n  sum?: Maybe<Channel_Sum_Order_By>;\n  var_pop?: Maybe<Channel_Var_Pop_Order_By>;\n  var_samp?: Maybe<Channel_Var_Samp_Order_By>;\n  variance?: Maybe<Channel_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"channel\" */\nexport type Channel_Arr_Rel_Insert_Input = {\n  data: Array<Channel_Insert_Input>;\n  on_conflict?: Maybe<Channel_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Channel_Avg_Fields = {\n  __typename?: 'channel_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"channel\" */\nexport type Channel_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"channel\". All fields are combined with a logical 'AND'. */\nexport type Channel_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Channel_Bool_Exp>>>;\n  _not?: Maybe<Channel_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Channel_Bool_Exp>>>;\n  channelTypeByChannelType?: Maybe<Channel_Type_Bool_Exp>;\n  channel_polls?: Maybe<Channel_Poll_Bool_Exp>;\n  channel_type?: Maybe<Channel_Type_Enum_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  is_private?: Maybe<Boolean_Comparison_Exp>;\n  messages?: Maybe<Message_Bool_Exp>;\n  name?: Maybe<String_Comparison_Exp>;\n  owner_id?: Maybe<String_Comparison_Exp>;\n  user?: Maybe<User_Bool_Exp>;\n  user_channels?: Maybe<User_Channels_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"channel\" */\nexport enum Channel_Constraint {\n  /** unique or primary key constraint */\n  ChannelNameKey = 'channel_name_key',\n  /** unique or primary key constraint */\n  ChannelPkey = 'channel_pkey'\n}\n\n/** input type for incrementing integer column in table \"channel\" */\nexport type Channel_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"channel\" */\nexport type Channel_Insert_Input = {\n  channelTypeByChannelType?: Maybe<Channel_Type_Obj_Rel_Insert_Input>;\n  channel_polls?: Maybe<Channel_Poll_Arr_Rel_Insert_Input>;\n  channel_type?: Maybe<Channel_Type_Enum>;\n  id?: Maybe<Scalars['Int']>;\n  is_private?: Maybe<Scalars['Boolean']>;\n  messages?: Maybe<Message_Arr_Rel_Insert_Input>;\n  name?: Maybe<Scalars['String']>;\n  owner_id?: Maybe<Scalars['String']>;\n  user?: Maybe<User_Obj_Rel_Insert_Input>;\n  user_channels?: Maybe<User_Channels_Arr_Rel_Insert_Input>;\n};\n\n/** aggregate max on columns */\nexport type Channel_Max_Fields = {\n  __typename?: 'channel_max_fields';\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  owner_id?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"channel\" */\nexport type Channel_Max_Order_By = {\n  id?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Channel_Min_Fields = {\n  __typename?: 'channel_min_fields';\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  owner_id?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"channel\" */\nexport type Channel_Min_Order_By = {\n  id?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"channel\" */\nexport type Channel_Mutation_Response = {\n  __typename?: 'channel_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Channel>;\n};\n\n/** input type for inserting object relation for remote table \"channel\" */\nexport type Channel_Obj_Rel_Insert_Input = {\n  data: Channel_Insert_Input;\n  on_conflict?: Maybe<Channel_On_Conflict>;\n};\n\n/** on conflict condition type for table \"channel\" */\nexport type Channel_On_Conflict = {\n  constraint: Channel_Constraint;\n  update_columns: Array<Channel_Update_Column>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"channel\" */\nexport type Channel_Order_By = {\n  channelTypeByChannelType?: Maybe<Channel_Type_Order_By>;\n  channel_polls_aggregate?: Maybe<Channel_Poll_Aggregate_Order_By>;\n  channel_type?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  is_private?: Maybe<Order_By>;\n  messages_aggregate?: Maybe<Message_Aggregate_Order_By>;\n  name?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n  user?: Maybe<User_Order_By>;\n  user_channels_aggregate?: Maybe<User_Channels_Aggregate_Order_By>;\n};\n\n/** primary key columns input for table: \"channel\" */\nexport type Channel_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** columns and relationships of \"channel_poll\" */\nexport type Channel_Poll = {\n  __typename?: 'channel_poll';\n  /** An object relationship */\n  channel: Channel;\n  channel_id: Scalars['Int'];\n  id: Scalars['Int'];\n  is_active?: Maybe<Scalars['Boolean']>;\n  /** An object relationship */\n  poll_question: Poll_Questions;\n  poll_questions: Scalars['Int'];\n};\n\n/** aggregated selection of \"channel_poll\" */\nexport type Channel_Poll_Aggregate = {\n  __typename?: 'channel_poll_aggregate';\n  aggregate?: Maybe<Channel_Poll_Aggregate_Fields>;\n  nodes: Array<Channel_Poll>;\n};\n\n/** aggregate fields of \"channel_poll\" */\nexport type Channel_Poll_Aggregate_Fields = {\n  __typename?: 'channel_poll_aggregate_fields';\n  avg?: Maybe<Channel_Poll_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Channel_Poll_Max_Fields>;\n  min?: Maybe<Channel_Poll_Min_Fields>;\n  stddev?: Maybe<Channel_Poll_Stddev_Fields>;\n  stddev_pop?: Maybe<Channel_Poll_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Channel_Poll_Stddev_Samp_Fields>;\n  sum?: Maybe<Channel_Poll_Sum_Fields>;\n  var_pop?: Maybe<Channel_Poll_Var_Pop_Fields>;\n  var_samp?: Maybe<Channel_Poll_Var_Samp_Fields>;\n  variance?: Maybe<Channel_Poll_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"channel_poll\" */\nexport type Channel_Poll_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Channel_Poll_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"channel_poll\" */\nexport type Channel_Poll_Aggregate_Order_By = {\n  avg?: Maybe<Channel_Poll_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Channel_Poll_Max_Order_By>;\n  min?: Maybe<Channel_Poll_Min_Order_By>;\n  stddev?: Maybe<Channel_Poll_Stddev_Order_By>;\n  stddev_pop?: Maybe<Channel_Poll_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Channel_Poll_Stddev_Samp_Order_By>;\n  sum?: Maybe<Channel_Poll_Sum_Order_By>;\n  var_pop?: Maybe<Channel_Poll_Var_Pop_Order_By>;\n  var_samp?: Maybe<Channel_Poll_Var_Samp_Order_By>;\n  variance?: Maybe<Channel_Poll_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"channel_poll\" */\nexport type Channel_Poll_Arr_Rel_Insert_Input = {\n  data: Array<Channel_Poll_Insert_Input>;\n  on_conflict?: Maybe<Channel_Poll_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Channel_Poll_Avg_Fields = {\n  __typename?: 'channel_poll_avg_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Avg_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"channel_poll\". All fields are combined with a logical 'AND'. */\nexport type Channel_Poll_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Channel_Poll_Bool_Exp>>>;\n  _not?: Maybe<Channel_Poll_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Channel_Poll_Bool_Exp>>>;\n  channel?: Maybe<Channel_Bool_Exp>;\n  channel_id?: Maybe<Int_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  is_active?: Maybe<Boolean_Comparison_Exp>;\n  poll_question?: Maybe<Poll_Questions_Bool_Exp>;\n  poll_questions?: Maybe<Int_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"channel_poll\" */\nexport enum Channel_Poll_Constraint {\n  /** unique or primary key constraint */\n  ChannelPollPkey = 'channel_poll_pkey'\n}\n\n/** input type for incrementing integer column in table \"channel_poll\" */\nexport type Channel_Poll_Inc_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"channel_poll\" */\nexport type Channel_Poll_Insert_Input = {\n  channel?: Maybe<Channel_Obj_Rel_Insert_Input>;\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  is_active?: Maybe<Scalars['Boolean']>;\n  poll_question?: Maybe<Poll_Questions_Obj_Rel_Insert_Input>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Channel_Poll_Max_Fields = {\n  __typename?: 'channel_poll_max_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** order by max() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Max_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Channel_Poll_Min_Fields = {\n  __typename?: 'channel_poll_min_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** order by min() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Min_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"channel_poll\" */\nexport type Channel_Poll_Mutation_Response = {\n  __typename?: 'channel_poll_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Channel_Poll>;\n};\n\n/** input type for inserting object relation for remote table \"channel_poll\" */\nexport type Channel_Poll_Obj_Rel_Insert_Input = {\n  data: Channel_Poll_Insert_Input;\n  on_conflict?: Maybe<Channel_Poll_On_Conflict>;\n};\n\n/** on conflict condition type for table \"channel_poll\" */\nexport type Channel_Poll_On_Conflict = {\n  constraint: Channel_Poll_Constraint;\n  update_columns: Array<Channel_Poll_Update_Column>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"channel_poll\" */\nexport type Channel_Poll_Order_By = {\n  channel?: Maybe<Channel_Order_By>;\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  is_active?: Maybe<Order_By>;\n  poll_question?: Maybe<Poll_Questions_Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"channel_poll\" */\nexport type Channel_Poll_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"channel_poll\" */\nexport enum Channel_Poll_Select_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsActive = 'is_active',\n  /** column name */\n  PollQuestions = 'poll_questions'\n}\n\n/** input type for updating data in table \"channel_poll\" */\nexport type Channel_Poll_Set_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  is_active?: Maybe<Scalars['Boolean']>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Channel_Poll_Stddev_Fields = {\n  __typename?: 'channel_poll_stddev_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Stddev_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Channel_Poll_Stddev_Pop_Fields = {\n  __typename?: 'channel_poll_stddev_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Stddev_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Channel_Poll_Stddev_Samp_Fields = {\n  __typename?: 'channel_poll_stddev_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Stddev_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Channel_Poll_Sum_Fields = {\n  __typename?: 'channel_poll_sum_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Sum_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** update columns of table \"channel_poll\" */\nexport enum Channel_Poll_Update_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsActive = 'is_active',\n  /** column name */\n  PollQuestions = 'poll_questions'\n}\n\n/** aggregate var_pop on columns */\nexport type Channel_Poll_Var_Pop_Fields = {\n  __typename?: 'channel_poll_var_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Var_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Channel_Poll_Var_Samp_Fields = {\n  __typename?: 'channel_poll_var_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Var_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Channel_Poll_Variance_Fields = {\n  __typename?: 'channel_poll_variance_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Variance_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** select columns of table \"channel\" */\nexport enum Channel_Select_Column {\n  /** column name */\n  ChannelType = 'channel_type',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsPrivate = 'is_private',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  OwnerId = 'owner_id'\n}\n\n/** input type for updating data in table \"channel\" */\nexport type Channel_Set_Input = {\n  channel_type?: Maybe<Channel_Type_Enum>;\n  id?: Maybe<Scalars['Int']>;\n  is_private?: Maybe<Scalars['Boolean']>;\n  name?: Maybe<Scalars['String']>;\n  owner_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type Channel_Stddev_Fields = {\n  __typename?: 'channel_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"channel\" */\nexport type Channel_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Channel_Stddev_Pop_Fields = {\n  __typename?: 'channel_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"channel\" */\nexport type Channel_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Channel_Stddev_Samp_Fields = {\n  __typename?: 'channel_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"channel\" */\nexport type Channel_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Channel_Sum_Fields = {\n  __typename?: 'channel_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"channel\" */\nexport type Channel_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"channel_thread\" */\nexport type Channel_Thread = {\n  __typename?: 'channel_thread';\n  /** An array relationship */\n  channel_thread_messages: Array<Channel_Thread_Message>;\n  /** An aggregated array relationship */\n  channel_thread_messages_aggregate: Channel_Thread_Message_Aggregate;\n  id: Scalars['Int'];\n  /** An object relationship */\n  message?: Maybe<Message>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n\n/** columns and relationships of \"channel_thread\" */\nexport type Channel_ThreadChannel_Thread_MessagesArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel_thread\" */\nexport type Channel_ThreadChannel_Thread_Messages_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n/** aggregated selection of \"channel_thread\" */\nexport type Channel_Thread_Aggregate = {\n  __typename?: 'channel_thread_aggregate';\n  aggregate?: Maybe<Channel_Thread_Aggregate_Fields>;\n  nodes: Array<Channel_Thread>;\n};\n\n/** aggregate fields of \"channel_thread\" */\nexport type Channel_Thread_Aggregate_Fields = {\n  __typename?: 'channel_thread_aggregate_fields';\n  avg?: Maybe<Channel_Thread_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Channel_Thread_Max_Fields>;\n  min?: Maybe<Channel_Thread_Min_Fields>;\n  stddev?: Maybe<Channel_Thread_Stddev_Fields>;\n  stddev_pop?: Maybe<Channel_Thread_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Channel_Thread_Stddev_Samp_Fields>;\n  sum?: Maybe<Channel_Thread_Sum_Fields>;\n  var_pop?: Maybe<Channel_Thread_Var_Pop_Fields>;\n  var_samp?: Maybe<Channel_Thread_Var_Samp_Fields>;\n  variance?: Maybe<Channel_Thread_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"channel_thread\" */\nexport type Channel_Thread_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Channel_Thread_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"channel_thread\" */\nexport type Channel_Thread_Aggregate_Order_By = {\n  avg?: Maybe<Channel_Thread_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Channel_Thread_Max_Order_By>;\n  min?: Maybe<Channel_Thread_Min_Order_By>;\n  stddev?: Maybe<Channel_Thread_Stddev_Order_By>;\n  stddev_pop?: Maybe<Channel_Thread_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Channel_Thread_Stddev_Samp_Order_By>;\n  sum?: Maybe<Channel_Thread_Sum_Order_By>;\n  var_pop?: Maybe<Channel_Thread_Var_Pop_Order_By>;\n  var_samp?: Maybe<Channel_Thread_Var_Samp_Order_By>;\n  variance?: Maybe<Channel_Thread_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"channel_thread\" */\nexport type Channel_Thread_Arr_Rel_Insert_Input = {\n  data: Array<Channel_Thread_Insert_Input>;\n  on_conflict?: Maybe<Channel_Thread_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Channel_Thread_Avg_Fields = {\n  __typename?: 'channel_thread_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"channel_thread\". All fields are combined with a logical 'AND'. */\nexport type Channel_Thread_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Channel_Thread_Bool_Exp>>>;\n  _not?: Maybe<Channel_Thread_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Channel_Thread_Bool_Exp>>>;\n  channel_thread_messages?: Maybe<Channel_Thread_Message_Bool_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  message?: Maybe<Message_Bool_Exp>;\n  message_id?: Maybe<Int_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"channel_thread\" */\nexport enum Channel_Thread_Constraint {\n  /** unique or primary key constraint */\n  ChannelThreadMessageIdKey = 'channel_thread_message_id_key',\n  /** unique or primary key constraint */\n  ChannelThreadPkey = 'channel_thread_pkey'\n}\n\n/** input type for incrementing integer column in table \"channel_thread\" */\nexport type Channel_Thread_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"channel_thread\" */\nexport type Channel_Thread_Insert_Input = {\n  channel_thread_messages?: Maybe<Channel_Thread_Message_Arr_Rel_Insert_Input>;\n  id?: Maybe<Scalars['Int']>;\n  message?: Maybe<Message_Obj_Rel_Insert_Input>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Channel_Thread_Max_Fields = {\n  __typename?: 'channel_thread_max_fields';\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by max() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Max_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"channel_thread_message\" */\nexport type Channel_Thread_Message = {\n  __typename?: 'channel_thread_message';\n  /** An object relationship */\n  channel_thread: Channel_Thread;\n  channel_thread_id: Scalars['Int'];\n  id: Scalars['Int'];\n  image?: Maybe<Scalars['String']>;\n  message: Scalars['String'];\n  timestamp: Scalars['timestamptz'];\n  /** An object relationship */\n  user: User;\n  user_id: Scalars['String'];\n};\n\n/** aggregated selection of \"channel_thread_message\" */\nexport type Channel_Thread_Message_Aggregate = {\n  __typename?: 'channel_thread_message_aggregate';\n  aggregate?: Maybe<Channel_Thread_Message_Aggregate_Fields>;\n  nodes: Array<Channel_Thread_Message>;\n};\n\n/** aggregate fields of \"channel_thread_message\" */\nexport type Channel_Thread_Message_Aggregate_Fields = {\n  __typename?: 'channel_thread_message_aggregate_fields';\n  avg?: Maybe<Channel_Thread_Message_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Channel_Thread_Message_Max_Fields>;\n  min?: Maybe<Channel_Thread_Message_Min_Fields>;\n  stddev?: Maybe<Channel_Thread_Message_Stddev_Fields>;\n  stddev_pop?: Maybe<Channel_Thread_Message_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Channel_Thread_Message_Stddev_Samp_Fields>;\n  sum?: Maybe<Channel_Thread_Message_Sum_Fields>;\n  var_pop?: Maybe<Channel_Thread_Message_Var_Pop_Fields>;\n  var_samp?: Maybe<Channel_Thread_Message_Var_Samp_Fields>;\n  variance?: Maybe<Channel_Thread_Message_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"channel_thread_message\" */\nexport type Channel_Thread_Message_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Aggregate_Order_By = {\n  avg?: Maybe<Channel_Thread_Message_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Channel_Thread_Message_Max_Order_By>;\n  min?: Maybe<Channel_Thread_Message_Min_Order_By>;\n  stddev?: Maybe<Channel_Thread_Message_Stddev_Order_By>;\n  stddev_pop?: Maybe<Channel_Thread_Message_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Channel_Thread_Message_Stddev_Samp_Order_By>;\n  sum?: Maybe<Channel_Thread_Message_Sum_Order_By>;\n  var_pop?: Maybe<Channel_Thread_Message_Var_Pop_Order_By>;\n  var_samp?: Maybe<Channel_Thread_Message_Var_Samp_Order_By>;\n  variance?: Maybe<Channel_Thread_Message_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Arr_Rel_Insert_Input = {\n  data: Array<Channel_Thread_Message_Insert_Input>;\n  on_conflict?: Maybe<Channel_Thread_Message_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Channel_Thread_Message_Avg_Fields = {\n  __typename?: 'channel_thread_message_avg_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Avg_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"channel_thread_message\". All fields are combined with a logical 'AND'. */\nexport type Channel_Thread_Message_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Channel_Thread_Message_Bool_Exp>>>;\n  _not?: Maybe<Channel_Thread_Message_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Channel_Thread_Message_Bool_Exp>>>;\n  channel_thread?: Maybe<Channel_Thread_Bool_Exp>;\n  channel_thread_id?: Maybe<Int_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  image?: Maybe<String_Comparison_Exp>;\n  message?: Maybe<String_Comparison_Exp>;\n  timestamp?: Maybe<Timestamptz_Comparison_Exp>;\n  user?: Maybe<User_Bool_Exp>;\n  user_id?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"channel_thread_message\" */\nexport enum Channel_Thread_Message_Constraint {\n  /** unique or primary key constraint */\n  ChannelThreadMessagePkey = 'channel_thread_message_pkey'\n}\n\n/** input type for incrementing integer column in table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Inc_Input = {\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Insert_Input = {\n  channel_thread?: Maybe<Channel_Thread_Obj_Rel_Insert_Input>;\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  message?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user?: Maybe<User_Obj_Rel_Insert_Input>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Channel_Thread_Message_Max_Fields = {\n  __typename?: 'channel_thread_message_max_fields';\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  message?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Max_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  message?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Channel_Thread_Message_Min_Fields = {\n  __typename?: 'channel_thread_message_min_fields';\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  message?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Min_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  message?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Mutation_Response = {\n  __typename?: 'channel_thread_message_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Channel_Thread_Message>;\n};\n\n/** input type for inserting object relation for remote table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Obj_Rel_Insert_Input = {\n  data: Channel_Thread_Message_Insert_Input;\n  on_conflict?: Maybe<Channel_Thread_Message_On_Conflict>;\n};\n\n/** on conflict condition type for table \"channel_thread_message\" */\nexport type Channel_Thread_Message_On_Conflict = {\n  constraint: Channel_Thread_Message_Constraint;\n  update_columns: Array<Channel_Thread_Message_Update_Column>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"channel_thread_message\" */\nexport type Channel_Thread_Message_Order_By = {\n  channel_thread?: Maybe<Channel_Thread_Order_By>;\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  message?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user?: Maybe<User_Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"channel_thread_message\" */\nexport type Channel_Thread_Message_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"channel_thread_message\" */\nexport enum Channel_Thread_Message_Select_Column {\n  /** column name */\n  ChannelThreadId = 'channel_thread_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Image = 'image',\n  /** column name */\n  Message = 'message',\n  /** column name */\n  Timestamp = 'timestamp',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** input type for updating data in table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Set_Input = {\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  message?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type Channel_Thread_Message_Stddev_Fields = {\n  __typename?: 'channel_thread_message_stddev_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Stddev_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Channel_Thread_Message_Stddev_Pop_Fields = {\n  __typename?: 'channel_thread_message_stddev_pop_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Stddev_Pop_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Channel_Thread_Message_Stddev_Samp_Fields = {\n  __typename?: 'channel_thread_message_stddev_samp_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Stddev_Samp_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Channel_Thread_Message_Sum_Fields = {\n  __typename?: 'channel_thread_message_sum_fields';\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Sum_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"channel_thread_message\" */\nexport enum Channel_Thread_Message_Update_Column {\n  /** column name */\n  ChannelThreadId = 'channel_thread_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Image = 'image',\n  /** column name */\n  Message = 'message',\n  /** column name */\n  Timestamp = 'timestamp',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Channel_Thread_Message_Var_Pop_Fields = {\n  __typename?: 'channel_thread_message_var_pop_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Var_Pop_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Channel_Thread_Message_Var_Samp_Fields = {\n  __typename?: 'channel_thread_message_var_samp_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Var_Samp_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Channel_Thread_Message_Variance_Fields = {\n  __typename?: 'channel_thread_message_variance_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Variance_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Channel_Thread_Min_Fields = {\n  __typename?: 'channel_thread_min_fields';\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by min() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Min_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"channel_thread\" */\nexport type Channel_Thread_Mutation_Response = {\n  __typename?: 'channel_thread_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Channel_Thread>;\n};\n\n/** input type for inserting object relation for remote table \"channel_thread\" */\nexport type Channel_Thread_Obj_Rel_Insert_Input = {\n  data: Channel_Thread_Insert_Input;\n  on_conflict?: Maybe<Channel_Thread_On_Conflict>;\n};\n\n/** on conflict condition type for table \"channel_thread\" */\nexport type Channel_Thread_On_Conflict = {\n  constraint: Channel_Thread_Constraint;\n  update_columns: Array<Channel_Thread_Update_Column>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"channel_thread\" */\nexport type Channel_Thread_Order_By = {\n  channel_thread_messages_aggregate?: Maybe<Channel_Thread_Message_Aggregate_Order_By>;\n  id?: Maybe<Order_By>;\n  message?: Maybe<Message_Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"channel_thread\" */\nexport type Channel_Thread_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"channel_thread\" */\nexport enum Channel_Thread_Select_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  MessageId = 'message_id'\n}\n\n/** input type for updating data in table \"channel_thread\" */\nexport type Channel_Thread_Set_Input = {\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Channel_Thread_Stddev_Fields = {\n  __typename?: 'channel_thread_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Channel_Thread_Stddev_Pop_Fields = {\n  __typename?: 'channel_thread_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Channel_Thread_Stddev_Samp_Fields = {\n  __typename?: 'channel_thread_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Channel_Thread_Sum_Fields = {\n  __typename?: 'channel_thread_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"channel_thread\" */\nexport enum Channel_Thread_Update_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  MessageId = 'message_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Channel_Thread_Var_Pop_Fields = {\n  __typename?: 'channel_thread_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Channel_Thread_Var_Samp_Fields = {\n  __typename?: 'channel_thread_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Channel_Thread_Variance_Fields = {\n  __typename?: 'channel_thread_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"channel_type\" */\nexport type Channel_Type = {\n  __typename?: 'channel_type';\n  /** An array relationship */\n  channels: Array<Channel>;\n  /** An aggregated array relationship */\n  channels_aggregate: Channel_Aggregate;\n  comment?: Maybe<Scalars['String']>;\n  value: Scalars['String'];\n};\n\n\n/** columns and relationships of \"channel_type\" */\nexport type Channel_TypeChannelsArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel_type\" */\nexport type Channel_TypeChannels_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n/** aggregated selection of \"channel_type\" */\nexport type Channel_Type_Aggregate = {\n  __typename?: 'channel_type_aggregate';\n  aggregate?: Maybe<Channel_Type_Aggregate_Fields>;\n  nodes: Array<Channel_Type>;\n};\n\n/** aggregate fields of \"channel_type\" */\nexport type Channel_Type_Aggregate_Fields = {\n  __typename?: 'channel_type_aggregate_fields';\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Channel_Type_Max_Fields>;\n  min?: Maybe<Channel_Type_Min_Fields>;\n};\n\n\n/** aggregate fields of \"channel_type\" */\nexport type Channel_Type_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Channel_Type_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"channel_type\" */\nexport type Channel_Type_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<Channel_Type_Max_Order_By>;\n  min?: Maybe<Channel_Type_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"channel_type\" */\nexport type Channel_Type_Arr_Rel_Insert_Input = {\n  data: Array<Channel_Type_Insert_Input>;\n  on_conflict?: Maybe<Channel_Type_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"channel_type\". All fields are combined with a logical 'AND'. */\nexport type Channel_Type_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Channel_Type_Bool_Exp>>>;\n  _not?: Maybe<Channel_Type_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Channel_Type_Bool_Exp>>>;\n  channels?: Maybe<Channel_Bool_Exp>;\n  comment?: Maybe<String_Comparison_Exp>;\n  value?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"channel_type\" */\nexport enum Channel_Type_Constraint {\n  /** unique or primary key constraint */\n  ChannelTypePkey = 'channel_type_pkey'\n}\n\nexport enum Channel_Type_Enum {\n  /** This represents a chat message */\n  ChatMessage = 'CHAT_MESSAGE',\n  /** This represents a direct message */\n  DirectMessage = 'DIRECT_MESSAGE'\n}\n\n/** expression to compare columns of type channel_type_enum. All fields are combined with logical 'AND'. */\nexport type Channel_Type_Enum_Comparison_Exp = {\n  _eq?: Maybe<Channel_Type_Enum>;\n  _in?: Maybe<Array<Channel_Type_Enum>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<Channel_Type_Enum>;\n  _nin?: Maybe<Array<Channel_Type_Enum>>;\n};\n\n/** input type for inserting data into table \"channel_type\" */\nexport type Channel_Type_Insert_Input = {\n  channels?: Maybe<Channel_Arr_Rel_Insert_Input>;\n  comment?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Channel_Type_Max_Fields = {\n  __typename?: 'channel_type_max_fields';\n  comment?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"channel_type\" */\nexport type Channel_Type_Max_Order_By = {\n  comment?: Maybe<Order_By>;\n  value?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Channel_Type_Min_Fields = {\n  __typename?: 'channel_type_min_fields';\n  comment?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"channel_type\" */\nexport type Channel_Type_Min_Order_By = {\n  comment?: Maybe<Order_By>;\n  value?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"channel_type\" */\nexport type Channel_Type_Mutation_Response = {\n  __typename?: 'channel_type_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Channel_Type>;\n};\n\n/** input type for inserting object relation for remote table \"channel_type\" */\nexport type Channel_Type_Obj_Rel_Insert_Input = {\n  data: Channel_Type_Insert_Input;\n  on_conflict?: Maybe<Channel_Type_On_Conflict>;\n};\n\n/** on conflict condition type for table \"channel_type\" */\nexport type Channel_Type_On_Conflict = {\n  constraint: Channel_Type_Constraint;\n  update_columns: Array<Channel_Type_Update_Column>;\n  where?: Maybe<Channel_Type_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"channel_type\" */\nexport type Channel_Type_Order_By = {\n  channels_aggregate?: Maybe<Channel_Aggregate_Order_By>;\n  comment?: Maybe<Order_By>;\n  value?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"channel_type\" */\nexport type Channel_Type_Pk_Columns_Input = {\n  value: Scalars['String'];\n};\n\n/** select columns of table \"channel_type\" */\nexport enum Channel_Type_Select_Column {\n  /** column name */\n  Comment = 'comment',\n  /** column name */\n  Value = 'value'\n}\n\n/** input type for updating data in table \"channel_type\" */\nexport type Channel_Type_Set_Input = {\n  comment?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n};\n\n/** update columns of table \"channel_type\" */\nexport enum Channel_Type_Update_Column {\n  /** column name */\n  Comment = 'comment',\n  /** column name */\n  Value = 'value'\n}\n\n/** update columns of table \"channel\" */\nexport enum Channel_Update_Column {\n  /** column name */\n  ChannelType = 'channel_type',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsPrivate = 'is_private',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  OwnerId = 'owner_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Channel_Var_Pop_Fields = {\n  __typename?: 'channel_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"channel\" */\nexport type Channel_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Channel_Var_Samp_Fields = {\n  __typename?: 'channel_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"channel\" */\nexport type Channel_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Channel_Variance_Fields = {\n  __typename?: 'channel_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"channel\" */\nexport type Channel_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n\n/** expression to compare columns of type json. All fields are combined with logical 'AND'. */\nexport type Json_Comparison_Exp = {\n  _eq?: Maybe<Scalars['json']>;\n  _gt?: Maybe<Scalars['json']>;\n  _gte?: Maybe<Scalars['json']>;\n  _in?: Maybe<Array<Scalars['json']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['json']>;\n  _lte?: Maybe<Scalars['json']>;\n  _neq?: Maybe<Scalars['json']>;\n  _nin?: Maybe<Array<Scalars['json']>>;\n};\n\n/** columns and relationships of \"message\" */\nexport type Message = {\n  __typename?: 'message';\n  /** An object relationship */\n  channel: Channel;\n  channel_id: Scalars['Int'];\n  /** An object relationship */\n  channel_thread?: Maybe<Channel_Thread>;\n  /** An array relationship */\n  channel_threads: Array<Channel_Thread>;\n  /** An aggregated array relationship */\n  channel_threads_aggregate: Channel_Thread_Aggregate;\n  deleted?: Maybe<Scalars['Boolean']>;\n  id: Scalars['Int'];\n  image?: Maybe<Scalars['String']>;\n  text: Scalars['String'];\n  timestamp: Scalars['timestamptz'];\n  /** An object relationship */\n  user: User;\n  user_id: Scalars['String'];\n};\n\n\n/** columns and relationships of \"message\" */\nexport type MessageChannel_ThreadsArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"message\" */\nexport type MessageChannel_Threads_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n/** aggregated selection of \"message\" */\nexport type Message_Aggregate = {\n  __typename?: 'message_aggregate';\n  aggregate?: Maybe<Message_Aggregate_Fields>;\n  nodes: Array<Message>;\n};\n\n/** aggregate fields of \"message\" */\nexport type Message_Aggregate_Fields = {\n  __typename?: 'message_aggregate_fields';\n  avg?: Maybe<Message_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Message_Max_Fields>;\n  min?: Maybe<Message_Min_Fields>;\n  stddev?: Maybe<Message_Stddev_Fields>;\n  stddev_pop?: Maybe<Message_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Message_Stddev_Samp_Fields>;\n  sum?: Maybe<Message_Sum_Fields>;\n  var_pop?: Maybe<Message_Var_Pop_Fields>;\n  var_samp?: Maybe<Message_Var_Samp_Fields>;\n  variance?: Maybe<Message_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"message\" */\nexport type Message_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Message_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"message\" */\nexport type Message_Aggregate_Order_By = {\n  avg?: Maybe<Message_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Message_Max_Order_By>;\n  min?: Maybe<Message_Min_Order_By>;\n  stddev?: Maybe<Message_Stddev_Order_By>;\n  stddev_pop?: Maybe<Message_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Message_Stddev_Samp_Order_By>;\n  sum?: Maybe<Message_Sum_Order_By>;\n  var_pop?: Maybe<Message_Var_Pop_Order_By>;\n  var_samp?: Maybe<Message_Var_Samp_Order_By>;\n  variance?: Maybe<Message_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"message\" */\nexport type Message_Arr_Rel_Insert_Input = {\n  data: Array<Message_Insert_Input>;\n  on_conflict?: Maybe<Message_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Message_Avg_Fields = {\n  __typename?: 'message_avg_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"message\" */\nexport type Message_Avg_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"message\". All fields are combined with a logical 'AND'. */\nexport type Message_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Message_Bool_Exp>>>;\n  _not?: Maybe<Message_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Message_Bool_Exp>>>;\n  channel?: Maybe<Channel_Bool_Exp>;\n  channel_id?: Maybe<Int_Comparison_Exp>;\n  channel_thread?: Maybe<Channel_Thread_Bool_Exp>;\n  channel_threads?: Maybe<Channel_Thread_Bool_Exp>;\n  deleted?: Maybe<Boolean_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  image?: Maybe<String_Comparison_Exp>;\n  text?: Maybe<String_Comparison_Exp>;\n  timestamp?: Maybe<Timestamptz_Comparison_Exp>;\n  user?: Maybe<User_Bool_Exp>;\n  user_id?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"message\" */\nexport enum Message_Constraint {\n  /** unique or primary key constraint */\n  MessagePkey = 'message_pkey'\n}\n\n/** columns and relationships of \"message_cursor\" */\nexport type Message_Cursor = {\n  __typename?: 'message_cursor';\n  channel_id: Scalars['Int'];\n  id: Scalars['Int'];\n  message_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n/** aggregated selection of \"message_cursor\" */\nexport type Message_Cursor_Aggregate = {\n  __typename?: 'message_cursor_aggregate';\n  aggregate?: Maybe<Message_Cursor_Aggregate_Fields>;\n  nodes: Array<Message_Cursor>;\n};\n\n/** aggregate fields of \"message_cursor\" */\nexport type Message_Cursor_Aggregate_Fields = {\n  __typename?: 'message_cursor_aggregate_fields';\n  avg?: Maybe<Message_Cursor_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Message_Cursor_Max_Fields>;\n  min?: Maybe<Message_Cursor_Min_Fields>;\n  stddev?: Maybe<Message_Cursor_Stddev_Fields>;\n  stddev_pop?: Maybe<Message_Cursor_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Message_Cursor_Stddev_Samp_Fields>;\n  sum?: Maybe<Message_Cursor_Sum_Fields>;\n  var_pop?: Maybe<Message_Cursor_Var_Pop_Fields>;\n  var_samp?: Maybe<Message_Cursor_Var_Samp_Fields>;\n  variance?: Maybe<Message_Cursor_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"message_cursor\" */\nexport type Message_Cursor_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Message_Cursor_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"message_cursor\" */\nexport type Message_Cursor_Aggregate_Order_By = {\n  avg?: Maybe<Message_Cursor_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Message_Cursor_Max_Order_By>;\n  min?: Maybe<Message_Cursor_Min_Order_By>;\n  stddev?: Maybe<Message_Cursor_Stddev_Order_By>;\n  stddev_pop?: Maybe<Message_Cursor_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Message_Cursor_Stddev_Samp_Order_By>;\n  sum?: Maybe<Message_Cursor_Sum_Order_By>;\n  var_pop?: Maybe<Message_Cursor_Var_Pop_Order_By>;\n  var_samp?: Maybe<Message_Cursor_Var_Samp_Order_By>;\n  variance?: Maybe<Message_Cursor_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"message_cursor\" */\nexport type Message_Cursor_Arr_Rel_Insert_Input = {\n  data: Array<Message_Cursor_Insert_Input>;\n  on_conflict?: Maybe<Message_Cursor_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Message_Cursor_Avg_Fields = {\n  __typename?: 'message_cursor_avg_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Avg_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"message_cursor\". All fields are combined with a logical 'AND'. */\nexport type Message_Cursor_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Message_Cursor_Bool_Exp>>>;\n  _not?: Maybe<Message_Cursor_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Message_Cursor_Bool_Exp>>>;\n  channel_id?: Maybe<Int_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  message_id?: Maybe<Int_Comparison_Exp>;\n  user_id?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"message_cursor\" */\nexport enum Message_Cursor_Constraint {\n  /** unique or primary key constraint */\n  MessageCursorChannelIdUserIdKey = 'message_cursor_channel_id_user_id_key',\n  /** unique or primary key constraint */\n  MessageCursorPkey = 'message_cursor_pkey'\n}\n\n/** input type for incrementing integer column in table \"message_cursor\" */\nexport type Message_Cursor_Inc_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"message_cursor\" */\nexport type Message_Cursor_Insert_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Message_Cursor_Max_Fields = {\n  __typename?: 'message_cursor_max_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Max_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Message_Cursor_Min_Fields = {\n  __typename?: 'message_cursor_min_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Min_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"message_cursor\" */\nexport type Message_Cursor_Mutation_Response = {\n  __typename?: 'message_cursor_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Message_Cursor>;\n};\n\n/** input type for inserting object relation for remote table \"message_cursor\" */\nexport type Message_Cursor_Obj_Rel_Insert_Input = {\n  data: Message_Cursor_Insert_Input;\n  on_conflict?: Maybe<Message_Cursor_On_Conflict>;\n};\n\n/** on conflict condition type for table \"message_cursor\" */\nexport type Message_Cursor_On_Conflict = {\n  constraint: Message_Cursor_Constraint;\n  update_columns: Array<Message_Cursor_Update_Column>;\n  where?: Maybe<Message_Cursor_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"message_cursor\" */\nexport type Message_Cursor_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"message_cursor\" */\nexport type Message_Cursor_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"message_cursor\" */\nexport enum Message_Cursor_Select_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  MessageId = 'message_id',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** input type for updating data in table \"message_cursor\" */\nexport type Message_Cursor_Set_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type Message_Cursor_Stddev_Fields = {\n  __typename?: 'message_cursor_stddev_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Stddev_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Message_Cursor_Stddev_Pop_Fields = {\n  __typename?: 'message_cursor_stddev_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Stddev_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Message_Cursor_Stddev_Samp_Fields = {\n  __typename?: 'message_cursor_stddev_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Stddev_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Message_Cursor_Sum_Fields = {\n  __typename?: 'message_cursor_sum_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Sum_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"message_cursor\" */\nexport enum Message_Cursor_Update_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  MessageId = 'message_id',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Message_Cursor_Var_Pop_Fields = {\n  __typename?: 'message_cursor_var_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Var_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Message_Cursor_Var_Samp_Fields = {\n  __typename?: 'message_cursor_var_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Var_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Message_Cursor_Variance_Fields = {\n  __typename?: 'message_cursor_variance_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Variance_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** input type for incrementing integer column in table \"message\" */\nexport type Message_Inc_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"message\" */\nexport type Message_Insert_Input = {\n  channel?: Maybe<Channel_Obj_Rel_Insert_Input>;\n  channel_id?: Maybe<Scalars['Int']>;\n  channel_thread?: Maybe<Channel_Thread_Obj_Rel_Insert_Input>;\n  channel_threads?: Maybe<Channel_Thread_Arr_Rel_Insert_Input>;\n  deleted?: Maybe<Scalars['Boolean']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user?: Maybe<User_Obj_Rel_Insert_Input>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Message_Max_Fields = {\n  __typename?: 'message_max_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"message\" */\nexport type Message_Max_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Message_Min_Fields = {\n  __typename?: 'message_min_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"message\" */\nexport type Message_Min_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"message\" */\nexport type Message_Mutation_Response = {\n  __typename?: 'message_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Message>;\n};\n\n/** input type for inserting object relation for remote table \"message\" */\nexport type Message_Obj_Rel_Insert_Input = {\n  data: Message_Insert_Input;\n  on_conflict?: Maybe<Message_On_Conflict>;\n};\n\n/** on conflict condition type for table \"message\" */\nexport type Message_On_Conflict = {\n  constraint: Message_Constraint;\n  update_columns: Array<Message_Update_Column>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"message\" */\nexport type Message_Order_By = {\n  channel?: Maybe<Channel_Order_By>;\n  channel_id?: Maybe<Order_By>;\n  channel_thread?: Maybe<Channel_Thread_Order_By>;\n  channel_threads_aggregate?: Maybe<Channel_Thread_Aggregate_Order_By>;\n  deleted?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user?: Maybe<User_Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"message\" */\nexport type Message_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"message\" */\nexport enum Message_Select_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Deleted = 'deleted',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Image = 'image',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  Timestamp = 'timestamp',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** input type for updating data in table \"message\" */\nexport type Message_Set_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  deleted?: Maybe<Scalars['Boolean']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type Message_Stddev_Fields = {\n  __typename?: 'message_stddev_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"message\" */\nexport type Message_Stddev_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Message_Stddev_Pop_Fields = {\n  __typename?: 'message_stddev_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"message\" */\nexport type Message_Stddev_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Message_Stddev_Samp_Fields = {\n  __typename?: 'message_stddev_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"message\" */\nexport type Message_Stddev_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Message_Sum_Fields = {\n  __typename?: 'message_sum_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"message\" */\nexport type Message_Sum_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"message\" */\nexport enum Message_Update_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Deleted = 'deleted',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Image = 'image',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  Timestamp = 'timestamp',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Message_Var_Pop_Fields = {\n  __typename?: 'message_var_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"message\" */\nexport type Message_Var_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Message_Var_Samp_Fields = {\n  __typename?: 'message_var_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"message\" */\nexport type Message_Var_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Message_Variance_Fields = {\n  __typename?: 'message_variance_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"message\" */\nexport type Message_Variance_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** mutation root */\nexport type Mutation_Root = {\n  __typename?: 'mutation_root';\n  /** perform the action: \"addChannelUser\" */\n  addChannelUser?: Maybe<AddChannelUserOutput>;\n  /** delete data from the table: \"channel\" */\n  delete_channel?: Maybe<Channel_Mutation_Response>;\n  /** delete single row from the table: \"channel\" */\n  delete_channel_by_pk?: Maybe<Channel>;\n  /** delete data from the table: \"channel_poll\" */\n  delete_channel_poll?: Maybe<Channel_Poll_Mutation_Response>;\n  /** delete single row from the table: \"channel_poll\" */\n  delete_channel_poll_by_pk?: Maybe<Channel_Poll>;\n  /** delete data from the table: \"channel_thread\" */\n  delete_channel_thread?: Maybe<Channel_Thread_Mutation_Response>;\n  /** delete single row from the table: \"channel_thread\" */\n  delete_channel_thread_by_pk?: Maybe<Channel_Thread>;\n  /** delete data from the table: \"channel_thread_message\" */\n  delete_channel_thread_message?: Maybe<Channel_Thread_Message_Mutation_Response>;\n  /** delete single row from the table: \"channel_thread_message\" */\n  delete_channel_thread_message_by_pk?: Maybe<Channel_Thread_Message>;\n  /** delete data from the table: \"channel_type\" */\n  delete_channel_type?: Maybe<Channel_Type_Mutation_Response>;\n  /** delete single row from the table: \"channel_type\" */\n  delete_channel_type_by_pk?: Maybe<Channel_Type>;\n  /** delete data from the table: \"message\" */\n  delete_message?: Maybe<Message_Mutation_Response>;\n  /** delete single row from the table: \"message\" */\n  delete_message_by_pk?: Maybe<Message>;\n  /** delete data from the table: \"message_cursor\" */\n  delete_message_cursor?: Maybe<Message_Cursor_Mutation_Response>;\n  /** delete single row from the table: \"message_cursor\" */\n  delete_message_cursor_by_pk?: Maybe<Message_Cursor>;\n  /** delete data from the table: \"poll_anwers\" */\n  delete_poll_anwers?: Maybe<Poll_Anwers_Mutation_Response>;\n  /** delete single row from the table: \"poll_anwers\" */\n  delete_poll_anwers_by_pk?: Maybe<Poll_Anwers>;\n  /** delete data from the table: \"poll_questions\" */\n  delete_poll_questions?: Maybe<Poll_Questions_Mutation_Response>;\n  /** delete single row from the table: \"poll_questions\" */\n  delete_poll_questions_by_pk?: Maybe<Poll_Questions>;\n  /** delete data from the table: \"user\" */\n  delete_user?: Maybe<User_Mutation_Response>;\n  /** delete single row from the table: \"user\" */\n  delete_user_by_pk?: Maybe<User>;\n  /** delete data from the table: \"user_channels\" */\n  delete_user_channels?: Maybe<User_Channels_Mutation_Response>;\n  /** delete single row from the table: \"user_channels\" */\n  delete_user_channels_by_pk?: Maybe<User_Channels>;\n  /** delete data from the table: \"user_online\" */\n  delete_user_online?: Maybe<User_Online_Mutation_Response>;\n  /** delete data from the table: \"user_typing\" */\n  delete_user_typing?: Maybe<User_Typing_Mutation_Response>;\n  /** delete data from the table: \"user_votes\" */\n  delete_user_votes?: Maybe<User_Votes_Mutation_Response>;\n  /** delete single row from the table: \"user_votes\" */\n  delete_user_votes_by_pk?: Maybe<User_Votes>;\n  /** insert data into the table: \"channel\" */\n  insert_channel?: Maybe<Channel_Mutation_Response>;\n  /** insert a single row into the table: \"channel\" */\n  insert_channel_one?: Maybe<Channel>;\n  /** insert data into the table: \"channel_poll\" */\n  insert_channel_poll?: Maybe<Channel_Poll_Mutation_Response>;\n  /** insert a single row into the table: \"channel_poll\" */\n  insert_channel_poll_one?: Maybe<Channel_Poll>;\n  /** insert data into the table: \"channel_thread\" */\n  insert_channel_thread?: Maybe<Channel_Thread_Mutation_Response>;\n  /** insert data into the table: \"channel_thread_message\" */\n  insert_channel_thread_message?: Maybe<Channel_Thread_Message_Mutation_Response>;\n  /** insert a single row into the table: \"channel_thread_message\" */\n  insert_channel_thread_message_one?: Maybe<Channel_Thread_Message>;\n  /** insert a single row into the table: \"channel_thread\" */\n  insert_channel_thread_one?: Maybe<Channel_Thread>;\n  /** insert data into the table: \"channel_type\" */\n  insert_channel_type?: Maybe<Channel_Type_Mutation_Response>;\n  /** insert a single row into the table: \"channel_type\" */\n  insert_channel_type_one?: Maybe<Channel_Type>;\n  /** insert data into the table: \"message\" */\n  insert_message?: Maybe<Message_Mutation_Response>;\n  /** insert data into the table: \"message_cursor\" */\n  insert_message_cursor?: Maybe<Message_Cursor_Mutation_Response>;\n  /** insert a single row into the table: \"message_cursor\" */\n  insert_message_cursor_one?: Maybe<Message_Cursor>;\n  /** insert a single row into the table: \"message\" */\n  insert_message_one?: Maybe<Message>;\n  /** insert data into the table: \"poll_anwers\" */\n  insert_poll_anwers?: Maybe<Poll_Anwers_Mutation_Response>;\n  /** insert a single row into the table: \"poll_anwers\" */\n  insert_poll_anwers_one?: Maybe<Poll_Anwers>;\n  /** insert data into the table: \"poll_questions\" */\n  insert_poll_questions?: Maybe<Poll_Questions_Mutation_Response>;\n  /** insert a single row into the table: \"poll_questions\" */\n  insert_poll_questions_one?: Maybe<Poll_Questions>;\n  /** insert data into the table: \"user\" */\n  insert_user?: Maybe<User_Mutation_Response>;\n  /** insert data into the table: \"user_channels\" */\n  insert_user_channels?: Maybe<User_Channels_Mutation_Response>;\n  /** insert a single row into the table: \"user_channels\" */\n  insert_user_channels_one?: Maybe<User_Channels>;\n  /** insert a single row into the table: \"user\" */\n  insert_user_one?: Maybe<User>;\n  /** insert data into the table: \"user_online\" */\n  insert_user_online?: Maybe<User_Online_Mutation_Response>;\n  /** insert a single row into the table: \"user_online\" */\n  insert_user_online_one?: Maybe<User_Online>;\n  /** insert data into the table: \"user_typing\" */\n  insert_user_typing?: Maybe<User_Typing_Mutation_Response>;\n  /** insert a single row into the table: \"user_typing\" */\n  insert_user_typing_one?: Maybe<User_Typing>;\n  /** insert data into the table: \"user_votes\" */\n  insert_user_votes?: Maybe<User_Votes_Mutation_Response>;\n  /** insert a single row into the table: \"user_votes\" */\n  insert_user_votes_one?: Maybe<User_Votes>;\n  /** update data of the table: \"channel\" */\n  update_channel?: Maybe<Channel_Mutation_Response>;\n  /** update single row of the table: \"channel\" */\n  update_channel_by_pk?: Maybe<Channel>;\n  /** update data of the table: \"channel_poll\" */\n  update_channel_poll?: Maybe<Channel_Poll_Mutation_Response>;\n  /** update single row of the table: \"channel_poll\" */\n  update_channel_poll_by_pk?: Maybe<Channel_Poll>;\n  /** update data of the table: \"channel_thread\" */\n  update_channel_thread?: Maybe<Channel_Thread_Mutation_Response>;\n  /** update single row of the table: \"channel_thread\" */\n  update_channel_thread_by_pk?: Maybe<Channel_Thread>;\n  /** update data of the table: \"channel_thread_message\" */\n  update_channel_thread_message?: Maybe<Channel_Thread_Message_Mutation_Response>;\n  /** update single row of the table: \"channel_thread_message\" */\n  update_channel_thread_message_by_pk?: Maybe<Channel_Thread_Message>;\n  /** update data of the table: \"channel_type\" */\n  update_channel_type?: Maybe<Channel_Type_Mutation_Response>;\n  /** update single row of the table: \"channel_type\" */\n  update_channel_type_by_pk?: Maybe<Channel_Type>;\n  /** update data of the table: \"message\" */\n  update_message?: Maybe<Message_Mutation_Response>;\n  /** update single row of the table: \"message\" */\n  update_message_by_pk?: Maybe<Message>;\n  /** update data of the table: \"message_cursor\" */\n  update_message_cursor?: Maybe<Message_Cursor_Mutation_Response>;\n  /** update single row of the table: \"message_cursor\" */\n  update_message_cursor_by_pk?: Maybe<Message_Cursor>;\n  /** update data of the table: \"poll_anwers\" */\n  update_poll_anwers?: Maybe<Poll_Anwers_Mutation_Response>;\n  /** update single row of the table: \"poll_anwers\" */\n  update_poll_anwers_by_pk?: Maybe<Poll_Anwers>;\n  /** update data of the table: \"poll_questions\" */\n  update_poll_questions?: Maybe<Poll_Questions_Mutation_Response>;\n  /** update single row of the table: \"poll_questions\" */\n  update_poll_questions_by_pk?: Maybe<Poll_Questions>;\n  /** update data of the table: \"user\" */\n  update_user?: Maybe<User_Mutation_Response>;\n  /** update single row of the table: \"user\" */\n  update_user_by_pk?: Maybe<User>;\n  /** update data of the table: \"user_channels\" */\n  update_user_channels?: Maybe<User_Channels_Mutation_Response>;\n  /** update single row of the table: \"user_channels\" */\n  update_user_channels_by_pk?: Maybe<User_Channels>;\n  /** update data of the table: \"user_online\" */\n  update_user_online?: Maybe<User_Online_Mutation_Response>;\n  /** update data of the table: \"user_typing\" */\n  update_user_typing?: Maybe<User_Typing_Mutation_Response>;\n  /** update data of the table: \"user_votes\" */\n  update_user_votes?: Maybe<User_Votes_Mutation_Response>;\n  /** update single row of the table: \"user_votes\" */\n  update_user_votes_by_pk?: Maybe<User_Votes>;\n  /** perform the action: \"validateAndAddDirectMessageChannel\" */\n  validateAndAddDirectMessageChannel?: Maybe<ValidateAndAddDirectMessageChannelOutput>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootAddChannelUserArgs = {\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_ChannelArgs = {\n  where: Channel_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_PollArgs = {\n  where: Channel_Poll_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_Poll_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_ThreadArgs = {\n  where: Channel_Thread_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_Thread_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_Thread_MessageArgs = {\n  where: Channel_Thread_Message_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_Thread_Message_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_TypeArgs = {\n  where: Channel_Type_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_Type_By_PkArgs = {\n  value: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_MessageArgs = {\n  where: Message_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Message_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Message_CursorArgs = {\n  where: Message_Cursor_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Message_Cursor_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Poll_AnwersArgs = {\n  where: Poll_Anwers_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Poll_Anwers_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Poll_QuestionsArgs = {\n  where: Poll_Questions_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Poll_Questions_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_UserArgs = {\n  where: User_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_ChannelsArgs = {\n  where: User_Channels_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_Channels_By_PkArgs = {\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_OnlineArgs = {\n  where: User_Online_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_TypingArgs = {\n  where: User_Typing_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_VotesArgs = {\n  where: User_Votes_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_Votes_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_ChannelArgs = {\n  objects: Array<Channel_Insert_Input>;\n  on_conflict?: Maybe<Channel_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_OneArgs = {\n  object: Channel_Insert_Input;\n  on_conflict?: Maybe<Channel_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_PollArgs = {\n  objects: Array<Channel_Poll_Insert_Input>;\n  on_conflict?: Maybe<Channel_Poll_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_Poll_OneArgs = {\n  object: Channel_Poll_Insert_Input;\n  on_conflict?: Maybe<Channel_Poll_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_ThreadArgs = {\n  objects: Array<Channel_Thread_Insert_Input>;\n  on_conflict?: Maybe<Channel_Thread_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_Thread_MessageArgs = {\n  objects: Array<Channel_Thread_Message_Insert_Input>;\n  on_conflict?: Maybe<Channel_Thread_Message_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_Thread_Message_OneArgs = {\n  object: Channel_Thread_Message_Insert_Input;\n  on_conflict?: Maybe<Channel_Thread_Message_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_Thread_OneArgs = {\n  object: Channel_Thread_Insert_Input;\n  on_conflict?: Maybe<Channel_Thread_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_TypeArgs = {\n  objects: Array<Channel_Type_Insert_Input>;\n  on_conflict?: Maybe<Channel_Type_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_Type_OneArgs = {\n  object: Channel_Type_Insert_Input;\n  on_conflict?: Maybe<Channel_Type_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_MessageArgs = {\n  objects: Array<Message_Insert_Input>;\n  on_conflict?: Maybe<Message_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Message_CursorArgs = {\n  objects: Array<Message_Cursor_Insert_Input>;\n  on_conflict?: Maybe<Message_Cursor_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Message_Cursor_OneArgs = {\n  object: Message_Cursor_Insert_Input;\n  on_conflict?: Maybe<Message_Cursor_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Message_OneArgs = {\n  object: Message_Insert_Input;\n  on_conflict?: Maybe<Message_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Poll_AnwersArgs = {\n  objects: Array<Poll_Anwers_Insert_Input>;\n  on_conflict?: Maybe<Poll_Anwers_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Poll_Anwers_OneArgs = {\n  object: Poll_Anwers_Insert_Input;\n  on_conflict?: Maybe<Poll_Anwers_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Poll_QuestionsArgs = {\n  objects: Array<Poll_Questions_Insert_Input>;\n  on_conflict?: Maybe<Poll_Questions_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Poll_Questions_OneArgs = {\n  object: Poll_Questions_Insert_Input;\n  on_conflict?: Maybe<Poll_Questions_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_UserArgs = {\n  objects: Array<User_Insert_Input>;\n  on_conflict?: Maybe<User_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_ChannelsArgs = {\n  objects: Array<User_Channels_Insert_Input>;\n  on_conflict?: Maybe<User_Channels_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_Channels_OneArgs = {\n  object: User_Channels_Insert_Input;\n  on_conflict?: Maybe<User_Channels_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_OneArgs = {\n  object: User_Insert_Input;\n  on_conflict?: Maybe<User_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_OnlineArgs = {\n  objects: Array<User_Online_Insert_Input>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_Online_OneArgs = {\n  object: User_Online_Insert_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_TypingArgs = {\n  objects: Array<User_Typing_Insert_Input>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_Typing_OneArgs = {\n  object: User_Typing_Insert_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_VotesArgs = {\n  objects: Array<User_Votes_Insert_Input>;\n  on_conflict?: Maybe<User_Votes_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_Votes_OneArgs = {\n  object: User_Votes_Insert_Input;\n  on_conflict?: Maybe<User_Votes_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_ChannelArgs = {\n  _inc?: Maybe<Channel_Inc_Input>;\n  _set?: Maybe<Channel_Set_Input>;\n  where: Channel_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_By_PkArgs = {\n  _inc?: Maybe<Channel_Inc_Input>;\n  _set?: Maybe<Channel_Set_Input>;\n  pk_columns: Channel_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_PollArgs = {\n  _inc?: Maybe<Channel_Poll_Inc_Input>;\n  _set?: Maybe<Channel_Poll_Set_Input>;\n  where: Channel_Poll_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_Poll_By_PkArgs = {\n  _inc?: Maybe<Channel_Poll_Inc_Input>;\n  _set?: Maybe<Channel_Poll_Set_Input>;\n  pk_columns: Channel_Poll_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_ThreadArgs = {\n  _inc?: Maybe<Channel_Thread_Inc_Input>;\n  _set?: Maybe<Channel_Thread_Set_Input>;\n  where: Channel_Thread_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_Thread_By_PkArgs = {\n  _inc?: Maybe<Channel_Thread_Inc_Input>;\n  _set?: Maybe<Channel_Thread_Set_Input>;\n  pk_columns: Channel_Thread_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_Thread_MessageArgs = {\n  _inc?: Maybe<Channel_Thread_Message_Inc_Input>;\n  _set?: Maybe<Channel_Thread_Message_Set_Input>;\n  where: Channel_Thread_Message_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_Thread_Message_By_PkArgs = {\n  _inc?: Maybe<Channel_Thread_Message_Inc_Input>;\n  _set?: Maybe<Channel_Thread_Message_Set_Input>;\n  pk_columns: Channel_Thread_Message_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_TypeArgs = {\n  _set?: Maybe<Channel_Type_Set_Input>;\n  where: Channel_Type_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_Type_By_PkArgs = {\n  _set?: Maybe<Channel_Type_Set_Input>;\n  pk_columns: Channel_Type_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_MessageArgs = {\n  _inc?: Maybe<Message_Inc_Input>;\n  _set?: Maybe<Message_Set_Input>;\n  where: Message_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Message_By_PkArgs = {\n  _inc?: Maybe<Message_Inc_Input>;\n  _set?: Maybe<Message_Set_Input>;\n  pk_columns: Message_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Message_CursorArgs = {\n  _inc?: Maybe<Message_Cursor_Inc_Input>;\n  _set?: Maybe<Message_Cursor_Set_Input>;\n  where: Message_Cursor_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Message_Cursor_By_PkArgs = {\n  _inc?: Maybe<Message_Cursor_Inc_Input>;\n  _set?: Maybe<Message_Cursor_Set_Input>;\n  pk_columns: Message_Cursor_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Poll_AnwersArgs = {\n  _inc?: Maybe<Poll_Anwers_Inc_Input>;\n  _set?: Maybe<Poll_Anwers_Set_Input>;\n  where: Poll_Anwers_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Poll_Anwers_By_PkArgs = {\n  _inc?: Maybe<Poll_Anwers_Inc_Input>;\n  _set?: Maybe<Poll_Anwers_Set_Input>;\n  pk_columns: Poll_Anwers_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Poll_QuestionsArgs = {\n  _inc?: Maybe<Poll_Questions_Inc_Input>;\n  _set?: Maybe<Poll_Questions_Set_Input>;\n  where: Poll_Questions_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Poll_Questions_By_PkArgs = {\n  _inc?: Maybe<Poll_Questions_Inc_Input>;\n  _set?: Maybe<Poll_Questions_Set_Input>;\n  pk_columns: Poll_Questions_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_UserArgs = {\n  _inc?: Maybe<User_Inc_Input>;\n  _set?: Maybe<User_Set_Input>;\n  where: User_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_By_PkArgs = {\n  _inc?: Maybe<User_Inc_Input>;\n  _set?: Maybe<User_Set_Input>;\n  pk_columns: User_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_ChannelsArgs = {\n  _inc?: Maybe<User_Channels_Inc_Input>;\n  _set?: Maybe<User_Channels_Set_Input>;\n  where: User_Channels_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_Channels_By_PkArgs = {\n  _inc?: Maybe<User_Channels_Inc_Input>;\n  _set?: Maybe<User_Channels_Set_Input>;\n  pk_columns: User_Channels_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_OnlineArgs = {\n  _inc?: Maybe<User_Online_Inc_Input>;\n  _set?: Maybe<User_Online_Set_Input>;\n  where: User_Online_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_TypingArgs = {\n  _inc?: Maybe<User_Typing_Inc_Input>;\n  _set?: Maybe<User_Typing_Set_Input>;\n  where: User_Typing_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_VotesArgs = {\n  _inc?: Maybe<User_Votes_Inc_Input>;\n  _set?: Maybe<User_Votes_Set_Input>;\n  where: User_Votes_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_Votes_By_PkArgs = {\n  _inc?: Maybe<User_Votes_Inc_Input>;\n  _set?: Maybe<User_Votes_Set_Input>;\n  pk_columns: User_Votes_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootValidateAndAddDirectMessageChannelArgs = {\n  name: Scalars['String'];\n  user_id1: Scalars['String'];\n  user_id2: Scalars['String'];\n};\n\n/** column ordering options */\nexport enum Order_By {\n  /** in the ascending order, nulls last */\n  Asc = 'asc',\n  /** in the ascending order, nulls first */\n  AscNullsFirst = 'asc_nulls_first',\n  /** in the ascending order, nulls last */\n  AscNullsLast = 'asc_nulls_last',\n  /** in the descending order, nulls first */\n  Desc = 'desc',\n  /** in the descending order, nulls first */\n  DescNullsFirst = 'desc_nulls_first',\n  /** in the descending order, nulls last */\n  DescNullsLast = 'desc_nulls_last'\n}\n\n/** columns and relationships of \"poll_anwers\" */\nexport type Poll_Anwers = {\n  __typename?: 'poll_anwers';\n  created_at: Scalars['timestamptz'];\n  id: Scalars['Int'];\n  /** An object relationship */\n  poll_question: Poll_Questions;\n  question_id: Scalars['Int'];\n  text: Scalars['String'];\n  updated_at: Scalars['timestamptz'];\n  user_id?: Maybe<Scalars['String']>;\n  votes: Scalars['Int'];\n};\n\n/** aggregated selection of \"poll_anwers\" */\nexport type Poll_Anwers_Aggregate = {\n  __typename?: 'poll_anwers_aggregate';\n  aggregate?: Maybe<Poll_Anwers_Aggregate_Fields>;\n  nodes: Array<Poll_Anwers>;\n};\n\n/** aggregate fields of \"poll_anwers\" */\nexport type Poll_Anwers_Aggregate_Fields = {\n  __typename?: 'poll_anwers_aggregate_fields';\n  avg?: Maybe<Poll_Anwers_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Poll_Anwers_Max_Fields>;\n  min?: Maybe<Poll_Anwers_Min_Fields>;\n  stddev?: Maybe<Poll_Anwers_Stddev_Fields>;\n  stddev_pop?: Maybe<Poll_Anwers_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Poll_Anwers_Stddev_Samp_Fields>;\n  sum?: Maybe<Poll_Anwers_Sum_Fields>;\n  var_pop?: Maybe<Poll_Anwers_Var_Pop_Fields>;\n  var_samp?: Maybe<Poll_Anwers_Var_Samp_Fields>;\n  variance?: Maybe<Poll_Anwers_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"poll_anwers\" */\nexport type Poll_Anwers_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"poll_anwers\" */\nexport type Poll_Anwers_Aggregate_Order_By = {\n  avg?: Maybe<Poll_Anwers_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Poll_Anwers_Max_Order_By>;\n  min?: Maybe<Poll_Anwers_Min_Order_By>;\n  stddev?: Maybe<Poll_Anwers_Stddev_Order_By>;\n  stddev_pop?: Maybe<Poll_Anwers_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Poll_Anwers_Stddev_Samp_Order_By>;\n  sum?: Maybe<Poll_Anwers_Sum_Order_By>;\n  var_pop?: Maybe<Poll_Anwers_Var_Pop_Order_By>;\n  var_samp?: Maybe<Poll_Anwers_Var_Samp_Order_By>;\n  variance?: Maybe<Poll_Anwers_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"poll_anwers\" */\nexport type Poll_Anwers_Arr_Rel_Insert_Input = {\n  data: Array<Poll_Anwers_Insert_Input>;\n  on_conflict?: Maybe<Poll_Anwers_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Poll_Anwers_Avg_Fields = {\n  __typename?: 'poll_anwers_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"poll_anwers\". All fields are combined with a logical 'AND'. */\nexport type Poll_Anwers_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Poll_Anwers_Bool_Exp>>>;\n  _not?: Maybe<Poll_Anwers_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Poll_Anwers_Bool_Exp>>>;\n  created_at?: Maybe<Timestamptz_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  poll_question?: Maybe<Poll_Questions_Bool_Exp>;\n  question_id?: Maybe<Int_Comparison_Exp>;\n  text?: Maybe<String_Comparison_Exp>;\n  updated_at?: Maybe<Timestamptz_Comparison_Exp>;\n  user_id?: Maybe<String_Comparison_Exp>;\n  votes?: Maybe<Int_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"poll_anwers\" */\nexport enum Poll_Anwers_Constraint {\n  /** unique or primary key constraint */\n  PollAnwersPkey = 'poll_anwers_pkey'\n}\n\n/** input type for incrementing integer column in table \"poll_anwers\" */\nexport type Poll_Anwers_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  question_id?: Maybe<Scalars['Int']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"poll_anwers\" */\nexport type Poll_Anwers_Insert_Input = {\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_question?: Maybe<Poll_Questions_Obj_Rel_Insert_Input>;\n  question_id?: Maybe<Scalars['Int']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Poll_Anwers_Max_Fields = {\n  __typename?: 'poll_anwers_max_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  question_id?: Maybe<Scalars['Int']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** order by max() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Max_Order_By = {\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Poll_Anwers_Min_Fields = {\n  __typename?: 'poll_anwers_min_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  question_id?: Maybe<Scalars['Int']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** order by min() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Min_Order_By = {\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"poll_anwers\" */\nexport type Poll_Anwers_Mutation_Response = {\n  __typename?: 'poll_anwers_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Poll_Anwers>;\n};\n\n/** input type for inserting object relation for remote table \"poll_anwers\" */\nexport type Poll_Anwers_Obj_Rel_Insert_Input = {\n  data: Poll_Anwers_Insert_Input;\n  on_conflict?: Maybe<Poll_Anwers_On_Conflict>;\n};\n\n/** on conflict condition type for table \"poll_anwers\" */\nexport type Poll_Anwers_On_Conflict = {\n  constraint: Poll_Anwers_Constraint;\n  update_columns: Array<Poll_Anwers_Update_Column>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"poll_anwers\" */\nexport type Poll_Anwers_Order_By = {\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_question?: Maybe<Poll_Questions_Order_By>;\n  question_id?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"poll_anwers\" */\nexport type Poll_Anwers_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"poll_anwers\" */\nexport enum Poll_Anwers_Select_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  QuestionId = 'question_id',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  UpdatedAt = 'updated_at',\n  /** column name */\n  UserId = 'user_id',\n  /** column name */\n  Votes = 'votes'\n}\n\n/** input type for updating data in table \"poll_anwers\" */\nexport type Poll_Anwers_Set_Input = {\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  question_id?: Maybe<Scalars['Int']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Poll_Anwers_Stddev_Fields = {\n  __typename?: 'poll_anwers_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Poll_Anwers_Stddev_Pop_Fields = {\n  __typename?: 'poll_anwers_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Poll_Anwers_Stddev_Samp_Fields = {\n  __typename?: 'poll_anwers_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Poll_Anwers_Sum_Fields = {\n  __typename?: 'poll_anwers_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  question_id?: Maybe<Scalars['Int']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** update columns of table \"poll_anwers\" */\nexport enum Poll_Anwers_Update_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  QuestionId = 'question_id',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  UpdatedAt = 'updated_at',\n  /** column name */\n  UserId = 'user_id',\n  /** column name */\n  Votes = 'votes'\n}\n\n/** aggregate var_pop on columns */\nexport type Poll_Anwers_Var_Pop_Fields = {\n  __typename?: 'poll_anwers_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Poll_Anwers_Var_Samp_Fields = {\n  __typename?: 'poll_anwers_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Poll_Anwers_Variance_Fields = {\n  __typename?: 'poll_anwers_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"poll_questions\" */\nexport type Poll_Questions = {\n  __typename?: 'poll_questions';\n  /** An array relationship */\n  channel_polls: Array<Channel_Poll>;\n  /** An aggregated array relationship */\n  channel_polls_aggregate: Channel_Poll_Aggregate;\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id: Scalars['Int'];\n  is_active: Scalars['Boolean'];\n  owner_id: Scalars['String'];\n  /** An array relationship */\n  poll_anwers: Array<Poll_Anwers>;\n  /** An aggregated array relationship */\n  poll_anwers_aggregate: Poll_Anwers_Aggregate;\n  text: Scalars['String'];\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n\n/** columns and relationships of \"poll_questions\" */\nexport type Poll_QuestionsChannel_PollsArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"poll_questions\" */\nexport type Poll_QuestionsChannel_Polls_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"poll_questions\" */\nexport type Poll_QuestionsPoll_AnwersArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"poll_questions\" */\nexport type Poll_QuestionsPoll_Anwers_AggregateArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n/** aggregated selection of \"poll_questions\" */\nexport type Poll_Questions_Aggregate = {\n  __typename?: 'poll_questions_aggregate';\n  aggregate?: Maybe<Poll_Questions_Aggregate_Fields>;\n  nodes: Array<Poll_Questions>;\n};\n\n/** aggregate fields of \"poll_questions\" */\nexport type Poll_Questions_Aggregate_Fields = {\n  __typename?: 'poll_questions_aggregate_fields';\n  avg?: Maybe<Poll_Questions_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Poll_Questions_Max_Fields>;\n  min?: Maybe<Poll_Questions_Min_Fields>;\n  stddev?: Maybe<Poll_Questions_Stddev_Fields>;\n  stddev_pop?: Maybe<Poll_Questions_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Poll_Questions_Stddev_Samp_Fields>;\n  sum?: Maybe<Poll_Questions_Sum_Fields>;\n  var_pop?: Maybe<Poll_Questions_Var_Pop_Fields>;\n  var_samp?: Maybe<Poll_Questions_Var_Samp_Fields>;\n  variance?: Maybe<Poll_Questions_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"poll_questions\" */\nexport type Poll_Questions_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Poll_Questions_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"poll_questions\" */\nexport type Poll_Questions_Aggregate_Order_By = {\n  avg?: Maybe<Poll_Questions_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Poll_Questions_Max_Order_By>;\n  min?: Maybe<Poll_Questions_Min_Order_By>;\n  stddev?: Maybe<Poll_Questions_Stddev_Order_By>;\n  stddev_pop?: Maybe<Poll_Questions_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Poll_Questions_Stddev_Samp_Order_By>;\n  sum?: Maybe<Poll_Questions_Sum_Order_By>;\n  var_pop?: Maybe<Poll_Questions_Var_Pop_Order_By>;\n  var_samp?: Maybe<Poll_Questions_Var_Samp_Order_By>;\n  variance?: Maybe<Poll_Questions_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"poll_questions\" */\nexport type Poll_Questions_Arr_Rel_Insert_Input = {\n  data: Array<Poll_Questions_Insert_Input>;\n  on_conflict?: Maybe<Poll_Questions_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Poll_Questions_Avg_Fields = {\n  __typename?: 'poll_questions_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"poll_questions\". All fields are combined with a logical 'AND'. */\nexport type Poll_Questions_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Poll_Questions_Bool_Exp>>>;\n  _not?: Maybe<Poll_Questions_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Poll_Questions_Bool_Exp>>>;\n  channel_polls?: Maybe<Channel_Poll_Bool_Exp>;\n  created_at?: Maybe<Timestamptz_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  is_active?: Maybe<Boolean_Comparison_Exp>;\n  owner_id?: Maybe<String_Comparison_Exp>;\n  poll_anwers?: Maybe<Poll_Anwers_Bool_Exp>;\n  text?: Maybe<String_Comparison_Exp>;\n  updated_at?: Maybe<Timestamptz_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"poll_questions\" */\nexport enum Poll_Questions_Constraint {\n  /** unique or primary key constraint */\n  PollQuestionsPkey = 'poll_questions_pkey'\n}\n\n/** input type for incrementing integer column in table \"poll_questions\" */\nexport type Poll_Questions_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"poll_questions\" */\nexport type Poll_Questions_Insert_Input = {\n  channel_polls?: Maybe<Channel_Poll_Arr_Rel_Insert_Input>;\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  is_active?: Maybe<Scalars['Boolean']>;\n  owner_id?: Maybe<Scalars['String']>;\n  poll_anwers?: Maybe<Poll_Anwers_Arr_Rel_Insert_Input>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** aggregate max on columns */\nexport type Poll_Questions_Max_Fields = {\n  __typename?: 'poll_questions_max_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  owner_id?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by max() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Max_Order_By = {\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Poll_Questions_Min_Fields = {\n  __typename?: 'poll_questions_min_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  owner_id?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by min() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Min_Order_By = {\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"poll_questions\" */\nexport type Poll_Questions_Mutation_Response = {\n  __typename?: 'poll_questions_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Poll_Questions>;\n};\n\n/** input type for inserting object relation for remote table \"poll_questions\" */\nexport type Poll_Questions_Obj_Rel_Insert_Input = {\n  data: Poll_Questions_Insert_Input;\n  on_conflict?: Maybe<Poll_Questions_On_Conflict>;\n};\n\n/** on conflict condition type for table \"poll_questions\" */\nexport type Poll_Questions_On_Conflict = {\n  constraint: Poll_Questions_Constraint;\n  update_columns: Array<Poll_Questions_Update_Column>;\n  where?: Maybe<Poll_Questions_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"poll_questions\" */\nexport type Poll_Questions_Order_By = {\n  channel_polls_aggregate?: Maybe<Channel_Poll_Aggregate_Order_By>;\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  is_active?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n  poll_anwers_aggregate?: Maybe<Poll_Anwers_Aggregate_Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"poll_questions\" */\nexport type Poll_Questions_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"poll_questions\" */\nexport enum Poll_Questions_Select_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsActive = 'is_active',\n  /** column name */\n  OwnerId = 'owner_id',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  UpdatedAt = 'updated_at'\n}\n\n/** input type for updating data in table \"poll_questions\" */\nexport type Poll_Questions_Set_Input = {\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  is_active?: Maybe<Scalars['Boolean']>;\n  owner_id?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** aggregate stddev on columns */\nexport type Poll_Questions_Stddev_Fields = {\n  __typename?: 'poll_questions_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Poll_Questions_Stddev_Pop_Fields = {\n  __typename?: 'poll_questions_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Poll_Questions_Stddev_Samp_Fields = {\n  __typename?: 'poll_questions_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Poll_Questions_Sum_Fields = {\n  __typename?: 'poll_questions_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"poll_questions\" */\nexport enum Poll_Questions_Update_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsActive = 'is_active',\n  /** column name */\n  OwnerId = 'owner_id',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  UpdatedAt = 'updated_at'\n}\n\n/** aggregate var_pop on columns */\nexport type Poll_Questions_Var_Pop_Fields = {\n  __typename?: 'poll_questions_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Poll_Questions_Var_Samp_Fields = {\n  __typename?: 'poll_questions_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Poll_Questions_Variance_Fields = {\n  __typename?: 'poll_questions_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** query root */\nexport type Query_Root = {\n  __typename?: 'query_root';\n  /** fetch data from the table: \"channel\" */\n  channel: Array<Channel>;\n  /** fetch aggregated fields from the table: \"channel\" */\n  channel_aggregate: Channel_Aggregate;\n  /** fetch data from the table: \"channel\" using primary key columns */\n  channel_by_pk?: Maybe<Channel>;\n  /** fetch data from the table: \"channel_poll\" */\n  channel_poll: Array<Channel_Poll>;\n  /** fetch aggregated fields from the table: \"channel_poll\" */\n  channel_poll_aggregate: Channel_Poll_Aggregate;\n  /** fetch data from the table: \"channel_poll\" using primary key columns */\n  channel_poll_by_pk?: Maybe<Channel_Poll>;\n  /** fetch data from the table: \"channel_thread\" */\n  channel_thread: Array<Channel_Thread>;\n  /** fetch aggregated fields from the table: \"channel_thread\" */\n  channel_thread_aggregate: Channel_Thread_Aggregate;\n  /** fetch data from the table: \"channel_thread\" using primary key columns */\n  channel_thread_by_pk?: Maybe<Channel_Thread>;\n  /** fetch data from the table: \"channel_thread_message\" */\n  channel_thread_message: Array<Channel_Thread_Message>;\n  /** fetch aggregated fields from the table: \"channel_thread_message\" */\n  channel_thread_message_aggregate: Channel_Thread_Message_Aggregate;\n  /** fetch data from the table: \"channel_thread_message\" using primary key columns */\n  channel_thread_message_by_pk?: Maybe<Channel_Thread_Message>;\n  /** fetch data from the table: \"channel_type\" */\n  channel_type: Array<Channel_Type>;\n  /** fetch aggregated fields from the table: \"channel_type\" */\n  channel_type_aggregate: Channel_Type_Aggregate;\n  /** fetch data from the table: \"channel_type\" using primary key columns */\n  channel_type_by_pk?: Maybe<Channel_Type>;\n  /** fetch data from the table: \"message\" */\n  message: Array<Message>;\n  /** fetch aggregated fields from the table: \"message\" */\n  message_aggregate: Message_Aggregate;\n  /** fetch data from the table: \"message\" using primary key columns */\n  message_by_pk?: Maybe<Message>;\n  /** fetch data from the table: \"message_cursor\" */\n  message_cursor: Array<Message_Cursor>;\n  /** fetch aggregated fields from the table: \"message_cursor\" */\n  message_cursor_aggregate: Message_Cursor_Aggregate;\n  /** fetch data from the table: \"message_cursor\" using primary key columns */\n  message_cursor_by_pk?: Maybe<Message_Cursor>;\n  /** fetch data from the table: \"poll_anwers\" */\n  poll_anwers: Array<Poll_Anwers>;\n  /** fetch aggregated fields from the table: \"poll_anwers\" */\n  poll_anwers_aggregate: Poll_Anwers_Aggregate;\n  /** fetch data from the table: \"poll_anwers\" using primary key columns */\n  poll_anwers_by_pk?: Maybe<Poll_Anwers>;\n  /** fetch data from the table: \"poll_questions\" */\n  poll_questions: Array<Poll_Questions>;\n  /** fetch aggregated fields from the table: \"poll_questions\" */\n  poll_questions_aggregate: Poll_Questions_Aggregate;\n  /** fetch data from the table: \"poll_questions\" using primary key columns */\n  poll_questions_by_pk?: Maybe<Poll_Questions>;\n  /** fetch data from the table: \"user\" */\n  user: Array<User>;\n  /** fetch aggregated fields from the table: \"user\" */\n  user_aggregate: User_Aggregate;\n  /** fetch data from the table: \"user\" using primary key columns */\n  user_by_pk?: Maybe<User>;\n  /** fetch data from the table: \"user_channels\" */\n  user_channels: Array<User_Channels>;\n  /** fetch aggregated fields from the table: \"user_channels\" */\n  user_channels_aggregate: User_Channels_Aggregate;\n  /** fetch data from the table: \"user_channels\" using primary key columns */\n  user_channels_by_pk?: Maybe<User_Channels>;\n  /** fetch data from the table: \"user_online\" */\n  user_online: Array<User_Online>;\n  /** fetch aggregated fields from the table: \"user_online\" */\n  user_online_aggregate: User_Online_Aggregate;\n  /** fetch data from the table: \"user_typing\" */\n  user_typing: Array<User_Typing>;\n  /** fetch aggregated fields from the table: \"user_typing\" */\n  user_typing_aggregate: User_Typing_Aggregate;\n  /** fetch data from the table: \"user_votes\" */\n  user_votes: Array<User_Votes>;\n  /** fetch aggregated fields from the table: \"user_votes\" */\n  user_votes_aggregate: User_Votes_Aggregate;\n  /** fetch data from the table: \"user_votes\" using primary key columns */\n  user_votes_by_pk?: Maybe<User_Votes>;\n};\n\n\n/** query root */\nexport type Query_RootChannelArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootChannel_PollArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Poll_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Poll_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootChannel_ThreadArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Thread_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Thread_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootChannel_Thread_MessageArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Thread_Message_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Thread_Message_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootChannel_TypeArgs = {\n  distinct_on?: Maybe<Array<Channel_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Type_Order_By>>;\n  where?: Maybe<Channel_Type_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Type_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Type_Order_By>>;\n  where?: Maybe<Channel_Type_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Type_By_PkArgs = {\n  value: Scalars['String'];\n};\n\n\n/** query root */\nexport type Query_RootMessageArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootMessage_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootMessage_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootMessage_CursorArgs = {\n  distinct_on?: Maybe<Array<Message_Cursor_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Cursor_Order_By>>;\n  where?: Maybe<Message_Cursor_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootMessage_Cursor_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Cursor_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Cursor_Order_By>>;\n  where?: Maybe<Message_Cursor_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootMessage_Cursor_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootPoll_AnwersArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPoll_Anwers_AggregateArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPoll_Anwers_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootPoll_QuestionsArgs = {\n  distinct_on?: Maybe<Array<Poll_Questions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Questions_Order_By>>;\n  where?: Maybe<Poll_Questions_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPoll_Questions_AggregateArgs = {\n  distinct_on?: Maybe<Array<Poll_Questions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Questions_Order_By>>;\n  where?: Maybe<Poll_Questions_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPoll_Questions_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootUserArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootUser_ChannelsArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Channels_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Channels_By_PkArgs = {\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n\n/** query root */\nexport type Query_RootUser_OnlineArgs = {\n  distinct_on?: Maybe<Array<User_Online_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Online_Order_By>>;\n  where?: Maybe<User_Online_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Online_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Online_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Online_Order_By>>;\n  where?: Maybe<User_Online_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_TypingArgs = {\n  distinct_on?: Maybe<Array<User_Typing_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Typing_Order_By>>;\n  where?: Maybe<User_Typing_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Typing_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Typing_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Typing_Order_By>>;\n  where?: Maybe<User_Typing_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_VotesArgs = {\n  distinct_on?: Maybe<Array<User_Votes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Votes_Order_By>>;\n  where?: Maybe<User_Votes_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Votes_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Votes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Votes_Order_By>>;\n  where?: Maybe<User_Votes_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Votes_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n/** subscription root */\nexport type Subscription_Root = {\n  __typename?: 'subscription_root';\n  /** fetch data from the table: \"channel\" */\n  channel: Array<Channel>;\n  /** fetch aggregated fields from the table: \"channel\" */\n  channel_aggregate: Channel_Aggregate;\n  /** fetch data from the table: \"channel\" using primary key columns */\n  channel_by_pk?: Maybe<Channel>;\n  /** fetch data from the table: \"channel_poll\" */\n  channel_poll: Array<Channel_Poll>;\n  /** fetch aggregated fields from the table: \"channel_poll\" */\n  channel_poll_aggregate: Channel_Poll_Aggregate;\n  /** fetch data from the table: \"channel_poll\" using primary key columns */\n  channel_poll_by_pk?: Maybe<Channel_Poll>;\n  /** fetch data from the table: \"channel_thread\" */\n  channel_thread: Array<Channel_Thread>;\n  /** fetch aggregated fields from the table: \"channel_thread\" */\n  channel_thread_aggregate: Channel_Thread_Aggregate;\n  /** fetch data from the table: \"channel_thread\" using primary key columns */\n  channel_thread_by_pk?: Maybe<Channel_Thread>;\n  /** fetch data from the table: \"channel_thread_message\" */\n  channel_thread_message: Array<Channel_Thread_Message>;\n  /** fetch aggregated fields from the table: \"channel_thread_message\" */\n  channel_thread_message_aggregate: Channel_Thread_Message_Aggregate;\n  /** fetch data from the table: \"channel_thread_message\" using primary key columns */\n  channel_thread_message_by_pk?: Maybe<Channel_Thread_Message>;\n  /** fetch data from the table: \"channel_type\" */\n  channel_type: Array<Channel_Type>;\n  /** fetch aggregated fields from the table: \"channel_type\" */\n  channel_type_aggregate: Channel_Type_Aggregate;\n  /** fetch data from the table: \"channel_type\" using primary key columns */\n  channel_type_by_pk?: Maybe<Channel_Type>;\n  /** fetch data from the table: \"message\" */\n  message: Array<Message>;\n  /** fetch aggregated fields from the table: \"message\" */\n  message_aggregate: Message_Aggregate;\n  /** fetch data from the table: \"message\" using primary key columns */\n  message_by_pk?: Maybe<Message>;\n  /** fetch data from the table: \"message_cursor\" */\n  message_cursor: Array<Message_Cursor>;\n  /** fetch aggregated fields from the table: \"message_cursor\" */\n  message_cursor_aggregate: Message_Cursor_Aggregate;\n  /** fetch data from the table: \"message_cursor\" using primary key columns */\n  message_cursor_by_pk?: Maybe<Message_Cursor>;\n  /** fetch data from the table: \"poll_anwers\" */\n  poll_anwers: Array<Poll_Anwers>;\n  /** fetch aggregated fields from the table: \"poll_anwers\" */\n  poll_anwers_aggregate: Poll_Anwers_Aggregate;\n  /** fetch data from the table: \"poll_anwers\" using primary key columns */\n  poll_anwers_by_pk?: Maybe<Poll_Anwers>;\n  /** fetch data from the table: \"poll_questions\" */\n  poll_questions: Array<Poll_Questions>;\n  /** fetch aggregated fields from the table: \"poll_questions\" */\n  poll_questions_aggregate: Poll_Questions_Aggregate;\n  /** fetch data from the table: \"poll_questions\" using primary key columns */\n  poll_questions_by_pk?: Maybe<Poll_Questions>;\n  /** fetch data from the table: \"user\" */\n  user: Array<User>;\n  /** fetch aggregated fields from the table: \"user\" */\n  user_aggregate: User_Aggregate;\n  /** fetch data from the table: \"user\" using primary key columns */\n  user_by_pk?: Maybe<User>;\n  /** fetch data from the table: \"user_channels\" */\n  user_channels: Array<User_Channels>;\n  /** fetch aggregated fields from the table: \"user_channels\" */\n  user_channels_aggregate: User_Channels_Aggregate;\n  /** fetch data from the table: \"user_channels\" using primary key columns */\n  user_channels_by_pk?: Maybe<User_Channels>;\n  /** fetch data from the table: \"user_online\" */\n  user_online: Array<User_Online>;\n  /** fetch aggregated fields from the table: \"user_online\" */\n  user_online_aggregate: User_Online_Aggregate;\n  /** fetch data from the table: \"user_typing\" */\n  user_typing: Array<User_Typing>;\n  /** fetch aggregated fields from the table: \"user_typing\" */\n  user_typing_aggregate: User_Typing_Aggregate;\n  /** fetch data from the table: \"user_votes\" */\n  user_votes: Array<User_Votes>;\n  /** fetch aggregated fields from the table: \"user_votes\" */\n  user_votes_aggregate: User_Votes_Aggregate;\n  /** fetch data from the table: \"user_votes\" using primary key columns */\n  user_votes_by_pk?: Maybe<User_Votes>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannelArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_PollArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Poll_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Poll_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_ThreadArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Thread_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Thread_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Thread_MessageArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Thread_Message_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Thread_Message_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_TypeArgs = {\n  distinct_on?: Maybe<Array<Channel_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Type_Order_By>>;\n  where?: Maybe<Channel_Type_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Type_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Type_Order_By>>;\n  where?: Maybe<Channel_Type_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Type_By_PkArgs = {\n  value: Scalars['String'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessageArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessage_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessage_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessage_CursorArgs = {\n  distinct_on?: Maybe<Array<Message_Cursor_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Cursor_Order_By>>;\n  where?: Maybe<Message_Cursor_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessage_Cursor_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Cursor_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Cursor_Order_By>>;\n  where?: Maybe<Message_Cursor_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessage_Cursor_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_AnwersArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_Anwers_AggregateArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_Anwers_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_QuestionsArgs = {\n  distinct_on?: Maybe<Array<Poll_Questions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Questions_Order_By>>;\n  where?: Maybe<Poll_Questions_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_Questions_AggregateArgs = {\n  distinct_on?: Maybe<Array<Poll_Questions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Questions_Order_By>>;\n  where?: Maybe<Poll_Questions_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_Questions_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootUserArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_ChannelsArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Channels_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Channels_By_PkArgs = {\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_OnlineArgs = {\n  distinct_on?: Maybe<Array<User_Online_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Online_Order_By>>;\n  where?: Maybe<User_Online_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Online_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Online_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Online_Order_By>>;\n  where?: Maybe<User_Online_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_TypingArgs = {\n  distinct_on?: Maybe<Array<User_Typing_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Typing_Order_By>>;\n  where?: Maybe<User_Typing_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Typing_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Typing_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Typing_Order_By>>;\n  where?: Maybe<User_Typing_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_VotesArgs = {\n  distinct_on?: Maybe<Array<User_Votes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Votes_Order_By>>;\n  where?: Maybe<User_Votes_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Votes_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Votes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Votes_Order_By>>;\n  where?: Maybe<User_Votes_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Votes_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** expression to compare columns of type timestamptz. All fields are combined with logical 'AND'. */\nexport type Timestamptz_Comparison_Exp = {\n  _eq?: Maybe<Scalars['timestamptz']>;\n  _gt?: Maybe<Scalars['timestamptz']>;\n  _gte?: Maybe<Scalars['timestamptz']>;\n  _in?: Maybe<Array<Scalars['timestamptz']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['timestamptz']>;\n  _lte?: Maybe<Scalars['timestamptz']>;\n  _neq?: Maybe<Scalars['timestamptz']>;\n  _nin?: Maybe<Array<Scalars['timestamptz']>>;\n};\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type User = {\n  __typename?: 'user';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  /** An array relationship */\n  channel_thread_messages: Array<Channel_Thread_Message>;\n  /** An aggregated array relationship */\n  channel_thread_messages_aggregate: Channel_Thread_Message_Aggregate;\n  /** An array relationship */\n  channels: Array<Channel>;\n  /** An aggregated array relationship */\n  channels_aggregate: Channel_Aggregate;\n  id: Scalars['Int'];\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  /** An array relationship */\n  messages: Array<Message>;\n  /** An aggregated array relationship */\n  messages_aggregate: Message_Aggregate;\n  /** An array relationship */\n  user_channels: Array<User_Channels>;\n  /** An aggregated array relationship */\n  user_channels_aggregate: User_Channels_Aggregate;\n  username: Scalars['String'];\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserChannel_Thread_MessagesArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserChannel_Thread_Messages_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserChannelsArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserChannels_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserMessagesArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserMessages_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserUser_ChannelsArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserUser_Channels_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n/** aggregated selection of \"user\" */\nexport type User_Aggregate = {\n  __typename?: 'user_aggregate';\n  aggregate?: Maybe<User_Aggregate_Fields>;\n  nodes: Array<User>;\n};\n\n/** aggregate fields of \"user\" */\nexport type User_Aggregate_Fields = {\n  __typename?: 'user_aggregate_fields';\n  avg?: Maybe<User_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<User_Max_Fields>;\n  min?: Maybe<User_Min_Fields>;\n  stddev?: Maybe<User_Stddev_Fields>;\n  stddev_pop?: Maybe<User_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<User_Stddev_Samp_Fields>;\n  sum?: Maybe<User_Sum_Fields>;\n  var_pop?: Maybe<User_Var_Pop_Fields>;\n  var_samp?: Maybe<User_Var_Samp_Fields>;\n  variance?: Maybe<User_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"user\" */\nexport type User_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<User_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"user\" */\nexport type User_Aggregate_Order_By = {\n  avg?: Maybe<User_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<User_Max_Order_By>;\n  min?: Maybe<User_Min_Order_By>;\n  stddev?: Maybe<User_Stddev_Order_By>;\n  stddev_pop?: Maybe<User_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<User_Stddev_Samp_Order_By>;\n  sum?: Maybe<User_Sum_Order_By>;\n  var_pop?: Maybe<User_Var_Pop_Order_By>;\n  var_samp?: Maybe<User_Var_Samp_Order_By>;\n  variance?: Maybe<User_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"user\" */\nexport type User_Arr_Rel_Insert_Input = {\n  data: Array<User_Insert_Input>;\n  on_conflict?: Maybe<User_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type User_Avg_Fields = {\n  __typename?: 'user_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"user\" */\nexport type User_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"user\". All fields are combined with a logical 'AND'. */\nexport type User_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<User_Bool_Exp>>>;\n  _not?: Maybe<User_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<User_Bool_Exp>>>;\n  auth0_user_id?: Maybe<String_Comparison_Exp>;\n  channel_thread_messages?: Maybe<Channel_Thread_Message_Bool_Exp>;\n  channels?: Maybe<Channel_Bool_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  last_seen?: Maybe<Timestamptz_Comparison_Exp>;\n  last_typed?: Maybe<Timestamptz_Comparison_Exp>;\n  last_typed_channel?: Maybe<Int_Comparison_Exp>;\n  messages?: Maybe<Message_Bool_Exp>;\n  user_channels?: Maybe<User_Channels_Bool_Exp>;\n  username?: Maybe<String_Comparison_Exp>;\n};\n\n/** columns and relationships of \"user_channels\" */\nexport type User_Channels = {\n  __typename?: 'user_channels';\n  /** An object relationship */\n  channel: Channel;\n  channel_id: Scalars['Int'];\n  /** An object relationship */\n  user: User;\n  user_id: Scalars['String'];\n};\n\n/** aggregated selection of \"user_channels\" */\nexport type User_Channels_Aggregate = {\n  __typename?: 'user_channels_aggregate';\n  aggregate?: Maybe<User_Channels_Aggregate_Fields>;\n  nodes: Array<User_Channels>;\n};\n\n/** aggregate fields of \"user_channels\" */\nexport type User_Channels_Aggregate_Fields = {\n  __typename?: 'user_channels_aggregate_fields';\n  avg?: Maybe<User_Channels_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<User_Channels_Max_Fields>;\n  min?: Maybe<User_Channels_Min_Fields>;\n  stddev?: Maybe<User_Channels_Stddev_Fields>;\n  stddev_pop?: Maybe<User_Channels_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<User_Channels_Stddev_Samp_Fields>;\n  sum?: Maybe<User_Channels_Sum_Fields>;\n  var_pop?: Maybe<User_Channels_Var_Pop_Fields>;\n  var_samp?: Maybe<User_Channels_Var_Samp_Fields>;\n  variance?: Maybe<User_Channels_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"user_channels\" */\nexport type User_Channels_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<User_Channels_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"user_channels\" */\nexport type User_Channels_Aggregate_Order_By = {\n  avg?: Maybe<User_Channels_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<User_Channels_Max_Order_By>;\n  min?: Maybe<User_Channels_Min_Order_By>;\n  stddev?: Maybe<User_Channels_Stddev_Order_By>;\n  stddev_pop?: Maybe<User_Channels_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<User_Channels_Stddev_Samp_Order_By>;\n  sum?: Maybe<User_Channels_Sum_Order_By>;\n  var_pop?: Maybe<User_Channels_Var_Pop_Order_By>;\n  var_samp?: Maybe<User_Channels_Var_Samp_Order_By>;\n  variance?: Maybe<User_Channels_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"user_channels\" */\nexport type User_Channels_Arr_Rel_Insert_Input = {\n  data: Array<User_Channels_Insert_Input>;\n  on_conflict?: Maybe<User_Channels_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type User_Channels_Avg_Fields = {\n  __typename?: 'user_channels_avg_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"user_channels\" */\nexport type User_Channels_Avg_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"user_channels\". All fields are combined with a logical 'AND'. */\nexport type User_Channels_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<User_Channels_Bool_Exp>>>;\n  _not?: Maybe<User_Channels_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<User_Channels_Bool_Exp>>>;\n  channel?: Maybe<Channel_Bool_Exp>;\n  channel_id?: Maybe<Int_Comparison_Exp>;\n  user?: Maybe<User_Bool_Exp>;\n  user_id?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"user_channels\" */\nexport enum User_Channels_Constraint {\n  /** unique or primary key constraint */\n  UserChannelsPkey = 'user_channels_pkey'\n}\n\n/** input type for incrementing integer column in table \"user_channels\" */\nexport type User_Channels_Inc_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"user_channels\" */\nexport type User_Channels_Insert_Input = {\n  channel?: Maybe<Channel_Obj_Rel_Insert_Input>;\n  channel_id?: Maybe<Scalars['Int']>;\n  user?: Maybe<User_Obj_Rel_Insert_Input>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type User_Channels_Max_Fields = {\n  __typename?: 'user_channels_max_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"user_channels\" */\nexport type User_Channels_Max_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type User_Channels_Min_Fields = {\n  __typename?: 'user_channels_min_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"user_channels\" */\nexport type User_Channels_Min_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"user_channels\" */\nexport type User_Channels_Mutation_Response = {\n  __typename?: 'user_channels_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<User_Channels>;\n};\n\n/** input type for inserting object relation for remote table \"user_channels\" */\nexport type User_Channels_Obj_Rel_Insert_Input = {\n  data: User_Channels_Insert_Input;\n  on_conflict?: Maybe<User_Channels_On_Conflict>;\n};\n\n/** on conflict condition type for table \"user_channels\" */\nexport type User_Channels_On_Conflict = {\n  constraint: User_Channels_Constraint;\n  update_columns: Array<User_Channels_Update_Column>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"user_channels\" */\nexport type User_Channels_Order_By = {\n  channel?: Maybe<Channel_Order_By>;\n  channel_id?: Maybe<Order_By>;\n  user?: Maybe<User_Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"user_channels\" */\nexport type User_Channels_Pk_Columns_Input = {\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n/** select columns of table \"user_channels\" */\nexport enum User_Channels_Select_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** input type for updating data in table \"user_channels\" */\nexport type User_Channels_Set_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type User_Channels_Stddev_Fields = {\n  __typename?: 'user_channels_stddev_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"user_channels\" */\nexport type User_Channels_Stddev_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type User_Channels_Stddev_Pop_Fields = {\n  __typename?: 'user_channels_stddev_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"user_channels\" */\nexport type User_Channels_Stddev_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type User_Channels_Stddev_Samp_Fields = {\n  __typename?: 'user_channels_stddev_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"user_channels\" */\nexport type User_Channels_Stddev_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type User_Channels_Sum_Fields = {\n  __typename?: 'user_channels_sum_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"user_channels\" */\nexport type User_Channels_Sum_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"user_channels\" */\nexport enum User_Channels_Update_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** aggregate var_pop on columns */\nexport type User_Channels_Var_Pop_Fields = {\n  __typename?: 'user_channels_var_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"user_channels\" */\nexport type User_Channels_Var_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type User_Channels_Var_Samp_Fields = {\n  __typename?: 'user_channels_var_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"user_channels\" */\nexport type User_Channels_Var_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type User_Channels_Variance_Fields = {\n  __typename?: 'user_channels_variance_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"user_channels\" */\nexport type User_Channels_Variance_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** unique or primary key constraints on table \"user\" */\nexport enum User_Constraint {\n  /** unique or primary key constraint */\n  UserAuth0UserIdKey = 'user_auth0_user_id_key',\n  /** unique or primary key constraint */\n  UserPkey = 'user_pkey'\n}\n\n/** input type for incrementing integer column in table \"user\" */\nexport type User_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"user\" */\nexport type User_Insert_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  channel_thread_messages?: Maybe<Channel_Thread_Message_Arr_Rel_Insert_Input>;\n  channels?: Maybe<Channel_Arr_Rel_Insert_Input>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  messages?: Maybe<Message_Arr_Rel_Insert_Input>;\n  user_channels?: Maybe<User_Channels_Arr_Rel_Insert_Input>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type User_Max_Fields = {\n  __typename?: 'user_max_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"user\" */\nexport type User_Max_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type User_Min_Fields = {\n  __typename?: 'user_min_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"user\" */\nexport type User_Min_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"user\" */\nexport type User_Mutation_Response = {\n  __typename?: 'user_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<User>;\n};\n\n/** input type for inserting object relation for remote table \"user\" */\nexport type User_Obj_Rel_Insert_Input = {\n  data: User_Insert_Input;\n  on_conflict?: Maybe<User_On_Conflict>;\n};\n\n/** on conflict condition type for table \"user\" */\nexport type User_On_Conflict = {\n  constraint: User_Constraint;\n  update_columns: Array<User_Update_Column>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n/** columns and relationships of \"user_online\" */\nexport type User_Online = {\n  __typename?: 'user_online';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregated selection of \"user_online\" */\nexport type User_Online_Aggregate = {\n  __typename?: 'user_online_aggregate';\n  aggregate?: Maybe<User_Online_Aggregate_Fields>;\n  nodes: Array<User_Online>;\n};\n\n/** aggregate fields of \"user_online\" */\nexport type User_Online_Aggregate_Fields = {\n  __typename?: 'user_online_aggregate_fields';\n  avg?: Maybe<User_Online_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<User_Online_Max_Fields>;\n  min?: Maybe<User_Online_Min_Fields>;\n  stddev?: Maybe<User_Online_Stddev_Fields>;\n  stddev_pop?: Maybe<User_Online_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<User_Online_Stddev_Samp_Fields>;\n  sum?: Maybe<User_Online_Sum_Fields>;\n  var_pop?: Maybe<User_Online_Var_Pop_Fields>;\n  var_samp?: Maybe<User_Online_Var_Samp_Fields>;\n  variance?: Maybe<User_Online_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"user_online\" */\nexport type User_Online_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<User_Online_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"user_online\" */\nexport type User_Online_Aggregate_Order_By = {\n  avg?: Maybe<User_Online_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<User_Online_Max_Order_By>;\n  min?: Maybe<User_Online_Min_Order_By>;\n  stddev?: Maybe<User_Online_Stddev_Order_By>;\n  stddev_pop?: Maybe<User_Online_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<User_Online_Stddev_Samp_Order_By>;\n  sum?: Maybe<User_Online_Sum_Order_By>;\n  var_pop?: Maybe<User_Online_Var_Pop_Order_By>;\n  var_samp?: Maybe<User_Online_Var_Samp_Order_By>;\n  variance?: Maybe<User_Online_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"user_online\" */\nexport type User_Online_Arr_Rel_Insert_Input = {\n  data: Array<User_Online_Insert_Input>;\n};\n\n/** aggregate avg on columns */\nexport type User_Online_Avg_Fields = {\n  __typename?: 'user_online_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"user_online\" */\nexport type User_Online_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"user_online\". All fields are combined with a logical 'AND'. */\nexport type User_Online_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<User_Online_Bool_Exp>>>;\n  _not?: Maybe<User_Online_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<User_Online_Bool_Exp>>>;\n  auth0_user_id?: Maybe<String_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  last_seen?: Maybe<Timestamptz_Comparison_Exp>;\n  last_typed?: Maybe<Timestamptz_Comparison_Exp>;\n  username?: Maybe<String_Comparison_Exp>;\n};\n\n/** input type for incrementing integer column in table \"user_online\" */\nexport type User_Online_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"user_online\" */\nexport type User_Online_Insert_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type User_Online_Max_Fields = {\n  __typename?: 'user_online_max_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"user_online\" */\nexport type User_Online_Max_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type User_Online_Min_Fields = {\n  __typename?: 'user_online_min_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"user_online\" */\nexport type User_Online_Min_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"user_online\" */\nexport type User_Online_Mutation_Response = {\n  __typename?: 'user_online_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<User_Online>;\n};\n\n/** input type for inserting object relation for remote table \"user_online\" */\nexport type User_Online_Obj_Rel_Insert_Input = {\n  data: User_Online_Insert_Input;\n};\n\n/** ordering options when selecting data from \"user_online\" */\nexport type User_Online_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** select columns of table \"user_online\" */\nexport enum User_Online_Select_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  LastSeen = 'last_seen',\n  /** column name */\n  LastTyped = 'last_typed',\n  /** column name */\n  Username = 'username'\n}\n\n/** input type for updating data in table \"user_online\" */\nexport type User_Online_Set_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type User_Online_Stddev_Fields = {\n  __typename?: 'user_online_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"user_online\" */\nexport type User_Online_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type User_Online_Stddev_Pop_Fields = {\n  __typename?: 'user_online_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"user_online\" */\nexport type User_Online_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type User_Online_Stddev_Samp_Fields = {\n  __typename?: 'user_online_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"user_online\" */\nexport type User_Online_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type User_Online_Sum_Fields = {\n  __typename?: 'user_online_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"user_online\" */\nexport type User_Online_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_pop on columns */\nexport type User_Online_Var_Pop_Fields = {\n  __typename?: 'user_online_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"user_online\" */\nexport type User_Online_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type User_Online_Var_Samp_Fields = {\n  __typename?: 'user_online_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"user_online\" */\nexport type User_Online_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type User_Online_Variance_Fields = {\n  __typename?: 'user_online_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"user_online\" */\nexport type User_Online_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** ordering options when selecting data from \"user\" */\nexport type User_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  channel_thread_messages_aggregate?: Maybe<Channel_Thread_Message_Aggregate_Order_By>;\n  channels_aggregate?: Maybe<Channel_Aggregate_Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  messages_aggregate?: Maybe<Message_Aggregate_Order_By>;\n  user_channels_aggregate?: Maybe<User_Channels_Aggregate_Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"user\" */\nexport type User_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"user\" */\nexport enum User_Select_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  LastSeen = 'last_seen',\n  /** column name */\n  LastTyped = 'last_typed',\n  /** column name */\n  LastTypedChannel = 'last_typed_channel',\n  /** column name */\n  Username = 'username'\n}\n\n/** input type for updating data in table \"user\" */\nexport type User_Set_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type User_Stddev_Fields = {\n  __typename?: 'user_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"user\" */\nexport type User_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type User_Stddev_Pop_Fields = {\n  __typename?: 'user_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"user\" */\nexport type User_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type User_Stddev_Samp_Fields = {\n  __typename?: 'user_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"user\" */\nexport type User_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type User_Sum_Fields = {\n  __typename?: 'user_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"user\" */\nexport type User_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"user_typing\" */\nexport type User_Typing = {\n  __typename?: 'user_typing';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregated selection of \"user_typing\" */\nexport type User_Typing_Aggregate = {\n  __typename?: 'user_typing_aggregate';\n  aggregate?: Maybe<User_Typing_Aggregate_Fields>;\n  nodes: Array<User_Typing>;\n};\n\n/** aggregate fields of \"user_typing\" */\nexport type User_Typing_Aggregate_Fields = {\n  __typename?: 'user_typing_aggregate_fields';\n  avg?: Maybe<User_Typing_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<User_Typing_Max_Fields>;\n  min?: Maybe<User_Typing_Min_Fields>;\n  stddev?: Maybe<User_Typing_Stddev_Fields>;\n  stddev_pop?: Maybe<User_Typing_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<User_Typing_Stddev_Samp_Fields>;\n  sum?: Maybe<User_Typing_Sum_Fields>;\n  var_pop?: Maybe<User_Typing_Var_Pop_Fields>;\n  var_samp?: Maybe<User_Typing_Var_Samp_Fields>;\n  variance?: Maybe<User_Typing_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"user_typing\" */\nexport type User_Typing_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<User_Typing_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"user_typing\" */\nexport type User_Typing_Aggregate_Order_By = {\n  avg?: Maybe<User_Typing_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<User_Typing_Max_Order_By>;\n  min?: Maybe<User_Typing_Min_Order_By>;\n  stddev?: Maybe<User_Typing_Stddev_Order_By>;\n  stddev_pop?: Maybe<User_Typing_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<User_Typing_Stddev_Samp_Order_By>;\n  sum?: Maybe<User_Typing_Sum_Order_By>;\n  var_pop?: Maybe<User_Typing_Var_Pop_Order_By>;\n  var_samp?: Maybe<User_Typing_Var_Samp_Order_By>;\n  variance?: Maybe<User_Typing_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"user_typing\" */\nexport type User_Typing_Arr_Rel_Insert_Input = {\n  data: Array<User_Typing_Insert_Input>;\n};\n\n/** aggregate avg on columns */\nexport type User_Typing_Avg_Fields = {\n  __typename?: 'user_typing_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"user_typing\" */\nexport type User_Typing_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"user_typing\". All fields are combined with a logical 'AND'. */\nexport type User_Typing_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<User_Typing_Bool_Exp>>>;\n  _not?: Maybe<User_Typing_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<User_Typing_Bool_Exp>>>;\n  auth0_user_id?: Maybe<String_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  last_seen?: Maybe<Timestamptz_Comparison_Exp>;\n  last_typed?: Maybe<Timestamptz_Comparison_Exp>;\n  last_typed_channel?: Maybe<Int_Comparison_Exp>;\n  username?: Maybe<String_Comparison_Exp>;\n};\n\n/** input type for incrementing integer column in table \"user_typing\" */\nexport type User_Typing_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"user_typing\" */\nexport type User_Typing_Insert_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type User_Typing_Max_Fields = {\n  __typename?: 'user_typing_max_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"user_typing\" */\nexport type User_Typing_Max_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type User_Typing_Min_Fields = {\n  __typename?: 'user_typing_min_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"user_typing\" */\nexport type User_Typing_Min_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"user_typing\" */\nexport type User_Typing_Mutation_Response = {\n  __typename?: 'user_typing_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<User_Typing>;\n};\n\n/** input type for inserting object relation for remote table \"user_typing\" */\nexport type User_Typing_Obj_Rel_Insert_Input = {\n  data: User_Typing_Insert_Input;\n};\n\n/** ordering options when selecting data from \"user_typing\" */\nexport type User_Typing_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** select columns of table \"user_typing\" */\nexport enum User_Typing_Select_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  LastSeen = 'last_seen',\n  /** column name */\n  LastTyped = 'last_typed',\n  /** column name */\n  LastTypedChannel = 'last_typed_channel',\n  /** column name */\n  Username = 'username'\n}\n\n/** input type for updating data in table \"user_typing\" */\nexport type User_Typing_Set_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type User_Typing_Stddev_Fields = {\n  __typename?: 'user_typing_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"user_typing\" */\nexport type User_Typing_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type User_Typing_Stddev_Pop_Fields = {\n  __typename?: 'user_typing_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"user_typing\" */\nexport type User_Typing_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type User_Typing_Stddev_Samp_Fields = {\n  __typename?: 'user_typing_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"user_typing\" */\nexport type User_Typing_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type User_Typing_Sum_Fields = {\n  __typename?: 'user_typing_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"user_typing\" */\nexport type User_Typing_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate var_pop on columns */\nexport type User_Typing_Var_Pop_Fields = {\n  __typename?: 'user_typing_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"user_typing\" */\nexport type User_Typing_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type User_Typing_Var_Samp_Fields = {\n  __typename?: 'user_typing_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"user_typing\" */\nexport type User_Typing_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type User_Typing_Variance_Fields = {\n  __typename?: 'user_typing_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"user_typing\" */\nexport type User_Typing_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** update columns of table \"user\" */\nexport enum User_Update_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  LastSeen = 'last_seen',\n  /** column name */\n  LastTyped = 'last_typed',\n  /** column name */\n  LastTypedChannel = 'last_typed_channel',\n  /** column name */\n  Username = 'username'\n}\n\n/** aggregate var_pop on columns */\nexport type User_Var_Pop_Fields = {\n  __typename?: 'user_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"user\" */\nexport type User_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type User_Var_Samp_Fields = {\n  __typename?: 'user_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"user\" */\nexport type User_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type User_Variance_Fields = {\n  __typename?: 'user_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"user\" */\nexport type User_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"user_votes\" */\nexport type User_Votes = {\n  __typename?: 'user_votes';\n  auth0_user_id: Scalars['String'];\n  id: Scalars['Int'];\n  poll_answer_id: Scalars['Int'];\n  poll_question_id: Scalars['Int'];\n  username: Scalars['String'];\n  voted_at: Scalars['timestamptz'];\n};\n\n/** aggregated selection of \"user_votes\" */\nexport type User_Votes_Aggregate = {\n  __typename?: 'user_votes_aggregate';\n  aggregate?: Maybe<User_Votes_Aggregate_Fields>;\n  nodes: Array<User_Votes>;\n};\n\n/** aggregate fields of \"user_votes\" */\nexport type User_Votes_Aggregate_Fields = {\n  __typename?: 'user_votes_aggregate_fields';\n  avg?: Maybe<User_Votes_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<User_Votes_Max_Fields>;\n  min?: Maybe<User_Votes_Min_Fields>;\n  stddev?: Maybe<User_Votes_Stddev_Fields>;\n  stddev_pop?: Maybe<User_Votes_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<User_Votes_Stddev_Samp_Fields>;\n  sum?: Maybe<User_Votes_Sum_Fields>;\n  var_pop?: Maybe<User_Votes_Var_Pop_Fields>;\n  var_samp?: Maybe<User_Votes_Var_Samp_Fields>;\n  variance?: Maybe<User_Votes_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"user_votes\" */\nexport type User_Votes_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<User_Votes_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"user_votes\" */\nexport type User_Votes_Aggregate_Order_By = {\n  avg?: Maybe<User_Votes_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<User_Votes_Max_Order_By>;\n  min?: Maybe<User_Votes_Min_Order_By>;\n  stddev?: Maybe<User_Votes_Stddev_Order_By>;\n  stddev_pop?: Maybe<User_Votes_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<User_Votes_Stddev_Samp_Order_By>;\n  sum?: Maybe<User_Votes_Sum_Order_By>;\n  var_pop?: Maybe<User_Votes_Var_Pop_Order_By>;\n  var_samp?: Maybe<User_Votes_Var_Samp_Order_By>;\n  variance?: Maybe<User_Votes_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"user_votes\" */\nexport type User_Votes_Arr_Rel_Insert_Input = {\n  data: Array<User_Votes_Insert_Input>;\n  on_conflict?: Maybe<User_Votes_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type User_Votes_Avg_Fields = {\n  __typename?: 'user_votes_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"user_votes\" */\nexport type User_Votes_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"user_votes\". All fields are combined with a logical 'AND'. */\nexport type User_Votes_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<User_Votes_Bool_Exp>>>;\n  _not?: Maybe<User_Votes_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<User_Votes_Bool_Exp>>>;\n  auth0_user_id?: Maybe<String_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  poll_answer_id?: Maybe<Int_Comparison_Exp>;\n  poll_question_id?: Maybe<Int_Comparison_Exp>;\n  username?: Maybe<String_Comparison_Exp>;\n  voted_at?: Maybe<Timestamptz_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"user_votes\" */\nexport enum User_Votes_Constraint {\n  /** unique or primary key constraint */\n  UserVotesPkey = 'user_votes_pkey'\n}\n\n/** input type for incrementing integer column in table \"user_votes\" */\nexport type User_Votes_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"user_votes\" */\nexport type User_Votes_Insert_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n  voted_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** aggregate max on columns */\nexport type User_Votes_Max_Fields = {\n  __typename?: 'user_votes_max_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n  voted_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by max() on columns of table \"user_votes\" */\nexport type User_Votes_Max_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n  voted_at?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type User_Votes_Min_Fields = {\n  __typename?: 'user_votes_min_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n  voted_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by min() on columns of table \"user_votes\" */\nexport type User_Votes_Min_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n  voted_at?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"user_votes\" */\nexport type User_Votes_Mutation_Response = {\n  __typename?: 'user_votes_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<User_Votes>;\n};\n\n/** input type for inserting object relation for remote table \"user_votes\" */\nexport type User_Votes_Obj_Rel_Insert_Input = {\n  data: User_Votes_Insert_Input;\n  on_conflict?: Maybe<User_Votes_On_Conflict>;\n};\n\n/** on conflict condition type for table \"user_votes\" */\nexport type User_Votes_On_Conflict = {\n  constraint: User_Votes_Constraint;\n  update_columns: Array<User_Votes_Update_Column>;\n  where?: Maybe<User_Votes_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"user_votes\" */\nexport type User_Votes_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n  voted_at?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"user_votes\" */\nexport type User_Votes_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"user_votes\" */\nexport enum User_Votes_Select_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  PollAnswerId = 'poll_answer_id',\n  /** column name */\n  PollQuestionId = 'poll_question_id',\n  /** column name */\n  Username = 'username',\n  /** column name */\n  VotedAt = 'voted_at'\n}\n\n/** input type for updating data in table \"user_votes\" */\nexport type User_Votes_Set_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n  voted_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** aggregate stddev on columns */\nexport type User_Votes_Stddev_Fields = {\n  __typename?: 'user_votes_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"user_votes\" */\nexport type User_Votes_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type User_Votes_Stddev_Pop_Fields = {\n  __typename?: 'user_votes_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"user_votes\" */\nexport type User_Votes_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type User_Votes_Stddev_Samp_Fields = {\n  __typename?: 'user_votes_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"user_votes\" */\nexport type User_Votes_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type User_Votes_Sum_Fields = {\n  __typename?: 'user_votes_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"user_votes\" */\nexport type User_Votes_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"user_votes\" */\nexport enum User_Votes_Update_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  PollAnswerId = 'poll_answer_id',\n  /** column name */\n  PollQuestionId = 'poll_question_id',\n  /** column name */\n  Username = 'username',\n  /** column name */\n  VotedAt = 'voted_at'\n}\n\n/** aggregate var_pop on columns */\nexport type User_Votes_Var_Pop_Fields = {\n  __typename?: 'user_votes_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"user_votes\" */\nexport type User_Votes_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type User_Votes_Var_Samp_Fields = {\n  __typename?: 'user_votes_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"user_votes\" */\nexport type User_Votes_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type User_Votes_Variance_Fields = {\n  __typename?: 'user_votes_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"user_votes\" */\nexport type User_Votes_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n\nexport type ValidateAndAddDirectMessageChannelOutput = {\n  __typename?: 'validateAndAddDirectMessageChannelOutput';\n  id: Scalars['Int'];\n  name: Scalars['String'];\n};\n\nexport type InsertMessageMutationVariables = Exact<{\n  message: Message_Insert_Input;\n}>;\n\n\nexport type InsertMessageMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_message?: Maybe<(\n    { __typename?: 'message_mutation_response' }\n    & { returning: Array<(\n      { __typename?: 'message' }\n      & Pick<Message, 'id' | 'timestamp' | 'text'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'username'>\n      ), channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'name'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type UpdateMessageMutationVariables = Exact<{\n  _eq: Scalars['Int'];\n  text: Scalars['String'];\n  deleted?: Maybe<Scalars['Boolean']>;\n}>;\n\n\nexport type UpdateMessageMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_message?: Maybe<(\n    { __typename?: 'message_mutation_response' }\n    & Pick<Message_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type DeleteMessageMutationVariables = Exact<{\n  message_id?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type DeleteMessageMutation = (\n  { __typename?: 'mutation_root' }\n  & { delete_message?: Maybe<(\n    { __typename?: 'message_mutation_response' }\n    & Pick<Message_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type SetUserOnlineMutationVariables = Exact<{\n  user_id: Scalars['String'];\n}>;\n\n\nexport type SetUserOnlineMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_user?: Maybe<(\n    { __typename?: 'user_mutation_response' }\n    & Pick<User_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type AddChannelMutationVariables = Exact<{\n  channel: Channel_Insert_Input;\n}>;\n\n\nexport type AddChannelMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_channel?: Maybe<(\n    { __typename?: 'channel_mutation_response' }\n    & { returning: Array<(\n      { __typename?: 'channel' }\n      & Pick<Channel, 'id' | 'name' | 'owner_id' | 'is_private'>\n    )> }\n  )> }\n);\n\nexport type ValidateAndAddDirectMessageChannelMutationVariables = Exact<{\n  name: Scalars['String'];\n  user_id1: Scalars['String'];\n  user_id2: Scalars['String'];\n}>;\n\n\nexport type ValidateAndAddDirectMessageChannelMutation = (\n  { __typename?: 'mutation_root' }\n  & { validateAndAddDirectMessageChannel?: Maybe<(\n    { __typename?: 'validateAndAddDirectMessageChannelOutput' }\n    & Pick<ValidateAndAddDirectMessageChannelOutput, 'id' | 'name'>\n  )> }\n);\n\nexport type AddChannelUserMutationVariables = Exact<{\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n}>;\n\n\nexport type AddChannelUserMutation = (\n  { __typename?: 'mutation_root' }\n  & { addChannelUser?: Maybe<(\n    { __typename?: 'AddChannelUserOutput' }\n    & Pick<AddChannelUserOutput, 'affected_rows'>\n  )> }\n);\n\nexport type SendTypingEventMutationVariables = Exact<{\n  user_id: Scalars['String'];\n  channel_id: Scalars['Int'];\n}>;\n\n\nexport type SendTypingEventMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_user?: Maybe<(\n    { __typename?: 'user_mutation_response' }\n    & Pick<User_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type UpsertMessageCursorMutationVariables = Exact<{\n  channel_id: Scalars['Int'];\n  message_id: Scalars['Int'];\n  user_id: Scalars['String'];\n}>;\n\n\nexport type UpsertMessageCursorMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_message_cursor?: Maybe<(\n    { __typename?: 'message_cursor_mutation_response' }\n    & { returning: Array<(\n      { __typename?: 'message_cursor' }\n      & Pick<Message_Cursor, 'channel_id' | 'message_id' | 'user_id'>\n    )> }\n  )> }\n);\n\nexport type InsertChannelThreadMessageMutationVariables = Exact<{\n  channel_thread_id: Scalars['Int'];\n  message: Scalars['String'];\n  user_id: Scalars['String'];\n  image?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type InsertChannelThreadMessageMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_channel_thread_message?: Maybe<(\n    { __typename?: 'channel_thread_message_mutation_response' }\n    & Pick<Channel_Thread_Message_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'channel_thread_message' }\n      & Pick<Channel_Thread_Message, 'id' | 'image' | 'message' | 'timestamp' | 'user_id'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'auth0_user_id' | 'username'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type DeleteThreadMessageMutationVariables = Exact<{\n  message_id: Scalars['Int'];\n}>;\n\n\nexport type DeleteThreadMessageMutation = (\n  { __typename?: 'mutation_root' }\n  & { delete_channel_thread_message?: Maybe<(\n    { __typename?: 'channel_thread_message_mutation_response' }\n    & Pick<Channel_Thread_Message_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type InsertChannelThreadMutationVariables = Exact<{\n  message_id: Scalars['Int'];\n}>;\n\n\nexport type InsertChannelThreadMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_channel_thread?: Maybe<(\n    { __typename?: 'channel_thread_mutation_response' }\n    & { returning: Array<(\n      { __typename?: 'channel_thread' }\n      & { message?: Maybe<(\n        { __typename?: 'message' }\n        & Pick<Message, 'image' | 'text' | 'timestamp' | 'id'>\n        & { user: (\n          { __typename?: 'user' }\n          & Pick<User, 'auth0_user_id' | 'id' | 'username'>\n        ) }\n      )> }\n    )> }\n  )> }\n);\n\nexport type AddPollQuestionMutationVariables = Exact<{\n  text?: Maybe<Scalars['String']>;\n  owner_id?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type AddPollQuestionMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_poll_questions?: Maybe<(\n    { __typename?: 'poll_questions_mutation_response' }\n    & Pick<Poll_Questions_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type AddAnswerToQuestionMutationVariables = Exact<{\n  text: Scalars['String'];\n  pollQuestionId: Scalars['Int'];\n}>;\n\n\nexport type AddAnswerToQuestionMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_poll_anwers?: Maybe<(\n    { __typename?: 'poll_anwers_mutation_response' }\n    & Pick<Poll_Anwers_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type AddPublishPollQuestionToChannelMutationVariables = Exact<{\n  channelID: Scalars['Int'];\n  pollQuestionID: Scalars['Int'];\n}>;\n\n\nexport type AddPublishPollQuestionToChannelMutation = (\n  { __typename?: 'mutation_root' }\n  & { channelPoll?: Maybe<(\n    { __typename?: 'channel_poll_mutation_response' }\n    & Pick<Channel_Poll_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'channel_poll' }\n      & Pick<Channel_Poll, 'channel_id' | 'id' | 'poll_questions'>\n    )> }\n  )> }\n);\n\nexport type SetPollAnswerVoteMutationVariables = Exact<{\n  pollAnswerId: Scalars['Int'];\n  newVote: Scalars['Int'];\n}>;\n\n\nexport type SetPollAnswerVoteMutation = (\n  { __typename?: 'mutation_root' }\n  & { updatePollAnswer?: Maybe<(\n    { __typename?: 'poll_anwers_mutation_response' }\n    & Pick<Poll_Anwers_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'poll_anwers' }\n      & Pick<Poll_Anwers, 'votes'>\n    )> }\n  )> }\n);\n\nexport type SetPublishPollQuestionStateMutationVariables = Exact<{\n  pollQuestionId: Scalars['Int'];\n  is_active?: Maybe<Scalars['Boolean']>;\n}>;\n\n\nexport type SetPublishPollQuestionStateMutation = (\n  { __typename?: 'mutation_root' }\n  & { setPollQuestionState?: Maybe<(\n    { __typename?: 'poll_questions_mutation_response' }\n    & Pick<Poll_Questions_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'poll_questions' }\n      & Pick<Poll_Questions, 'is_active'>\n    )> }\n  )>, delete_channel_poll?: Maybe<(\n    { __typename?: 'channel_poll_mutation_response' }\n    & Pick<Channel_Poll_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type DeletePollQuestionMutationVariables = Exact<{\n  pollQuestionId: Scalars['Int'];\n}>;\n\n\nexport type DeletePollQuestionMutation = (\n  { __typename?: 'mutation_root' }\n  & { delete_poll_anwers?: Maybe<(\n    { __typename?: 'poll_anwers_mutation_response' }\n    & Pick<Poll_Anwers_Mutation_Response, 'affected_rows'>\n  )>, deletePollQuestion?: Maybe<(\n    { __typename?: 'poll_questions_mutation_response' }\n    & Pick<Poll_Questions_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type DeletePollQuestionFromChannelMutationVariables = Exact<{\n  pollQuestionId: Scalars['Int'];\n  channelId: Scalars['Int'];\n}>;\n\n\nexport type DeletePollQuestionFromChannelMutation = (\n  { __typename?: 'mutation_root' }\n  & { delete_channel_poll?: Maybe<(\n    { __typename?: 'channel_poll_mutation_response' }\n    & Pick<Channel_Poll_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type UpdatePollAnswerTextMutationVariables = Exact<{\n  text: Scalars['String'];\n  pollAnswerId: Scalars['Int'];\n}>;\n\n\nexport type UpdatePollAnswerTextMutation = (\n  { __typename?: 'mutation_root' }\n  & { pollAnswerText?: Maybe<(\n    { __typename?: 'poll_anwers_mutation_response' }\n    & Pick<Poll_Anwers_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'poll_anwers' }\n      & Pick<Poll_Anwers, 'text'>\n    )> }\n  )> }\n);\n\nexport type DeletePollAnswerIdMutationVariables = Exact<{\n  pollAnswerId: Scalars['Int'];\n}>;\n\n\nexport type DeletePollAnswerIdMutation = (\n  { __typename?: 'mutation_root' }\n  & { delete_poll_anwers?: Maybe<(\n    { __typename?: 'poll_anwers_mutation_response' }\n    & Pick<Poll_Anwers_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type SetUserVotePollQuestionMutationVariables = Exact<{\n  userName?: Maybe<Scalars['String']>;\n  auth0UserId?: Maybe<Scalars['String']>;\n  pollQuestionId?: Maybe<Scalars['Int']>;\n  pollAnswerId?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type SetUserVotePollQuestionMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_user_votes?: Maybe<(\n    { __typename?: 'user_votes_mutation_response' }\n    & Pick<User_Votes_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type UpdatePollQuestionMutationVariables = Exact<{\n  pollQuestionId: Scalars['Int'];\n  text: Scalars['String'];\n}>;\n\n\nexport type UpdatePollQuestionMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_poll_questions?: Maybe<(\n    { __typename?: 'poll_questions_mutation_response' }\n    & Pick<Poll_Questions_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type GetMessagesQueryVariables = Exact<{\n  last_received_id?: Maybe<Scalars['Int']>;\n  last_received_ts?: Maybe<Scalars['timestamptz']>;\n  channel?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type GetMessagesQuery = (\n  { __typename?: 'query_root' }\n  & { channel: Array<(\n    { __typename?: 'channel' }\n    & { messages: Array<(\n      { __typename?: 'message' }\n      & Pick<Message, 'id' | 'text' | 'timestamp'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'username'>\n      ), channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'name'>\n      ), channel_threads: Array<(\n        { __typename?: 'channel_thread' }\n        & Pick<Channel_Thread, 'id'>\n      )> }\n    )> }\n  )> }\n);\n\nexport type GetMessagesSumQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetMessagesSumQuery = (\n  { __typename?: 'query_root' }\n  & { channel_aggregate: (\n    { __typename?: 'channel_aggregate' }\n    & { nodes: Array<(\n      { __typename?: 'channel' }\n      & { messages: Array<(\n        { __typename?: 'message' }\n        & Pick<Message, 'channel_id'>\n        & { channel: (\n          { __typename?: 'channel' }\n          & Pick<Channel, 'name'>\n        ) }\n      )>, messages_aggregate: (\n        { __typename?: 'message_aggregate' }\n        & { aggregate?: Maybe<(\n          { __typename?: 'message_aggregate_fields' }\n          & Pick<Message_Aggregate_Fields, 'count'>\n        )> }\n      ) }\n    )> }\n  ) }\n);\n\nexport type GetChannelsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetChannelsQuery = (\n  { __typename?: 'query_root' }\n  & { channels: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'name' | 'id' | 'is_private' | 'owner_id'>\n  )> }\n);\n\nexport type GetUserListQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserListQuery = (\n  { __typename?: 'query_root' }\n  & { users: Array<(\n    { __typename?: 'user' }\n    & Pick<User, 'username' | 'id' | 'auth0_user_id' | 'last_seen'>\n  )> }\n);\n\nexport type GetChannelByNameQueryVariables = Exact<{\n  name: Scalars['String'];\n}>;\n\n\nexport type GetChannelByNameQuery = (\n  { __typename?: 'query_root' }\n  & { channel: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'name' | 'id' | 'is_private' | 'owner_id' | 'channel_type'>\n  )> }\n);\n\nexport type GetAuth0UserByIdQueryVariables = Exact<{\n  user_id?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type GetAuth0UserByIdQuery = (\n  { __typename?: 'query_root' }\n  & { user: Array<(\n    { __typename?: 'user' }\n    & Pick<User, 'id' | 'username' | 'auth0_user_id'>\n    & { user_channels: Array<(\n      { __typename?: 'user_channels' }\n      & { channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'name' | 'id' | 'is_private'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type GetChannelThreadIdQueryVariables = Exact<{\n  message_id?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetChannelThreadIdQuery = (\n  { __typename?: 'query_root' }\n  & { channel_thread: Array<(\n    { __typename?: 'channel_thread' }\n    & Pick<Channel_Thread, 'id'>\n  )> }\n);\n\nexport type GetChannelThreadParentMessageQueryVariables = Exact<{\n  limit?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetChannelThreadParentMessageQuery = (\n  { __typename?: 'query_root' }\n  & { channel_thread_message: Array<(\n    { __typename?: 'channel_thread_message' }\n    & Pick<Channel_Thread_Message, 'channel_thread_id' | 'timestamp'>\n    & { channel_thread: (\n      { __typename?: 'channel_thread' }\n      & { message?: Maybe<(\n        { __typename?: 'message' }\n        & Pick<Message, 'text' | 'timestamp' | 'image' | 'id' | 'user_id'>\n        & { user: (\n          { __typename?: 'user' }\n          & Pick<User, 'auth0_user_id' | 'username'>\n        ) }\n      )> }\n    ) }\n  )> }\n);\n\nexport type GetChannelThreadQueryVariables = Exact<{\n  message_id?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetChannelThreadQuery = (\n  { __typename?: 'query_root' }\n  & { channel_thread: Array<(\n    { __typename?: 'channel_thread' }\n    & Pick<Channel_Thread, 'id'>\n    & { message?: Maybe<(\n      { __typename?: 'message' }\n      & Pick<Message, 'id' | 'image' | 'text' | 'deleted' | 'timestamp'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'auth0_user_id' | 'id' | 'username'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type GetPollQuestionsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetPollQuestionsQuery = (\n  { __typename?: 'query_root' }\n  & { questions: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'id' | 'owner_id' | 'text'>\n  )> }\n);\n\nexport type GetPollQuestionAnswersQueryVariables = Exact<{\n  pollQuestionId?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetPollQuestionAnswersQuery = (\n  { __typename?: 'query_root' }\n  & { poll_question: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'id' | 'text' | 'is_active'>\n  )>, poll_answers: Array<(\n    { __typename?: 'poll_anwers' }\n    & Pick<Poll_Anwers, 'question_id' | 'text' | 'id' | 'votes'>\n  )> }\n);\n\nexport type GetPublicChannelsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetPublicChannelsQuery = (\n  { __typename?: 'query_root' }\n  & { channels: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'id' | 'name'>\n    & { channel_polls: Array<(\n      { __typename?: 'channel_poll' }\n      & { poll_question: (\n        { __typename?: 'poll_questions' }\n        & Pick<Poll_Questions, 'is_active'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type GetChannelPollsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetChannelPollsQuery = (\n  { __typename?: 'query_root' }\n  & { channelPoll: Array<(\n    { __typename?: 'channel_poll' }\n    & Pick<Channel_Poll, 'channel_id' | 'id' | 'poll_questions'>\n  )> }\n);\n\nexport type GetChannelPollQuestionQueryVariables = Exact<{\n  channelId?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetChannelPollQuestionQuery = (\n  { __typename?: 'query_root' }\n  & { getChannelPoll: Array<(\n    { __typename?: 'channel_poll' }\n    & Pick<Channel_Poll, 'id'>\n    & { poll_question: (\n      { __typename?: 'poll_questions' }\n      & Pick<Poll_Questions, 'id' | 'text'>\n      & { poll_anwers: Array<(\n        { __typename?: 'poll_anwers' }\n        & Pick<Poll_Anwers, 'text' | 'question_id'>\n      )> }\n    ) }\n  )> }\n);\n\nexport type GetPollAnswerVotesQueryVariables = Exact<{\n  pollAnswerId: Scalars['Int'];\n}>;\n\n\nexport type GetPollAnswerVotesQuery = (\n  { __typename?: 'query_root' }\n  & { poll_anwers: Array<(\n    { __typename?: 'poll_anwers' }\n    & Pick<Poll_Anwers, 'id' | 'votes'>\n  )> }\n);\n\nexport type WatchMessagesSubscriptionVariables = Exact<{\n  channelId: Scalars['Int'];\n  limit?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type WatchMessagesSubscription = (\n  { __typename?: 'subscription_root' }\n  & { messages: Array<(\n    { __typename?: 'message' }\n    & Pick<Message, 'id' | 'text' | 'image' | 'timestamp' | 'deleted'>\n    & { user: (\n      { __typename?: 'user' }\n      & Pick<User, 'username' | 'auth0_user_id'>\n    ), channel: (\n      { __typename?: 'channel' }\n      & Pick<Channel, 'name'>\n    ) }\n  )> }\n);\n\nexport type WatchChannelThreadMessagesSubscriptionVariables = Exact<{\n  limit: Scalars['Int'];\n  message_id: Scalars['Int'];\n}>;\n\n\nexport type WatchChannelThreadMessagesSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channel_thread_message: Array<(\n    { __typename?: 'channel_thread_message' }\n    & Pick<Channel_Thread_Message, 'id' | 'message' | 'image' | 'channel_thread_id' | 'timestamp'>\n    & { user: (\n      { __typename?: 'user' }\n      & Pick<User, 'username' | 'id' | 'auth0_user_id'>\n    ) }\n  )> }\n);\n\nexport type WatchChannelThreadSubscriptionVariables = Exact<{\n  message_id?: Scalars['Int'];\n}>;\n\n\nexport type WatchChannelThreadSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channel_thread: Array<(\n    { __typename?: 'channel_thread' }\n    & Pick<Channel_Thread, 'id'>\n    & { message?: Maybe<(\n      { __typename?: 'message' }\n      & Pick<Message, 'id'>\n    )>, channel_thread_messages: Array<(\n      { __typename?: 'channel_thread_message' }\n      & Pick<Channel_Thread_Message, 'id' | 'message' | 'timestamp'>\n    )> }\n  )> }\n);\n\nexport type WatchThreadsSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchThreadsSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channel_thread: Array<(\n    { __typename?: 'channel_thread' }\n    & Pick<Channel_Thread, 'id' | 'message_id'>\n    & { message?: Maybe<(\n      { __typename?: 'message' }\n      & Pick<Message, 'image' | 'text' | 'deleted' | 'timestamp' | 'id' | 'user_id'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'auth0_user_id' | 'username'>\n      ), channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'id' | 'name' | 'channel_type'>\n      ) }\n    )>, channel_thread_messages: Array<(\n      { __typename?: 'channel_thread_message' }\n      & Pick<Channel_Thread_Message, 'id' | 'image' | 'message' | 'timestamp' | 'user_id'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'auth0_user_id' | 'username'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type WatchOnlineUsersSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchOnlineUsersSubscription = (\n  { __typename?: 'subscription_root' }\n  & { users: Array<(\n    { __typename?: 'user_online' }\n    & Pick<User_Online, 'id' | 'username' | 'auth0_user_id'>\n  )> }\n);\n\nexport type WatchChannelsSubscriptionVariables = Exact<{\n  channel_type: Channel_Type_Enum;\n}>;\n\n\nexport type WatchChannelsSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channels: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'name' | 'id' | 'is_private' | 'owner_id'>\n  )> }\n);\n\nexport type WatchDirectMessageChannelsSubscriptionVariables = Exact<{\n  channel_type: Channel_Type_Enum;\n  user_id?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type WatchDirectMessageChannelsSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channels: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'name' | 'id' | 'is_private' | 'owner_id'>\n    & { user_channels: Array<(\n      { __typename?: 'user_channels' }\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'username' | 'auth0_user_id'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type WatchUsersSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchUsersSubscription = (\n  { __typename?: 'subscription_root' }\n  & { user: Array<(\n    { __typename?: 'user' }\n    & Pick<User, 'username' | 'auth0_user_id'>\n  )> }\n);\n\nexport type WatchUsersWhoHaveNotSubscribedToChannelSubscriptionVariables = Exact<{\n  user_id: Scalars['String'];\n  channel_id: Scalars['Int'];\n}>;\n\n\nexport type WatchUsersWhoHaveNotSubscribedToChannelSubscription = (\n  { __typename?: 'subscription_root' }\n  & { user: Array<(\n    { __typename?: 'user' }\n    & Pick<User, 'auth0_user_id' | 'username'>\n  )> }\n);\n\nexport type WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscriptionVariables = Exact<{\n  user_id: Scalars['String'];\n}>;\n\n\nexport type WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription = (\n  { __typename?: 'subscription_root' }\n  & { user: Array<(\n    { __typename?: 'user' }\n    & Pick<User, 'auth0_user_id' | 'username'>\n    & { user_channels: Array<(\n      { __typename?: 'user_channels' }\n      & Pick<User_Channels, 'channel_id'>\n      & { channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'name'>\n        & { user_channels: Array<(\n          { __typename?: 'user_channels' }\n          & { user: (\n            { __typename?: 'user' }\n            & Pick<User, 'auth0_user_id' | 'username'>\n          ) }\n        )> }\n      ) }\n    )> }\n  )> }\n);\n\nexport type WatchUsersWhoHaveSubscribedToChannelSubscriptionVariables = Exact<{\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n}>;\n\n\nexport type WatchUsersWhoHaveSubscribedToChannelSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channel: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'id'>\n    & { user_channels: Array<(\n      { __typename?: 'user_channels' }\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'auth0_user_id' | 'username'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type GetUserIsTypingSubscriptionVariables = Exact<{\n  self_id: Scalars['String'];\n  channel_id: Scalars['Int'];\n}>;\n\n\nexport type GetUserIsTypingSubscription = (\n  { __typename?: 'subscription_root' }\n  & { user_typing: Array<(\n    { __typename?: 'user_typing' }\n    & Pick<User_Typing, 'last_typed' | 'username'>\n  )> }\n);\n\nexport type WatchNewMessagesSubscriptionVariables = Exact<{\n  channelId: Scalars['Int'];\n}>;\n\n\nexport type WatchNewMessagesSubscription = (\n  { __typename?: 'subscription_root' }\n  & { newMessages: Array<(\n    { __typename?: 'message' }\n    & Pick<Message, 'id' | 'text' | 'timestamp'>\n    & { user: (\n      { __typename?: 'user' }\n      & Pick<User, 'username'>\n    ) }\n  )> }\n);\n\nexport type WatchChannelsLastMessageIdSubscriptionVariables = Exact<{\n  channel_type?: Channel_Type_Enum;\n}>;\n\n\nexport type WatchChannelsLastMessageIdSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channels: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'name' | 'id' | 'is_private' | 'owner_id'>\n    & { messages: Array<(\n      { __typename?: 'message' }\n      & Pick<Message, 'id'>\n    )> }\n  )> }\n);\n\nexport type WatchMessageCursorSubscriptionVariables = Exact<{\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n}>;\n\n\nexport type WatchMessageCursorSubscription = (\n  { __typename?: 'subscription_root' }\n  & { message_cursor: Array<(\n    { __typename?: 'message_cursor' }\n    & Pick<Message_Cursor, 'channel_id' | 'message_id' | 'user_id'>\n  )> }\n);\n\nexport type WatchGetPollQuestionsSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchGetPollQuestionsSubscription = (\n  { __typename?: 'subscription_root' }\n  & { questions: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'id' | 'text' | 'created_at' | 'updated_at' | 'owner_id' | 'is_active'>\n    & { channel_polls: Array<(\n      { __typename?: 'channel_poll' }\n      & { channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'name'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type WatchGetChannelPollQuestionPublishStateSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchGetChannelPollQuestionPublishStateSubscription = (\n  { __typename?: 'subscription_root' }\n  & { getChannelPollQuestionPublishState: Array<(\n    { __typename?: 'channel_poll' }\n    & Pick<Channel_Poll, 'channel_id' | 'id' | 'poll_questions'>\n    & { channel: (\n      { __typename?: 'channel' }\n      & Pick<Channel, 'name'>\n    ), poll_question: (\n      { __typename?: 'poll_questions' }\n      & Pick<Poll_Questions, 'text' | 'is_active'>\n    ) }\n  )> }\n);\n\nexport type WatchGetPollQuestionSubscriptionVariables = Exact<{\n  pollQuestionId?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type WatchGetPollQuestionSubscription = (\n  { __typename?: 'subscription_root' }\n  & { poll_question: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'id' | 'text' | 'is_active'>\n  )> }\n);\n\nexport type WatchGetPollAnswersSubscriptionVariables = Exact<{\n  pollQuestionId: Scalars['Int'];\n}>;\n\n\nexport type WatchGetPollAnswersSubscription = (\n  { __typename?: 'subscription_root' }\n  & { poll_answers: Array<(\n    { __typename?: 'poll_anwers' }\n    & Pick<Poll_Anwers, 'question_id' | 'text' | 'id' | 'votes'>\n  )> }\n);\n\nexport type WatchChannelPollQuestionSubscriptionVariables = Exact<{\n  channelId: Scalars['Int'];\n}>;\n\n\nexport type WatchChannelPollQuestionSubscription = (\n  { __typename?: 'subscription_root' }\n  & { getChannelPoll: Array<(\n    { __typename?: 'channel_poll' }\n    & Pick<Channel_Poll, 'id'>\n    & { poll_question: (\n      { __typename?: 'poll_questions' }\n      & Pick<Poll_Questions, 'id' | 'text'>\n      & { poll_anwers: Array<(\n        { __typename?: 'poll_anwers' }\n        & Pick<Poll_Anwers, 'text' | 'votes' | 'id'>\n      )> }\n    ) }\n  )> }\n);\n\nexport type WatchPollAnswerVotesSubscriptionVariables = Exact<{\n  pollAnswerId: Scalars['Int'];\n}>;\n\n\nexport type WatchPollAnswerVotesSubscription = (\n  { __typename?: 'subscription_root' }\n  & { pollAnswerVotes: Array<(\n    { __typename?: 'poll_anwers' }\n    & Pick<Poll_Anwers, 'id' | 'votes'>\n  )> }\n);\n\nexport type GetPollQuestionStateSubscriptionVariables = Exact<{\n  pollQuestionId: Scalars['Int'];\n}>;\n\n\nexport type GetPollQuestionStateSubscription = (\n  { __typename?: 'subscription_root' }\n  & { poll_questions: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'is_active'>\n  )> }\n);\n\nexport type WatchGetChannelsSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchGetChannelsSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channel: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'id' | 'name'>\n    & { channel_polls: Array<(\n      { __typename?: 'channel_poll' }\n      & Pick<Channel_Poll, 'channel_id'>\n      & { poll_question: (\n        { __typename?: 'poll_questions' }\n        & Pick<Poll_Questions, 'id' | 'text'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type WatchChannelHasActivePollSubscriptionVariables = Exact<{\n  currentChannelId: Scalars['Int'];\n}>;\n\n\nexport type WatchChannelHasActivePollSubscription = (\n  { __typename?: 'subscription_root' }\n  & { poll_questions: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'id' | 'text'>\n  )> }\n);\n\nexport type WatchChannelPollActiveStateSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchChannelPollActiveStateSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channel_poll: Array<(\n    { __typename?: 'channel_poll' }\n    & Pick<Channel_Poll, 'id'>\n    & { channel: (\n      { __typename?: 'channel' }\n      & Pick<Channel, 'name'>\n      & { channel_polls: Array<(\n        { __typename?: 'channel_poll' }\n        & { poll_question: (\n          { __typename?: 'poll_questions' }\n          & Pick<Poll_Questions, 'created_at'>\n        ) }\n      )> }\n    ) }\n  )> }\n);\n\nexport type WatchCheckUserHasVotedSubscriptionVariables = Exact<{\n  pollQuestionId?: Maybe<Scalars['Int']>;\n  auth0UserId?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type WatchCheckUserHasVotedSubscription = (\n  { __typename?: 'subscription_root' }\n  & { user_votes: Array<(\n    { __typename?: 'user_votes' }\n    & Pick<User_Votes, 'auth0_user_id' | 'poll_question_id' | 'poll_answer_id'>\n  )> }\n);\n\n\nexport const InsertMessageDocument = gql`\n    mutation insertMessage($message: message_insert_input!) {\n  insert_message(objects: [$message]) {\n    returning {\n      id\n      timestamp\n      text\n      user {\n        username\n      }\n      channel {\n        name\n      }\n    }\n  }\n}\n    `;\nexport type InsertMessageMutationFn = Apollo.MutationFunction<InsertMessageMutation, InsertMessageMutationVariables>;\n\n/**\n * __useInsertMessageMutation__\n *\n * To run a mutation, you first call `useInsertMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useInsertMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [insertMessageMutation, { data, loading, error }] = useInsertMessageMutation({\n *   variables: {\n *      message: // value for 'message'\n *   },\n * });\n */\nexport function useInsertMessageMutation(baseOptions?: Apollo.MutationHookOptions<InsertMessageMutation, InsertMessageMutationVariables>) {\n        return Apollo.useMutation<InsertMessageMutation, InsertMessageMutationVariables>(InsertMessageDocument, baseOptions);\n      }\nexport type InsertMessageMutationHookResult = ReturnType<typeof useInsertMessageMutation>;\nexport type InsertMessageMutationResult = Apollo.MutationResult<InsertMessageMutation>;\nexport type InsertMessageMutationOptions = Apollo.BaseMutationOptions<InsertMessageMutation, InsertMessageMutationVariables>;\nexport const UpdateMessageDocument = gql`\n    mutation updateMessage($_eq: Int!, $text: String!, $deleted: Boolean = false) {\n  update_message(where: {id: {_eq: $_eq}}, _set: {text: $text, deleted: $deleted, image: null}) {\n    affected_rows\n  }\n}\n    `;\nexport type UpdateMessageMutationFn = Apollo.MutationFunction<UpdateMessageMutation, UpdateMessageMutationVariables>;\n\n/**\n * __useUpdateMessageMutation__\n *\n * To run a mutation, you first call `useUpdateMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateMessageMutation, { data, loading, error }] = useUpdateMessageMutation({\n *   variables: {\n *      _eq: // value for '_eq'\n *      text: // value for 'text'\n *      deleted: // value for 'deleted'\n *   },\n * });\n */\nexport function useUpdateMessageMutation(baseOptions?: Apollo.MutationHookOptions<UpdateMessageMutation, UpdateMessageMutationVariables>) {\n        return Apollo.useMutation<UpdateMessageMutation, UpdateMessageMutationVariables>(UpdateMessageDocument, baseOptions);\n      }\nexport type UpdateMessageMutationHookResult = ReturnType<typeof useUpdateMessageMutation>;\nexport type UpdateMessageMutationResult = Apollo.MutationResult<UpdateMessageMutation>;\nexport type UpdateMessageMutationOptions = Apollo.BaseMutationOptions<UpdateMessageMutation, UpdateMessageMutationVariables>;\nexport const DeleteMessageDocument = gql`\n    mutation deleteMessage($message_id: Int) {\n  delete_message(where: {id: {_eq: $message_id}}) {\n    affected_rows\n  }\n}\n    `;\nexport type DeleteMessageMutationFn = Apollo.MutationFunction<DeleteMessageMutation, DeleteMessageMutationVariables>;\n\n/**\n * __useDeleteMessageMutation__\n *\n * To run a mutation, you first call `useDeleteMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteMessageMutation, { data, loading, error }] = useDeleteMessageMutation({\n *   variables: {\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useDeleteMessageMutation(baseOptions?: Apollo.MutationHookOptions<DeleteMessageMutation, DeleteMessageMutationVariables>) {\n        return Apollo.useMutation<DeleteMessageMutation, DeleteMessageMutationVariables>(DeleteMessageDocument, baseOptions);\n      }\nexport type DeleteMessageMutationHookResult = ReturnType<typeof useDeleteMessageMutation>;\nexport type DeleteMessageMutationResult = Apollo.MutationResult<DeleteMessageMutation>;\nexport type DeleteMessageMutationOptions = Apollo.BaseMutationOptions<DeleteMessageMutation, DeleteMessageMutationVariables>;\nexport const SetUserOnlineDocument = gql`\n    mutation setUserOnline($user_id: String!) {\n  update_user(_set: {last_seen: \"now()\"}, where: {auth0_user_id: {_eq: $user_id}}) {\n    affected_rows\n  }\n}\n    `;\nexport type SetUserOnlineMutationFn = Apollo.MutationFunction<SetUserOnlineMutation, SetUserOnlineMutationVariables>;\n\n/**\n * __useSetUserOnlineMutation__\n *\n * To run a mutation, you first call `useSetUserOnlineMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetUserOnlineMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setUserOnlineMutation, { data, loading, error }] = useSetUserOnlineMutation({\n *   variables: {\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useSetUserOnlineMutation(baseOptions?: Apollo.MutationHookOptions<SetUserOnlineMutation, SetUserOnlineMutationVariables>) {\n        return Apollo.useMutation<SetUserOnlineMutation, SetUserOnlineMutationVariables>(SetUserOnlineDocument, baseOptions);\n      }\nexport type SetUserOnlineMutationHookResult = ReturnType<typeof useSetUserOnlineMutation>;\nexport type SetUserOnlineMutationResult = Apollo.MutationResult<SetUserOnlineMutation>;\nexport type SetUserOnlineMutationOptions = Apollo.BaseMutationOptions<SetUserOnlineMutation, SetUserOnlineMutationVariables>;\nexport const AddChannelDocument = gql`\n    mutation addChannel($channel: channel_insert_input!) {\n  insert_channel(objects: [$channel]) {\n    returning {\n      id\n      name\n      owner_id\n      is_private\n    }\n  }\n}\n    `;\nexport type AddChannelMutationFn = Apollo.MutationFunction<AddChannelMutation, AddChannelMutationVariables>;\n\n/**\n * __useAddChannelMutation__\n *\n * To run a mutation, you first call `useAddChannelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddChannelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addChannelMutation, { data, loading, error }] = useAddChannelMutation({\n *   variables: {\n *      channel: // value for 'channel'\n *   },\n * });\n */\nexport function useAddChannelMutation(baseOptions?: Apollo.MutationHookOptions<AddChannelMutation, AddChannelMutationVariables>) {\n        return Apollo.useMutation<AddChannelMutation, AddChannelMutationVariables>(AddChannelDocument, baseOptions);\n      }\nexport type AddChannelMutationHookResult = ReturnType<typeof useAddChannelMutation>;\nexport type AddChannelMutationResult = Apollo.MutationResult<AddChannelMutation>;\nexport type AddChannelMutationOptions = Apollo.BaseMutationOptions<AddChannelMutation, AddChannelMutationVariables>;\nexport const ValidateAndAddDirectMessageChannelDocument = gql`\n    mutation validateAndAddDirectMessageChannel($name: String!, $user_id1: String!, $user_id2: String!) {\n  validateAndAddDirectMessageChannel(name: $name, user_id1: $user_id1, user_id2: $user_id2) {\n    id\n    name\n  }\n}\n    `;\nexport type ValidateAndAddDirectMessageChannelMutationFn = Apollo.MutationFunction<ValidateAndAddDirectMessageChannelMutation, ValidateAndAddDirectMessageChannelMutationVariables>;\n\n/**\n * __useValidateAndAddDirectMessageChannelMutation__\n *\n * To run a mutation, you first call `useValidateAndAddDirectMessageChannelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useValidateAndAddDirectMessageChannelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [validateAndAddDirectMessageChannelMutation, { data, loading, error }] = useValidateAndAddDirectMessageChannelMutation({\n *   variables: {\n *      name: // value for 'name'\n *      user_id1: // value for 'user_id1'\n *      user_id2: // value for 'user_id2'\n *   },\n * });\n */\nexport function useValidateAndAddDirectMessageChannelMutation(baseOptions?: Apollo.MutationHookOptions<ValidateAndAddDirectMessageChannelMutation, ValidateAndAddDirectMessageChannelMutationVariables>) {\n        return Apollo.useMutation<ValidateAndAddDirectMessageChannelMutation, ValidateAndAddDirectMessageChannelMutationVariables>(ValidateAndAddDirectMessageChannelDocument, baseOptions);\n      }\nexport type ValidateAndAddDirectMessageChannelMutationHookResult = ReturnType<typeof useValidateAndAddDirectMessageChannelMutation>;\nexport type ValidateAndAddDirectMessageChannelMutationResult = Apollo.MutationResult<ValidateAndAddDirectMessageChannelMutation>;\nexport type ValidateAndAddDirectMessageChannelMutationOptions = Apollo.BaseMutationOptions<ValidateAndAddDirectMessageChannelMutation, ValidateAndAddDirectMessageChannelMutationVariables>;\nexport const AddChannelUserDocument = gql`\n    mutation addChannelUser($channel_id: Int!, $user_id: String!) {\n  addChannelUser(user_id: $user_id, channel_id: $channel_id) {\n    affected_rows\n  }\n}\n    `;\nexport type AddChannelUserMutationFn = Apollo.MutationFunction<AddChannelUserMutation, AddChannelUserMutationVariables>;\n\n/**\n * __useAddChannelUserMutation__\n *\n * To run a mutation, you first call `useAddChannelUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddChannelUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addChannelUserMutation, { data, loading, error }] = useAddChannelUserMutation({\n *   variables: {\n *      channel_id: // value for 'channel_id'\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useAddChannelUserMutation(baseOptions?: Apollo.MutationHookOptions<AddChannelUserMutation, AddChannelUserMutationVariables>) {\n        return Apollo.useMutation<AddChannelUserMutation, AddChannelUserMutationVariables>(AddChannelUserDocument, baseOptions);\n      }\nexport type AddChannelUserMutationHookResult = ReturnType<typeof useAddChannelUserMutation>;\nexport type AddChannelUserMutationResult = Apollo.MutationResult<AddChannelUserMutation>;\nexport type AddChannelUserMutationOptions = Apollo.BaseMutationOptions<AddChannelUserMutation, AddChannelUserMutationVariables>;\nexport const SendTypingEventDocument = gql`\n    mutation sendTypingEvent($user_id: String!, $channel_id: Int!) {\n  update_user(_set: {last_typed: \"now()\", last_typed_channel: $channel_id}, where: {auth0_user_id: {_eq: $user_id}}) {\n    affected_rows\n  }\n}\n    `;\nexport type SendTypingEventMutationFn = Apollo.MutationFunction<SendTypingEventMutation, SendTypingEventMutationVariables>;\n\n/**\n * __useSendTypingEventMutation__\n *\n * To run a mutation, you first call `useSendTypingEventMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSendTypingEventMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [sendTypingEventMutation, { data, loading, error }] = useSendTypingEventMutation({\n *   variables: {\n *      user_id: // value for 'user_id'\n *      channel_id: // value for 'channel_id'\n *   },\n * });\n */\nexport function useSendTypingEventMutation(baseOptions?: Apollo.MutationHookOptions<SendTypingEventMutation, SendTypingEventMutationVariables>) {\n        return Apollo.useMutation<SendTypingEventMutation, SendTypingEventMutationVariables>(SendTypingEventDocument, baseOptions);\n      }\nexport type SendTypingEventMutationHookResult = ReturnType<typeof useSendTypingEventMutation>;\nexport type SendTypingEventMutationResult = Apollo.MutationResult<SendTypingEventMutation>;\nexport type SendTypingEventMutationOptions = Apollo.BaseMutationOptions<SendTypingEventMutation, SendTypingEventMutationVariables>;\nexport const UpsertMessageCursorDocument = gql`\n    mutation upsertMessageCursor($channel_id: Int!, $message_id: Int!, $user_id: String!) {\n  insert_message_cursor(objects: {channel_id: $channel_id, message_id: $message_id, user_id: $user_id}, on_conflict: {constraint: message_cursor_channel_id_user_id_key, update_columns: message_id}) {\n    returning {\n      channel_id\n      message_id\n      user_id\n    }\n  }\n}\n    `;\nexport type UpsertMessageCursorMutationFn = Apollo.MutationFunction<UpsertMessageCursorMutation, UpsertMessageCursorMutationVariables>;\n\n/**\n * __useUpsertMessageCursorMutation__\n *\n * To run a mutation, you first call `useUpsertMessageCursorMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpsertMessageCursorMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [upsertMessageCursorMutation, { data, loading, error }] = useUpsertMessageCursorMutation({\n *   variables: {\n *      channel_id: // value for 'channel_id'\n *      message_id: // value for 'message_id'\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useUpsertMessageCursorMutation(baseOptions?: Apollo.MutationHookOptions<UpsertMessageCursorMutation, UpsertMessageCursorMutationVariables>) {\n        return Apollo.useMutation<UpsertMessageCursorMutation, UpsertMessageCursorMutationVariables>(UpsertMessageCursorDocument, baseOptions);\n      }\nexport type UpsertMessageCursorMutationHookResult = ReturnType<typeof useUpsertMessageCursorMutation>;\nexport type UpsertMessageCursorMutationResult = Apollo.MutationResult<UpsertMessageCursorMutation>;\nexport type UpsertMessageCursorMutationOptions = Apollo.BaseMutationOptions<UpsertMessageCursorMutation, UpsertMessageCursorMutationVariables>;\nexport const InsertChannelThreadMessageDocument = gql`\n    mutation insertChannelThreadMessage($channel_thread_id: Int!, $message: String!, $user_id: String!, $image: String) {\n  insert_channel_thread_message(objects: {user_id: $user_id, channel_thread_id: $channel_thread_id, message: $message, image: $image}) {\n    affected_rows\n    returning {\n      id\n      image\n      message\n      timestamp\n      user_id\n      user {\n        auth0_user_id\n        username\n      }\n    }\n  }\n}\n    `;\nexport type InsertChannelThreadMessageMutationFn = Apollo.MutationFunction<InsertChannelThreadMessageMutation, InsertChannelThreadMessageMutationVariables>;\n\n/**\n * __useInsertChannelThreadMessageMutation__\n *\n * To run a mutation, you first call `useInsertChannelThreadMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useInsertChannelThreadMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [insertChannelThreadMessageMutation, { data, loading, error }] = useInsertChannelThreadMessageMutation({\n *   variables: {\n *      channel_thread_id: // value for 'channel_thread_id'\n *      message: // value for 'message'\n *      user_id: // value for 'user_id'\n *      image: // value for 'image'\n *   },\n * });\n */\nexport function useInsertChannelThreadMessageMutation(baseOptions?: Apollo.MutationHookOptions<InsertChannelThreadMessageMutation, InsertChannelThreadMessageMutationVariables>) {\n        return Apollo.useMutation<InsertChannelThreadMessageMutation, InsertChannelThreadMessageMutationVariables>(InsertChannelThreadMessageDocument, baseOptions);\n      }\nexport type InsertChannelThreadMessageMutationHookResult = ReturnType<typeof useInsertChannelThreadMessageMutation>;\nexport type InsertChannelThreadMessageMutationResult = Apollo.MutationResult<InsertChannelThreadMessageMutation>;\nexport type InsertChannelThreadMessageMutationOptions = Apollo.BaseMutationOptions<InsertChannelThreadMessageMutation, InsertChannelThreadMessageMutationVariables>;\nexport const DeleteThreadMessageDocument = gql`\n    mutation deleteThreadMessage($message_id: Int!) {\n  delete_channel_thread_message(where: {id: {_eq: $message_id}}) {\n    affected_rows\n  }\n}\n    `;\nexport type DeleteThreadMessageMutationFn = Apollo.MutationFunction<DeleteThreadMessageMutation, DeleteThreadMessageMutationVariables>;\n\n/**\n * __useDeleteThreadMessageMutation__\n *\n * To run a mutation, you first call `useDeleteThreadMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteThreadMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteThreadMessageMutation, { data, loading, error }] = useDeleteThreadMessageMutation({\n *   variables: {\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useDeleteThreadMessageMutation(baseOptions?: Apollo.MutationHookOptions<DeleteThreadMessageMutation, DeleteThreadMessageMutationVariables>) {\n        return Apollo.useMutation<DeleteThreadMessageMutation, DeleteThreadMessageMutationVariables>(DeleteThreadMessageDocument, baseOptions);\n      }\nexport type DeleteThreadMessageMutationHookResult = ReturnType<typeof useDeleteThreadMessageMutation>;\nexport type DeleteThreadMessageMutationResult = Apollo.MutationResult<DeleteThreadMessageMutation>;\nexport type DeleteThreadMessageMutationOptions = Apollo.BaseMutationOptions<DeleteThreadMessageMutation, DeleteThreadMessageMutationVariables>;\nexport const InsertChannelThreadDocument = gql`\n    mutation insertChannelThread($message_id: Int!) {\n  insert_channel_thread(objects: {message_id: $message_id}) {\n    returning {\n      message {\n        image\n        text\n        timestamp\n        id\n        user {\n          auth0_user_id\n          id\n          username\n        }\n      }\n    }\n  }\n}\n    `;\nexport type InsertChannelThreadMutationFn = Apollo.MutationFunction<InsertChannelThreadMutation, InsertChannelThreadMutationVariables>;\n\n/**\n * __useInsertChannelThreadMutation__\n *\n * To run a mutation, you first call `useInsertChannelThreadMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useInsertChannelThreadMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [insertChannelThreadMutation, { data, loading, error }] = useInsertChannelThreadMutation({\n *   variables: {\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useInsertChannelThreadMutation(baseOptions?: Apollo.MutationHookOptions<InsertChannelThreadMutation, InsertChannelThreadMutationVariables>) {\n        return Apollo.useMutation<InsertChannelThreadMutation, InsertChannelThreadMutationVariables>(InsertChannelThreadDocument, baseOptions);\n      }\nexport type InsertChannelThreadMutationHookResult = ReturnType<typeof useInsertChannelThreadMutation>;\nexport type InsertChannelThreadMutationResult = Apollo.MutationResult<InsertChannelThreadMutation>;\nexport type InsertChannelThreadMutationOptions = Apollo.BaseMutationOptions<InsertChannelThreadMutation, InsertChannelThreadMutationVariables>;\nexport const AddPollQuestionDocument = gql`\n    mutation addPollQuestion($text: String, $owner_id: String) {\n  insert_poll_questions(objects: {text: $text, owner_id: $owner_id}) {\n    affected_rows\n  }\n}\n    `;\nexport type AddPollQuestionMutationFn = Apollo.MutationFunction<AddPollQuestionMutation, AddPollQuestionMutationVariables>;\n\n/**\n * __useAddPollQuestionMutation__\n *\n * To run a mutation, you first call `useAddPollQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddPollQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addPollQuestionMutation, { data, loading, error }] = useAddPollQuestionMutation({\n *   variables: {\n *      text: // value for 'text'\n *      owner_id: // value for 'owner_id'\n *   },\n * });\n */\nexport function useAddPollQuestionMutation(baseOptions?: Apollo.MutationHookOptions<AddPollQuestionMutation, AddPollQuestionMutationVariables>) {\n        return Apollo.useMutation<AddPollQuestionMutation, AddPollQuestionMutationVariables>(AddPollQuestionDocument, baseOptions);\n      }\nexport type AddPollQuestionMutationHookResult = ReturnType<typeof useAddPollQuestionMutation>;\nexport type AddPollQuestionMutationResult = Apollo.MutationResult<AddPollQuestionMutation>;\nexport type AddPollQuestionMutationOptions = Apollo.BaseMutationOptions<AddPollQuestionMutation, AddPollQuestionMutationVariables>;\nexport const AddAnswerToQuestionDocument = gql`\n    mutation addAnswerToQuestion($text: String!, $pollQuestionId: Int!) {\n  insert_poll_anwers(objects: {question_id: $pollQuestionId, text: $text}) {\n    affected_rows\n  }\n}\n    `;\nexport type AddAnswerToQuestionMutationFn = Apollo.MutationFunction<AddAnswerToQuestionMutation, AddAnswerToQuestionMutationVariables>;\n\n/**\n * __useAddAnswerToQuestionMutation__\n *\n * To run a mutation, you first call `useAddAnswerToQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddAnswerToQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addAnswerToQuestionMutation, { data, loading, error }] = useAddAnswerToQuestionMutation({\n *   variables: {\n *      text: // value for 'text'\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useAddAnswerToQuestionMutation(baseOptions?: Apollo.MutationHookOptions<AddAnswerToQuestionMutation, AddAnswerToQuestionMutationVariables>) {\n        return Apollo.useMutation<AddAnswerToQuestionMutation, AddAnswerToQuestionMutationVariables>(AddAnswerToQuestionDocument, baseOptions);\n      }\nexport type AddAnswerToQuestionMutationHookResult = ReturnType<typeof useAddAnswerToQuestionMutation>;\nexport type AddAnswerToQuestionMutationResult = Apollo.MutationResult<AddAnswerToQuestionMutation>;\nexport type AddAnswerToQuestionMutationOptions = Apollo.BaseMutationOptions<AddAnswerToQuestionMutation, AddAnswerToQuestionMutationVariables>;\nexport const AddPublishPollQuestionToChannelDocument = gql`\n    mutation addPublishPollQuestionToChannel($channelID: Int!, $pollQuestionID: Int!) {\n  channelPoll: insert_channel_poll(objects: {channel_id: $channelID, poll_questions: $pollQuestionID, id: $channelID}, on_conflict: {constraint: channel_poll_pkey, update_columns: poll_questions, where: {id: {_eq: $channelID}}}) {\n    affected_rows\n    returning {\n      channel_id\n      id\n      poll_questions\n    }\n  }\n}\n    `;\nexport type AddPublishPollQuestionToChannelMutationFn = Apollo.MutationFunction<AddPublishPollQuestionToChannelMutation, AddPublishPollQuestionToChannelMutationVariables>;\n\n/**\n * __useAddPublishPollQuestionToChannelMutation__\n *\n * To run a mutation, you first call `useAddPublishPollQuestionToChannelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddPublishPollQuestionToChannelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addPublishPollQuestionToChannelMutation, { data, loading, error }] = useAddPublishPollQuestionToChannelMutation({\n *   variables: {\n *      channelID: // value for 'channelID'\n *      pollQuestionID: // value for 'pollQuestionID'\n *   },\n * });\n */\nexport function useAddPublishPollQuestionToChannelMutation(baseOptions?: Apollo.MutationHookOptions<AddPublishPollQuestionToChannelMutation, AddPublishPollQuestionToChannelMutationVariables>) {\n        return Apollo.useMutation<AddPublishPollQuestionToChannelMutation, AddPublishPollQuestionToChannelMutationVariables>(AddPublishPollQuestionToChannelDocument, baseOptions);\n      }\nexport type AddPublishPollQuestionToChannelMutationHookResult = ReturnType<typeof useAddPublishPollQuestionToChannelMutation>;\nexport type AddPublishPollQuestionToChannelMutationResult = Apollo.MutationResult<AddPublishPollQuestionToChannelMutation>;\nexport type AddPublishPollQuestionToChannelMutationOptions = Apollo.BaseMutationOptions<AddPublishPollQuestionToChannelMutation, AddPublishPollQuestionToChannelMutationVariables>;\nexport const SetPollAnswerVoteDocument = gql`\n    mutation setPollAnswerVote($pollAnswerId: Int!, $newVote: Int!) {\n  updatePollAnswer: update_poll_anwers(where: {id: {_eq: $pollAnswerId}}, _set: {votes: $newVote}) {\n    affected_rows\n    returning {\n      votes\n    }\n  }\n}\n    `;\nexport type SetPollAnswerVoteMutationFn = Apollo.MutationFunction<SetPollAnswerVoteMutation, SetPollAnswerVoteMutationVariables>;\n\n/**\n * __useSetPollAnswerVoteMutation__\n *\n * To run a mutation, you first call `useSetPollAnswerVoteMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetPollAnswerVoteMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setPollAnswerVoteMutation, { data, loading, error }] = useSetPollAnswerVoteMutation({\n *   variables: {\n *      pollAnswerId: // value for 'pollAnswerId'\n *      newVote: // value for 'newVote'\n *   },\n * });\n */\nexport function useSetPollAnswerVoteMutation(baseOptions?: Apollo.MutationHookOptions<SetPollAnswerVoteMutation, SetPollAnswerVoteMutationVariables>) {\n        return Apollo.useMutation<SetPollAnswerVoteMutation, SetPollAnswerVoteMutationVariables>(SetPollAnswerVoteDocument, baseOptions);\n      }\nexport type SetPollAnswerVoteMutationHookResult = ReturnType<typeof useSetPollAnswerVoteMutation>;\nexport type SetPollAnswerVoteMutationResult = Apollo.MutationResult<SetPollAnswerVoteMutation>;\nexport type SetPollAnswerVoteMutationOptions = Apollo.BaseMutationOptions<SetPollAnswerVoteMutation, SetPollAnswerVoteMutationVariables>;\nexport const SetPublishPollQuestionStateDocument = gql`\n    mutation setPublishPollQuestionState($pollQuestionId: Int!, $is_active: Boolean = false) {\n  setPollQuestionState: update_poll_questions(where: {id: {_eq: $pollQuestionId}}, _set: {is_active: $is_active}) {\n    affected_rows\n    returning {\n      is_active\n    }\n  }\n  delete_channel_poll(where: {poll_question: {id: {_eq: $pollQuestionId}}}) {\n    affected_rows\n  }\n}\n    `;\nexport type SetPublishPollQuestionStateMutationFn = Apollo.MutationFunction<SetPublishPollQuestionStateMutation, SetPublishPollQuestionStateMutationVariables>;\n\n/**\n * __useSetPublishPollQuestionStateMutation__\n *\n * To run a mutation, you first call `useSetPublishPollQuestionStateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetPublishPollQuestionStateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setPublishPollQuestionStateMutation, { data, loading, error }] = useSetPublishPollQuestionStateMutation({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *      is_active: // value for 'is_active'\n *   },\n * });\n */\nexport function useSetPublishPollQuestionStateMutation(baseOptions?: Apollo.MutationHookOptions<SetPublishPollQuestionStateMutation, SetPublishPollQuestionStateMutationVariables>) {\n        return Apollo.useMutation<SetPublishPollQuestionStateMutation, SetPublishPollQuestionStateMutationVariables>(SetPublishPollQuestionStateDocument, baseOptions);\n      }\nexport type SetPublishPollQuestionStateMutationHookResult = ReturnType<typeof useSetPublishPollQuestionStateMutation>;\nexport type SetPublishPollQuestionStateMutationResult = Apollo.MutationResult<SetPublishPollQuestionStateMutation>;\nexport type SetPublishPollQuestionStateMutationOptions = Apollo.BaseMutationOptions<SetPublishPollQuestionStateMutation, SetPublishPollQuestionStateMutationVariables>;\nexport const DeletePollQuestionDocument = gql`\n    mutation deletePollQuestion($pollQuestionId: Int!) {\n  delete_poll_anwers(where: {question_id: {_eq: $pollQuestionId}}) {\n    affected_rows\n  }\n  deletePollQuestion: delete_poll_questions(where: {id: {_eq: $pollQuestionId}, is_active: {_neq: true}}) {\n    affected_rows\n  }\n}\n    `;\nexport type DeletePollQuestionMutationFn = Apollo.MutationFunction<DeletePollQuestionMutation, DeletePollQuestionMutationVariables>;\n\n/**\n * __useDeletePollQuestionMutation__\n *\n * To run a mutation, you first call `useDeletePollQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePollQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePollQuestionMutation, { data, loading, error }] = useDeletePollQuestionMutation({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useDeletePollQuestionMutation(baseOptions?: Apollo.MutationHookOptions<DeletePollQuestionMutation, DeletePollQuestionMutationVariables>) {\n        return Apollo.useMutation<DeletePollQuestionMutation, DeletePollQuestionMutationVariables>(DeletePollQuestionDocument, baseOptions);\n      }\nexport type DeletePollQuestionMutationHookResult = ReturnType<typeof useDeletePollQuestionMutation>;\nexport type DeletePollQuestionMutationResult = Apollo.MutationResult<DeletePollQuestionMutation>;\nexport type DeletePollQuestionMutationOptions = Apollo.BaseMutationOptions<DeletePollQuestionMutation, DeletePollQuestionMutationVariables>;\nexport const DeletePollQuestionFromChannelDocument = gql`\n    mutation deletePollQuestionFromChannel($pollQuestionId: Int!, $channelId: Int!) {\n  delete_channel_poll(where: {poll_questions: {_eq: $pollQuestionId}, channel_id: {_eq: $channelId}}) {\n    affected_rows\n  }\n}\n    `;\nexport type DeletePollQuestionFromChannelMutationFn = Apollo.MutationFunction<DeletePollQuestionFromChannelMutation, DeletePollQuestionFromChannelMutationVariables>;\n\n/**\n * __useDeletePollQuestionFromChannelMutation__\n *\n * To run a mutation, you first call `useDeletePollQuestionFromChannelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePollQuestionFromChannelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePollQuestionFromChannelMutation, { data, loading, error }] = useDeletePollQuestionFromChannelMutation({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useDeletePollQuestionFromChannelMutation(baseOptions?: Apollo.MutationHookOptions<DeletePollQuestionFromChannelMutation, DeletePollQuestionFromChannelMutationVariables>) {\n        return Apollo.useMutation<DeletePollQuestionFromChannelMutation, DeletePollQuestionFromChannelMutationVariables>(DeletePollQuestionFromChannelDocument, baseOptions);\n      }\nexport type DeletePollQuestionFromChannelMutationHookResult = ReturnType<typeof useDeletePollQuestionFromChannelMutation>;\nexport type DeletePollQuestionFromChannelMutationResult = Apollo.MutationResult<DeletePollQuestionFromChannelMutation>;\nexport type DeletePollQuestionFromChannelMutationOptions = Apollo.BaseMutationOptions<DeletePollQuestionFromChannelMutation, DeletePollQuestionFromChannelMutationVariables>;\nexport const UpdatePollAnswerTextDocument = gql`\n    mutation updatePollAnswerText($text: String!, $pollAnswerId: Int!) {\n  pollAnswerText: update_poll_anwers(where: {id: {_eq: $pollAnswerId}}, _set: {text: $text}) {\n    affected_rows\n    returning {\n      text\n    }\n  }\n}\n    `;\nexport type UpdatePollAnswerTextMutationFn = Apollo.MutationFunction<UpdatePollAnswerTextMutation, UpdatePollAnswerTextMutationVariables>;\n\n/**\n * __useUpdatePollAnswerTextMutation__\n *\n * To run a mutation, you first call `useUpdatePollAnswerTextMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePollAnswerTextMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePollAnswerTextMutation, { data, loading, error }] = useUpdatePollAnswerTextMutation({\n *   variables: {\n *      text: // value for 'text'\n *      pollAnswerId: // value for 'pollAnswerId'\n *   },\n * });\n */\nexport function useUpdatePollAnswerTextMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePollAnswerTextMutation, UpdatePollAnswerTextMutationVariables>) {\n        return Apollo.useMutation<UpdatePollAnswerTextMutation, UpdatePollAnswerTextMutationVariables>(UpdatePollAnswerTextDocument, baseOptions);\n      }\nexport type UpdatePollAnswerTextMutationHookResult = ReturnType<typeof useUpdatePollAnswerTextMutation>;\nexport type UpdatePollAnswerTextMutationResult = Apollo.MutationResult<UpdatePollAnswerTextMutation>;\nexport type UpdatePollAnswerTextMutationOptions = Apollo.BaseMutationOptions<UpdatePollAnswerTextMutation, UpdatePollAnswerTextMutationVariables>;\nexport const DeletePollAnswerIdDocument = gql`\n    mutation deletePollAnswerId($pollAnswerId: Int!) {\n  delete_poll_anwers(where: {id: {_eq: $pollAnswerId}}) {\n    affected_rows\n  }\n}\n    `;\nexport type DeletePollAnswerIdMutationFn = Apollo.MutationFunction<DeletePollAnswerIdMutation, DeletePollAnswerIdMutationVariables>;\n\n/**\n * __useDeletePollAnswerIdMutation__\n *\n * To run a mutation, you first call `useDeletePollAnswerIdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePollAnswerIdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePollAnswerIdMutation, { data, loading, error }] = useDeletePollAnswerIdMutation({\n *   variables: {\n *      pollAnswerId: // value for 'pollAnswerId'\n *   },\n * });\n */\nexport function useDeletePollAnswerIdMutation(baseOptions?: Apollo.MutationHookOptions<DeletePollAnswerIdMutation, DeletePollAnswerIdMutationVariables>) {\n        return Apollo.useMutation<DeletePollAnswerIdMutation, DeletePollAnswerIdMutationVariables>(DeletePollAnswerIdDocument, baseOptions);\n      }\nexport type DeletePollAnswerIdMutationHookResult = ReturnType<typeof useDeletePollAnswerIdMutation>;\nexport type DeletePollAnswerIdMutationResult = Apollo.MutationResult<DeletePollAnswerIdMutation>;\nexport type DeletePollAnswerIdMutationOptions = Apollo.BaseMutationOptions<DeletePollAnswerIdMutation, DeletePollAnswerIdMutationVariables>;\nexport const SetUserVotePollQuestionDocument = gql`\n    mutation setUserVotePollQuestion($userName: String, $auth0UserId: String, $pollQuestionId: Int, $pollAnswerId: Int) {\n  insert_user_votes(objects: {username: $userName, auth0_user_id: $auth0UserId, poll_question_id: $pollQuestionId, poll_answer_id: $pollAnswerId}) {\n    affected_rows\n  }\n}\n    `;\nexport type SetUserVotePollQuestionMutationFn = Apollo.MutationFunction<SetUserVotePollQuestionMutation, SetUserVotePollQuestionMutationVariables>;\n\n/**\n * __useSetUserVotePollQuestionMutation__\n *\n * To run a mutation, you first call `useSetUserVotePollQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetUserVotePollQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setUserVotePollQuestionMutation, { data, loading, error }] = useSetUserVotePollQuestionMutation({\n *   variables: {\n *      userName: // value for 'userName'\n *      auth0UserId: // value for 'auth0UserId'\n *      pollQuestionId: // value for 'pollQuestionId'\n *      pollAnswerId: // value for 'pollAnswerId'\n *   },\n * });\n */\nexport function useSetUserVotePollQuestionMutation(baseOptions?: Apollo.MutationHookOptions<SetUserVotePollQuestionMutation, SetUserVotePollQuestionMutationVariables>) {\n        return Apollo.useMutation<SetUserVotePollQuestionMutation, SetUserVotePollQuestionMutationVariables>(SetUserVotePollQuestionDocument, baseOptions);\n      }\nexport type SetUserVotePollQuestionMutationHookResult = ReturnType<typeof useSetUserVotePollQuestionMutation>;\nexport type SetUserVotePollQuestionMutationResult = Apollo.MutationResult<SetUserVotePollQuestionMutation>;\nexport type SetUserVotePollQuestionMutationOptions = Apollo.BaseMutationOptions<SetUserVotePollQuestionMutation, SetUserVotePollQuestionMutationVariables>;\nexport const UpdatePollQuestionDocument = gql`\n    mutation updatePollQuestion($pollQuestionId: Int!, $text: String!) {\n  update_poll_questions(where: {id: {_eq: $pollQuestionId}}, _set: {text: $text}) {\n    affected_rows\n  }\n}\n    `;\nexport type UpdatePollQuestionMutationFn = Apollo.MutationFunction<UpdatePollQuestionMutation, UpdatePollQuestionMutationVariables>;\n\n/**\n * __useUpdatePollQuestionMutation__\n *\n * To run a mutation, you first call `useUpdatePollQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePollQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePollQuestionMutation, { data, loading, error }] = useUpdatePollQuestionMutation({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *      text: // value for 'text'\n *   },\n * });\n */\nexport function useUpdatePollQuestionMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePollQuestionMutation, UpdatePollQuestionMutationVariables>) {\n        return Apollo.useMutation<UpdatePollQuestionMutation, UpdatePollQuestionMutationVariables>(UpdatePollQuestionDocument, baseOptions);\n      }\nexport type UpdatePollQuestionMutationHookResult = ReturnType<typeof useUpdatePollQuestionMutation>;\nexport type UpdatePollQuestionMutationResult = Apollo.MutationResult<UpdatePollQuestionMutation>;\nexport type UpdatePollQuestionMutationOptions = Apollo.BaseMutationOptions<UpdatePollQuestionMutation, UpdatePollQuestionMutationVariables>;\nexport const GetMessagesDocument = gql`\n    query getMessages($last_received_id: Int, $last_received_ts: timestamptz, $channel: String) {\n  channel(where: {name: {_eq: $channel}}) {\n    messages(order_by: {timestamp: asc}, where: {_and: {id: {_neq: $last_received_id}, timestamp: {_gte: $last_received_ts}}}) {\n      id\n      text\n      timestamp\n      user {\n        username\n      }\n      channel {\n        name\n      }\n      channel_threads {\n        id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetMessagesQuery__\n *\n * To run a query within a React component, call `useGetMessagesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMessagesQuery({\n *   variables: {\n *      last_received_id: // value for 'last_received_id'\n *      last_received_ts: // value for 'last_received_ts'\n *      channel: // value for 'channel'\n *   },\n * });\n */\nexport function useGetMessagesQuery(baseOptions?: Apollo.QueryHookOptions<GetMessagesQuery, GetMessagesQueryVariables>) {\n        return Apollo.useQuery<GetMessagesQuery, GetMessagesQueryVariables>(GetMessagesDocument, baseOptions);\n      }\nexport function useGetMessagesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMessagesQuery, GetMessagesQueryVariables>) {\n          return Apollo.useLazyQuery<GetMessagesQuery, GetMessagesQueryVariables>(GetMessagesDocument, baseOptions);\n        }\nexport type GetMessagesQueryHookResult = ReturnType<typeof useGetMessagesQuery>;\nexport type GetMessagesLazyQueryHookResult = ReturnType<typeof useGetMessagesLazyQuery>;\nexport type GetMessagesQueryResult = Apollo.QueryResult<GetMessagesQuery, GetMessagesQueryVariables>;\nexport const GetMessagesSumDocument = gql`\n    query getMessagesSum {\n  channel_aggregate(where: {channel_type: {_eq: CHAT_MESSAGE}}, order_by: {name: asc}) {\n    nodes {\n      messages(distinct_on: channel_id) {\n        channel_id\n        channel {\n          name\n        }\n      }\n      messages_aggregate {\n        aggregate {\n          count\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetMessagesSumQuery__\n *\n * To run a query within a React component, call `useGetMessagesSumQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMessagesSumQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMessagesSumQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetMessagesSumQuery(baseOptions?: Apollo.QueryHookOptions<GetMessagesSumQuery, GetMessagesSumQueryVariables>) {\n        return Apollo.useQuery<GetMessagesSumQuery, GetMessagesSumQueryVariables>(GetMessagesSumDocument, baseOptions);\n      }\nexport function useGetMessagesSumLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMessagesSumQuery, GetMessagesSumQueryVariables>) {\n          return Apollo.useLazyQuery<GetMessagesSumQuery, GetMessagesSumQueryVariables>(GetMessagesSumDocument, baseOptions);\n        }\nexport type GetMessagesSumQueryHookResult = ReturnType<typeof useGetMessagesSumQuery>;\nexport type GetMessagesSumLazyQueryHookResult = ReturnType<typeof useGetMessagesSumLazyQuery>;\nexport type GetMessagesSumQueryResult = Apollo.QueryResult<GetMessagesSumQuery, GetMessagesSumQueryVariables>;\nexport const GetChannelsDocument = gql`\n    query getChannels {\n  channels: channel {\n    name\n    id\n    is_private\n    owner_id\n  }\n}\n    `;\n\n/**\n * __useGetChannelsQuery__\n *\n * To run a query within a React component, call `useGetChannelsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetChannelsQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelsQuery, GetChannelsQueryVariables>) {\n        return Apollo.useQuery<GetChannelsQuery, GetChannelsQueryVariables>(GetChannelsDocument, baseOptions);\n      }\nexport function useGetChannelsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelsQuery, GetChannelsQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelsQuery, GetChannelsQueryVariables>(GetChannelsDocument, baseOptions);\n        }\nexport type GetChannelsQueryHookResult = ReturnType<typeof useGetChannelsQuery>;\nexport type GetChannelsLazyQueryHookResult = ReturnType<typeof useGetChannelsLazyQuery>;\nexport type GetChannelsQueryResult = Apollo.QueryResult<GetChannelsQuery, GetChannelsQueryVariables>;\nexport const GetUserListDocument = gql`\n    query getUserList {\n  users: user {\n    username\n    id\n    auth0_user_id\n    last_seen\n  }\n}\n    `;\n\n/**\n * __useGetUserListQuery__\n *\n * To run a query within a React component, call `useGetUserListQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserListQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserListQuery(baseOptions?: Apollo.QueryHookOptions<GetUserListQuery, GetUserListQueryVariables>) {\n        return Apollo.useQuery<GetUserListQuery, GetUserListQueryVariables>(GetUserListDocument, baseOptions);\n      }\nexport function useGetUserListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserListQuery, GetUserListQueryVariables>) {\n          return Apollo.useLazyQuery<GetUserListQuery, GetUserListQueryVariables>(GetUserListDocument, baseOptions);\n        }\nexport type GetUserListQueryHookResult = ReturnType<typeof useGetUserListQuery>;\nexport type GetUserListLazyQueryHookResult = ReturnType<typeof useGetUserListLazyQuery>;\nexport type GetUserListQueryResult = Apollo.QueryResult<GetUserListQuery, GetUserListQueryVariables>;\nexport const GetChannelByNameDocument = gql`\n    query getChannelByName($name: String!) {\n  channel(where: {name: {_eq: $name}}) {\n    name\n    id\n    is_private\n    owner_id\n    channel_type\n  }\n}\n    `;\n\n/**\n * __useGetChannelByNameQuery__\n *\n * To run a query within a React component, call `useGetChannelByNameQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelByNameQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelByNameQuery({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useGetChannelByNameQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelByNameQuery, GetChannelByNameQueryVariables>) {\n        return Apollo.useQuery<GetChannelByNameQuery, GetChannelByNameQueryVariables>(GetChannelByNameDocument, baseOptions);\n      }\nexport function useGetChannelByNameLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelByNameQuery, GetChannelByNameQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelByNameQuery, GetChannelByNameQueryVariables>(GetChannelByNameDocument, baseOptions);\n        }\nexport type GetChannelByNameQueryHookResult = ReturnType<typeof useGetChannelByNameQuery>;\nexport type GetChannelByNameLazyQueryHookResult = ReturnType<typeof useGetChannelByNameLazyQuery>;\nexport type GetChannelByNameQueryResult = Apollo.QueryResult<GetChannelByNameQuery, GetChannelByNameQueryVariables>;\nexport const GetAuth0UserByIdDocument = gql`\n    query getAuth0UserById($user_id: String) {\n  user(where: {auth0_user_id: {_eq: $user_id}}) {\n    id\n    username\n    auth0_user_id\n    user_channels {\n      channel {\n        name\n        id\n        is_private\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetAuth0UserByIdQuery__\n *\n * To run a query within a React component, call `useGetAuth0UserByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAuth0UserByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAuth0UserByIdQuery({\n *   variables: {\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useGetAuth0UserByIdQuery(baseOptions?: Apollo.QueryHookOptions<GetAuth0UserByIdQuery, GetAuth0UserByIdQueryVariables>) {\n        return Apollo.useQuery<GetAuth0UserByIdQuery, GetAuth0UserByIdQueryVariables>(GetAuth0UserByIdDocument, baseOptions);\n      }\nexport function useGetAuth0UserByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAuth0UserByIdQuery, GetAuth0UserByIdQueryVariables>) {\n          return Apollo.useLazyQuery<GetAuth0UserByIdQuery, GetAuth0UserByIdQueryVariables>(GetAuth0UserByIdDocument, baseOptions);\n        }\nexport type GetAuth0UserByIdQueryHookResult = ReturnType<typeof useGetAuth0UserByIdQuery>;\nexport type GetAuth0UserByIdLazyQueryHookResult = ReturnType<typeof useGetAuth0UserByIdLazyQuery>;\nexport type GetAuth0UserByIdQueryResult = Apollo.QueryResult<GetAuth0UserByIdQuery, GetAuth0UserByIdQueryVariables>;\nexport const GetChannelThreadIdDocument = gql`\n    query getChannelThreadId($message_id: Int) {\n  channel_thread(where: {message_id: {_eq: $message_id}}) {\n    id\n  }\n}\n    `;\n\n/**\n * __useGetChannelThreadIdQuery__\n *\n * To run a query within a React component, call `useGetChannelThreadIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelThreadIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelThreadIdQuery({\n *   variables: {\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useGetChannelThreadIdQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelThreadIdQuery, GetChannelThreadIdQueryVariables>) {\n        return Apollo.useQuery<GetChannelThreadIdQuery, GetChannelThreadIdQueryVariables>(GetChannelThreadIdDocument, baseOptions);\n      }\nexport function useGetChannelThreadIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelThreadIdQuery, GetChannelThreadIdQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelThreadIdQuery, GetChannelThreadIdQueryVariables>(GetChannelThreadIdDocument, baseOptions);\n        }\nexport type GetChannelThreadIdQueryHookResult = ReturnType<typeof useGetChannelThreadIdQuery>;\nexport type GetChannelThreadIdLazyQueryHookResult = ReturnType<typeof useGetChannelThreadIdLazyQuery>;\nexport type GetChannelThreadIdQueryResult = Apollo.QueryResult<GetChannelThreadIdQuery, GetChannelThreadIdQueryVariables>;\nexport const GetChannelThreadParentMessageDocument = gql`\n    query getChannelThreadParentMessage($limit: Int, $message_id: Int) {\n  channel_thread_message(limit: $limit, order_by: {id: asc}, where: {channel_thread: {message_id: {_eq: $message_id}}}) {\n    channel_thread_id\n    timestamp\n    channel_thread {\n      message {\n        text\n        timestamp\n        image\n        id\n        user_id\n        user {\n          auth0_user_id\n          username\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetChannelThreadParentMessageQuery__\n *\n * To run a query within a React component, call `useGetChannelThreadParentMessageQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelThreadParentMessageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelThreadParentMessageQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useGetChannelThreadParentMessageQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelThreadParentMessageQuery, GetChannelThreadParentMessageQueryVariables>) {\n        return Apollo.useQuery<GetChannelThreadParentMessageQuery, GetChannelThreadParentMessageQueryVariables>(GetChannelThreadParentMessageDocument, baseOptions);\n      }\nexport function useGetChannelThreadParentMessageLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelThreadParentMessageQuery, GetChannelThreadParentMessageQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelThreadParentMessageQuery, GetChannelThreadParentMessageQueryVariables>(GetChannelThreadParentMessageDocument, baseOptions);\n        }\nexport type GetChannelThreadParentMessageQueryHookResult = ReturnType<typeof useGetChannelThreadParentMessageQuery>;\nexport type GetChannelThreadParentMessageLazyQueryHookResult = ReturnType<typeof useGetChannelThreadParentMessageLazyQuery>;\nexport type GetChannelThreadParentMessageQueryResult = Apollo.QueryResult<GetChannelThreadParentMessageQuery, GetChannelThreadParentMessageQueryVariables>;\nexport const GetChannelThreadDocument = gql`\n    query getChannelThread($message_id: Int) {\n  channel_thread(where: {message_id: {_eq: $message_id}}) {\n    id\n    message {\n      id\n      image\n      text\n      deleted\n      timestamp\n      user {\n        auth0_user_id\n        id\n        username\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetChannelThreadQuery__\n *\n * To run a query within a React component, call `useGetChannelThreadQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelThreadQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelThreadQuery({\n *   variables: {\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useGetChannelThreadQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelThreadQuery, GetChannelThreadQueryVariables>) {\n        return Apollo.useQuery<GetChannelThreadQuery, GetChannelThreadQueryVariables>(GetChannelThreadDocument, baseOptions);\n      }\nexport function useGetChannelThreadLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelThreadQuery, GetChannelThreadQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelThreadQuery, GetChannelThreadQueryVariables>(GetChannelThreadDocument, baseOptions);\n        }\nexport type GetChannelThreadQueryHookResult = ReturnType<typeof useGetChannelThreadQuery>;\nexport type GetChannelThreadLazyQueryHookResult = ReturnType<typeof useGetChannelThreadLazyQuery>;\nexport type GetChannelThreadQueryResult = Apollo.QueryResult<GetChannelThreadQuery, GetChannelThreadQueryVariables>;\nexport const GetPollQuestionsDocument = gql`\n    query getPollQuestions {\n  questions: poll_questions {\n    id\n    owner_id\n    text\n  }\n}\n    `;\n\n/**\n * __useGetPollQuestionsQuery__\n *\n * To run a query within a React component, call `useGetPollQuestionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPollQuestionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPollQuestionsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetPollQuestionsQuery(baseOptions?: Apollo.QueryHookOptions<GetPollQuestionsQuery, GetPollQuestionsQueryVariables>) {\n        return Apollo.useQuery<GetPollQuestionsQuery, GetPollQuestionsQueryVariables>(GetPollQuestionsDocument, baseOptions);\n      }\nexport function useGetPollQuestionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPollQuestionsQuery, GetPollQuestionsQueryVariables>) {\n          return Apollo.useLazyQuery<GetPollQuestionsQuery, GetPollQuestionsQueryVariables>(GetPollQuestionsDocument, baseOptions);\n        }\nexport type GetPollQuestionsQueryHookResult = ReturnType<typeof useGetPollQuestionsQuery>;\nexport type GetPollQuestionsLazyQueryHookResult = ReturnType<typeof useGetPollQuestionsLazyQuery>;\nexport type GetPollQuestionsQueryResult = Apollo.QueryResult<GetPollQuestionsQuery, GetPollQuestionsQueryVariables>;\nexport const GetPollQuestionAnswersDocument = gql`\n    query getPollQuestionAnswers($pollQuestionId: Int) {\n  poll_question: poll_questions(where: {id: {_eq: $pollQuestionId}}) {\n    id\n    text\n    is_active\n  }\n  poll_answers: poll_anwers(where: {poll_question: {id: {_eq: $pollQuestionId}}}) {\n    question_id\n    text\n    id\n    votes\n  }\n}\n    `;\n\n/**\n * __useGetPollQuestionAnswersQuery__\n *\n * To run a query within a React component, call `useGetPollQuestionAnswersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPollQuestionAnswersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPollQuestionAnswersQuery({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useGetPollQuestionAnswersQuery(baseOptions?: Apollo.QueryHookOptions<GetPollQuestionAnswersQuery, GetPollQuestionAnswersQueryVariables>) {\n        return Apollo.useQuery<GetPollQuestionAnswersQuery, GetPollQuestionAnswersQueryVariables>(GetPollQuestionAnswersDocument, baseOptions);\n      }\nexport function useGetPollQuestionAnswersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPollQuestionAnswersQuery, GetPollQuestionAnswersQueryVariables>) {\n          return Apollo.useLazyQuery<GetPollQuestionAnswersQuery, GetPollQuestionAnswersQueryVariables>(GetPollQuestionAnswersDocument, baseOptions);\n        }\nexport type GetPollQuestionAnswersQueryHookResult = ReturnType<typeof useGetPollQuestionAnswersQuery>;\nexport type GetPollQuestionAnswersLazyQueryHookResult = ReturnType<typeof useGetPollQuestionAnswersLazyQuery>;\nexport type GetPollQuestionAnswersQueryResult = Apollo.QueryResult<GetPollQuestionAnswersQuery, GetPollQuestionAnswersQueryVariables>;\nexport const GetPublicChannelsDocument = gql`\n    query getPublicChannels {\n  channels: channel(where: {is_private: {_neq: true}}) {\n    id\n    name\n    channel_polls(where: {poll_question: {is_active: {_eq: true}}}) {\n      poll_question {\n        is_active\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetPublicChannelsQuery__\n *\n * To run a query within a React component, call `useGetPublicChannelsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPublicChannelsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPublicChannelsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetPublicChannelsQuery(baseOptions?: Apollo.QueryHookOptions<GetPublicChannelsQuery, GetPublicChannelsQueryVariables>) {\n        return Apollo.useQuery<GetPublicChannelsQuery, GetPublicChannelsQueryVariables>(GetPublicChannelsDocument, baseOptions);\n      }\nexport function useGetPublicChannelsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPublicChannelsQuery, GetPublicChannelsQueryVariables>) {\n          return Apollo.useLazyQuery<GetPublicChannelsQuery, GetPublicChannelsQueryVariables>(GetPublicChannelsDocument, baseOptions);\n        }\nexport type GetPublicChannelsQueryHookResult = ReturnType<typeof useGetPublicChannelsQuery>;\nexport type GetPublicChannelsLazyQueryHookResult = ReturnType<typeof useGetPublicChannelsLazyQuery>;\nexport type GetPublicChannelsQueryResult = Apollo.QueryResult<GetPublicChannelsQuery, GetPublicChannelsQueryVariables>;\nexport const GetChannelPollsDocument = gql`\n    query getChannelPolls {\n  channelPoll: channel_poll {\n    channel_id\n    id\n    poll_questions\n  }\n}\n    `;\n\n/**\n * __useGetChannelPollsQuery__\n *\n * To run a query within a React component, call `useGetChannelPollsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelPollsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelPollsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetChannelPollsQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelPollsQuery, GetChannelPollsQueryVariables>) {\n        return Apollo.useQuery<GetChannelPollsQuery, GetChannelPollsQueryVariables>(GetChannelPollsDocument, baseOptions);\n      }\nexport function useGetChannelPollsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelPollsQuery, GetChannelPollsQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelPollsQuery, GetChannelPollsQueryVariables>(GetChannelPollsDocument, baseOptions);\n        }\nexport type GetChannelPollsQueryHookResult = ReturnType<typeof useGetChannelPollsQuery>;\nexport type GetChannelPollsLazyQueryHookResult = ReturnType<typeof useGetChannelPollsLazyQuery>;\nexport type GetChannelPollsQueryResult = Apollo.QueryResult<GetChannelPollsQuery, GetChannelPollsQueryVariables>;\nexport const GetChannelPollQuestionDocument = gql`\n    query getChannelPollQuestion($channelId: Int) {\n  getChannelPoll: channel_poll(where: {channel_id: {_eq: $channelId}, is_active: {_eq: true}}) {\n    id\n    poll_question {\n      id\n      text\n      poll_anwers(where: {poll_question: {}}) {\n        text\n        question_id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetChannelPollQuestionQuery__\n *\n * To run a query within a React component, call `useGetChannelPollQuestionQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelPollQuestionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelPollQuestionQuery({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useGetChannelPollQuestionQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelPollQuestionQuery, GetChannelPollQuestionQueryVariables>) {\n        return Apollo.useQuery<GetChannelPollQuestionQuery, GetChannelPollQuestionQueryVariables>(GetChannelPollQuestionDocument, baseOptions);\n      }\nexport function useGetChannelPollQuestionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelPollQuestionQuery, GetChannelPollQuestionQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelPollQuestionQuery, GetChannelPollQuestionQueryVariables>(GetChannelPollQuestionDocument, baseOptions);\n        }\nexport type GetChannelPollQuestionQueryHookResult = ReturnType<typeof useGetChannelPollQuestionQuery>;\nexport type GetChannelPollQuestionLazyQueryHookResult = ReturnType<typeof useGetChannelPollQuestionLazyQuery>;\nexport type GetChannelPollQuestionQueryResult = Apollo.QueryResult<GetChannelPollQuestionQuery, GetChannelPollQuestionQueryVariables>;\nexport const GetPollAnswerVotesDocument = gql`\n    query getPollAnswerVotes($pollAnswerId: Int!) {\n  poll_anwers(where: {id: {_eq: $pollAnswerId}}) {\n    id\n    votes\n  }\n}\n    `;\n\n/**\n * __useGetPollAnswerVotesQuery__\n *\n * To run a query within a React component, call `useGetPollAnswerVotesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPollAnswerVotesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPollAnswerVotesQuery({\n *   variables: {\n *      pollAnswerId: // value for 'pollAnswerId'\n *   },\n * });\n */\nexport function useGetPollAnswerVotesQuery(baseOptions?: Apollo.QueryHookOptions<GetPollAnswerVotesQuery, GetPollAnswerVotesQueryVariables>) {\n        return Apollo.useQuery<GetPollAnswerVotesQuery, GetPollAnswerVotesQueryVariables>(GetPollAnswerVotesDocument, baseOptions);\n      }\nexport function useGetPollAnswerVotesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPollAnswerVotesQuery, GetPollAnswerVotesQueryVariables>) {\n          return Apollo.useLazyQuery<GetPollAnswerVotesQuery, GetPollAnswerVotesQueryVariables>(GetPollAnswerVotesDocument, baseOptions);\n        }\nexport type GetPollAnswerVotesQueryHookResult = ReturnType<typeof useGetPollAnswerVotesQuery>;\nexport type GetPollAnswerVotesLazyQueryHookResult = ReturnType<typeof useGetPollAnswerVotesLazyQuery>;\nexport type GetPollAnswerVotesQueryResult = Apollo.QueryResult<GetPollAnswerVotesQuery, GetPollAnswerVotesQueryVariables>;\nexport const WatchMessagesDocument = gql`\n    subscription watchMessages($channelId: Int!, $limit: Int) {\n  messages: message(order_by: {timestamp: desc}, limit: $limit, where: {channel: {id: {_eq: $channelId}}}) {\n    id\n    text\n    image\n    timestamp\n    deleted\n    user {\n      username\n      auth0_user_id\n    }\n    channel {\n      name\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchMessagesSubscription__\n *\n * To run a query within a React component, call `useWatchMessagesSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchMessagesSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchMessagesSubscription({\n *   variables: {\n *      channelId: // value for 'channelId'\n *      limit: // value for 'limit'\n *   },\n * });\n */\nexport function useWatchMessagesSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchMessagesSubscription, WatchMessagesSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchMessagesSubscription, WatchMessagesSubscriptionVariables>(WatchMessagesDocument, baseOptions);\n      }\nexport type WatchMessagesSubscriptionHookResult = ReturnType<typeof useWatchMessagesSubscription>;\nexport type WatchMessagesSubscriptionResult = Apollo.SubscriptionResult<WatchMessagesSubscription>;\nexport const WatchChannelThreadMessagesDocument = gql`\n    subscription watchChannelThreadMessages($limit: Int!, $message_id: Int!) {\n  channel_thread_message(limit: $limit, order_by: {id: desc}, where: {channel_thread: {message_id: {_eq: $message_id}}}) {\n    id\n    message\n    image\n    user {\n      username\n      id\n      auth0_user_id\n    }\n    channel_thread_id\n    timestamp\n  }\n}\n    `;\n\n/**\n * __useWatchChannelThreadMessagesSubscription__\n *\n * To run a query within a React component, call `useWatchChannelThreadMessagesSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelThreadMessagesSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelThreadMessagesSubscription({\n *   variables: {\n *      limit: // value for 'limit'\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useWatchChannelThreadMessagesSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelThreadMessagesSubscription, WatchChannelThreadMessagesSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelThreadMessagesSubscription, WatchChannelThreadMessagesSubscriptionVariables>(WatchChannelThreadMessagesDocument, baseOptions);\n      }\nexport type WatchChannelThreadMessagesSubscriptionHookResult = ReturnType<typeof useWatchChannelThreadMessagesSubscription>;\nexport type WatchChannelThreadMessagesSubscriptionResult = Apollo.SubscriptionResult<WatchChannelThreadMessagesSubscription>;\nexport const WatchChannelThreadDocument = gql`\n    subscription watchChannelThread($message_id: Int! = 571) {\n  channel_thread(where: {message_id: {_eq: $message_id}}) {\n    id\n    message {\n      id\n    }\n    channel_thread_messages(order_by: {id: desc}) {\n      id\n      message\n      timestamp\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchChannelThreadSubscription__\n *\n * To run a query within a React component, call `useWatchChannelThreadSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelThreadSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelThreadSubscription({\n *   variables: {\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useWatchChannelThreadSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelThreadSubscription, WatchChannelThreadSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelThreadSubscription, WatchChannelThreadSubscriptionVariables>(WatchChannelThreadDocument, baseOptions);\n      }\nexport type WatchChannelThreadSubscriptionHookResult = ReturnType<typeof useWatchChannelThreadSubscription>;\nexport type WatchChannelThreadSubscriptionResult = Apollo.SubscriptionResult<WatchChannelThreadSubscription>;\nexport const WatchThreadsDocument = gql`\n    subscription watchThreads {\n  channel_thread(order_by: {id: desc}) {\n    id\n    message_id\n    message {\n      image\n      text\n      deleted\n      timestamp\n      id\n      user {\n        auth0_user_id\n        username\n      }\n      user_id\n      channel {\n        id\n        name\n        channel_type\n      }\n    }\n    channel_thread_messages {\n      id\n      image\n      message\n      timestamp\n      user_id\n      user {\n        auth0_user_id\n        username\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchThreadsSubscription__\n *\n * To run a query within a React component, call `useWatchThreadsSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchThreadsSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchThreadsSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchThreadsSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchThreadsSubscription, WatchThreadsSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchThreadsSubscription, WatchThreadsSubscriptionVariables>(WatchThreadsDocument, baseOptions);\n      }\nexport type WatchThreadsSubscriptionHookResult = ReturnType<typeof useWatchThreadsSubscription>;\nexport type WatchThreadsSubscriptionResult = Apollo.SubscriptionResult<WatchThreadsSubscription>;\nexport const WatchOnlineUsersDocument = gql`\n    subscription watchOnlineUsers {\n  users: user_online(order_by: {username: asc}) {\n    id\n    username\n    auth0_user_id\n  }\n}\n    `;\n\n/**\n * __useWatchOnlineUsersSubscription__\n *\n * To run a query within a React component, call `useWatchOnlineUsersSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchOnlineUsersSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchOnlineUsersSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchOnlineUsersSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchOnlineUsersSubscription, WatchOnlineUsersSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchOnlineUsersSubscription, WatchOnlineUsersSubscriptionVariables>(WatchOnlineUsersDocument, baseOptions);\n      }\nexport type WatchOnlineUsersSubscriptionHookResult = ReturnType<typeof useWatchOnlineUsersSubscription>;\nexport type WatchOnlineUsersSubscriptionResult = Apollo.SubscriptionResult<WatchOnlineUsersSubscription>;\nexport const WatchChannelsDocument = gql`\n    subscription watchChannels($channel_type: channel_type_enum!) {\n  channels: channel(where: {channel_type: {_eq: $channel_type}}, order_by: {name: asc, is_private: asc}) {\n    name\n    id\n    is_private\n    owner_id\n  }\n}\n    `;\n\n/**\n * __useWatchChannelsSubscription__\n *\n * To run a query within a React component, call `useWatchChannelsSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelsSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelsSubscription({\n *   variables: {\n *      channel_type: // value for 'channel_type'\n *   },\n * });\n */\nexport function useWatchChannelsSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelsSubscription, WatchChannelsSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelsSubscription, WatchChannelsSubscriptionVariables>(WatchChannelsDocument, baseOptions);\n      }\nexport type WatchChannelsSubscriptionHookResult = ReturnType<typeof useWatchChannelsSubscription>;\nexport type WatchChannelsSubscriptionResult = Apollo.SubscriptionResult<WatchChannelsSubscription>;\nexport const WatchDirectMessageChannelsDocument = gql`\n    subscription watchDirectMessageChannels($channel_type: channel_type_enum!, $user_id: String) {\n  channels: channel(where: {channel_type: {_eq: $channel_type}, _and: {user_channels: {user_id: {_eq: $user_id}}}}) {\n    name\n    id\n    is_private\n    owner_id\n    user_channels(where: {user_id: {_neq: $user_id}}) {\n      user {\n        username\n        auth0_user_id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchDirectMessageChannelsSubscription__\n *\n * To run a query within a React component, call `useWatchDirectMessageChannelsSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchDirectMessageChannelsSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchDirectMessageChannelsSubscription({\n *   variables: {\n *      channel_type: // value for 'channel_type'\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useWatchDirectMessageChannelsSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchDirectMessageChannelsSubscription, WatchDirectMessageChannelsSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchDirectMessageChannelsSubscription, WatchDirectMessageChannelsSubscriptionVariables>(WatchDirectMessageChannelsDocument, baseOptions);\n      }\nexport type WatchDirectMessageChannelsSubscriptionHookResult = ReturnType<typeof useWatchDirectMessageChannelsSubscription>;\nexport type WatchDirectMessageChannelsSubscriptionResult = Apollo.SubscriptionResult<WatchDirectMessageChannelsSubscription>;\nexport const WatchUsersDocument = gql`\n    subscription watchUsers {\n  user(order_by: {username: asc}) {\n    username\n    auth0_user_id\n  }\n}\n    `;\n\n/**\n * __useWatchUsersSubscription__\n *\n * To run a query within a React component, call `useWatchUsersSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchUsersSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchUsersSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchUsersSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchUsersSubscription, WatchUsersSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchUsersSubscription, WatchUsersSubscriptionVariables>(WatchUsersDocument, baseOptions);\n      }\nexport type WatchUsersSubscriptionHookResult = ReturnType<typeof useWatchUsersSubscription>;\nexport type WatchUsersSubscriptionResult = Apollo.SubscriptionResult<WatchUsersSubscription>;\nexport const WatchUsersWhoHaveNotSubscribedToChannelDocument = gql`\n    subscription watchUsersWhoHaveNotSubscribedToChannel($user_id: String!, $channel_id: Int!) {\n  user(where: {_not: {user_channels: {channel_id: {_eq: $channel_id}}}, auth0_user_id: {_neq: $user_id}}, order_by: {username: asc}) {\n    auth0_user_id\n    username\n  }\n}\n    `;\n\n/**\n * __useWatchUsersWhoHaveNotSubscribedToChannelSubscription__\n *\n * To run a query within a React component, call `useWatchUsersWhoHaveNotSubscribedToChannelSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchUsersWhoHaveNotSubscribedToChannelSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchUsersWhoHaveNotSubscribedToChannelSubscription({\n *   variables: {\n *      user_id: // value for 'user_id'\n *      channel_id: // value for 'channel_id'\n *   },\n * });\n */\nexport function useWatchUsersWhoHaveNotSubscribedToChannelSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchUsersWhoHaveNotSubscribedToChannelSubscription, WatchUsersWhoHaveNotSubscribedToChannelSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchUsersWhoHaveNotSubscribedToChannelSubscription, WatchUsersWhoHaveNotSubscribedToChannelSubscriptionVariables>(WatchUsersWhoHaveNotSubscribedToChannelDocument, baseOptions);\n      }\nexport type WatchUsersWhoHaveNotSubscribedToChannelSubscriptionHookResult = ReturnType<typeof useWatchUsersWhoHaveNotSubscribedToChannelSubscription>;\nexport type WatchUsersWhoHaveNotSubscribedToChannelSubscriptionResult = Apollo.SubscriptionResult<WatchUsersWhoHaveNotSubscribedToChannelSubscription>;\nexport const WatchUsersWhoHaveSubscribedToDirectMessageChannelDocument = gql`\n    subscription watchUsersWhoHaveSubscribedToDirectMessageChannel($user_id: String!) {\n  user(where: {auth0_user_id: {_neq: $user_id}}, order_by: {username: asc}) {\n    auth0_user_id\n    username\n    user_channels(where: {channel: {channel_type: {_eq: DIRECT_MESSAGE}}}) {\n      channel_id\n      channel {\n        name\n        user_channels(where: {user: {auth0_user_id: {_eq: $user_id}}}) {\n          user {\n            auth0_user_id\n            username\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription__\n *\n * To run a query within a React component, call `useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription({\n *   variables: {\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription, WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription, WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscriptionVariables>(WatchUsersWhoHaveSubscribedToDirectMessageChannelDocument, baseOptions);\n      }\nexport type WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscriptionHookResult = ReturnType<typeof useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription>;\nexport type WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscriptionResult = Apollo.SubscriptionResult<WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription>;\nexport const WatchUsersWhoHaveSubscribedToChannelDocument = gql`\n    subscription watchUsersWhoHaveSubscribedToChannel($channel_id: Int!, $user_id: String!) {\n  channel(where: {id: {_eq: $channel_id}}) {\n    id\n    user_channels(where: {user: {auth0_user_id: {_neq: $user_id}}}) {\n      user {\n        auth0_user_id\n        username\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchUsersWhoHaveSubscribedToChannelSubscription__\n *\n * To run a query within a React component, call `useWatchUsersWhoHaveSubscribedToChannelSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchUsersWhoHaveSubscribedToChannelSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchUsersWhoHaveSubscribedToChannelSubscription({\n *   variables: {\n *      channel_id: // value for 'channel_id'\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useWatchUsersWhoHaveSubscribedToChannelSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchUsersWhoHaveSubscribedToChannelSubscription, WatchUsersWhoHaveSubscribedToChannelSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchUsersWhoHaveSubscribedToChannelSubscription, WatchUsersWhoHaveSubscribedToChannelSubscriptionVariables>(WatchUsersWhoHaveSubscribedToChannelDocument, baseOptions);\n      }\nexport type WatchUsersWhoHaveSubscribedToChannelSubscriptionHookResult = ReturnType<typeof useWatchUsersWhoHaveSubscribedToChannelSubscription>;\nexport type WatchUsersWhoHaveSubscribedToChannelSubscriptionResult = Apollo.SubscriptionResult<WatchUsersWhoHaveSubscribedToChannelSubscription>;\nexport const GetUserIsTypingDocument = gql`\n    subscription getUserIsTyping($self_id: String!, $channel_id: Int!) {\n  user_typing(where: {auth0_user_id: {_neq: $self_id}, _and: {last_typed_channel: {_eq: $channel_id}}}, limit: 1, order_by: {last_typed: desc}) {\n    last_typed\n    username\n  }\n}\n    `;\n\n/**\n * __useGetUserIsTypingSubscription__\n *\n * To run a query within a React component, call `useGetUserIsTypingSubscription` and pass it any options that fit your needs.\n * When your component renders, `useGetUserIsTypingSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserIsTypingSubscription({\n *   variables: {\n *      self_id: // value for 'self_id'\n *      channel_id: // value for 'channel_id'\n *   },\n * });\n */\nexport function useGetUserIsTypingSubscription(baseOptions?: Apollo.SubscriptionHookOptions<GetUserIsTypingSubscription, GetUserIsTypingSubscriptionVariables>) {\n        return Apollo.useSubscription<GetUserIsTypingSubscription, GetUserIsTypingSubscriptionVariables>(GetUserIsTypingDocument, baseOptions);\n      }\nexport type GetUserIsTypingSubscriptionHookResult = ReturnType<typeof useGetUserIsTypingSubscription>;\nexport type GetUserIsTypingSubscriptionResult = Apollo.SubscriptionResult<GetUserIsTypingSubscription>;\nexport const WatchNewMessagesDocument = gql`\n    subscription watchNewMessages($channelId: Int!) {\n  newMessages: message(order_by: {id: desc}, limit: 1, where: {channel: {id: {_eq: $channelId}}}) {\n    id\n    text\n    timestamp\n    user {\n      username\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchNewMessagesSubscription__\n *\n * To run a query within a React component, call `useWatchNewMessagesSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchNewMessagesSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchNewMessagesSubscription({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useWatchNewMessagesSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchNewMessagesSubscription, WatchNewMessagesSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchNewMessagesSubscription, WatchNewMessagesSubscriptionVariables>(WatchNewMessagesDocument, baseOptions);\n      }\nexport type WatchNewMessagesSubscriptionHookResult = ReturnType<typeof useWatchNewMessagesSubscription>;\nexport type WatchNewMessagesSubscriptionResult = Apollo.SubscriptionResult<WatchNewMessagesSubscription>;\nexport const WatchChannelsLastMessageIdDocument = gql`\n    subscription watchChannelsLastMessageId($channel_type: channel_type_enum! = CHAT_MESSAGE) {\n  channels: channel(where: {channel_type: {_eq: $channel_type}}, order_by: {name: asc, is_private: asc}) {\n    name\n    id\n    is_private\n    owner_id\n    messages(order_by: {id: desc}, limit: 1) {\n      id\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchChannelsLastMessageIdSubscription__\n *\n * To run a query within a React component, call `useWatchChannelsLastMessageIdSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelsLastMessageIdSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelsLastMessageIdSubscription({\n *   variables: {\n *      channel_type: // value for 'channel_type'\n *   },\n * });\n */\nexport function useWatchChannelsLastMessageIdSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelsLastMessageIdSubscription, WatchChannelsLastMessageIdSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelsLastMessageIdSubscription, WatchChannelsLastMessageIdSubscriptionVariables>(WatchChannelsLastMessageIdDocument, baseOptions);\n      }\nexport type WatchChannelsLastMessageIdSubscriptionHookResult = ReturnType<typeof useWatchChannelsLastMessageIdSubscription>;\nexport type WatchChannelsLastMessageIdSubscriptionResult = Apollo.SubscriptionResult<WatchChannelsLastMessageIdSubscription>;\nexport const WatchMessageCursorDocument = gql`\n    subscription watchMessageCursor($channel_id: Int!, $user_id: String!) {\n  message_cursor(where: {user_id: {_eq: $user_id}, _and: {channel_id: {_eq: $channel_id}}}) {\n    channel_id\n    message_id\n    user_id\n  }\n}\n    `;\n\n/**\n * __useWatchMessageCursorSubscription__\n *\n * To run a query within a React component, call `useWatchMessageCursorSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchMessageCursorSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchMessageCursorSubscription({\n *   variables: {\n *      channel_id: // value for 'channel_id'\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useWatchMessageCursorSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchMessageCursorSubscription, WatchMessageCursorSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchMessageCursorSubscription, WatchMessageCursorSubscriptionVariables>(WatchMessageCursorDocument, baseOptions);\n      }\nexport type WatchMessageCursorSubscriptionHookResult = ReturnType<typeof useWatchMessageCursorSubscription>;\nexport type WatchMessageCursorSubscriptionResult = Apollo.SubscriptionResult<WatchMessageCursorSubscription>;\nexport const WatchGetPollQuestionsDocument = gql`\n    subscription WatchGetPollQuestions {\n  questions: poll_questions {\n    id\n    text\n    created_at\n    updated_at\n    owner_id\n    is_active\n    channel_polls {\n      channel {\n        name\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchGetPollQuestionsSubscription__\n *\n * To run a query within a React component, call `useWatchGetPollQuestionsSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchGetPollQuestionsSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchGetPollQuestionsSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchGetPollQuestionsSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchGetPollQuestionsSubscription, WatchGetPollQuestionsSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchGetPollQuestionsSubscription, WatchGetPollQuestionsSubscriptionVariables>(WatchGetPollQuestionsDocument, baseOptions);\n      }\nexport type WatchGetPollQuestionsSubscriptionHookResult = ReturnType<typeof useWatchGetPollQuestionsSubscription>;\nexport type WatchGetPollQuestionsSubscriptionResult = Apollo.SubscriptionResult<WatchGetPollQuestionsSubscription>;\nexport const WatchGetChannelPollQuestionPublishStateDocument = gql`\n    subscription watchGetChannelPollQuestionPublishState {\n  getChannelPollQuestionPublishState: channel_poll {\n    channel_id\n    id\n    poll_questions\n    channel {\n      name\n    }\n    poll_question {\n      text\n      is_active\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchGetChannelPollQuestionPublishStateSubscription__\n *\n * To run a query within a React component, call `useWatchGetChannelPollQuestionPublishStateSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchGetChannelPollQuestionPublishStateSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchGetChannelPollQuestionPublishStateSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchGetChannelPollQuestionPublishStateSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchGetChannelPollQuestionPublishStateSubscription, WatchGetChannelPollQuestionPublishStateSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchGetChannelPollQuestionPublishStateSubscription, WatchGetChannelPollQuestionPublishStateSubscriptionVariables>(WatchGetChannelPollQuestionPublishStateDocument, baseOptions);\n      }\nexport type WatchGetChannelPollQuestionPublishStateSubscriptionHookResult = ReturnType<typeof useWatchGetChannelPollQuestionPublishStateSubscription>;\nexport type WatchGetChannelPollQuestionPublishStateSubscriptionResult = Apollo.SubscriptionResult<WatchGetChannelPollQuestionPublishStateSubscription>;\nexport const WatchGetPollQuestionDocument = gql`\n    subscription watchGetPollQuestion($pollQuestionId: Int) {\n  poll_question: poll_questions(where: {id: {_eq: $pollQuestionId}}) {\n    id\n    text\n    is_active\n  }\n}\n    `;\n\n/**\n * __useWatchGetPollQuestionSubscription__\n *\n * To run a query within a React component, call `useWatchGetPollQuestionSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchGetPollQuestionSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchGetPollQuestionSubscription({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useWatchGetPollQuestionSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchGetPollQuestionSubscription, WatchGetPollQuestionSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchGetPollQuestionSubscription, WatchGetPollQuestionSubscriptionVariables>(WatchGetPollQuestionDocument, baseOptions);\n      }\nexport type WatchGetPollQuestionSubscriptionHookResult = ReturnType<typeof useWatchGetPollQuestionSubscription>;\nexport type WatchGetPollQuestionSubscriptionResult = Apollo.SubscriptionResult<WatchGetPollQuestionSubscription>;\nexport const WatchGetPollAnswersDocument = gql`\n    subscription watchGetPollAnswers($pollQuestionId: Int!) {\n  poll_answers: poll_anwers(where: {poll_question: {id: {_eq: $pollQuestionId}}}) {\n    question_id\n    text\n    id\n    votes\n  }\n}\n    `;\n\n/**\n * __useWatchGetPollAnswersSubscription__\n *\n * To run a query within a React component, call `useWatchGetPollAnswersSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchGetPollAnswersSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchGetPollAnswersSubscription({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useWatchGetPollAnswersSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchGetPollAnswersSubscription, WatchGetPollAnswersSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchGetPollAnswersSubscription, WatchGetPollAnswersSubscriptionVariables>(WatchGetPollAnswersDocument, baseOptions);\n      }\nexport type WatchGetPollAnswersSubscriptionHookResult = ReturnType<typeof useWatchGetPollAnswersSubscription>;\nexport type WatchGetPollAnswersSubscriptionResult = Apollo.SubscriptionResult<WatchGetPollAnswersSubscription>;\nexport const WatchChannelPollQuestionDocument = gql`\n    subscription watchChannelPollQuestion($channelId: Int!) {\n  getChannelPoll: channel_poll(where: {channel_id: {_eq: $channelId}, poll_question: {is_active: {_eq: true}}}) {\n    id\n    poll_question {\n      id\n      text\n      poll_anwers(where: {poll_question: {channel_polls: {channel_id: {_eq: $channelId}}}}) {\n        text\n        votes\n        id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchChannelPollQuestionSubscription__\n *\n * To run a query within a React component, call `useWatchChannelPollQuestionSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelPollQuestionSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelPollQuestionSubscription({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useWatchChannelPollQuestionSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelPollQuestionSubscription, WatchChannelPollQuestionSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelPollQuestionSubscription, WatchChannelPollQuestionSubscriptionVariables>(WatchChannelPollQuestionDocument, baseOptions);\n      }\nexport type WatchChannelPollQuestionSubscriptionHookResult = ReturnType<typeof useWatchChannelPollQuestionSubscription>;\nexport type WatchChannelPollQuestionSubscriptionResult = Apollo.SubscriptionResult<WatchChannelPollQuestionSubscription>;\nexport const WatchPollAnswerVotesDocument = gql`\n    subscription watchPollAnswerVotes($pollAnswerId: Int!) {\n  pollAnswerVotes: poll_anwers(where: {id: {_eq: $pollAnswerId}}) {\n    id\n    votes\n  }\n}\n    `;\n\n/**\n * __useWatchPollAnswerVotesSubscription__\n *\n * To run a query within a React component, call `useWatchPollAnswerVotesSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchPollAnswerVotesSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchPollAnswerVotesSubscription({\n *   variables: {\n *      pollAnswerId: // value for 'pollAnswerId'\n *   },\n * });\n */\nexport function useWatchPollAnswerVotesSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchPollAnswerVotesSubscription, WatchPollAnswerVotesSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchPollAnswerVotesSubscription, WatchPollAnswerVotesSubscriptionVariables>(WatchPollAnswerVotesDocument, baseOptions);\n      }\nexport type WatchPollAnswerVotesSubscriptionHookResult = ReturnType<typeof useWatchPollAnswerVotesSubscription>;\nexport type WatchPollAnswerVotesSubscriptionResult = Apollo.SubscriptionResult<WatchPollAnswerVotesSubscription>;\nexport const GetPollQuestionStateDocument = gql`\n    subscription getPollQuestionState($pollQuestionId: Int!) {\n  poll_questions(where: {id: {_eq: $pollQuestionId}}) {\n    is_active\n  }\n}\n    `;\n\n/**\n * __useGetPollQuestionStateSubscription__\n *\n * To run a query within a React component, call `useGetPollQuestionStateSubscription` and pass it any options that fit your needs.\n * When your component renders, `useGetPollQuestionStateSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPollQuestionStateSubscription({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useGetPollQuestionStateSubscription(baseOptions?: Apollo.SubscriptionHookOptions<GetPollQuestionStateSubscription, GetPollQuestionStateSubscriptionVariables>) {\n        return Apollo.useSubscription<GetPollQuestionStateSubscription, GetPollQuestionStateSubscriptionVariables>(GetPollQuestionStateDocument, baseOptions);\n      }\nexport type GetPollQuestionStateSubscriptionHookResult = ReturnType<typeof useGetPollQuestionStateSubscription>;\nexport type GetPollQuestionStateSubscriptionResult = Apollo.SubscriptionResult<GetPollQuestionStateSubscription>;\nexport const WatchGetChannelsDocument = gql`\n    subscription watchGetChannels {\n  channel(where: {is_private: {_eq: false}}) {\n    id\n    name\n    channel_polls {\n      channel_id\n      poll_question {\n        id\n        text\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchGetChannelsSubscription__\n *\n * To run a query within a React component, call `useWatchGetChannelsSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchGetChannelsSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchGetChannelsSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchGetChannelsSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchGetChannelsSubscription, WatchGetChannelsSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchGetChannelsSubscription, WatchGetChannelsSubscriptionVariables>(WatchGetChannelsDocument, baseOptions);\n      }\nexport type WatchGetChannelsSubscriptionHookResult = ReturnType<typeof useWatchGetChannelsSubscription>;\nexport type WatchGetChannelsSubscriptionResult = Apollo.SubscriptionResult<WatchGetChannelsSubscription>;\nexport const WatchChannelHasActivePollDocument = gql`\n    subscription watchChannelHasActivePoll($currentChannelId: Int!) {\n  poll_questions(where: {channel_polls: {channel_id: {_eq: $currentChannelId}}, _and: {is_active: {_eq: true}}}) {\n    id\n    text\n  }\n}\n    `;\n\n/**\n * __useWatchChannelHasActivePollSubscription__\n *\n * To run a query within a React component, call `useWatchChannelHasActivePollSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelHasActivePollSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelHasActivePollSubscription({\n *   variables: {\n *      currentChannelId: // value for 'currentChannelId'\n *   },\n * });\n */\nexport function useWatchChannelHasActivePollSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelHasActivePollSubscription, WatchChannelHasActivePollSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelHasActivePollSubscription, WatchChannelHasActivePollSubscriptionVariables>(WatchChannelHasActivePollDocument, baseOptions);\n      }\nexport type WatchChannelHasActivePollSubscriptionHookResult = ReturnType<typeof useWatchChannelHasActivePollSubscription>;\nexport type WatchChannelHasActivePollSubscriptionResult = Apollo.SubscriptionResult<WatchChannelHasActivePollSubscription>;\nexport const WatchChannelPollActiveStateDocument = gql`\n    subscription watchChannelPollActiveState {\n  channel_poll {\n    id\n    channel {\n      name\n      channel_polls {\n        poll_question {\n          created_at\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchChannelPollActiveStateSubscription__\n *\n * To run a query within a React component, call `useWatchChannelPollActiveStateSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelPollActiveStateSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelPollActiveStateSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchChannelPollActiveStateSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelPollActiveStateSubscription, WatchChannelPollActiveStateSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelPollActiveStateSubscription, WatchChannelPollActiveStateSubscriptionVariables>(WatchChannelPollActiveStateDocument, baseOptions);\n      }\nexport type WatchChannelPollActiveStateSubscriptionHookResult = ReturnType<typeof useWatchChannelPollActiveStateSubscription>;\nexport type WatchChannelPollActiveStateSubscriptionResult = Apollo.SubscriptionResult<WatchChannelPollActiveStateSubscription>;\nexport const WatchCheckUserHasVotedDocument = gql`\n    subscription watchCheckUserHasVoted($pollQuestionId: Int, $auth0UserId: String) {\n  user_votes(where: {poll_question_id: {_eq: $pollQuestionId}, auth0_user_id: {_eq: $auth0UserId}}) {\n    auth0_user_id\n    poll_question_id\n    poll_answer_id\n  }\n}\n    `;\n\n/**\n * __useWatchCheckUserHasVotedSubscription__\n *\n * To run a query within a React component, call `useWatchCheckUserHasVotedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchCheckUserHasVotedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchCheckUserHasVotedSubscription({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *      auth0UserId: // value for 'auth0UserId'\n *   },\n * });\n */\nexport function useWatchCheckUserHasVotedSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchCheckUserHasVotedSubscription, WatchCheckUserHasVotedSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchCheckUserHasVotedSubscription, WatchCheckUserHasVotedSubscriptionVariables>(WatchCheckUserHasVotedDocument, baseOptions);\n      }\nexport type WatchCheckUserHasVotedSubscriptionHookResult = ReturnType<typeof useWatchCheckUserHasVotedSubscription>;\nexport type WatchCheckUserHasVotedSubscriptionResult = Apollo.SubscriptionResult<WatchCheckUserHasVotedSubscription>;","import React from 'react';\nimport { ApolloProvider, HttpOptions } from '@apollo/react-hooks';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  createHttpLink,\n  split,\n} from '@apollo/client';\nimport { WebSocketLink, WebSocketParams } from '@apollo/client/link/ws';\nimport { setContext } from '@apollo/client/link/context';\nimport jwt_decode, { JwtPayload } from 'jwt-decode';\n\ninterface Definition {\n  kind: string;\n  operation?: string;\n}\n\ninterface Claims {\n  'https://hasura.io/jwt/claims'?: {\n    'x-hasura-allowed-roles'?: string;\n    'x-hasura-default-role'?: string;\n    'x-hasura-user-id'?: string;\n  };\n}\n\ntype ParsedTokenUser = JwtPayload & Claims;\n\ninterface ApolloHeaders {\n  Authorization: string;\n}\n\ninterface ApolloWrapperProps {}\n\nconst ApolloWrapper: React.FC<ApolloWrapperProps> = ({ children }) => {\n  const { isAuthenticated, getAccessTokenSilently } = useAuth0();\n\n  const getHeaders = async () => {\n    const headers = {} as ApolloHeaders;\n    if (isAuthenticated) {\n      const token: string = await getAccessTokenSilently();\n      parseTokenAndSetRoles(token);\n      headers.Authorization = `Bearer ${token}`;\n    }\n    return headers;\n  };\n\n  const parseTokenAndSetRoles = async (token: string) => {\n    const user: ParsedTokenUser = jwt_decode<JwtPayload>(token);\n\n    if (\n      user.sub === undefined ||\n      user['https://hasura.io/jwt/claims'] === undefined ||\n      user['https://hasura.io/jwt/claims']['x-hasura-allowed-roles'] ===\n        undefined\n    ) {\n      return;\n    }\n\n    sessionStorage.setItem(\n      user.sub,\n      user['https://hasura.io/jwt/claims']['x-hasura-allowed-roles'],\n    );\n  };\n\n  const authMiddleware = setContext(async (operation, { originalHeaders }) => {\n    return {\n      headers: {\n        ...originalHeaders,\n        ...(await getHeaders()),\n      },\n    };\n  });\n\n  const httpLinkOptions: HttpOptions = {\n    uri: process.env.REACT_APP_HTTP_BACKEND_LINK,\n  };\n\n  const wsLinkOptions: WebSocketParams = {\n    uri: process.env.REACT_APP_WS_BACKEND_LINK || '',\n    options: {\n      reconnect: true,\n      lazy: true,\n      connectionParams: async () => {\n        return { headers: await getHeaders() };\n      },\n    },\n  };\n\n  const httpLink = createHttpLink(httpLinkOptions);\n  const wsLink = new WebSocketLink(wsLinkOptions);\n\n  const link = split(\n    // split based on operation type\n    ({ query }) => {\n      const { kind, operation }: Definition = getMainDefinition(query);\n      return kind === 'OperationDefinition' && operation === 'subscription';\n    },\n    wsLink,\n    authMiddleware.concat(httpLink),\n  );\n\n  /* Set up local cache */\n  const cache = new InMemoryCache();\n\n  /* Create Apollo Client */\n  const client = new ApolloClient({ link, cache });\n\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n};\n\nexport default ApolloWrapper;\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport typography from './typography';\nimport overrides from './overrides';\n\nexport const theme = createMuiTheme({\n  palette: {\n    common: {\n      black: '#000000',\n      white: '#f9cd8b',\n    },\n    type: 'dark',\n    background: {\n      paper: '#070922',\n      default: '#070922',\n    },\n    primary: {\n      light: '#81D4FA',\n      main: '#0288D1',\n      dark: 'rgba(255, 255, 255, .01)',\n      contrastText: '#EF6C00',\n    },\n    secondary: {\n      light: '#FFA726',\n      main: '#f57c00',\n      dark: '#EF6C00',\n      contrastText: '#ffffff',\n    },\n    error: {\n      light: '#E91E63',\n      main: '#AD1457',\n      dark: '#880E4F',\n    },\n    success: {\n      light: '#0f5',\n      main: '#0f0',\n      dark: '#222',\n    },\n  },\n\n  shape: {\n    borderRadius: 0,\n  },\n  mixins: {\n    toolbar: {\n      // backgroundColor: '#151c66',\n    },\n  },\n  spacing: 0,\n  props: {\n    MuiCheckbox: {\n      style: {\n        fontSize: 10,\n      },\n    },\n    MuiChip: {\n      style: {\n        padding: 3,\n      },\n    },\n    MuiList: {\n      style: {\n        padding: 0,\n      },\n    },\n    MuiListItemIcon: {\n      style: {\n        color: '#0288D1',\n      },\n    },\n    MuiPaper: {\n      draggable: false,\n      elevation: 0,\n      style: {\n        overflow: 'hidden',\n      },\n    },\n    MuiAppBar: {\n      style: {\n        top: 'auto',\n        bottom: 0,\n      },\n    },\n    MuiButton: {\n      disableElevation: false,\n      color: 'secondary',\n      variant: 'outlined',\n      size: 'small',\n      disableFocusRipple: false,\n      disableTouchRipple: false,\n    },\n  },\n  typography,\n  overrides,\n});\n","export default {\n  fontSize: 14,\n  body1: {\n    fontSize: 16,\n    color: '#0288D1',\n  },\n  body2: {\n    fontSize: 16,\n    fontWeight: 500,\n    // color: '#f9cd8b',\n  },\n  button: {\n    fontSize: 12,\n    fontWeight: 400,\n  },\n  h1: {\n    fontWeight: 700,\n    fontSize: 20,\n    paddingBottom: 16,\n  },\n  h2: {\n    fontWeight: 700,\n    fontSize: 18,\n    marginTop: 16,\n  },\n  h3: {\n    fontWeight: 700,\n    fontSize: 16,\n    marginTop: 16,\n    marginBottom: 16,\n  },\n  h4: {\n    fontWeight: 700,\n    fontSize: 14,\n    marginTop: 16,\n  },\n  h5: {\n    fontWeight: 700,\n    fontSize: 12,\n    marginTop: 16,\n  },\n  h6: {\n    fontWeight: 700,\n    fontSize: 10,\n    color: '#0288D1',\n  },\n};\n","export default {\n  MuiCssBaseline: {\n    '@global': {\n      '*': {\n        'scrollbar-width': '1rem',\n      },\n      '*::-webkit-scrollbar': {\n        width: '.5rem',\n        height: '1rem',\n      },\n      '*::-webkit-scrollbar-track': {\n        '-webkit-box-shadow': 'inset 0 0 6px rgba(0,0,0,0.00)',\n      },\n      '*::-webkit-scrollbar-thumb': {\n        backgroundColor: 'rgb(245 124 0)',\n        borderRadius: 0,\n      },\n      a: {\n        textDecoration: 'none',\n      },\n    },\n  },\n  MuiToolbar: {\n    root: {\n      overflow: 'hidden',\n    },\n  },\n  MuiPopover: {\n    root: {\n      background: 'rgba(245, 122, 0, .7)',\n    },\n  },\n  MuiBackdrop: {\n    root: {\n      backgroundColor: 'rgba(0, 0, 0, .95)',\n    },\n  },\n  MuiFab: {\n    root: {\n      borderRadius: 0,\n    },\n    primary: {\n      color: '#fff',\n      boxShadow: 'none',\n    },\n    label: {},\n  },\n  MuiSpeedDial: {\n    direction: 'left',\n    directionUp: { marginBottom: 0 },\n    actions: {\n      display: 'unset',\n      backgroundColor: 'transparent',\n    },\n  },\n  MuiSpeedDialAction: {\n    fab: {\n      backgroundColor: 'transparent',\n      '&:hover': {\n        borderRadius: 3,\n        padding: 10,\n      },\n    },\n    staticTooltip: {\n      // opacity: 1,\n    },\n    tooltipOpen: true,\n    tooltipPlacement: 'top-end',\n    tooltipPlacementLeft: {},\n    staticTooltipLabel: {\n      right: '100%',\n      whiteSpace: 'nowrap',\n    },\n  },\n  MuiTableCell: {\n    root: {\n      borderBottom: 'none',\n    },\n  },\n  MuiInputBase: {\n    root: {},\n  },\n  MuiList: {\n    root: {\n      '&:hover': {\n        // backgroundColor: 'red',\n      },\n    },\n  },\n  MuiListItemIcon: {\n    root: {\n      '& :hover': {\n        color: '#F57C00',\n      },\n    },\n  },\n  MuiContainer: {\n    root: {\n      padding: 0,\n      margin: 0,\n    },\n  },\n  MuiListItemText: {\n    root: {\n      padding: 0,\n      margin: 0,\n      '& span': {\n        padding: 0,\n        fontSize: '.875rem',\n      },\n      '& h6': {\n        fontSize: '.857rem',\n      },\n      '& a': {\n        color: '#fff',\n      },\n      '& a:hover': {\n        color: 'yellow',\n      },\n    },\n  },\n  MuiDivider: {\n    root: {\n      margin: 10,\n      opacity: 0.5,\n    },\n  },\n  MuiTypography: {},\n  MuiButton: {\n    contained: {\n      boxShadow: 'none',\n    },\n  },\n  MuiIconButton: {\n    root: {\n      padding: '3px',\n    },\n  },\n  MuiAccordionSummary: {\n    expandIcon: {\n      background: '#f57c00',\n\n      '&:hover': {\n        backgroundColor: 'rgba(255, 255, 255, .1)',\n      },\n    },\n  },\n};\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport Button from '@material-ui/core/Button';\n\nconst Login: React.FC = () => {\n  const { loginWithRedirect } = useAuth0();\n\n  return (\n    <>\n      <Button\n        size=\"medium\"\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={loginWithRedirect}\n        aria-label=\"Login To Chat\"\n      >\n        Login\n      </Button>\n    </>\n  );\n};\n\nexport default Login;\n","import React from 'react';\nimport { Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  large: {\n    backgroundSize: 'cover',\n    marginTop: theme.spacing(2),\n    width: theme.spacing(10),\n    height: theme.spacing(10),\n  },\n}));\n\nconst Logo = () => {\n  const classes = useStyles();\n\n  return (\n    <Avatar\n      className={classes.large}\n      alt=\"Chicken Fest\"\n      src=\"/chicken-chat-logo.svg\"\n    />\n  );\n};\n\nexport default Logo;\n","import React from 'react';\nimport { Box, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Login from '../Login';\nimport Logo from '../shared/Logo';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useHistory } from 'react-router';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column',\n    height: '100vh',\n    alignContent: 'center',\n    padding: theme.spacing(2),\n  },\n  title: {\n    fontSize: '2rem',\n    fontWeight: 700,\n    textTransform: 'uppercase',\n    paddingTop: theme.spacing(5),\n  },\n}));\n\nconst SignIn: React.FC = () => {\n  const classes = useStyles();\n  const { isAuthenticated } = useAuth0();\n  let history = useHistory();\n\n  if (isAuthenticated) history.push(`/channel/general`);\n\n  return (\n    <Box className={classes.root}>\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        flexDirection=\"column\"\n      >\n        <Logo />\n        <Typography color=\"secondary\" variant=\"h1\" align=\"center\">\n          Welcome to Chicken Chat\n        </Typography>\n      </Box>\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" mb={3}>\n        <Typography color=\"textPrimary\" variant=\"body1\" align=\"center\">\n          Please register or login. Let's go an crackle your nonsense!\n        </Typography>\n      </Box>\n      <Login />\n    </Box>\n  );\n};\n\nexport default SignIn;\n","import React from 'react';\nimport { Box } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  toolbarIcon: {\n    ...theme.mixins.toolbar,\n  },\n}));\n\nconst NotFound: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.root}>\n      <h2>Upppsss ....! Something went wrong!</h2>\n    </Box>\n  );\n};\n\nexport default NotFound;\n","import React from 'react';\nimport { Box, CircularProgress } from '@material-ui/core';\n\nconst Loader = () => {\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      flexDirection=\"column\"\n      flex={1}\n    >\n      <CircularProgress\n        color=\"secondary\"\n        size={20}\n        style={{ margin: '10px' }}\n      />\n    </Box>\n  );\n};\n\nexport default Loader;\n","import React, { FunctionComponent } from 'react';\nimport { Route } from 'react-router-dom';\nimport { withAuthenticationRequired } from '@auth0/auth0-react';\nimport Loader from './shared/Loader';\n\ninterface PrivateRouteProps {\n  component: FunctionComponent;\n  path: string;\n}\n\nconst PrivateRoute: React.FC<PrivateRouteProps> = ({ component, ...args }) => {\n  return (\n    <Route\n      component={withAuthenticationRequired(component, {\n        onRedirecting: () => <Loader />,\n      })}\n      {...args}\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import { atom } from 'recoil';\n\nexport const testState = atom({\n  key: 'testState',\n});\n\nexport const currentChannelState = atom({\n  key: 'currentChannelState',\n});\n\nexport const getPollQuestionAnswers = atom({\n  key: 'getPollQuestionAnswersState',\n  default: 1,\n});\n\nexport const giphyState = atom({\n  key: 'giphyState',\n});\n\nexport const deletedMessageState = atom({\n  key: 'deletedMessageState',\n  default: false,\n});\n\nexport const deletedThreadMessageState = atom({\n  key: 'deletedThreadMessageState',\n  default: false,\n});\n","import { ApolloError } from '@apollo/client';\n\nexport const logToConsole = (\n  msg: string,\n  ...rest: Array<Error | string | number | ApolloError | undefined>\n) => {\n  console.log(msg, ...rest);\n};\n","import React from 'react';\nimport { Avatar, Badge, ListItemIcon } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  useWatchOnlineUsersSubscription,\n  User,\n} from '../../api/generated/graphql';\nimport Alert from '@material-ui/lab/Alert';\nimport { logToConsole } from '../../helpers/helpers';\n\nconst useStyles = makeStyles((theme) => ({\n  badgeOnline: {\n    backgroundColor: '#44b700',\n    color: '#44b700',\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n    '&::after': {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      borderRadius: '50%',\n      animation: '$ripple 1.2s infinite ease-in-out',\n      border: '1px solid currentColor',\n      content: '\"\"',\n    },\n  },\n  badgeOffline: {\n    backgroundColor: '#f2115e',\n    color: '#f2115e',\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n    '&::after': {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      borderRadius: '50%',\n      animation: '$ripple 1.2s infinite ease-in-out',\n      border: '1px solid currentColor',\n      content: '\"\"',\n    },\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    backgroundColor: '#000000',\n    color: '#ffffff',\n    fontSize: 12,\n    fontWeight: 'bold',\n    border: '2px solid #f57c00',\n  },\n}));\n\ninterface OnlineUserStatusProps {\n  user?: Pick<User, 'auth0_user_id' | 'username'>;\n  showBadgeInChildren?: boolean;\n}\n\nconst OnlineUserStatus: React.FC<OnlineUserStatusProps> = ({\n  user,\n  children,\n  showBadgeInChildren = false,\n}) => {\n  const classes = useStyles();\n\n  const {\n    data: onlineUsers,\n    error: onlineUsersError,\n  } = useWatchOnlineUsersSubscription();\n\n  if (onlineUsersError) {\n    logToConsole('OnlineUserStatusError', onlineUsersError);\n    return <Alert severity=\"error\">A OnlineUserStatusError occured.</Alert>;\n  }\n\n  const setOnlineUsersStatus = (user_id: string | null | undefined) => {\n    if (user_id === undefined || user_id === null)\n      return { badge: classes.badgeOffline };\n\n    const onlineUser = onlineUsers?.users.filter((u) => {\n      return user_id === u.auth0_user_id ? true : false;\n    });\n\n    return onlineUser?.length\n      ? { badge: classes.badgeOnline }\n      : { badge: classes.badgeOffline };\n  };\n\n  return (\n    <>\n      {user && user.username && (\n        <ListItemIcon>\n          <Badge\n            classes={setOnlineUsersStatus(user.auth0_user_id)}\n            variant=\"dot\"\n          >\n            {showBadgeInChildren && <>{children}</>}\n            {!showBadgeInChildren && (\n              <>\n                <Avatar className={classes.avatar}>\n                  {user.username.substring(0, 2).toUpperCase()}\n                </Avatar>\n              </>\n            )}\n          </Badge>\n        </ListItemIcon>\n      )}\n    </>\n  );\n};\n\nexport default OnlineUserStatus;\n","import React from 'react';\nimport { Box, Chip, LinearProgress, Typography } from '@material-ui/core';\nimport FaceIcon from '@material-ui/icons/Face';\nimport GroupIcon from '@material-ui/icons/Group';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  text: {\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '.875rem',\n    },\n  },\n}));\n\ninterface ResultGraphProps {\n  answerId: number;\n  userVote: number | undefined;\n  pollVotes: number;\n  text: string;\n  totalVotes: number;\n}\n\ninterface LinearProgressProps {\n  value: number;\n  answerid: number;\n}\n\nconst ResultGraph: React.FC<ResultGraphProps> = ({\n  answerId,\n  userVote,\n  pollVotes,\n  text,\n  totalVotes,\n}) => {\n  const classes = useStyles();\n  const LinearProgressWithLabel = (props: LinearProgressProps) => {\n    return (\n      <Box\n        width=\"100%\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        flexDirection=\"row\"\n      >\n        <Box width=\"100%\" mr={1}>\n          <LinearProgress\n            id={String(answerId)}\n            color={userVote === answerId ? 'secondary' : 'primary'}\n            variant=\"determinate\"\n            {...props}\n          />\n        </Box>\n        <Box\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          flexDirection=\"row-reverse\"\n        >\n          <Chip\n            size=\"small\"\n            color={userVote === answerId ? 'secondary' : 'primary'}\n            variant={userVote === answerId ? 'default' : 'outlined'}\n            label={`${pollVotes} / ${props.value.toFixed(1)}%`}\n            icon={userVote === answerId ? <FaceIcon /> : <GroupIcon />}\n          />\n        </Box>\n      </Box>\n    );\n  };\n\n  return (\n    <Box\n      key={answerId}\n      width=\"100%\"\n      display=\"flex\"\n      alignItems=\"flex-start\"\n      flexDirection=\"column\"\n      mb={2}\n    >\n      <Typography variant=\"body1\" className={classes.text}>\n        {text}\n      </Typography>\n      <LinearProgressWithLabel\n        value={(100 * pollVotes) / totalVotes}\n        answerid={answerId}\n      />\n    </Box>\n  );\n};\n\nexport default ResultGraph;\n","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  pollSubmit: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\ninterface VoteButtonProps {\n  enabled: boolean;\n}\n\nconst VoteButton: React.FC<VoteButtonProps> = ({ enabled }) => {\n  const classes = useStyles();\n  return (\n    <>\n      <Button\n        type=\"submit\"\n        variant=\"contained\"\n        color=\"secondary\"\n        className={classes.pollSubmit}\n        disabled={enabled}\n        aria-label=\"submit vote\"\n      >\n        {enabled ? 'Choose Your Answer' : 'Vote'}\n      </Button>\n    </>\n  );\n};\n\nexport default VoteButton;\n","import React from 'react';\nimport { Badge } from '@material-ui/core';\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\n\ninterface ShowTotalVotesProps {\n  totalVotes: number | null;\n}\n\nconst ShowTotalVotes: React.FC<ShowTotalVotesProps> = ({ totalVotes }) => {\n  return (\n    <>\n      {totalVotes && (\n        <Badge color=\"secondary\" badgeContent={totalVotes}>\n          <HowToVoteIcon color=\"primary\" />\n        </Badge>\n      )}\n    </>\n  );\n};\n\nexport default ShowTotalVotes;\n","import React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { currentChannelState } from '../../atom.js';\nimport ResultGraph from './ResultGraph';\nimport VoteButton from './VoteButton';\nimport ShowTotalVotes from './ShowTotalVotes';\nimport Loader from '../shared/Loader';\nimport {\n  Box,\n  Radio,\n  RadioGroup,\n  FormControlLabel,\n  FormControl,\n  Paper,\n  Typography,\n} from '@material-ui/core';\nimport {\n  useWatchChannelPollQuestionSubscription,\n  useWatchPollAnswerVotesSubscription,\n  useWatchCheckUserHasVotedSubscription,\n  useSetPollAnswerVoteMutation,\n  useSetUserVotePollQuestionMutation,\n  Poll_Anwers,\n} from '../../api/generated/graphql';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Channel } from '../../interfaces/channel.interface';\n\nconst useStyles = makeStyles((theme) => ({\n  pollCard: {\n    width: '100%',\n    padding: theme.spacing(5),\n    [theme.breakpoints.down('md')]: {\n      transform: 'scale(50%)',\n      padding: theme.spacing(2),\n      minWidth: '100%',\n    },\n  },\n  text: {\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '.875rem',\n    },\n  },\n}));\n\nconst PublishChannelPolling: React.FC = () => {\n  const classes = useStyles();\n  const { user } = useAuth0();\n  const [currentChannel] = useRecoilState<Channel>(currentChannelState);\n  const [\n    selectedPollAnswerId,\n    setSelectedPollAnswerId,\n  ] = React.useState<number>(0);\n\n  const { data: getPollAnswerVotes } = useWatchPollAnswerVotesSubscription({\n    variables: {\n      pollAnswerId: selectedPollAnswerId,\n    },\n  });\n\n  const { data, loading, error } = useWatchChannelPollQuestionSubscription({\n    variables: {\n      channelId: currentChannel?.id,\n    },\n  });\n\n  const [setPollAnswerVoteMutation] = useSetPollAnswerVoteMutation();\n\n  const totalVotes = () => {\n    let numbers: Array<Pick<Poll_Anwers, 'text' | 'id' | 'votes'>> = data\n      ?.getChannelPoll[0]?.poll_question?.poll_anwers!;\n    const count: number[] = [];\n    if (numbers !== undefined) {\n      numbers.map((num: Pick<Poll_Anwers, 'text' | 'id' | 'votes'>) =>\n        count.push(num.votes),\n      );\n      const result = count.reduce((a: number, b: number) => a + b);\n      return result;\n    }\n    return 0;\n  };\n\n  const {\n    data: userVote,\n    loading: userVoteLoading,\n  } = useWatchCheckUserHasVotedSubscription({\n    variables: {\n      pollQuestionId: data?.getChannelPoll[0]?.poll_question?.id,\n      auth0UserId: user.sub,\n    },\n  });\n\n  const [setUserVotePollQuestionMutation] = useSetUserVotePollQuestionMutation({\n    variables: {\n      userName: user.username,\n      auth0UserId: user.sub,\n      pollQuestionId: data?.getChannelPoll[0]?.poll_question?.id,\n      pollAnswerId: selectedPollAnswerId,\n    },\n  });\n\n  const handleChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedPollAnswerId(parseInt(e.target.value));\n  };\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (selectedPollAnswerId === null) return;\n\n    let currentPollAnswerVotes = getPollAnswerVotes?.pollAnswerVotes[0].votes;\n\n    if (currentPollAnswerVotes !== undefined) {\n      currentPollAnswerVotes++;\n    }\n\n    if (currentPollAnswerVotes === undefined) return;\n    await setPollAnswerVoteMutation({\n      variables: {\n        pollAnswerId: selectedPollAnswerId,\n        newVote: currentPollAnswerVotes,\n      },\n    });\n\n    await setUserVotePollQuestionMutation({\n      variables: {\n        userName: user.nickname,\n        auth0UserId: user.sub,\n        pollQuestionId: data?.getChannelPoll[0]?.poll_question?.id,\n        pollAnswerId: selectedPollAnswerId,\n      },\n    });\n  };\n\n  if (loading || error || userVoteLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      {userVote?.user_votes?.length ? (\n        <Paper className={classes.pollCard}>\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            flexDirection=\"row\"\n            mb={3}\n          >\n            <Box>\n              <Typography variant=\"caption\">Anonymous poll</Typography>\n              {data?.getChannelPoll.map((channelPoll) => (\n                <Typography\n                  key={channelPoll.id}\n                  color=\"secondary\"\n                  variant=\"h2\"\n                  style={{ marginTop: 0 }}\n                >\n                  {channelPoll?.poll_question?.text}\n                </Typography>\n              ))}\n            </Box>\n            <ShowTotalVotes totalVotes={totalVotes()} />\n          </Box>\n\n          {data?.getChannelPoll[0]?.poll_question?.poll_anwers\n            .sort((a, b) => (a.id > b.id ? 1 : -1))\n            .map((pollVotes) => (\n              <ResultGraph\n                key={pollVotes.id}\n                answerId={pollVotes.id}\n                userVote={userVote?.user_votes[0]?.poll_answer_id}\n                pollVotes={pollVotes.votes}\n                text={pollVotes.text}\n                totalVotes={totalVotes()}\n              />\n            ))}\n        </Paper>\n      ) : (\n        <Paper className={classes.pollCard}>\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"flex-end\"\n            flexDirection=\"row\"\n            mb={3}\n          >\n            <Box>\n              <Typography variant=\"caption\">Anonymous poll</Typography>\n              <Typography variant=\"h2\" style={{ marginTop: 0 }}>\n                {data?.getChannelPoll[0]\n                  ? data?.getChannelPoll[0].poll_question?.text\n                  : 'no value'}\n              </Typography>\n            </Box>\n            <ShowTotalVotes totalVotes={totalVotes()} />\n          </Box>\n\n          <form onSubmit={handleSubmit}>\n            <FormControl component=\"fieldset\">\n              <RadioGroup\n                aria-label=\"poll\"\n                name=\"poll\"\n                value={selectedPollAnswerId}\n                onChange={handleChange}\n              >\n                {data?.getChannelPoll[0]?.poll_question?.poll_anwers\n                  .sort((a, b) => (a.id > b.id ? 1 : -1))\n                  .map((pollAnswer) => (\n                    <FormControlLabel\n                      key={pollAnswer.id}\n                      value={pollAnswer.id}\n                      control={\n                        <Radio\n                          value={pollAnswer.id}\n                          checked={selectedPollAnswerId === pollAnswer.id}\n                          onChange={handleChange}\n                        />\n                      }\n                      label={\n                        <Typography variant=\"body2\" className={classes.text}>\n                          {pollAnswer.text}\n                        </Typography>\n                      }\n                    />\n                  ))}\n              </RadioGroup>\n              <VoteButton enabled={false} />\n            </FormControl>\n          </form>\n        </Paper>\n      )}\n    </>\n  );\n};\n\nexport default PublishChannelPolling;\n","import React from 'react';\nimport { Badge, Box, Button, Popover } from '@material-ui/core';\nimport { useWatchChannelHasActivePollSubscription } from '../../api/generated/graphql';\nimport PopupState, { bindPopover } from 'material-ui-popup-state';\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\nimport Loader from '../shared/Loader';\nimport PublishChannelPolling from './PublishChannelPolling';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { bindTrigger } from 'material-ui-popup-state/hooks';\nimport Logo from '../shared/Logo';\n\nconst useStyles = makeStyles((theme) => ({\n  popoverRoot: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100vw',\n  },\n  popupWidth: {\n    width: '30vw',\n    padding: theme.spacing(1),\n    [theme.breakpoints.down('lg')]: {\n      width: '40vw',\n    },\n    [theme.breakpoints.down('md')]: {\n      width: '50vw',\n    },\n    [theme.breakpoints.down('sm')]: {\n      width: '85vw',\n      margin: 0,\n    },\n    margin: theme.spacing(0),\n    paddingBottom: theme.spacing(2),\n  },\n  voteIcon: {\n    cursor: 'pointer',\n  },\n  badge: {\n    backgroundColor: '#44b700',\n    color: '#44b700',\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n    '&::after': {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      borderRadius: '50%',\n      animation: '$ripple 1.2s infinite ease-in-out',\n      border: '1px solid currentColor',\n      content: '\"\"',\n    },\n  },\n  '@keyframes ripple': {\n    '0%': {\n      transform: 'scale(.8)',\n      opacity: 1,\n    },\n    '100%': {\n      transform: 'scale(2.4)',\n      opacity: 0,\n    },\n  },\n}));\n\ninterface PollPopUpProps {\n  channelId: number;\n}\n\nconst PollPopUp: React.FC<PollPopUpProps> = ({ channelId }) => {\n  const classes = useStyles();\n  const { data, loading } = useWatchChannelHasActivePollSubscription({\n    variables: {\n      currentChannelId: channelId,\n    },\n  });\n\n  if (loading) {\n    return <Loader />;\n  }\n  return (\n    <>\n      {data?.poll_questions?.length === 1 ? (\n        <PopupState variant=\"popover\" popupId=\"pollingPopOver\">\n          {(popupState) => (\n            <>\n              <Badge variant=\"dot\" classes={{ badge: classes.badge }}>\n                <HowToVoteIcon\n                  color=\"primary\"\n                  {...bindTrigger(popupState)}\n                  className={classes.voteIcon}\n                />\n              </Badge>\n              <Popover\n                anchorReference={'none'} // set popup center window\n                classes={{\n                  root: classes.popoverRoot,\n                }}\n                {...bindPopover(popupState)}\n              >\n                <Box\n                  display=\"flex\"\n                  justifyContent=\"center\"\n                  alignItems=\"center\"\n                  flexDirection=\"column\"\n                  className={classes.popupWidth}\n                >\n                  <Logo />\n\n                  <PublishChannelPolling />\n                  <Button\n                    aria-label=\"close poll popover\"\n                    onClick={popupState.close}\n                    style={{ maxWidth: '10vw' }}\n                  >\n                    Close\n                  </Button>\n                </Box>\n              </Popover>\n            </>\n          )}\n        </PopupState>\n      ) : (\n        false\n      )}\n    </>\n  );\n};\n\nexport default PollPopUp;\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { IconButton } from '@material-ui/core';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\n\nconst Logout: React.FC = () => {\n  const { logout } = useAuth0();\n\n  return (\n    <>\n      <IconButton\n        color=\"primary\"\n        size=\"small\"\n        onClick={() => {\n          logout({\n            returnTo: process.env.REACT_APP_AUTH0_LOGOUT_URL,\n          });\n          window.sessionStorage.clear();\n        }}\n        aria-label=\"Logout\"\n      >\n        <ExitToAppIcon />\n      </IconButton>\n    </>\n  );\n};\n\nexport default Logout;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Drawer, makeStyles, Toolbar } from '@material-ui/core';\n\nconst drawerWidth = '100%';\n\nconst useStyles = makeStyles((theme) => ({\n  toolbar: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'flex-start',\n    [theme.breakpoints.up('md')]: {\n      paddingTop: theme.spacing(0),\n      paddingBottom: theme.spacing(5),\n    },\n    [theme.breakpoints.down('md')]: {\n      paddingTop: theme.spacing(0),\n      paddingLeft: theme.spacing(0),\n      paddingRight: theme.spacing(0),\n      paddingBottom: theme.spacing(2),\n    },\n    borderTop: 1,\n    borderTopStyle: 'solid',\n    borderTopColor: theme.palette.primary.dark,\n  },\n  drawerPaper: {\n    height: '100vh',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.easeInOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: drawerWidth,\n  },\n}));\n\ninterface MenuBarDrawerProps {\n  open: boolean;\n}\n\nconst MenuBarDrawer: React.FC<MenuBarDrawerProps> = ({ children, open }) => {\n  const classes = useStyles();\n\n  return (\n    <Drawer\n      variant=\"temporary\"\n      elevation={0}\n      anchor=\"left\"\n      classes={{\n        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n      }}\n      open={open}\n    >\n      <Toolbar className={classes.toolbar}>{children}</Toolbar>\n    </Drawer>\n  );\n};\n\nexport default MenuBarDrawer;\n","import React from 'react';\nimport { theme } from '../../theme/theme';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Badge, Box, Chip, Tooltip } from '@material-ui/core';\nimport PeopleIcon from '@material-ui/icons/People';\nimport FaceIcon from '@material-ui/icons/Face';\nimport Loader from './Loader';\nimport { useWatchOnlineUsersSubscription } from '../../api/generated/graphql';\nimport { logToConsole } from '../../helpers/helpers';\n\ninterface OnlineUsersProps {\n  user_id: string;\n}\n\nconst UserStatus: React.FC<OnlineUsersProps> = ({ user_id }) => {\n  const { data, loading, error } = useWatchOnlineUsersSubscription();\n  const { user } = useAuth0();\n  const usersOnline = data?.users.length ?? 0;\n\n  if (error) {\n    logToConsole('UserStatus error', error);\n  }\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <Box\n      display=\"flex\"\n      flex=\"1\"\n      justifyContent=\"flex-end\"\n      alignItems=\"center\"\n      style={{\n        marginRight: theme.spacing(3),\n        marginLeft: theme.spacing(2),\n      }}\n    >\n      <Chip\n        variant=\"outlined\"\n        color=\"primary\"\n        size=\"small\"\n        icon={<FaceIcon />}\n        label={user.nickname}\n        style={{ marginRight: 30 }}\n      />\n      <Tooltip title=\"Users online\" aria-label=\"Unsers online\" placement=\"top\">\n        <Badge color=\"secondary\" badgeContent={usersOnline}>\n          <PeopleIcon color=\"primary\" />\n        </Badge>\n      </Tooltip>\n    </Box>\n  );\n};\n\nexport default UserStatus;\n","import React, { useState, useEffect } from 'react';\nimport {\n  useWatchMessagesSubscription,\n  useWatchMessageCursorSubscription,\n} from '../../api/generated/graphql';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Chip } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { logToConsole } from '../../helpers/helpers';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    '& > *': {\n      margin: theme.spacing(0.5),\n    },\n  },\n  item: {\n    height: '16px',\n  },\n}));\n\ninterface UnreadMessageCounterProps {\n  channelId: number;\n}\n\nconst UnreadMessageCounter: React.FC<UnreadMessageCounterProps> = ({\n  channelId,\n}) => {\n  const classes = useStyles();\n  const { user, error: auth0Error } = useAuth0();\n  const [count, setCount] = useState<number | undefined>(0);\n\n  const { data, loading, error } = useWatchMessagesSubscription({\n    variables: {\n      channelId,\n    },\n    fetchPolicy: 'network-only',\n  });\n\n  const {\n    data: useWatchMessageCursorData,\n    loading: useWatchMessageCursorLoading,\n    error: useWatchMessageCursorError,\n  } = useWatchMessageCursorSubscription({\n    variables: {\n      user_id: user.sub,\n      channel_id: channelId,\n    },\n  });\n\n  useEffect(() => {\n    let messageId =\n      useWatchMessageCursorData?.message_cursor[0]?.message_id ?? undefined;\n\n    let messageCounterArray = data?.messages.filter((m) => {\n      if (messageId === undefined) return false;\n      return m.id > messageId;\n    });\n\n    setCount(messageCounterArray?.length);\n  }, [data, useWatchMessageCursorData]);\n\n  if (error || useWatchMessageCursorError || auth0Error) {\n    logToConsole(\n      'Error in UnreadMessageCounter component',\n      error,\n      useWatchMessageCursorError,\n      auth0Error,\n    );\n  }\n\n  if (loading || useWatchMessageCursorLoading) {\n    return <React.Fragment></React.Fragment>;\n  }\n\n  return (\n    <>\n      {count && count !== undefined ? (\n        <div className={classes.root}>\n          <Chip\n            variant=\"outlined\"\n            size=\"small\"\n            label={count}\n            color=\"secondary\"\n            className={classes.item}\n          />\n        </div>\n      ) : (\n        ''\n      )}\n    </>\n  );\n};\n\nexport default UnreadMessageCounter;\n","import React, { useState } from 'react';\nimport { useWatchChannelsSubscription } from '../../api/generated/graphql';\nimport { Channel_Type_Enum } from '../../api/generated/graphql';\nimport { useRecoilState } from 'recoil';\nimport { currentChannelState } from '../../atom';\nimport {\n  Collapse,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport Loader from '../shared/Loader';\nimport PeopleIcon from '@material-ui/icons/People';\nimport PeopleOutlineIcon from '@material-ui/icons/PeopleOutline';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport EnhancedEncryptionOutlinedIcon from '@material-ui/icons/EnhancedEncryptionOutlined';\nimport UnreadMessageCounter from './UnreadMessageCounter';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link, useRouteMatch } from 'react-router-dom';\nimport { Channel } from '../../interfaces/channel.interface';\nimport { logToConsole } from '../../helpers/helpers';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  badge: {\n    backgroundColor: '#0f0',\n  },\n}));\n\nconst Channels: React.FC = () => {\n  const classes = useStyles();\n  const [currentChannel] = useRecoilState<Channel>(currentChannelState);\n  const [open, setOpen] = useState(true);\n  const match = useRouteMatch(`/channel/${currentChannel?.name}`);\n\n  const activeLink = () => {\n    return match ? 'secondary' : 'primary';\n  };\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  const { data, loading, error } = useWatchChannelsSubscription({\n    variables: {\n      channel_type: Channel_Type_Enum.ChatMessage,\n    },\n  });\n\n  if (error) {\n    logToConsole('Channels could not be loaded', error);\n    return <Alert severity=\"error\">Channels could not be loaded.</Alert>;\n  }\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      <List component=\"div\" className={classes.root}>\n        <ListItem button onClick={handleClick} aria-label=\"open channel list\">\n          <ListItemIcon>\n            <PeopleOutlineIcon />\n          </ListItemIcon>\n          <ListItemText>\n            <Typography variant=\"h6\">Channels</Typography>\n          </ListItemText>\n          {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={open} timeout=\"auto\">\n          <List component=\"div\">\n            {data?.channels?.map((data, index) => (\n              <ListItem\n                key={index}\n                button\n                component={Link}\n                to={'/channel/' + data.name}\n                aria-label={`go to channel ${data.name}`}\n              >\n                {data?.id === currentChannel?.id ? (\n                  <>\n                    <ListItemIcon>\n                      {data.is_private === true ? (\n                        <EnhancedEncryptionOutlinedIcon color={activeLink()} />\n                      ) : (\n                        <PeopleIcon color={activeLink()} />\n                      )}\n                    </ListItemIcon>\n                    <ListItemText>\n                      <Typography variant=\"h6\" color={activeLink()}>\n                        {data.name}\n                      </Typography>\n                    </ListItemText>\n                  </>\n                ) : (\n                  <>\n                    <ListItemIcon>\n                      {data.is_private === true ? (\n                        <EnhancedEncryptionOutlinedIcon />\n                      ) : (\n                        <PeopleIcon />\n                      )}\n                    </ListItemIcon>\n                    <ListItemText primary={data?.name} />\n                    <UnreadMessageCounter channelId={data.id} />\n                  </>\n                )}\n              </ListItem>\n            ))}\n          </List>\n        </Collapse>\n      </List>\n    </>\n  );\n};\n\nexport default Channels;\n","import React from 'react';\nimport {\n  Collapse,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport Alert from '@material-ui/lab/Alert';\nimport PersonIcon from '@material-ui/icons/Person';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Loader from '../shared/Loader';\nimport { Link, useHistory, useRouteMatch } from 'react-router-dom';\nimport { useWatchDirectMessageChannelsSubscription } from '../../api/generated/graphql';\nimport { Channel_Type_Enum } from '../../api/generated/graphql';\nimport UnreadMessageCounter from './UnreadMessageCounter';\nimport { makeStyles } from '@material-ui/core/styles';\nimport OnlineUserStatus from '../shared/OnlineUserStatus';\nimport { useRecoilState } from 'recoil';\nimport { currentChannelState } from '../../atom';\nimport { Channel } from '../../interfaces/channel.interface';\nimport { logToConsole } from '../../helpers/helpers';\n\nconst useStyles = makeStyles((theme) => ({\n  nested: {\n    paddingLeft: theme.spacing(0),\n  },\n  form: {\n    flexGrow: 1,\n    margin: theme.spacing(2),\n  },\n  submit: {\n    marginTop: theme.spacing(2),\n  },\n  itemText: {\n    color: theme.palette.primary.light,\n    fontWeight: 700,\n  },\n  link: {\n    color: '#0288D1',\n    fontSize: '0.875rem',\n  },\n}));\n\ninterface DirectMessageUserListProps {\n  user_id: string;\n}\n\nconst DirectMessageUserList: React.FC<DirectMessageUserListProps> = ({\n  user_id,\n}) => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n  let history = useHistory();\n  const [currentChannel] = useRecoilState<Channel>(currentChannelState);\n  const match = useRouteMatch(`/channel/${currentChannel?.name}`);\n\n  const { data, loading, error } = useWatchDirectMessageChannelsSubscription({\n    variables: {\n      channel_type: Channel_Type_Enum.DirectMessage,\n      user_id,\n    },\n  });\n\n  if (error) {\n    logToConsole('A DirectMessageUserListError occured', error);\n    return (\n      <Alert severity=\"error\">A DirectMessageUserListError occured.</Alert>\n    );\n  }\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  const activeLink = () => {\n    return match ? 'secondary' : 'primary';\n  };\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  const navigateToAddDirectMessageChannelMembers = () => {\n    history.push(`/addDirectMessageChannelMembers`);\n  };\n\n  return (\n    <>\n      <List component=\"div\">\n        <ListItem button onClick={handleClick}>\n          <ListItemIcon aria-label=\"open direct message list\">\n            <PersonIcon />\n          </ListItemIcon>\n          <ListItemText>\n            <Typography variant=\"h6\">Direct Messages</Typography>\n          </ListItemText>\n          <ListItemIcon>\n            <AddCircleOutlineIcon\n              color=\"secondary\"\n              onClick={navigateToAddDirectMessageChannelMembers}\n            />\n          </ListItemIcon>\n          {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={open} timeout=\"auto\">\n          <List component=\"div\">\n            {data?.channels?.map((data) => (\n              <ListItem\n                button\n                component={Link}\n                key={data.name}\n                className={classes.link}\n                to={'/channel/' + data.name}\n                aria-label={data.user_channels[0]?.user.username}\n              >\n                <OnlineUserStatus user={data.user_channels[0]?.user} />\n                {data?.id === currentChannel?.id ? (\n                  <>\n                    <ListItemText>\n                      <Typography variant=\"h6\" color={activeLink()}>\n                        {data.user_channels[0]?.user.username}\n                      </Typography>\n                    </ListItemText>\n                  </>\n                ) : (\n                  <>\n                    <ListItemText>\n                      <Typography variant=\"h6\">\n                        {data.user_channels[0]?.user.username}\n                      </Typography>\n                    </ListItemText>\n                    <UnreadMessageCounter channelId={data.id} />\n                  </>\n                )}\n              </ListItem>\n            ))}\n          </List>\n        </Collapse>\n      </List>\n    </>\n  );\n};\n\nexport default DirectMessageUserList;\n","import React, { useState } from 'react';\nimport { Alert } from '@material-ui/lab';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport {\n  useAddChannelMutation,\n  useInsertMessageMutation,\n  Channel_Type_Enum,\n} from '../../api/generated/graphql';\nimport Loader from '../shared/Loader';\nimport {\n  Button,\n  Checkbox,\n  Collapse,\n  FormControlLabel,\n  Grid,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  TextField,\n  Typography,\n  Snackbar,\n} from '@material-ui/core';\nimport { theme } from '../../theme/theme';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\nimport GroupAddOutlinedIcon from '@material-ui/icons/GroupAddOutlined';\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\nimport { useHistory } from 'react-router';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { logToConsole } from '../../helpers/helpers';\n\nconst useStyles = makeStyles((theme) => ({\n  nested: {\n    paddingLeft: theme.spacing(0),\n  },\n  form: {\n    flexGrow: 1,\n    margin: theme.spacing(2),\n    marginTop: theme.spacing(0),\n  },\n  checkbox: {\n    color: theme.palette.secondary.main,\n  },\n  submit: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst AddChannel: React.FC = () => {\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n  const [open, setOpen] = React.useState(false);\n  const [openAlert, setOpenAlert] = React.useState(true);\n  const [channelName, setChannelName] = useState('');\n  const [channelIsPrivate, setChannelIsPrivate] = useState(false);\n  const [addChannel, { data, loading, error }] = useAddChannelMutation();\n\n  const [sendMessage] = useInsertMessageMutation();\n\n  const { user: userAuth0, isLoading: loadingAuth0 } = useAuth0();\n  let history = useHistory();\n\n  const setSnackbarPosition = () => {\n    switch (matches) {\n      case true:\n        return 'right';\n      case false:\n        return 'center';\n\n      default:\n        return 'right';\n    }\n  };\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  const handleAlert = () => {\n    setOpenAlert(!openAlert);\n  };\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!channelName) return;\n    setOpenAlert(true);\n\n    const dataAddChannel = await addChannel({\n      variables: {\n        channel: {\n          owner_id: userAuth0.sub,\n          name: channelName.toLocaleLowerCase(),\n          is_private: channelIsPrivate,\n          channel_type: Channel_Type_Enum.ChatMessage,\n        },\n      },\n    });\n\n    await sendMessage({\n      variables: {\n        message: {\n          user_id: 'admin',\n          text: `Welcome to channel ${dataAddChannel.data?.insert_channel?.returning[0]?.name}`,\n          channel_id: dataAddChannel.data?.insert_channel?.returning[0]?.id,\n        },\n      },\n    });\n\n    setOpen(false);\n    setChannelName('');\n\n    history.push(`/channel/${channelName.toLocaleLowerCase()}`);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setChannelName(e.target.value);\n  };\n\n  const handleIsPrivateChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setChannelIsPrivate(e.target.checked);\n  };\n\n  if (error) {\n    logToConsole('AddChannel error', error);\n  }\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <List component=\"div\">\n      <ListItem id=\"collapse_add_channel\" button onClick={handleClick}>\n        <ListItemIcon aria-label=\"open add channel\">\n          {open ? <GroupAddIcon /> : <GroupAddOutlinedIcon />}\n        </ListItemIcon>\n        <ListItemText primary=\"Add Channel\" />\n        {open ? (\n          <RemoveCircleIcon fontSize=\"small\" />\n        ) : (\n          <AddCircle color=\"secondary\" fontSize=\"small\" />\n        )}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        {(loadingAuth0 || loading) && <Loader />}\n        <List component=\"div\">\n          {error && (\n            <ListItem className={classes.nested}>\n              <Snackbar\n                open={openAlert}\n                autoHideDuration={5000}\n                onClose={handleAlert}\n                anchorOrigin={{\n                  vertical: 'top',\n                  horizontal: setSnackbarPosition(),\n                }}\n              >\n                <Alert severity={'error'} onClose={handleAlert}>\n                  You can not use this name as it is already taken.\n                </Alert>\n              </Snackbar>\n            </ListItem>\n          )}\n          {data && (\n            <ListItem className={classes.nested}>\n              <Snackbar\n                open={openAlert}\n                autoHideDuration={5000}\n                onClose={handleAlert}\n                anchorOrigin={{\n                  vertical: 'top',\n                  horizontal: setSnackbarPosition(),\n                }}\n              >\n                <Alert severity={'success'} onClose={handleAlert}>\n                  Channel has been added.\n                </Alert>\n              </Snackbar>\n            </ListItem>\n          )}\n          <ListItem component=\"div\" className={classes.nested}>\n            <Grid container>\n              <form\n                id=\"add_channel\"\n                className={classes.form}\n                noValidate\n                autoComplete=\"off\"\n                onSubmit={handleSubmit}\n              >\n                <Grid item xs={12}>\n                  <TextField\n                    disabled={loadingAuth0 || loading}\n                    value={channelName}\n                    autoFocus={false}\n                    onChange={handleChange}\n                    autoComplete=\"off\"\n                    placeholder=\"Your channel name\"\n                    id=\"add-channel-input\"\n                    label=\"Add a new channel\"\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={channelIsPrivate}\n                        onChange={handleIsPrivateChange}\n                        color=\"secondary\"\n                        name=\"private\"\n                        className={classes.checkbox}\n                      />\n                    }\n                    label={\n                      <Typography variant=\"caption\" color=\"textSecondary\">\n                        Private Channel\n                      </Typography>\n                    }\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Button\n                    disabled={loadingAuth0 || loading}\n                    type=\"submit\"\n                    value=\"Submit\"\n                    endIcon={<AddCircle />}\n                    className={classes.submit}\n                    variant=\"outlined\"\n                    arial-label=\"Add channel\"\n                  >\n                    Add new channel\n                  </Button>\n                </Grid>\n              </form>\n            </Grid>\n          </ListItem>\n        </List>\n      </Collapse>\n    </List>\n  );\n};\n\nexport default AddChannel;\n","import React from 'react';\nimport {\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport ForumOutlinedIcon from '@material-ui/icons/ForumOutlined';\nimport { Link, useRouteMatch } from 'react-router-dom';\n\nconst ThreadsLink: React.FC = () => {\n  const match = useRouteMatch('/channel/threads');\n\n  const activeLink = () => {\n    return match ? 'secondary' : 'primary';\n  };\n\n  return (\n    <>\n      <ListItem\n        button\n        component={Link}\n        to=\"/channel/threads\"\n        aria-label=\"Open Threads\"\n      >\n        <ListItemIcon>\n          <ForumOutlinedIcon />\n        </ListItemIcon>\n        <ListItemText>\n          <Typography variant=\"h6\" color={activeLink()}>\n            Threads\n          </Typography>\n        </ListItemText>\n      </ListItem>\n    </>\n  );\n};\n\nexport default ThreadsLink;\n","import React from 'react';\nimport {\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\nimport { Link, useRouteMatch } from 'react-router-dom';\n\nconst DashboardLink: React.FC = () => {\n  const match = useRouteMatch('/dashboard');\n\n  const activeLink = () => {\n    return match ? 'secondary' : 'primary';\n  };\n\n  return (\n    <>\n      <ListItem\n        button\n        component={Link}\n        to=\"/dashboard\"\n        aria-label=\"Open Dashboard\"\n      >\n        <ListItemIcon>\n          <HowToVoteIcon />\n        </ListItemIcon>\n        <ListItemText>\n          <Typography variant=\"h6\" color={activeLink()}>\n            Polling\n          </Typography>\n        </ListItemText>\n      </ListItem>\n    </>\n  );\n};\n\nexport default DashboardLink;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Box, Divider, Grid, IconButton } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { theme } from '../../theme/theme';\nimport ArrowForwardIos from '@material-ui/icons/ArrowForwardIos';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport UserStatus from './UserStatus';\nimport ChannelList from '../chat/ChannelList';\nimport DirectMessageUserList from '../chat/DirectMessageUserList';\nimport Logout from '../Logout';\nimport AddChannel from '../chat/AddChannel';\nimport ThreadsLink from '../shared/ThreadsLink';\nimport DashBoardLink from '../shared/DashBoardLink';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n    overflowY: 'scroll',\n    WebkitOverflowScrolling: 'touch',\n    [theme.breakpoints.up('sm')]: {\n      paddingBottom: theme.spacing(5),\n    },\n    [theme.breakpoints.down('sm')]: {\n      height: '100vh',\n    },\n  },\n  branding: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  logo: {\n    [theme.breakpoints.down('md')]: {\n      width: '150px',\n    },\n    [theme.breakpoints.up('md')]: {\n      width: '200px',\n    },\n  },\n  menuButton: {\n    width: theme.spacing(5),\n    height: theme.spacing(5),\n    backgroundColor: theme.palette.secondary.main,\n    marginLeft: 4,\n    '& .MuiIconButton-label': {\n      marginRight: 4,\n    },\n    justifyContent: 'flex-end',\n    marginTop: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n\n    [theme.breakpoints.up('md')]: {\n      display: 'none',\n    },\n  },\n  logout: {\n    paddingRight: theme.spacing(1),\n    height: 100,\n  },\n}));\n\ninterface SidebarProps {\n  handleDrawerClose: () => void;\n  open: boolean;\n}\n\nconst SideBar: React.FC<SidebarProps> = ({ handleDrawerClose, open }) => {\n  const classes = useStyles();\n  const { user } = useAuth0();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n  const { isAuthenticated } = useAuth0();\n  const role = sessionStorage.getItem(user.sub);\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        flex={1}\n        justifyContent=\"flex-start\"\n        alignItems=\"flex-start\"\n        className={classes.root}\n      >\n        <Box\n          display=\"flex\"\n          justifyContent=\"flex-start\"\n          flex={1}\n          flexDirection=\"column\"\n        >\n          {matches === true && (\n            <Grid item xs={12} className={classes.branding}>\n              <img\n                alt=\"The Great Chicken Fest\"\n                src=\"/the-great-chicken-fest.svg\"\n                className={classes.logo}\n              />\n            </Grid>\n          )}\n          <Grid item xs={12}>\n            <Box\n              display=\"flex\"\n              justifyContent=\"space-between\"\n              alignItems=\"center\"\n              style={{\n                marginTop: theme.spacing(0),\n                marginLeft: theme.spacing(1),\n              }}\n            >\n              <IconButton\n                aria-label=\"open menu\"\n                onClick={handleDrawerClose}\n                color=\"inherit\"\n                size=\"medium\"\n                className={clsx(classes.menuButton, open)}\n              >\n                <ArrowForwardIos />\n              </IconButton>\n              <UserStatus user_id={user.sub} />\n            </Box>\n            <Divider\n              style={{\n                marginTop: theme.spacing(1),\n                marginBottom: theme.spacing(2),\n              }}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            {isAuthenticated ? (\n              <>\n                <DirectMessageUserList user_id={user.sub} />\n                <Divider />\n                {role === 'admin' && <DashBoardLink />}\n                <ThreadsLink />\n                <Divider />\n                <ChannelList />\n                <Divider />\n                <AddChannel />\n                <Divider />\n              </>\n            ) : (\n              ''\n            )}\n            <Box\n              display=\"flex\"\n              justifyContent=\"flex-end\"\n              alignItems=\"flex-start\"\n              className={classes.logout}\n            >\n              <Logout />\n            </Box>\n          </Grid>\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport default SideBar;\n","import React from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { Chip } from '@material-ui/core';\nimport PeopleIcon from '@material-ui/icons/People';\nimport { useWatchUsersWhoHaveSubscribedToChannelSubscription } from '../../api/generated/graphql';\nimport Loader from './Loader';\nimport OnlineUserStatus from './OnlineUserStatus';\nimport { useAuth0 } from '@auth0/auth0-react';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  title: {\n    width: 180,\n    maxWidth: theme.spacing(22),\n  },\n}));\n\ninterface UserHeaderProps {\n  channelId: number;\n}\n\nconst UserHeader: React.FC<UserHeaderProps> = ({ channelId }) => {\n  const classes = useStyles();\n  const { user } = useAuth0();\n\n  const { data, loading } = useWatchUsersWhoHaveSubscribedToChannelSubscription(\n    {\n      variables: {\n        channel_id: channelId,\n        user_id: user.sub,\n      },\n    },\n  );\n\n  if (loading) return <Loader />;\n\n  return (\n    <OnlineUserStatus\n      user={data?.channel[0]?.user_channels[0]?.user}\n      showBadgeInChildren={true}\n    >\n      <Chip\n        size=\"small\"\n        variant=\"outlined\"\n        color=\"primary\"\n        label={data?.channel[0]?.user_channels[0]?.user?.username}\n        icon={<PeopleIcon />}\n        className={classes.title}\n        aria-label={`channel: ${data?.channel[0]?.user_channels[0]?.user?.username}`}\n      />\n    </OnlineUserStatus>\n  );\n};\n\nexport default UserHeader;\n","import React from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { theme } from '../../theme/theme';\nimport { useRecoilState } from 'recoil';\nimport { Box, Button, Chip, IconButton } from '@material-ui/core';\nimport { currentChannelState } from '../../atom';\nimport PeopleIcon from '@material-ui/icons/People';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport PollPopUp from '../../components/admin/PollPopup';\nimport Logout from '../Logout';\nimport MenuBarDrawer from '../shared/MenuBarDrawer';\nimport SideBar from '../shared/SideBar';\nimport UserHeader from '../shared/UserHeader';\nimport { Channel_Type_Enum } from '../../api/generated/graphql';\nimport { useHistory } from 'react-router';\nimport { Channel } from '../../interfaces/channel.interface';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    justifyContent: 'space-between',\n    backgroundColor: theme.palette.background.default,\n    marginTop: theme.spacing(0),\n    paddingTop: theme.spacing(2),\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    zIndex: 1000,\n    [theme.breakpoints.up('md')]: {\n      position: 'fixed',\n      width: '75vw',\n    },\n    [theme.breakpoints.down('md')]: {\n      position: 'fixed',\n    },\n  },\n  outerContainer: {\n    paddingBottom: '75px',\n  },\n  menuButton: {\n    width: theme.spacing(5),\n    height: theme.spacing(5),\n    backgroundColor: theme.palette.secondary.main,\n    marginLeft: theme.spacing(0),\n    '& .MuiIconButton-label': {\n      marginLeft: theme.spacing(1),\n    },\n  },\n  title: {\n    width: 180,\n    maxWidth: theme.spacing(22),\n  },\n}));\n\ninterface MobileHeaderMenuProps {\n  channelName: string;\n  channel?: string;\n  user?: string;\n  showAddUserButton?: boolean;\n  isThreadList?: boolean;\n}\n\nconst MobileHeaderMenu: React.FC<MobileHeaderMenuProps> = ({\n  channelName,\n  user,\n  showAddUserButton,\n  channel,\n  isThreadList,\n}) => {\n  const classes = useStyles();\n  const [currentChannel] = useRecoilState<Channel>(currentChannelState);\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n  const [open, setOpen] = React.useState(false);\n  let history = useHistory();\n\n  const handleDrawerOpen = () => {\n    if (channel) {\n      history.push(`/channel/${channel}`);\n      return;\n    }\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const navigateToAddChannelMembers = () => {\n    history.push(`/addChannelMembers`);\n  };\n\n  return (\n    <Box component=\"article\" className={classes.outerContainer}>\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        flexDirection=\"row\"\n        width={1}\n        className={classes.root}\n        component=\"nav\"\n      >\n        {matches === false && (\n          <IconButton\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"open menu\"\n            onClick={handleDrawerOpen}\n          >\n            <ArrowBackIosIcon />\n          </IconButton>\n        )}\n        {currentChannel?.channel_type === Channel_Type_Enum.DirectMessage &&\n          user && <UserHeader channelId={currentChannel.id} />}\n        {currentChannel?.channel_type === Channel_Type_Enum.ChatMessage &&\n          currentChannel?.is_private === false &&\n          !isThreadList && (\n            <Chip\n              size=\"small\"\n              variant=\"outlined\"\n              color=\"primary\"\n              label={channelName}\n              icon={<PeopleIcon />}\n              className={classes.title}\n              aria-label={`channel: ${channelName}`}\n            />\n          )}\n        {currentChannel?.channel_type === Channel_Type_Enum.ChatMessage &&\n          currentChannel?.is_private === true &&\n          !isThreadList &&\n          !showAddUserButton && (\n            <Chip\n              size=\"small\"\n              variant=\"outlined\"\n              color=\"primary\"\n              label={channelName}\n              icon={<PeopleIcon />}\n              className={classes.title}\n              aria-label={`channel: ${channelName}`}\n            />\n          )}\n        {isThreadList && (\n          <Chip\n            size=\"small\"\n            variant=\"outlined\"\n            color=\"primary\"\n            label={channelName}\n            icon={<PeopleIcon />}\n            className={classes.title}\n            aria-label={`channel: ${channelName}`}\n          />\n        )}\n        {currentChannel?.channel_type === Channel_Type_Enum.ChatMessage &&\n          currentChannel?.is_private === true &&\n          showAddUserButton && (\n            <Box display=\"flex\" justifyContent=\"center\" component=\"article\">\n              <Button\n                color=\"secondary\"\n                variant=\"contained\"\n                type=\"button\"\n                onClick={navigateToAddChannelMembers}\n                aria-label=\"add user to channel\"\n              >\n                Add users to channel\n              </Button>\n            </Box>\n          )}\n        <PollPopUp channelId={currentChannel?.id} />\n        <Logout />\n      </Box>\n      <MenuBarDrawer open={open}>\n        <SideBar handleDrawerClose={handleDrawerClose} open={open} />\n      </MenuBarDrawer>\n    </Box>\n  );\n};\n\nexport default MobileHeaderMenu;\n","import React from 'react';\nimport { Alert } from '@material-ui/lab';\nimport {\n  Box,\n  Divider,\n  Grid,\n  List,\n  ListItem,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport {\n  useWatchUsersWhoHaveNotSubscribedToChannelSubscription,\n  useAddChannelUserMutation,\n  User,\n} from '../../api/generated/graphql';\nimport { useRecoilState } from 'recoil';\nimport { currentChannelState } from '../../atom';\nimport { useHistory } from 'react-router-dom';\nimport Loader from '../shared/Loader';\nimport Logo from '../shared/Logo';\nimport { makeStyles } from '@material-ui/core/';\nimport OnlineUserStatus from '../shared/OnlineUserStatus';\nimport MobileHeaderMenu from './MobileHeaderMenu';\nimport { Channel } from '../../interfaces/channel.interface';\nimport { logToConsole } from '../../helpers/helpers';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    overflowY: 'scroll',\n    height: '100vh',\n  },\n  spacer: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nconst AddChannelMembers: React.FC = () => {\n  const classes = useStyles();\n  let history = useHistory();\n  const { isLoading: loadingAuth0 } = useAuth0();\n\n  const [currentChannel] = useRecoilState<Channel>(currentChannelState);\n\n  if (!currentChannel) history.push('/channel/general');\n\n  const {\n    data: users,\n    loading,\n    error,\n  } = useWatchUsersWhoHaveNotSubscribedToChannelSubscription({\n    variables: {\n      user_id: currentChannel?.owner_id ?? '',\n      channel_id: currentChannel?.id,\n    },\n  });\n\n  const [\n    addChannelUserMutation,\n    { error: addChannelUserError },\n  ] = useAddChannelUserMutation();\n\n  const handleUsersToggle = async (user_id: string) => {\n    await addChannelUserMutation({\n      variables: {\n        channel_id: currentChannel?.id,\n        user_id,\n      },\n    });\n  };\n\n  if (error || addChannelUserError)\n    logToConsole(\n      'AddChannelMembers - error on user subscription',\n      error,\n      addChannelUserError,\n    );\n\n  return (\n    <>\n      <Grid item xs={12} md={9} className={classes.root} component=\"section\">\n        <MobileHeaderMenu channelName={currentChannel?.name} />\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n          <Logo />\n        </Box>\n        <Box\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          flexDirection=\"column\"\n          mt={0}\n          mb={5}\n        >\n          <Typography id=\"simple-modal-title\" variant=\"h2\">\n            Add users to {currentChannel?.name}\n          </Typography>\n          <Typography\n            color=\"secondary\"\n            variant=\"caption\"\n            id=\"simple-modal-description\"\n          >\n            {users && users.user.length > 0\n              ? 'Select users that you wanna add to this channel.'\n              : 'All users have subscribed to this channel.'}\n          </Typography>\n        </Box>\n        <Box>\n          {error && (\n            <Alert severity={'error'}>\n              Error - something weird happened...\n            </Alert>\n          )}\n\n          {(loadingAuth0 || loading) && <Loader />}\n\n          {!(loadingAuth0 || loading || error) && (\n            <>\n              <Divider className={classes.spacer} />\n              <List\n                component=\"nav\"\n                aria-label=\"secondary mailbox folders\"\n                className={classes.spacer}\n              >\n                {users &&\n                  users.user.map(\n                    (u: Pick<User, 'auth0_user_id' | 'username'>, index) => {\n                      return (\n                        <ListItem\n                          button\n                          key={index}\n                          onClick={() => {\n                            if (u.auth0_user_id)\n                              handleUsersToggle(u.auth0_user_id);\n                          }}\n                        >\n                          {u && <OnlineUserStatus user={u ?? ''} />}\n                          <ListItemText primary={u.username} />\n                        </ListItem>\n                      );\n                    },\n                  )}\n              </List>\n              <Divider className={classes.spacer} />\n            </>\n          )}\n        </Box>\n      </Grid>\n    </>\n  );\n};\n\nexport default AddChannelMembers;\n","import React, { useEffect, useState } from 'react';\nimport {\n  Box,\n  Divider,\n  Grid,\n  List,\n  ListItem,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport {\n  useValidateAndAddDirectMessageChannelMutation,\n  useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription,\n  useUpsertMessageCursorMutation,\n  useInsertMessageMutation,\n  User,\n} from '../../api/generated/graphql';\nimport { Alert } from '@material-ui/lab';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useHistory } from 'react-router';\nimport Loader from '../shared/Loader';\nimport Logo from '../shared/Logo';\nimport { makeStyles } from '@material-ui/core/styles';\nimport OnlineUserStatus from '../shared/OnlineUserStatus';\nimport MobileHeaderMenu from './MobileHeaderMenu';\nimport { logToConsole } from '../../helpers/helpers';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    overflowY: 'scroll',\n    height: '100vh',\n  },\n  spacer: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nconst AddDirectMessageChannel: React.FC = () => {\n  const classes = useStyles();\n  const [, setAnchorEl] = useState(null);\n  const { user } = useAuth0();\n  const [users, setUsers] = useState<\n    Pick<User, 'auth0_user_id' | 'username'>[] | null\n  >(null);\n  const user_id = user.sub;\n  let history = useHistory();\n\n  const {\n    data,\n    loading,\n    error,\n  } = useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription({\n    variables: {\n      user_id,\n    },\n  });\n\n  const [\n    upsertMessageCursorMutation,\n    { error: upsertMessageError },\n  ] = useUpsertMessageCursorMutation();\n\n  const [\n    sendMessage,\n    { error: sendUpdateMessageError },\n  ] = useInsertMessageMutation();\n\n  const [\n    validateAndAddDirectMessageChannelMutation,\n    { error: addDMError },\n  ] = useValidateAndAddDirectMessageChannelMutation();\n\n  useEffect(() => {\n    const checkUserSubscriptions = async () => {\n      return data?.user.filter((u) => {\n        return (\n          u.user_channels.filter((user_channel) => {\n            return user_channel.channel.user_channels.length === 1;\n          }).length === 0\n        );\n      }) as Pick<User, 'auth0_user_id' | 'username'>[];\n    };\n    const check = async () => {\n      const users = await checkUserSubscriptions();\n      setUsers(users);\n    };\n    check();\n  }, [data]);\n\n  if (error || addDMError || upsertMessageError || sendUpdateMessageError) {\n    logToConsole(\n      'AddDirectMessageChannel error',\n      error,\n      addDMError,\n      upsertMessageError,\n      sendUpdateMessageError,\n    );\n    return <Alert severity=\"error\">Fetching users error...</Alert>;\n  }\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  const handleAddUser = async (\n    user_id?: string | null | undefined,\n    dm_user?: string | null | undefined,\n  ) => {\n    if (user_id && dm_user) {\n      setAnchorEl(null);\n      const { data } = await validateAndAddDirectMessageChannelMutation({\n        variables: {\n          name: uuidv4(),\n          user_id1: user_id,\n          user_id2: dm_user,\n        },\n      });\n\n      await sendMessage({\n        variables: {\n          message: {\n            user_id: 'admin',\n            text: `Welcome to your new direct message channel`,\n            channel_id: data?.validateAndAddDirectMessageChannel?.id,\n          },\n        },\n      });\n\n      if (\n        data?.validateAndAddDirectMessageChannel?.id &&\n        data?.validateAndAddDirectMessageChannel?.id > 0\n      )\n        upsertMessageCursorMutation({\n          variables: {\n            channel_id: data?.validateAndAddDirectMessageChannel?.id,\n            message_id: 1,\n            user_id: dm_user,\n          },\n        });\n\n      history.push(\n        `/channel/${data?.validateAndAddDirectMessageChannel?.name}`,\n      );\n    }\n  };\n\n  return (\n    <>\n      <Grid item xs={12} md={9} className={classes.root} component=\"section\">\n        <MobileHeaderMenu channelName={'general'} />\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n          <Logo />\n        </Box>\n        <Box\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          flexDirection=\"column\"\n          mb={5}\n        >\n          <Typography variant=\"h2\">Add a user</Typography>\n          <Typography\n            color=\"secondary\"\n            variant=\"caption\"\n            id=\"simple-modal-description\"\n          >\n            {users?.length\n              ? 'Select users that you wanna send direct messages to.'\n              : ''}\n          </Typography>\n        </Box>\n        <Box mb={5}>\n          <Divider className={classes.spacer} />\n          {users?.length && (\n            <List className={classes.spacer}>\n              {users?.map(\n                (\n                  dm_user: Pick<User, 'auth0_user_id' | 'username'>,\n                  index: number,\n                ) => {\n                  return (\n                    <ListItem\n                      button\n                      key={index}\n                      onClick={() =>\n                        handleAddUser(user_id, dm_user.auth0_user_id)\n                      }\n                    >\n                      <OnlineUserStatus user={dm_user} />\n                      <ListItemText primary={dm_user.username} />\n                    </ListItem>\n                  );\n                },\n              )}\n            </List>\n          )}\n          {users?.length === 0 && (\n            <Alert severity={'success'}>\n              All users have been added. U can send a message, by clicking on\n              the user in the menu sidebar in direct messages.\n            </Alert>\n          )}\n          <Divider className={classes.spacer} />\n        </Box>\n      </Grid>\n    </>\n  );\n};\n\nexport default AddDirectMessageChannel;\n","import React from 'react';\nimport moment from 'moment';\nimport {\n  Avatar,\n  Badge,\n  Box,\n  Chip,\n  Divider,\n  ListItem,\n  ListItemAvatar,\n  ListItemIcon,\n  Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Channel } from '../../../interfaces/channel.interface';\nimport { ChannelThread } from '../../../interfaces/thread.interface';\nimport { Channel_Type_Enum } from '../../../api/generated/graphql';\nimport UserHeader from '../../shared/UserHeader';\n\nconst useStyles = makeStyles((theme) => ({\n  head: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    padding: theme.spacing(0),\n  },\n  [theme.breakpoints.up('md')]: {\n    messageText: {\n      paddingBottom: '1rem',\n      color: 'rgba(255, 255, 255, 0.7)',\n    },\n  },\n  [theme.breakpoints.down('md')]: {\n    messageText: {\n      paddingBottom: '1rem',\n      color: 'rgba(255, 255, 255, 0.7)',\n    },\n  },\n  [theme.breakpoints.down('sm')]: {\n    messageText: {\n      paddingBottom: '1rem',\n      color: 'rgba(255, 255, 255, 0.7)',\n    },\n  },\n  vspace: {\n    marginBottom: theme.spacing(1),\n  },\n  vspaceTop: {\n    marginBottom: theme.spacing(3),\n  },\n  vspaceBottom: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(0),\n  },\n  avatar: {\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    backgroundColor: '#000000',\n    color: '#ffffff',\n    fontSize: 11,\n    fontWeight: 'bold',\n    border: '2px solid #f57c00',\n  },\n  avatarDeleted: {\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    backgroundColor: '#000000',\n    color: '#ffffff',\n    fontSize: 11,\n    fontWeight: 'bold',\n    border: '2px solid #f57c00',\n  },\n  image: {\n    paddingBottom: '0.5rem',\n  },\n  giphy: {\n    [theme.breakpoints.down('sm')]: {\n      width: '100%',\n    },\n    [theme.breakpoints.up('md')]: {\n      width: '25%',\n    },\n  },\n}));\n\ninterface ThreadInfoProps {\n  channelThread: ChannelThread;\n  currentChannel: Channel | { id: number; name: string };\n  showThreadInfo?: boolean;\n}\n\nconst ThreadInfo: React.FC<ThreadInfoProps> = ({\n  channelThread,\n  currentChannel,\n  showThreadInfo,\n}) => {\n  const classes = useStyles();\n\n  const renderThreadInfo = (channelThread: ChannelThread) => {\n    return (\n      <>\n        {showThreadInfo &&\n          channelThread?.message?.channel?.channel_type ===\n            Channel_Type_Enum.ChatMessage && (\n            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n              <Chip\n                variant=\"outlined\"\n                size=\"small\"\n                color=\"primary\"\n                label={<strong>Thread - {currentChannel?.name} </strong>}\n              />\n            </Box>\n          )}\n        {showThreadInfo &&\n          channelThread?.message?.channel?.channel_type ===\n            Channel_Type_Enum.DirectMessage && (\n            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n              <UserHeader channelId={channelThread?.message?.channel?.id} />\n            </Box>\n          )}\n        <Divider className={classes.vspaceTop} />\n        <ListItem\n          key={channelThread.message.id}\n          component=\"div\"\n          className={classes.head}\n        >\n          <Box\n            display=\"flex\"\n            justifyContent=\"flex-start\"\n            alignItems=\"flex-start\"\n          >\n            <ListItemAvatar>\n              <ListItemIcon>\n                <Badge variant=\"dot\">\n                  {!channelThread.message.deleted ? (\n                    <Avatar className={classes.avatar}>\n                      {channelThread.message.user.username\n                        .substring(0, 2)\n                        .toUpperCase()}\n                    </Avatar>\n                  ) : (\n                    <Avatar\n                      className={classes.avatarDeleted}\n                      alt=\"Message has been removed\"\n                    >\n                      !!!\n                    </Avatar>\n                  )}\n                </Badge>\n              </ListItemIcon>\n            </ListItemAvatar>\n          </Box>\n          <Box component=\"div\" display=\"flex\" flexDirection=\"column\" flex=\"1\">\n            <Box\n              display=\"flex\"\n              justifyContent=\"space-between\"\n              alignItems=\"flex-start\"\n            >\n              <Box\n                display=\"flex\"\n                justifyContent=\"flex-start\"\n                alignItems=\"flex-start\"\n              >\n                <Typography color=\"secondary\" variant=\"caption\">\n                  {!channelThread.message.deleted ? (\n                    <>\n                      <strong>{channelThread.message.user.username} </strong>\n                    </>\n                  ) : (\n                    <strong>Oh sorry it seems...</strong>\n                  )}\n                </Typography>\n                <Typography\n                  variant=\"caption\"\n                  color=\"primary\"\n                  style={{ marginLeft: '8px' }}\n                >\n                  <i>{moment(channelThread.message.timestamp).fromNow()}</i>\n                </Typography>\n                <Divider className={classes.vspace} />\n              </Box>\n            </Box>\n            <Typography component=\"div\" className={classes.messageText}>\n              {channelThread.message.text}\n            </Typography>\n            {channelThread.message?.image ? (\n              <Box className={classes.image}>\n                <img\n                  alt={channelThread.message.image}\n                  src={channelThread.message.image}\n                  className={classes.giphy}\n                />\n              </Box>\n            ) : (\n              ''\n            )}\n          </Box>\n        </ListItem>\n      </>\n    );\n  };\n\n  return <>{renderThreadInfo(channelThread)}</>;\n};\n\nexport default ThreadInfo;\n","import React from 'react';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport { IconButton } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { useDeleteThreadMessageMutation } from '../../../api/generated/graphql';\n\ninterface ThreadDeleteMessageProps {\n  messageId: number;\n}\n\nconst ThreadDeleteMessage: React.FC<ThreadDeleteMessageProps> = ({\n  messageId,\n}) => {\n  const [\n    deleteThreadMessageMutation,\n    { data, error },\n  ] = useDeleteThreadMessageMutation();\n\n  const handleDelete = (messageId: number) => {\n    deleteThreadMessageMutation({\n      variables: {\n        message_id: messageId,\n      },\n    });\n  };\n\n  if (\n    error ||\n    (data?.delete_channel_thread_message?.affected_rows !== undefined &&\n      data?.delete_channel_thread_message?.affected_rows === 0)\n  ) {\n    return <Alert severity=\"error\">Message could not get deleted...</Alert>;\n  }\n\n  return (\n    <IconButton\n      onClick={() => handleDelete(messageId)}\n      aria-label={`delete message ${messageId}`}\n    >\n      <HighlightOffIcon color=\"primary\" fontSize=\"small\" />\n    </IconButton>\n  );\n};\n\nexport default ThreadDeleteMessage;\n","import React from 'react';\nimport moment from 'moment';\nimport { ThreadMessage } from '../../../interfaces/message.interface';\nimport { Channel } from '../../../interfaces/channel.interface';\nimport { Auth0User } from '../../../interfaces/user.interface';\nimport ThreadInfo from './ThreadInfo';\nimport ThreadDeleteMessage from './ThreadDeleteMessage';\nimport {\n  Avatar,\n  Badge,\n  Box,\n  Divider,\n  ListItem,\n  ListItemAvatar,\n  ListItemIcon,\n  Typography,\n  Button,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ChannelThread } from '../../../interfaces/thread.interface';\nimport Loader from '../../shared/Loader';\n\nexport const useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    padding: theme.spacing(2),\n    overflowWrap: 'break-word',\n    hyphens: 'auto',\n    textOverflow: 'ellipsis',\n  },\n  [theme.breakpoints.up('md')]: {\n    messageText: {\n      padding: '1rem',\n      paddingLeft: '0rem',\n    },\n    reply: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n      color: '#ffffff',\n    },\n  },\n  [theme.breakpoints.down('md')]: {\n    messageText: {\n      padding: '1rem',\n      paddingLeft: '0rem',\n    },\n    reply: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n      color: '#ffffff',\n    },\n  },\n  [theme.breakpoints.down('sm')]: {\n    messageText: {\n      padding: '1rem',\n      paddingLeft: '0rem',\n    },\n    reply: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n      color: '#ffffff',\n    },\n  },\n  vspace: {\n    marginBottom: theme.spacing(1),\n  },\n  vspaceTop: {\n    marginBottom: theme.spacing(3),\n  },\n  vspaceBottom: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(0),\n  },\n  image: {\n    paddingBottom: '0.5rem',\n  },\n  avatar: {\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    backgroundColor: '#000000',\n    color: '#ffffff',\n    fontSize: 11,\n    fontWeight: 'bold',\n    border: '2px solid #f57c00',\n  },\n  loadMoreButton: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: theme.spacing(1),\n  },\n}));\n\ninterface ThreadMessageListProps {\n  messages: ThreadMessage[];\n  user: Auth0User;\n  channelThread: ChannelThread;\n  currentChannel: Channel | { id: number; name: string };\n  handleIncreaseLimit: () => void;\n  limit: number;\n  showThreadInfo?: boolean;\n}\n\nconst ThreadMessageList: React.FC<ThreadMessageListProps> = ({\n  messages,\n  user,\n  channelThread,\n  currentChannel,\n  handleIncreaseLimit,\n  limit,\n  showThreadInfo,\n}) => {\n  const classes = useStyles();\n\n  const renderMessage = (message: ThreadMessage) => {\n    return (\n      <ListItem key={message.id} component=\"div\" className={classes.root}>\n        <ListItemAvatar>\n          <ListItemIcon>\n            <Badge variant=\"dot\">\n              <Avatar className={classes.avatar}>\n                {message?.user?.username.substring(0, 2).toUpperCase()}\n              </Avatar>\n            </Badge>\n          </ListItemIcon>\n        </ListItemAvatar>\n\n        <Box component=\"div\" display=\"flex\" flexDirection=\"column\" flex=\"1\">\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"flex-start\"\n          >\n            <Box\n              display=\"flex\"\n              justifyContent=\"flex-start\"\n              alignItems=\"flex-start\"\n            >\n              <Typography variant=\"caption\">\n                <strong>{message?.user?.username} </strong>\n                <i>{moment(message.timestamp).fromNow()}</i>\n              </Typography>\n              <Divider className={classes.vspace} />\n            </Box>\n            <Box>\n              <Typography variant=\"caption\">\n                {user.sub === message?.user?.auth0_user_id ? (\n                  <ThreadDeleteMessage messageId={message.id} />\n                ) : (\n                  ''\n                )}\n              </Typography>\n            </Box>\n          </Box>\n          <Typography component=\"div\" className={classes.messageText}>\n            {message.message}\n          </Typography>\n          {message.image ? (\n            <Box className={classes.image}>\n              <img alt={message.image} src={message.image} />\n            </Box>\n          ) : (\n            ''\n          )}\n          <Divider className={classes.vspace} />\n        </Box>\n      </ListItem>\n    );\n  };\n\n  return (\n    <>\n      <ThreadInfo\n        channelThread={channelThread}\n        currentChannel={currentChannel}\n        showThreadInfo={showThreadInfo}\n      />\n      <Box className={classes.loadMoreButton}>\n        {messages?.length === limit && (\n          <Button\n            onClick={() => handleIncreaseLimit()}\n            aria-label=\"load more messages\"\n          >\n            load more (+{limit})\n          </Button>\n        )}\n      </Box>\n\n      {messages ? (\n        [...messages]\n          ?.reverse()\n          ?.map((message: ThreadMessage) => renderMessage(message))\n      ) : (\n        <Loader />\n      )}\n    </>\n  );\n};\n\nexport default ThreadMessageList;\n","import React, { useState } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { GiphyFetch } from '@giphy/js-fetch-api';\nimport { giphyState } from '../../atom';\nimport { Box, TextField } from '@material-ui/core';\nimport { Carousel } from '@giphy/react-components';\nimport { IGif } from '@giphy/js-types';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  giphySearchInput: {\n    display: 'flex',\n    flex: 1,\n    paddingBottom: theme.spacing(2),\n    marginTop: theme.spacing(1),\n    [theme.breakpoints.down('md')]: {\n      marginTop: theme.spacing(1),\n    },\n  },\n  giphyCarousel: {\n    display: 'flex',\n    padding: theme.spacing(3),\n  },\n}));\n\nconst giphyFetch = new GiphyFetch('gNDqYmKTip2mgTRqQbS5BwslaLM8Jdq0');\n\ninterface GiphyCarouselProps {\n  hideGiphyCarousel: Function;\n}\n\nconst GiphyCarousel: React.FC<GiphyCarouselProps> = ({ hideGiphyCarousel }) => {\n  const classes = useStyles();\n  const [, setGif] = useRecoilState<IGif | null>(giphyState);\n  const [giphySearchString, setGiphySearchString] = useState('');\n\n  const onGifClick = (\n    gif: IGif,\n    e: React.SyntheticEvent<HTMLElement, Event>,\n  ) => {\n    e.preventDefault();\n    setGif(gif);\n    hideGiphyCarousel();\n  };\n\n  const handleOnChange = (\n    ev: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    setGiphySearchString(ev.target.value);\n  };\n\n  const fetchGifs = (offset: number) => {\n    return giphySearchString\n      ? giphyFetch.search(giphySearchString, { offset, limit: 5 })\n      : giphyFetch.trending({ offset, limit: 5 });\n  };\n\n  return (\n    <>\n      <Box display=\"flex\" flexDirection=\"column\" style={{ maxWidth: '100%' }}>\n        <Carousel\n          key={giphySearchString}\n          fetchGifs={fetchGifs}\n          onGifClick={onGifClick}\n          gifHeight={50}\n          gutter={6}\n        />\n        <TextField\n          className={classes.giphySearchInput}\n          size=\"small\"\n          label=\"Search giphy ...\"\n          variant=\"standard\"\n          onChange={handleOnChange}\n        />\n      </Box>\n    </>\n  );\n};\n\nexport default GiphyCarousel;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, Button } from '@material-ui/core';\nimport GiphyCarousel from './GiphyCarousel';\nimport AddGif from '@material-ui/icons/Gif';\nimport MenuBarDrawer from './MenuBarDrawer';\nimport SideBar from './SideBar';\n\nconst useStyles = makeStyles((theme) => ({\n  giphyImage: {\n    padding: theme.spacing(1),\n    marginTop: theme.spacing(2),\n  },\n  giphyButton: {\n    [theme.breakpoints.up('md')]: {\n      height: 56,\n    },\n  },\n}));\n\ninterface MenuBarProps {}\n\nconst MenuBar: React.FC<MenuBarProps> = ({ children }) => {\n  const classes = useStyles();\n\n  const [open, setOpen] = React.useState(false);\n  const [openGiphy, setOpenGiphy] = React.useState<boolean>(false);\n  const [showGiphyCarousel, setShowGiphyCarousel] = React.useState(false);\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handleGiphyClick = () => {\n    setShowGiphyCarousel(!showGiphyCarousel);\n    setOpenGiphy(!openGiphy);\n  };\n\n  const hideGiphyCarousel = () => {\n    setOpenGiphy(!openGiphy);\n    setShowGiphyCarousel(false);\n  };\n\n  return (\n    <>\n      <Box\n        style={{ display: showGiphyCarousel ? 'block' : 'none' }}\n        className={classes.giphyImage}\n        order={1}\n        flex=\"1\"\n        justifyContent=\"flex-start\"\n        alignItems=\"center\"\n      >\n        <GiphyCarousel hideGiphyCarousel={() => hideGiphyCarousel()} />\n      </Box>\n      <Box display=\"flex\" justifyContent=\"flex-end\" alignItems=\"flex-end\">\n        <Box flex={1}>\n          <Button\n            color={openGiphy === false ? 'primary' : 'secondary'}\n            size=\"large\"\n            onClick={handleGiphyClick}\n            className={classes.giphyButton}\n            aria-label=\"giphy\"\n          >\n            <AddGif />\n          </Button>\n        </Box>\n        <Box flex={16} justifyContent=\"flex-end\">\n          {children}\n        </Box>\n      </Box>\n      <MenuBarDrawer open={open}>\n        <SideBar handleDrawerClose={handleDrawerClose} open={open} />\n      </MenuBarDrawer>\n    </>\n  );\n};\n\nexport default MenuBar;\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useGetUserIsTypingSubscription } from '../../api/generated/graphql';\nimport { useRecoilState } from 'recoil';\nimport { currentChannelState } from '../../atom';\nimport { Channel } from '../../interfaces/channel.interface';\nimport { logToConsole } from '../../helpers/helpers';\n\nconst TypingIndicator: React.FC = () => {\n  const { user } = useAuth0();\n\n  const [currentChannel] = useRecoilState<Channel>(currentChannelState);\n\n  const { data, loading, error } = useGetUserIsTypingSubscription({\n    variables: {\n      self_id: user.sub,\n      channel_id: currentChannel.id,\n    },\n  });\n\n  if (error) {\n    logToConsole('Typing Indicator Error...', error);\n  }\n\n  return (\n    <>\n      {!loading && data?.user_typing[0]?.username\n        ? `${data.user_typing[0].username} is typing ...`\n        : 'Type your message here ...'}\n    </>\n  );\n};\n\nexport default TypingIndicator;\n","import React, { useState } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { InputAdornment, IconButton, TextField, Box } from '@material-ui/core';\nimport { theme } from '../../../theme/theme';\nimport SendIcon from '@material-ui/icons/Send';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport {\n  useInsertChannelThreadMessageMutation,\n  useSendTypingEventMutation,\n} from '../../../api/generated/graphql';\nimport TypingIndicator from '../../shared/TypingIndicator';\nimport { useRecoilState } from 'recoil';\nimport { giphyState, deletedMessageState } from '../../../atom';\nimport { IGif } from '@giphy/js-types';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n  },\n  giphyImage: {\n    marginTop: theme.spacing(0),\n  },\n  form: {\n    display: 'flex',\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    flexDirection: 'column',\n    flexGrow: 1,\n    [theme.breakpoints.down('md')]: {\n      marginTop: theme.spacing(1),\n    },\n    [theme.breakpoints.up('md')]: {\n      marginTop: theme.spacing(0),\n    },\n  },\n  messageInput: {\n    [theme.breakpoints.down('md')]: {\n      fontSize: '1rem',\n    },\n    '&.MuiFormLabel-root.Mui-focused': {\n      color: theme.palette.secondary.main,\n    },\n  },\n  image: {\n    border: '2px solid ' + theme.palette.secondary.main,\n    height: 150,\n    marginBottom: theme.spacing(3),\n    [theme.breakpoints.up('md')]: {\n      maxHeight: 250,\n    },\n    [theme.breakpoints.down('lg')]: {\n      border: '2px solid ' + theme.palette.secondary.main,\n      height: 150,\n      maxWidth: '150vw',\n      maxHeight: '70vw',\n    },\n    [theme.breakpoints.down('md')]: {\n      border: '2px solid ' + theme.palette.secondary.main,\n      height: 120,\n      maxWidth: '100vw',\n      maxHeight: '50vw',\n    },\n  },\n}));\n\ninterface ThreadMessageInputProps {\n  channelId: number;\n  channelThreadId: number | undefined;\n}\n\nconst ThreadMessageInput: React.FC<ThreadMessageInputProps> = (props) => {\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n\n  const setTextFieldSize = () => {\n    switch (matches) {\n      case true:\n        return 'medium';\n\n      case false:\n        return 'small';\n\n      default:\n        return 'small';\n    }\n  };\n\n  const { user } = useAuth0();\n  const [text, setText] = useState('');\n  const [gif, setGif] = useRecoilState<IGif | null>(giphyState);\n  const [, setdeletedMessage] = useRecoilState<boolean>(deletedMessageState);\n\n  const channelId = props.channelId;\n\n  const [sendTypingEventMutation] = useSendTypingEventMutation({\n    variables: {\n      user_id: user.sub,\n      channel_id: channelId,\n    },\n  });\n\n  const handleTyping = (text: string) => {\n    const textLength = text.length;\n    if ((textLength !== 0 && textLength % 5 === 0) || textLength === 1) {\n      sendTypingEventMutation();\n    }\n    setText(text);\n  };\n\n  const [sendMessage] = useInsertChannelThreadMessageMutation();\n\n  const handleSubmit = async (\n    e: React.SyntheticEvent | React.KeyboardEvent<HTMLDivElement>,\n  ) => {\n    e.preventDefault();\n\n    if ((!text.trim() && !gif) || !props.channelThreadId) {\n      return;\n    }\n\n    const msg = {\n      variables: {\n        channel_thread_id: props.channelThreadId,\n        message: text,\n        image: gif?.images?.fixed_width?.url,\n        user_id: user.sub,\n      },\n    };\n\n    setText('');\n    setGif(null);\n    setdeletedMessage(false);\n\n    await sendMessage(msg);\n  };\n\n  return (\n    <Box className={classes.root}>\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        className={classes.giphyImage}\n      >\n        {gif && (\n          <img\n            className={classes.image}\n            alt={gif?.images?.fixed_width?.url}\n            src={gif?.images?.fixed_width?.url}\n            onClick={() => setGif(null)}\n          />\n        )}\n      </Box>\n      <form\n        noValidate\n        autoComplete=\"off\"\n        className={classes.form}\n        onSubmit={handleSubmit}\n      >\n        <TextField\n          value={text}\n          autoFocus={false}\n          onChange={(e) => {\n            handleTyping(e.target.value);\n          }}\n          onKeyPress={(e) => {\n            if (e.key === 'Enter') {\n              handleSubmit(e);\n            }\n          }}\n          inputProps={{ maxLength: 2000 }}\n          focused\n          size={setTextFieldSize()}\n          variant=\"outlined\"\n          multiline\n          rows={1}\n          color=\"primary\"\n          autoComplete=\"off\"\n          id={`chat-message-input-${props.channelThreadId}`}\n          label={<TypingIndicator />}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  type=\"submit\"\n                  color=\"secondary\"\n                  aria-label=\"submit message\"\n                >\n                  <SendIcon />\n                </IconButton>\n              </InputAdornment>\n            ),\n            classes: {\n              input: classes.messageInput,\n            },\n          }}\n          InputLabelProps={{\n            className: classes.messageInput,\n          }}\n        />\n      </form>\n    </Box>\n  );\n};\n\nexport default ThreadMessageInput;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Box, List } from '@material-ui/core';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Alert } from '@material-ui/lab';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useRecoilState } from 'recoil';\nimport { currentChannelState } from '../../../atom';\nimport {\n  useWatchChannelThreadMessagesSubscription,\n  useGetChannelThreadQuery,\n} from '../../../api/generated/graphql';\nimport ThreadMessageList from './ThreadMessageList';\nimport Loader from '../../shared/Loader';\nimport { ThreadMessage } from '../../../interfaces/message.interface';\nimport { ThreadParams } from '../../../interfaces/param.interface';\nimport MenuBar from '../../shared/MenuBar';\nimport ThreadMessageInput from './ThreadMessageInput';\nimport { Channel } from '../../../interfaces/channel.interface';\nimport { ChannelThread } from '../../../interfaces/thread.interface';\nimport { logToConsole } from '../../../helpers/helpers';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(0),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(0),\n  },\n  messageInput: {\n    position: 'fixed',\n    bottom: 0,\n    padding: theme.spacing(2),\n    background: theme.palette.background.default,\n    zIndex: 1000,\n    [theme.breakpoints.up('lg')]: {\n      width: '75vw',\n    },\n    [theme.breakpoints.down('lg')]: {\n      width: '75vw',\n    },\n    [theme.breakpoints.down('md')]: {\n      width: '75vw',\n    },\n    [theme.breakpoints.down('sm')]: {\n      width: '100vw',\n    },\n  },\n}));\n\nconst Thread: React.FC = () => {\n  const classes = useStyles();\n  const [limit, setLimit] = useState(20);\n  const { user } = useAuth0();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const [currentChannel] = useRecoilState<Channel>(currentChannelState);\n  let history = useHistory();\n  const { messageId, channel } = useParams<ThreadParams>();\n\n  const { data, loading, error } = useWatchChannelThreadMessagesSubscription({\n    variables: {\n      limit,\n      message_id: parseInt(messageId),\n    },\n    fetchPolicy: 'network-only',\n  });\n\n  const {\n    data: getChannelThreadData,\n    loading: getChannelThreadLoading,\n    error: getChannelThreadError,\n  } = useGetChannelThreadQuery({\n    variables: {\n      message_id: parseInt(messageId),\n    },\n  });\n\n  const handleIncreaseLimit = () => {\n    setLimit(limit + 20);\n  };\n\n  const scrollToBottom = () => {\n    if (typeof messagesEndRef === 'object') {\n      messagesEndRef?.current?.scrollIntoView();\n    }\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      if (data && data?.channel_thread_message?.length > 3) {\n        scrollToBottom();\n      }\n    }, 200);\n    if (currentChannel?.id === undefined) history.push(`/channel/${channel}`);\n  }, [data, channel, currentChannel, history]);\n\n  if (loading || getChannelThreadLoading) return <Loader />;\n\n  if (error || getChannelThreadError) {\n    logToConsole('Thread Error', error, getChannelThreadError);\n    return <Alert severity=\"error\">Thread Error</Alert>;\n  }\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\">\n      <Box className={classes.root}>\n        <List id=\"message-list\" component=\"div\">\n          <ThreadMessageList\n            messages={data?.channel_thread_message as ThreadMessage[]}\n            user={user}\n            channelThread={\n              getChannelThreadData?.channel_thread[0] as ChannelThread\n            }\n            currentChannel={currentChannel}\n            handleIncreaseLimit={handleIncreaseLimit}\n            limit={limit}\n            showThreadInfo={false}\n          />\n        </List>\n        <div ref={messagesEndRef} />\n      </Box>\n      <Box className={classes.messageInput}>\n        <MenuBar>\n          <ThreadMessageInput\n            channelId={currentChannel?.id}\n            channelThreadId={getChannelThreadData?.channel_thread[0]?.id}\n          />\n        </MenuBar>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Thread;\n","import React, { useState } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport {\n  Button,\n  Box,\n  Grid,\n  InputAdornment,\n  IconButton,\n  TextField,\n} from '@material-ui/core';\nimport { theme } from '../../../theme/theme';\nimport SendIcon from '@material-ui/icons/Send';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport {\n  useInsertChannelThreadMessageMutation,\n  useSendTypingEventMutation,\n} from '../../../api/generated/graphql';\nimport { useRecoilState } from 'recoil';\nimport { giphyState, deletedMessageState } from '../../../atom';\nimport { IGif } from '@giphy/js-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GiphyCarousel from '../../shared/GiphyCarousel';\nimport AddGif from '@material-ui/icons/Gif';\n\nconst useStyles = makeStyles((theme) => ({\n  giphyVisible: {\n    marginTop: theme.spacing(2),\n  },\n  giphyHidden: {\n    display: 'none',\n    marginTop: theme.spacing(2),\n  },\n  giphyImage: {\n    marginTop: theme.spacing(2),\n  },\n  form: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n  },\n  messageInput: {\n    [theme.breakpoints.down('md')]: {\n      fontSize: '1rem',\n    },\n    '&.MuiFormLabel-root.Mui-focused': {\n      color: theme.palette.secondary.main,\n    },\n  },\n  image: {\n    maxHeight: 55,\n    paddingRight: theme.spacing(1),\n  },\n  giphyButton: {\n    marginRight: theme.spacing(1),\n    [theme.breakpoints.up('md')]: {\n      height: 56,\n    },\n    [theme.breakpoints.down('md')]: {\n      height: 40,\n    },\n  },\n}));\n\ninterface ThreadListInputContainerProps {\n  channelId: number;\n  channelThreadId: number | undefined;\n}\n\nconst ThreadListInputContainer: React.FC<ThreadListInputContainerProps> = (\n  props,\n) => {\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.down('md'));\n  const [openGiphy, setOpenGiphy] = React.useState<boolean>(false);\n\n  const setTextFieldSize = () => {\n    switch (matches) {\n      case false:\n        return 'medium';\n      case true:\n        return 'small';\n\n      default:\n        return 'small';\n    }\n  };\n\n  const { user } = useAuth0();\n  const [text, setText] = useState('');\n  const [gif, setGif] = useRecoilState<IGif | null>(giphyState);\n  const [, setdeletedMessage] = useRecoilState<boolean>(deletedMessageState);\n  const [showGiphyCarousel, setShowGiphyCarousel] = React.useState(false);\n  const channelId = props.channelId;\n\n  const [sendTypingEventMutation] = useSendTypingEventMutation({\n    variables: {\n      user_id: user.sub,\n      channel_id: channelId,\n    },\n  });\n\n  const handleTyping = (text: string) => {\n    const textLength = text.length;\n    if ((textLength !== 0 && textLength % 5 === 0) || textLength === 1) {\n      sendTypingEventMutation();\n    }\n    setText(text);\n  };\n\n  const [sendMessage] = useInsertChannelThreadMessageMutation();\n\n  const handleSubmit = async (\n    e: React.SyntheticEvent | React.KeyboardEvent<HTMLDivElement>,\n  ) => {\n    e.preventDefault();\n\n    if (text === '' && gif === null) {\n      return;\n    }\n\n    if (text.length > 2000) {\n      alert('Your text limit has reached the limit of 2000 characters');\n      return;\n    }\n\n    if (props.channelThreadId === undefined) {\n      return;\n    }\n\n    await sendMessage({\n      variables: {\n        channel_thread_id: props.channelThreadId,\n        message: text,\n        image: gif?.images?.fixed_width?.url,\n        user_id: user.sub,\n      },\n    });\n\n    setText('');\n    setGif(null);\n    setdeletedMessage(false);\n  };\n\n  const handleGiphyClick = () => {\n    setShowGiphyCarousel(!showGiphyCarousel);\n    setOpenGiphy(!openGiphy);\n  };\n\n  const hideGiphyCarousel = () => {\n    setShowGiphyCarousel(false);\n    setOpenGiphy(!openGiphy);\n  };\n\n  return (\n    <>\n      <Grid item xs={12} className={gif ? classes.giphyImage : ''}>\n        {gif && (\n          <img\n            className={classes.image}\n            alt={gif?.bitly_url}\n            src={gif?.images?.fixed_width?.url}\n            onClick={() => setGif(null)}\n          />\n        )}\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        className={\n          showGiphyCarousel ? classes.giphyVisible : classes.giphyHidden\n        }\n      >\n        <GiphyCarousel hideGiphyCarousel={() => hideGiphyCarousel()} />\n      </Grid>\n      <Box display=\"flex\" justifyContent=\"flex-end\" alignItems=\"flex-end\">\n        <Box>\n          <Button\n            variant=\"outlined\"\n            color={openGiphy === false ? 'primary' : 'secondary'}\n            onClick={handleGiphyClick}\n            className={classes.giphyButton}\n            aria-label=\"add giphy\"\n          >\n            <AddGif />\n          </Button>\n        </Box>\n        <Box flex={16} justifyContent=\"flex-end\">\n          <form\n            noValidate\n            autoComplete=\"off\"\n            className={classes.form}\n            onSubmit={handleSubmit}\n          >\n            <TextField\n              value={text}\n              autoFocus={false}\n              onChange={(e) => {\n                handleTyping(e.target.value);\n              }}\n              onKeyPress={(e) => {\n                if (e.key === 'Enter') {\n                  handleSubmit(e);\n                }\n              }}\n              size={setTextFieldSize()}\n              variant=\"outlined\"\n              color=\"secondary\"\n              autoComplete=\"off\"\n              id={`chat-message-input-${props.channelThreadId}`}\n              label={'Crackle your message here ...'}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      type=\"submit\"\n                      color=\"secondary\"\n                      aria-label=\"send message\"\n                    >\n                      <SendIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n                classes: {\n                  input: classes.messageInput,\n                },\n              }}\n              InputLabelProps={{\n                className: classes.messageInput,\n              }}\n            />\n          </form>\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport default ThreadListInputContainer;\n","import React, { useState } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useWatchChannelThreadMessagesSubscription } from '../../../api/generated/graphql';\nimport { ThreadMessage } from '../../../interfaces/message.interface';\nimport { Alert } from '@material-ui/lab';\nimport { List } from '@material-ui/core';\nimport ThreadListInputContainer from './ThreadListInputContainer';\nimport ThreadMessageList from './ThreadMessageList';\nimport { ChannelThreadList } from '../../../interfaces/thread.interface';\nimport { logToConsole } from '../../../helpers/helpers';\n\ninterface ThreadListProps {\n  channelThread: ChannelThreadList;\n}\n\nconst ThreadList: React.FC<ThreadListProps> = ({ channelThread }) => {\n  const [limit, setLimit] = useState(20);\n  const { user, error: auth0Error } = useAuth0();\n\n  const { data, error } = useWatchChannelThreadMessagesSubscription({\n    variables: {\n      limit,\n      message_id: channelThread.message_id,\n    },\n  });\n\n  const handleIncreaseLimit = () => {\n    setLimit(limit + 20);\n  };\n\n  if (error || auth0Error) {\n    logToConsole('Thread Error', error, auth0Error);\n    return <Alert severity=\"error\">Thread Error</Alert>;\n  }\n\n  return (\n    <>\n      <List component=\"div\">\n        <ThreadMessageList\n          messages={data?.channel_thread_message as ThreadMessage[]}\n          user={user}\n          channelThread={channelThread}\n          currentChannel={channelThread?.message?.channel}\n          handleIncreaseLimit={handleIncreaseLimit}\n          limit={limit}\n          showThreadInfo={true}\n        />\n        <ThreadListInputContainer\n          channelId={channelThread.message?.id}\n          channelThreadId={channelThread.id}\n        />\n      </List>\n    </>\n  );\n};\n\nexport default ThreadList;\n","import React from 'react';\nimport { useWatchThreadsSubscription } from '../../../api/generated/graphql';\nimport { ChannelThreadList } from '../../../interfaces/thread.interface';\nimport ThreadList from './ThreadList';\nimport { Alert } from '@material-ui/lab';\nimport { Box, Grid, makeStyles, Typography } from '@material-ui/core';\nimport Loader from '../../shared/Loader';\nimport { logToConsole } from '../../../helpers/helpers';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n    marginTop: theme.spacing(0),\n    paddingTop: theme.spacing(0),\n    paddingBottom: theme.spacing(0),\n  },\n  messageContainer: {\n    [theme.breakpoints.up('lg')]: {\n      padding: theme.spacing(10),\n      paddingBottom: theme.spacing(8),\n    },\n    [theme.breakpoints.down('md')]: {\n      padding: theme.spacing(2),\n      paddingBottom: theme.spacing(8),\n    },\n    [theme.breakpoints.down('sm')]: {\n      padding: theme.spacing(2),\n      paddingBottom: theme.spacing(4),\n    },\n    paddingTop: theme.spacing(4),\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nconst ThreadListContainer: React.FC = () => {\n  const classes = useStyles();\n  const { data, error, loading } = useWatchThreadsSubscription();\n\n  if (error) {\n    logToConsole('Thread Error', error);\n    return <Alert severity=\"error\">Thread Error</Alert>;\n  }\n\n  if (loading) {\n    return (\n      <>\n        <Box\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          style={{ height: '100vh' }}\n        >\n          <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            flexDirection=\"column\"\n          >\n            <Loader />\n            <Typography variant=\"caption\" color=\"secondary\">\n              Loading threads\n            </Typography>\n          </Box>\n        </Box>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <div className={classes.root}>\n        <Grid container>\n          {data?.channel_thread?.map((channelThread, index) => {\n            if (channelThread && channelThread.channel_thread_messages.length)\n              return (\n                <>\n                  <Grid\n                    key={index}\n                    item\n                    xs={12}\n                    className={classes.messageContainer}\n                  >\n                    <ThreadList\n                      channelThread={channelThread as ChannelThreadList}\n                    />\n                  </Grid>\n                </>\n              );\n          })}\n        </Grid>\n      </div>\n    </>\n  );\n};\n\nexport default ThreadListContainer;\n","import React from 'react';\nimport { Box, Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useParams } from 'react-router';\nimport { ThreadParams } from '../../../interfaces/param.interface';\nimport MobileHeaderMenu from '../MobileHeaderMenu';\nimport Thread from './Thread';\nimport ThreadListContainer from './ThreadListContainer';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexBasis: '100%',\n    flex: '1',\n    overflowY: 'scroll',\n    maxHeight: '90vh',\n    height: '90vh',\n  },\n}));\n\nconst ThreadContainer: React.FC = () => {\n  const classes = useStyles();\n  const { channel } = useParams<ThreadParams>();\n\n  return (\n    <Grid item xs={12} md={9}>\n      <Box className={classes.root} component=\"article\">\n        {channel ? (\n          <>\n            <MobileHeaderMenu\n              channelName={`Thread - ${channel}`}\n              channel={channel}\n            />\n            <Thread />\n          </>\n        ) : (\n          <>\n            <MobileHeaderMenu channelName={'Threadlist'} isThreadList={true} />\n            <ThreadListContainer />\n          </>\n        )}\n      </Box>\n    </Grid>\n  );\n};\n\nexport default ThreadContainer;\n","import React, { useEffect } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useSetUserOnlineMutation } from '../../api/generated/graphql';\nimport ThreadContainer from '../chat/threads/ThreadContainer';\n\nconst ChatBoard: React.FC = () => {\n  const { user } = useAuth0();\n\n  const [sendUserIsOnline] = useSetUserOnlineMutation({\n    variables: { user_id: user?.sub },\n  });\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (user?.sub !== undefined) {\n        sendUserIsOnline();\n      }\n    }, 7000);\n    return function cleanup() {\n      clearInterval(interval);\n    };\n  }, [sendUserIsOnline, user]);\n\n  return <ThreadContainer />;\n};\n\nexport default ChatBoard;\n","import React from 'react';\nimport { useHistory } from 'react-router';\nimport {\n  useInsertChannelThreadMutation,\n  useWatchChannelThreadSubscription,\n} from '../../../api/generated/graphql';\nimport { IconButton } from '@material-ui/core';\nimport { Message } from '../../../interfaces/message.interface';\nimport ReplyIcon from '@material-ui/icons/Reply';\nimport { logToConsole } from '../../../helpers/helpers';\n\ninterface ThreadReplyProps {\n  channelName: string;\n  message: Message;\n}\n\nconst ThreadReply: React.FC<ThreadReplyProps> = (props) => {\n  const history = useHistory();\n\n  const {\n    data: channelThreadData,\n    loading: channelThreadLoading,\n    error: channelThreadError,\n  } = useWatchChannelThreadSubscription({\n    variables: {\n      message_id: props.message?.id,\n    },\n  });\n\n  const [\n    insertChannelThreadMutation,\n    { error },\n  ] = useInsertChannelThreadMutation({\n    variables: {\n      message_id: props.message?.id,\n    },\n  });\n\n  const navigateToThreadChannel = (e: React.SyntheticEvent) => {\n    e.stopPropagation();\n    history.push(`/channel/${props.channelName}/thread/${props.message?.id}`);\n  };\n\n  const handleClick = async (e: React.SyntheticEvent) => {\n    e.stopPropagation();\n    await insertChannelThreadMutation();\n    navigateToThreadChannel(e);\n  };\n\n  if (error || channelThreadError) {\n    logToConsole('Error in Thread Reply', error, channelThreadError);\n  }\n\n  if (channelThreadLoading)\n    return (\n      <>\n        <IconButton aria-label=\"reply to message\">\n          <ReplyIcon\n            color=\"primary\"\n            fontSize=\"small\"\n            style={{ transform: 'scaleX(-1)' }}\n            aria-label=\"reply to message\"\n          />\n        </IconButton>\n      </>\n    );\n\n  if (channelThreadData?.channel_thread?.length) {\n    return (\n      <>\n        <IconButton\n          onClick={(e) => navigateToThreadChannel(e)}\n          aria-label=\"reply to message\"\n        >\n          <ReplyIcon\n            color=\"primary\"\n            fontSize=\"small\"\n            style={{ transform: 'scaleX(-1)' }}\n            aria-label=\"reply to message\"\n          />\n        </IconButton>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <IconButton onClick={handleClick} aria-label=\"reply to message\">\n        <ReplyIcon\n          color=\"primary\"\n          fontSize=\"small\"\n          style={{ transform: 'scaleX(-1)' }}\n          aria-label=\"reply to message\"\n        />\n      </IconButton>\n    </>\n  );\n};\n\nexport default ThreadReply;\n","import React from 'react';\nimport { Typography, makeStyles } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport { Message } from '../../../interfaces/message.interface';\nimport { useWatchChannelThreadSubscription } from '../../../api/generated/graphql';\nimport { logToConsole } from '../../../helpers/helpers';\n\nconst useStyles = makeStyles((theme) => ({\n  messageText: {\n    paddingBottom: '1rem',\n    '&:hover': {\n      textDecoration: 'underline',\n    },\n  },\n  [theme.breakpoints.up('md')]: {\n    messageText: {\n      fontSize: 12,\n    },\n  },\n  [theme.breakpoints.down('md')]: {\n    messageText: {\n      fontSize: 11,\n    },\n  },\n  [theme.breakpoints.down('sm')]: {\n    messageText: {\n      paddingBottom: '.8rem',\n    },\n  },\n  lastReply: {\n    color: theme.palette.primary.main,\n    fontStyle: 'italic',\n    paddingLeft: theme.spacing(1),\n  },\n}));\n\ninterface ThreadReplyInProps {\n  channelName: string;\n  message: Message;\n}\n\nconst ThreadReplyIn: React.FC<ThreadReplyInProps> = ({\n  channelName,\n  message,\n}) => {\n  const classes = useStyles();\n\n  const { data: channelThreadData, error } = useWatchChannelThreadSubscription({\n    variables: {\n      message_id: message?.id,\n    },\n  });\n\n  if (error) {\n    logToConsole('Error in ThreadReplyIn', error);\n  }\n\n  return (\n    <>\n      {channelThreadData?.channel_thread[0]?.channel_thread_messages?.length ? (\n        <>\n          <Typography\n            variant=\"caption\"\n            color=\"textPrimary\"\n            component={Link}\n            className={classes.messageText}\n            to={{\n              pathname: `/channel/${channelName}/thread/${message?.id}`,\n            }}\n            aria-label={`reply to message in channel thread ${channelName}`}\n          >\n            {`${\n              channelThreadData?.channel_thread[0]?.channel_thread_messages\n                ?.length\n            } ${\n              channelThreadData?.channel_thread[0]?.channel_thread_messages\n                ?.length === 1\n                ? 'reply'\n                : 'replies'\n            }`}\n          </Typography>\n          <Typography\n            variant=\"caption\"\n            color=\"textSecondary\"\n            className={classes.lastReply}\n          >\n            {`Last reply ${moment(\n              channelThreadData?.channel_thread[0]?.channel_thread_messages[0]\n                ?.timestamp,\n            ).fromNow()}`}\n          </Typography>\n        </>\n      ) : (\n        ''\n      )}\n    </>\n  );\n};\n\nexport default ThreadReplyIn;\n","import React from 'react';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport { IconButton } from '@material-ui/core';\nimport { useDeleteMessageMutation } from '../../api/generated/graphql';\nimport { deletedMessageState } from '../../atom';\nimport { useSetRecoilState } from 'recoil';\nimport { logToConsole } from '../../helpers/helpers';\n\ninterface DeleteMessageProps {\n  messageId: number;\n}\n\nconst DeleteMessage: React.FC<DeleteMessageProps> = ({ messageId }) => {\n  const setdeletedMessage = useSetRecoilState<boolean>(deletedMessageState);\n  const [deleteMessageMutation, { data, error }] = useDeleteMessageMutation();\n\n  const handleDelete = async (e: React.SyntheticEvent, messageId: number) => {\n    e.stopPropagation();\n    setdeletedMessage(true);\n    await deleteMessageMutation({\n      variables: {\n        message_id: messageId,\n      },\n    });\n  };\n\n  if (\n    error ||\n    (data?.delete_message?.affected_rows !== undefined &&\n      data?.delete_message?.affected_rows === 0)\n  ) {\n    logToConsole('Message could not get deleted...', error);\n  }\n\n  return (\n    <IconButton\n      onClick={(e) => handleDelete(e, messageId)}\n      aria-label={`Delete message id ${messageId}`}\n    >\n      <HighlightOffIcon color=\"primary\" fontSize=\"small\" />\n    </IconButton>\n  );\n};\n\nexport default DeleteMessage;\n","import React from 'react';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport { IconButton } from '@material-ui/core';\nimport { useUpdateMessageMutation } from '../../api/generated/graphql';\nimport { logToConsole } from '../../helpers/helpers';\n\ninterface ReplaceMessageProps {\n  messageId: number;\n}\n\nconst ReplaceMessage: React.FC<ReplaceMessageProps> = ({ messageId }) => {\n  const [updateMessageMutation, { data, error }] = useUpdateMessageMutation();\n\n  const handleReplace = async (e: React.SyntheticEvent) => {\n    e.stopPropagation();\n\n    await updateMessageMutation({\n      variables: {\n        _eq: messageId,\n        text: '...this message was deleted.',\n        deleted: true,\n      },\n    });\n  };\n\n  if (\n    error ||\n    (data?.update_message?.affected_rows !== undefined &&\n      data?.update_message?.affected_rows === 0)\n  ) {\n    logToConsole('Message could not get updated...', error);\n  }\n\n  return (\n    <IconButton onClick={handleReplace} aria-label=\"Replace message\">\n      <HighlightOffIcon color=\"primary\" fontSize=\"small\" />\n    </IconButton>\n  );\n};\n\nexport default ReplaceMessage;\n","import React from 'react';\nimport { useWatchChannelThreadSubscription } from '../../api/generated/graphql';\nimport { Alert } from '@material-ui/lab';\nimport DeleteMessage from './DeleteMessage';\nimport ReplaceMessage from './ReplaceMessage';\n\ninterface DeleteMessageWrapperProps {\n  messageId: number;\n}\n\nconst DeleteMessageWrapper: React.FC<DeleteMessageWrapperProps> = ({\n  messageId,\n}) => {\n  const {\n    data: channelThreadData,\n    loading: channelThreadLoading,\n    error: channelThreadError,\n  } = useWatchChannelThreadSubscription({\n    variables: {\n      message_id: messageId,\n    },\n  });\n\n  if (channelThreadLoading) return <React.Fragment></React.Fragment>;\n\n  if (channelThreadError) {\n    return (\n      <Alert severity=\"error\">useWatchChannelThreadSubscription Error...</Alert>\n    );\n  }\n\n  if (channelThreadData?.channel_thread?.length)\n    return <ReplaceMessage messageId={messageId} />;\n\n  return <DeleteMessage messageId={messageId} />;\n};\n\nexport default DeleteMessageWrapper;\n","import React, { useState, useEffect } from 'react';\nimport { TextField, InputAdornment, IconButton } from '@material-ui/core';\nimport { Message } from '../../interfaces/message.interface';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useUpdateMessageMutation } from '../../api/generated/graphql';\nimport SendIcon from '@material-ui/icons/Send';\nimport Loader from '../shared/Loader';\nimport { logToConsole } from '../../helpers/helpers';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  form: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n  },\n  messageInput: {\n    [theme.breakpoints.down('md')]: {\n      fontSize: '1rem',\n    },\n    '&.MuiFormLabel-root.Mui-focused': {\n      color: theme.palette.secondary.main,\n    },\n  },\n}));\n\ninterface UpdateMessageProps {\n  message: Message;\n}\n\nconst UpdateMessage: React.FC<UpdateMessageProps> = ({ message }) => {\n  const classes = useStyles();\n  const [text, setText] = useState<string>('');\n\n  useEffect(() => {\n    setText(message.text);\n  }, [message]);\n\n  const [\n    updateMessageMutation,\n    { data, loading, error },\n  ] = useUpdateMessageMutation();\n\n  const handleUpdate = async (e: React.SyntheticEvent) => {\n    e.preventDefault();\n    if (text === '') return;\n    await updateMessageMutation({\n      variables: {\n        _eq: message.id,\n        text,\n      },\n    });\n  };\n\n  const handleTyping = (text: string) => {\n    setText(text);\n  };\n\n  if (loading) {\n    return (\n      <>\n        <Loader />\n      </>\n    );\n  }\n\n  if (\n    error ||\n    (data?.update_message?.affected_rows !== undefined &&\n      data?.update_message?.affected_rows === 0)\n  ) {\n    logToConsole('Message could not get deleted...', error);\n  }\n\n  return (\n    <div className={classes.root}>\n      <form noValidate autoComplete=\"off\" className={classes.form}>\n        <TextField\n          value={text}\n          autoFocus={true}\n          onChange={(e) => {\n            handleTyping(e.target.value);\n          }}\n          onKeyPress={(e) => {\n            if (e.key === 'Enter') {\n              handleUpdate(e);\n            }\n          }}\n          variant=\"outlined\"\n          color=\"secondary\"\n          autoComplete=\"off\"\n          multiline\n          rowsMax={4}\n          id=\"update-chat-message-input\"\n          label={'Update message...'}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  id=\"message_submit\"\n                  onClick={(e) => handleUpdate(e)}\n                  color=\"secondary\"\n                  aria-label=\"Send message\"\n                >\n                  <SendIcon />\n                </IconButton>\n              </InputAdornment>\n            ),\n            classes: {\n              input: classes.messageInput,\n            },\n          }}\n          InputLabelProps={{\n            className: classes.messageInput,\n          }}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default UpdateMessage;\n","import React, { useState, useRef, useEffect } from 'react';\nimport moment from 'moment';\nimport { Message } from '../../interfaces/message.interface';\nimport ThreadReply from './threads/ThreadReply';\nimport ThreadReplyIn from './threads/ThreadReplyIn';\nimport DeleteMessageWrapper from './DeleteMessageWrapper';\nimport UpdateMessage from './UpdateMessage';\nimport {\n  Avatar,\n  Badge,\n  Box,\n  Button,\n  Divider,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemIcon,\n  Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useRecoilValue } from 'recoil';\nimport { deletedMessageState } from '../../atom';\nimport { useParams } from 'react-router';\nimport { ChatParams } from '../../interfaces/param.interface';\nimport { Auth0User } from '../../interfaces/user.interface';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginBottom: '90px',\n    overflowY: 'scroll',\n  },\n  listItem: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    padding: theme.spacing(2),\n    overflowWrap: 'break-word',\n    hyphens: 'auto',\n    textOverflow: 'ellipsis',\n\n    [theme.breakpoints.down('md')]: {\n      paddingTop: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      paddingLeft: theme.spacing(2),\n      paddingBottom: theme.spacing(0),\n    },\n  },\n  [theme.breakpoints.up('md')]: {\n    messageText: {\n      padding: '1rem',\n      paddingLeft: '0rem',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n  },\n  [theme.breakpoints.down('md')]: {\n    messageText: {\n      padding: '1rem',\n      paddingLeft: '0rem',\n      paddingBottom: '.3rem',\n    },\n  },\n  vspace: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(1),\n\n    [theme.breakpoints.down('sm')]: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(0),\n    },\n  },\n  image: {\n    paddingBottom: '0.5rem',\n  },\n  giphy: {\n    [theme.breakpoints.down('sm')]: {\n      width: '100%',\n    },\n    [theme.breakpoints.up('md')]: {\n      width: '25%',\n    },\n  },\n  avatar: {\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    backgroundColor: '#000000',\n    color: '#ffffff',\n    fontSize: 11,\n    fontWeight: 'bold',\n    border: '2px solid #f57c00',\n  },\n  avatarDeleted: {\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    backgroundColor: '#000000',\n    color: '#ffffff',\n    fontSize: 11,\n    fontWeight: 'bold',\n    border: '2px solid #f57c00',\n  },\n  loadMoreButton: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: theme.spacing(2),\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n  },\n  divider: {\n    flex: 1,\n  },\n}));\n\ninterface MessageProps {\n  messages: Message[];\n  lastMessage: Message | null;\n  preLastMessageId: number | null;\n  user: Auth0User;\n  handleIncreaseLimit: () => void;\n  limit: number;\n  setRef: React.Dispatch<\n    React.SetStateAction<React.RefObject<HTMLDivElement> | null>\n  >;\n}\n\nconst MessageList: React.FC<MessageProps> = ({\n  messages,\n  lastMessage,\n  preLastMessageId,\n  user,\n  handleIncreaseLimit,\n  limit,\n  setRef,\n}) => {\n  const classes = useStyles();\n  const [showUpdate, setShowUpdate] = useState<boolean>(false);\n  const [showUpdateMessageId, setShowUpdateMessageId] = useState<number | null>(\n    null,\n  );\n  const { channel: channelName } = useParams<ChatParams>();\n  const deletedMessage = useRecoilValue<boolean>(deletedMessageState);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const handleShowUpdate = (message: Message) => {\n    if (message?.user?.auth0_user_id !== user.sub) return;\n    setShowUpdateMessageId(message.id);\n    setShowUpdate(!showUpdate);\n  };\n\n  useEffect(() => {\n    setRef(messagesEndRef);\n  }, [setRef]);\n\n  const renderMessage = (message: Message) => {\n    return (\n      <ListItem key={message.id} component=\"div\" className={classes.listItem}>\n        <ListItemAvatar>\n          <ListItemIcon\n            aria-label={message?.user?.username.substring(0, 2).toUpperCase()}\n          >\n            <Badge variant=\"dot\">\n              {!message.deleted ? (\n                <Avatar className={classes.avatar}>\n                  {message?.user?.username.substring(0, 2).toUpperCase()}\n                </Avatar>\n              ) : (\n                <Avatar\n                  className={classes.avatarDeleted}\n                  alt=\"Message has been removed\"\n                >\n                  !!!\n                </Avatar>\n              )}\n            </Badge>\n          </ListItemIcon>\n        </ListItemAvatar>\n\n        <Box component=\"div\" display=\"flex\" flexDirection=\"column\" flex=\"1\">\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n          >\n            <Box\n              component=\"div\"\n              display=\"flex\"\n              justifyContent=\"space-between\"\n              flexGrow=\"1\"\n              style={{ marginRight: 16 }}\n            >\n              <Typography color=\"secondary\" variant=\"caption\">\n                {!message.deleted ? (\n                  <>\n                    <strong>{message?.user?.username} </strong>\n                  </>\n                ) : (\n                  <strong>Oh sorry it seems...</strong>\n                )}\n              </Typography>\n              <Typography\n                variant=\"caption\"\n                color=\"primary\"\n                style={{ marginLeft: '8px' }}\n              >\n                {moment(message.timestamp).fromNow()}\n              </Typography>\n            </Box>\n            <Box>\n              <Box\n                display=\"flex\"\n                justifyContent=\"flex-start\"\n                alignItems=\"flex-start\"\n              >\n                <ThreadReply message={message} channelName={channelName} />\n\n                {!message.deleted ? (\n                  <React.Fragment>\n                    {user.sub === message?.user?.auth0_user_id && (\n                      <Typography variant=\"caption\">\n                        {!(\n                          showUpdate && showUpdateMessageId === message.id\n                        ) && <DeleteMessageWrapper messageId={message.id} />}\n                      </Typography>\n                    )}\n                  </React.Fragment>\n                ) : (\n                  ''\n                )}\n              </Box>\n            </Box>\n          </Box>\n\n          <Typography\n            component=\"p\"\n            color=\"textSecondary\"\n            className={classes.messageText}\n            onClick={() => handleShowUpdate(message)}\n          >\n            {showUpdate &&\n            showUpdateMessageId === message.id &&\n            user.sub === message?.user?.auth0_user_id &&\n            message.deleted === false ? (\n              <UpdateMessage message={message} />\n            ) : (\n              message.text\n            )}\n          </Typography>\n          {message?.image ? (\n            <Box className={classes.image}>\n              <img\n                alt={message.image}\n                src={message.image}\n                className={classes.giphy}\n              />\n            </Box>\n          ) : (\n            ''\n          )}\n          <Box>\n            <ThreadReplyIn message={message} channelName={channelName} />\n          </Box>\n          <Divider className={classes.vspace} />\n        </Box>\n      </ListItem>\n    );\n  };\n\n  return (\n    <>\n      <List id=\"message-list\" component=\"div\" className={classes.root}>\n        {messages?.length === limit && (\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            className={classes.loadMoreButton}\n            component=\"div\"\n          >\n            <Divider className={classes.divider} />\n            <Button\n              onClick={() => handleIncreaseLimit()}\n              aria-label=\"load more messages\"\n            >\n              load more (+{limit})\n            </Button>\n            <Divider className={classes.divider} />\n          </Box>\n        )}\n\n        {[...messages]?.reverse()?.map((message, i) => renderMessage(message))}\n\n        {!deletedMessage &&\n        lastMessage &&\n        preLastMessageId !== 0 &&\n        preLastMessageId &&\n        preLastMessageId < lastMessage.id\n          ? renderMessage(lastMessage)\n          : ''}\n\n        <div ref={messagesEndRef}></div>\n      </List>\n    </>\n  );\n};\n\nexport default MessageList;\n","import React, { useState, useRef } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { TextField, Box, InputAdornment, IconButton } from '@material-ui/core';\nimport { theme } from '../../theme/theme';\nimport SendIcon from '@material-ui/icons/Send';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport {\n  useInsertMessageMutation,\n  useSendTypingEventMutation,\n} from '../../api/generated/graphql';\nimport TypingIndicator from '../shared/TypingIndicator';\nimport { useRecoilState } from 'recoil';\nimport { giphyState, deletedMessageState } from '../../atom';\nimport { IGif } from '@giphy/js-types';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n  },\n  giphyImage: {\n    marginTop: theme.spacing(0),\n  },\n  form: {\n    display: 'flex',\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    flexDirection: 'column',\n    flexGrow: 1,\n    [theme.breakpoints.down('md')]: {\n      marginTop: theme.spacing(1),\n    },\n    [theme.breakpoints.up('md')]: {\n      marginTop: theme.spacing(0),\n    },\n  },\n  messageInput: {\n    [theme.breakpoints.down('md')]: {\n      fontSize: '1rem',\n    },\n    '&.MuiFormLabel-root.Mui-focused': {\n      color: theme.palette.secondary.main,\n    },\n  },\n\n  image: {\n    border: '2px solid ' + theme.palette.secondary.main,\n    height: 150,\n    marginBottom: theme.spacing(3),\n    [theme.breakpoints.up('md')]: {\n      maxHeight: 250,\n    },\n    [theme.breakpoints.down('lg')]: {\n      border: '2px solid ' + theme.palette.secondary.main,\n      height: 150,\n      maxWidth: '150vw',\n      maxHeight: '70vw',\n    },\n    [theme.breakpoints.down('md')]: {\n      border: '2px solid ' + theme.palette.secondary.main,\n      height: 120,\n      maxWidth: '100vw',\n      maxHeight: '50vw',\n    },\n  },\n}));\n\ninterface MessageInputProps {\n  channelId: number;\n  handleSetLastMessage: Function;\n  preLastMessageId: number;\n  scrollToBottom: () => void;\n}\n\nconst MessageInput: React.FC<MessageInputProps> = (props) => {\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n\n  const setTextFieldSize = () => {\n    switch (matches) {\n      case true:\n        return 'medium';\n\n      case false:\n        return 'small';\n\n      default:\n        return 'small';\n    }\n  };\n\n  const { user } = useAuth0();\n  const [text, setText] = useState<string>('');\n  const [gif, setGif] = useRecoilState<IGif | null>(giphyState);\n\n  const [, setdeletedMessage] = useRecoilState<boolean>(deletedMessageState);\n\n  let textInput = useRef<HTMLDivElement>(null);\n  const channelId = props.channelId;\n\n  const [sendTypingEventMutation] = useSendTypingEventMutation({\n    variables: {\n      user_id: user.sub,\n      channel_id: channelId,\n    },\n  });\n\n  const handleTyping = (text: string) => {\n    const textLength = text.length;\n\n    if ((textLength !== 0 && textLength % 5 === 0) || textLength === 1) {\n      sendTypingEventMutation();\n    }\n    setText(text);\n  };\n\n  const [sendMessage] = useInsertMessageMutation();\n\n  const handleSubmit = async (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    if (!text.trim() && !gif) {\n      return;\n    }\n\n    props.handleSetLastMessage({\n      id: props.preLastMessageId + 1,\n      user: {\n        username: user.nickname,\n      },\n      user_id: user.sub,\n      text: text,\n      image: gif?.images?.fixed_width?.url,\n      channel_id: channelId,\n    });\n\n    props.scrollToBottom();\n\n    const msg = {\n      variables: {\n        message: {\n          user_id: user.sub,\n          text: text,\n          image: gif?.images?.fixed_width?.url,\n          channel_id: channelId,\n        },\n      },\n    };\n\n    setText('');\n    textInput?.current?.focus();\n    setGif(null);\n    setdeletedMessage(false);\n\n    await sendMessage(msg);\n  };\n\n  return (\n    <Box className={classes.root}>\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        className={classes.giphyImage}\n      >\n        {gif && (\n          <img\n            className={classes.image}\n            alt=\"Giphy\"\n            src={gif?.images?.fixed_width?.url}\n            onClick={() => setGif(null)}\n          />\n        )}\n      </Box>\n      <form\n        noValidate\n        autoComplete=\"off\"\n        className={classes.form}\n        onSubmit={handleSubmit}\n      >\n        <TextField\n          value={text}\n          autoFocus={false}\n          onChange={(e) => {\n            handleTyping(e.target.value);\n          }}\n          focused={true}\n          inputRef={textInput}\n          inputProps={{ maxLength: 2000 }}\n          size={setTextFieldSize()}\n          variant=\"outlined\"\n          multiline\n          rows={1}\n          color=\"primary\"\n          autoComplete=\"off\"\n          id=\"chat-message-input\"\n          label={<TypingIndicator />}\n          onKeyPress={(e) => {\n            if (e.key === 'Enter') {\n              handleSubmit(e);\n            }\n          }}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  id=\"message_submit\"\n                  type=\"submit\"\n                  color=\"secondary\"\n                  aria-label=\"Send message\"\n                >\n                  <SendIcon />\n                </IconButton>\n              </InputAdornment>\n            ),\n            classes: {\n              input: classes.messageInput,\n            },\n          }}\n          InputLabelProps={{\n            className: classes.messageInput,\n          }}\n        />\n      </form>\n    </Box>\n  );\n};\n\nexport default MessageInput;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { Box } from '@material-ui/core';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport { Message } from '../../interfaces/message.interface';\nimport {\n  useWatchMessagesSubscription,\n  useUpsertMessageCursorMutation,\n} from '../../api/generated/graphql';\nimport MenuBar from '../shared/MenuBar';\nimport Logo from '../shared/Logo';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { useParams } from 'react-router-dom';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MobileHeaderMenu from './MobileHeaderMenu';\nimport { ChatParams } from '../../interfaces/param.interface';\nimport { logToConsole } from '../../helpers/helpers';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexBasis: '100%',\n    flex: '1',\n    maxHeight: '90vh',\n    height: '90vh',\n  },\n  messageInput: {\n    position: 'fixed',\n    bottom: 0,\n    padding: theme.spacing(2),\n    background: theme.palette.background.default,\n    zIndex: 1000,\n    [theme.breakpoints.up('md')]: {\n      width: '75vw',\n    },\n    [theme.breakpoints.up('lg')]: {\n      width: '75vw',\n    },\n    [theme.breakpoints.down('sm')]: {\n      width: '100vw',\n    },\n  },\n  polling: {\n    position: 'fixed',\n    overflow: 'hidden',\n    flex: 1,\n  },\n}));\n\ninterface ChatProps {\n  channelId: number;\n}\n\nconst Chat: React.FC<ChatProps> = ({ channelId }) => {\n  const classes = useStyles();\n  const [limit, setLimit] = useState<number>(20);\n  const [lastMessage, setLastMessage] = useState<Message | null>(null);\n  const [ref, setRef] = useState<React.RefObject<HTMLDivElement> | null>(null);\n  const [scrollIsInit, setScrollIsInit] = useState<boolean>(true);\n  const { user } = useAuth0();\n\n  let preLastMessageId: number = 0;\n  const { channel: channelName } = useParams<ChatParams>();\n\n  const { data, loading, error } = useWatchMessagesSubscription({\n    variables: {\n      channelId: channelId,\n      limit: limit,\n    },\n    fetchPolicy: 'network-only',\n  });\n\n  const [upsertMessageCursorMutation] = useUpsertMessageCursorMutation();\n\n  const scrollToBottom = useCallback(() => {\n    if (typeof ref === 'object') {\n      setTimeout(() => {\n        ref?.current?.scrollIntoView();\n      }, 200);\n    }\n  }, [ref]);\n\n  useEffect(() => {\n    if (data?.messages[0]?.id)\n      upsertMessageCursorMutation({\n        variables: {\n          channel_id: channelId,\n          message_id: data?.messages[0]?.id,\n          user_id: user.sub,\n        },\n      });\n\n    setTimeout(() => {\n      if (scrollIsInit && data && data?.messages?.length > 5) {\n        scrollToBottom();\n        setScrollIsInit(false);\n      }\n    }, 1000);\n  }, [\n    ref,\n    data,\n    channelId,\n    user.sub,\n    scrollIsInit,\n    scrollToBottom,\n    upsertMessageCursorMutation,\n  ]);\n\n  if (error) {\n    logToConsole('Messages could not be loaded.', error);\n  }\n\n  if (loading) {\n    return (\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        flexDirection=\"column\"\n        style={{ height: '100vh' }}\n      >\n        <Box>\n          <Logo />\n          <LinearProgress color=\"secondary\" style={{ marginTop: '8px' }} />\n        </Box>\n      </Box>\n    );\n  }\n\n  if (data) {\n    preLastMessageId = data?.messages[0]?.id;\n  }\n\n  const handleIncreaseLimit = () => {\n    setLimit(limit + 20);\n  };\n\n  const handleSetLastMessage = (lastMessage: Message) => {\n    setLastMessage(lastMessage);\n  };\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\">\n      <MobileHeaderMenu\n        channelName={channelName}\n        user={user.sub}\n        showAddUserButton={true}\n      />\n      <Box className={classes.root} component=\"article\">\n        <MessageList\n          messages={data?.messages as Message[]}\n          lastMessage={lastMessage}\n          preLastMessageId={preLastMessageId}\n          user={user}\n          handleIncreaseLimit={handleIncreaseLimit}\n          limit={limit}\n          setRef={setRef}\n        />\n      </Box>\n      <Box className={classes.messageInput} component=\"footer\">\n        <MenuBar>\n          <MessageInput\n            channelId={channelId}\n            handleSetLastMessage={handleSetLastMessage}\n            preLastMessageId={preLastMessageId}\n            scrollToBottom={scrollToBottom}\n          />\n        </MenuBar>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Chat;\n","import React from 'react';\nimport { useParams } from 'react-router';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useRecoilState } from 'recoil';\nimport { useGetChannelByNameQuery } from '../../api/generated/graphql';\nimport { currentChannelState } from '../../atom';\nimport Chat from './Chat';\nimport Loader from '../shared/Loader';\nimport { ChatParams } from '../../interfaces/param.interface';\nimport { Channel } from '../../interfaces/channel.interface';\nimport { logToConsole } from '../../helpers/helpers';\nimport { Alert } from '@material-ui/lab';\n\nconst ChatApp: React.FC = () => {\n  const [currentChannel, setCurrentChannel] = useRecoilState<Channel>(\n    currentChannelState,\n  );\n\n  const {\n    isAuthenticated,\n    isLoading: isLoadingAuth0,\n    error: auth0Error,\n  } = useAuth0();\n  const { channel: channelName } = useParams<ChatParams>();\n\n  const {\n    data,\n    loading: channelLoading,\n    error: channelError,\n  } = useGetChannelByNameQuery({\n    variables: {\n      name: channelName,\n    },\n  });\n\n  if (isLoadingAuth0 || channelLoading) {\n    return <Loader />;\n  }\n\n  if (\n    (!currentChannel && data?.channel[0] !== undefined) ||\n    (currentChannel &&\n      currentChannel.name !== channelName &&\n      data?.channel[0] !== undefined)\n  ) {\n    setCurrentChannel(data?.channel[0]);\n  }\n\n  if (auth0Error || channelError) {\n    logToConsole('Error in ChatApp component', auth0Error, channelError);\n    return <Alert severity=\"error\">Error in ChatApp component</Alert>;\n  }\n\n  return (\n    <>\n      {isAuthenticated && currentChannel && (\n        <Chat channelId={currentChannel?.id} />\n      )}\n    </>\n  );\n};\n\nexport default ChatApp;\n","import React from 'react';\nimport { Grid } from '@material-ui/core/';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ChatApp from './ChatApp';\n\nconst useStyles = makeStyles(() => ({\n  chatApp: {\n    height: '100vh',\n    overflowY: 'hidden',\n  },\n}));\n\nconst ChatContainer: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <Grid item xs={12} md={9} className={classes.chatApp} component=\"section\">\n      <ChatApp />\n    </Grid>\n  );\n};\n\nexport default ChatContainer;\n","import React, { useEffect } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport ChatContainer from '../chat/ChatContainer';\nimport { useSetUserOnlineMutation } from '../../api/generated/graphql';\n\nconst ChatBoard: React.FC = () => {\n  const { user } = useAuth0();\n\n  const [sendUserIsOnline] = useSetUserOnlineMutation({\n    variables: { user_id: user?.sub },\n  });\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (user?.sub !== undefined) {\n        sendUserIsOnline();\n      }\n    }, 7000);\n    return function cleanup() {\n      clearInterval(interval);\n    };\n  }, [sendUserIsOnline, user]);\n\n  return <ChatContainer />;\n};\n\nexport default ChatBoard;\n","import React from 'react';\nimport {\n  Avatar,\n  Box,\n  Paper,\n  Table,\n  TableBody,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableCell,\n  Typography,\n  CircularProgress,\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { useGetUserListQuery } from '../../api/generated/graphql';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { logToConsole } from '../../helpers/helpers';\n\nconst useStyles = makeStyles((theme) => ({\n  root: { overflowY: 'scroll', height: '100vh' },\n}));\n\nconst AdminUserList: React.FC = () => {\n  const classes = useStyles();\n  const { data, loading, error } = useGetUserListQuery({\n    variables: {},\n  });\n\n  if (loading) {\n    return <CircularProgress />;\n  }\n\n  if (error) {\n    logToConsole('Users could not be loaded.', error);\n    return <Alert severity=\"error\">Users could not be loaded.</Alert>;\n  }\n\n  return (\n    <Box className={classes.root}>\n      <h2>Userlist</h2>\n      <p>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Tempore, quos\n        sunt magni natus suscipit nesciunt. Nostrum voluptatum suscipit\n        assumenda officia in! Incidunt similique a adipisci facere neque, cum\n        nesciunt reprehenderit.\n      </p>\n      {data && (\n        <TableContainer component={Paper}>\n          <Table aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Avatar</TableCell>\n                <TableCell>Username</TableCell>\n                <TableCell align=\"right\">UserId</TableCell>\n                <TableCell align=\"left\">Auth0</TableCell>\n                <TableCell align=\"left\">Last seen</TableCell>\n              </TableRow>\n            </TableHead>\n            {data.users.map((user) => (\n              <TableBody>\n                <TableRow key={user.id}>\n                  <TableCell>\n                    <Avatar\n                      alt={user.username}\n                      src=\"https://api.adorable.io/avatars/173/abott@adorable.png\"\n                    />\n                  </TableCell>\n                  <TableCell component=\"th\" scope=\"row\">\n                    <Typography variant=\"body2\">{user.username}</Typography>\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    <Typography variant=\"caption\">{user.id}</Typography>\n                  </TableCell>\n                  <TableCell align=\"left\">\n                    <Typography variant=\"body2\">\n                      {user.auth0_user_id}\n                    </Typography>\n                  </TableCell>\n                  <TableCell align=\"left\">\n                    {user.last_seen ? user.last_seen : 'Has not logged in yet.'}\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            ))}\n          </Table>\n        </TableContainer>\n      )}\n    </Box>\n  );\n};\n\nexport default AdminUserList;\n","import React from 'react';\nimport { useDeletePollQuestionMutation } from '../../api/generated/graphql';\nimport { Button } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { logToConsole } from '../../helpers/helpers';\n\ninterface DeleteAnswerProps {\n  questionId: number;\n  setActiveState: boolean;\n}\n\nconst DeleteQuestion: React.FC<DeleteAnswerProps> = ({\n  questionId,\n  setActiveState,\n}) => {\n  const [deleteQuestion, { error }] = useDeletePollQuestionMutation({\n    variables: {\n      pollQuestionId: questionId,\n    },\n  });\n\n  const handleQuestionDelete = async (questionId: number) => {\n    if (!questionId) return;\n\n    await deleteQuestion({\n      variables: {\n        pollQuestionId: questionId,\n      },\n    });\n  };\n\n  if (error) {\n    logToConsole('Error on delete question', error);\n  }\n\n  return (\n    <>\n      {setActiveState === true ? (\n        <Button\n          size=\"small\"\n          color=\"secondary\"\n          disabled\n          startIcon={<DeleteIcon />}\n        >\n          Delete\n        </Button>\n      ) : (\n        <Button\n          size=\"small\"\n          color=\"secondary\"\n          onClick={() => {\n            handleQuestionDelete(questionId);\n          }}\n          aria-label=\"Delete Question\"\n          startIcon={<DeleteIcon />}\n        >\n          Delete\n        </Button>\n      )}\n    </>\n  );\n};\n\nexport default DeleteQuestion;\n","import React, { useState, useEffect } from 'react';\nimport { theme } from '../../theme/theme';\nimport { useRecoilValue } from 'recoil';\nimport { getPollQuestionAnswers } from '../../atom';\nimport {\n  useWatchGetChannelsSubscription,\n  useAddPublishPollQuestionToChannelMutation,\n  useDeletePollQuestionFromChannelMutation,\n} from '../../api/generated/graphql';\nimport { Box, Chip } from '@material-ui/core';\nimport Loader from '../shared/Loader';\nimport { logToConsole } from '../../helpers/helpers';\n\ninterface GetChannelsProps {\n  questionId: number;\n  questionLocked: boolean;\n}\n\nconst GetChannels: React.FC<GetChannelsProps> = ({\n  questionId,\n  questionLocked,\n}) => {\n  const [questionIdState, setQuestionIdState] = React.useState(questionId);\n  const getPollQuestionId = useRecoilValue<number>(getPollQuestionAnswers);\n  const [channelId] = useState<string>('');\n  const { data, loading, error } = useWatchGetChannelsSubscription();\n  const [pollQuestionToChannel] = useAddPublishPollQuestionToChannelMutation();\n\n  const [\n    deletePollQuestionFromChannelMutation,\n    { error: deleteError },\n  ] = useDeletePollQuestionFromChannelMutation({\n    variables: {\n      pollQuestionId: getPollQuestionId,\n      channelId: parseInt(channelId),\n    },\n  });\n\n  useEffect(() => {\n    setQuestionIdState(questionId);\n  }, [questionId, questionIdState]);\n\n  if (loading) {\n    return (\n      <Box\n        width=\"100%\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <Loader />\n      </Box>\n    );\n  }\n\n  if (error || deleteError) {\n    logToConsole('error on delete question from channel', error, deleteError);\n  }\n\n  const handlePublishOnChannel = async (chnId: number) => {\n    await pollQuestionToChannel({\n      variables: {\n        channelID: chnId,\n        pollQuestionID: getPollQuestionId,\n      },\n    });\n  };\n\n  const handleDeleteQuestionFromChannel = async (chnId: number) => {\n    if (chnId === undefined) return;\n\n    await deletePollQuestionFromChannelMutation({\n      variables: {\n        pollQuestionId: getPollQuestionId,\n        channelId: chnId,\n      },\n    });\n  };\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        justifyContent=\"flex-start\"\n        alignItems=\"flex-start\"\n        flexDirection=\"column\"\n        pb={1}\n      >\n        {data?.channel\n          .sort((a, b) => a.id - b.id)\n          .map((chn, index) => (\n            <Box\n              key={index}\n              display=\"flex\"\n              justifyContent=\"space-between\"\n              alignItems=\"center\"\n            >\n              <Box\n                display=\"flex\"\n                justifyContent=\"space-between\"\n                alignItems=\"center\"\n                flexDirection=\"row\"\n                flex={1}\n              >\n                <Chip\n                  disabled={\n                    chn.channel_polls[0]?.poll_question?.id !==\n                      questionIdState &&\n                    chn.channel_polls[0]?.poll_question?.id !== undefined\n                      ? true\n                      : false || !questionLocked\n                  }\n                  onClick={() => handlePublishOnChannel(chn.id)}\n                  onDelete={() => {\n                    handleDeleteQuestionFromChannel(chn.id);\n                  }}\n                  style={{\n                    marginTop: theme.spacing(1),\n                    marginRight: theme.spacing(1),\n                    maxWidth: 150,\n                  }}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  color={\n                    chn.channel_polls[0]?.channel_id === chn.id\n                      ? 'secondary'\n                      : 'primary'\n                  }\n                  label={chn.name}\n                />\n                <Chip\n                  variant={\n                    chn.channel_polls[0]?.poll_question?.text\n                      ? 'default'\n                      : 'outlined'\n                  }\n                  color={\n                    chn.channel_polls[0]?.poll_question?.text\n                      ? 'secondary'\n                      : 'primary'\n                  }\n                  label={\n                    chn.channel_polls[0]?.poll_question?.text\n                      ? chn.channel_polls[0]?.poll_question?.text\n                      : 'No poll set.'\n                  }\n                  size=\"small\"\n                  style={{\n                    marginTop: theme.spacing(1),\n                    width: 150,\n                    minWidth: 100,\n                    maxWidth: 150,\n                  }}\n                />\n              </Box>\n            </Box>\n          ))}\n      </Box>\n    </>\n  );\n};\n\nexport default GetChannels;\n","import React, { useEffect } from 'react';\nimport { Button } from '@material-ui/core';\nimport {\n  useWatchGetPollAnswersSubscription,\n  useSetPublishPollQuestionStateMutation,\n} from '../../api/generated/graphql';\nimport Loader from '../shared/Loader';\nimport LockIcon from '@material-ui/icons/Lock';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  lock: {\n    color: theme.palette.error.main,\n  },\n  unlock: {\n    color: theme.palette.success.main,\n  },\n}));\n\ninterface SetPollQuestionLockStateProps {\n  pollQuestionId: number;\n  setActiveState: boolean;\n}\n\nconst SetPollQuestionLockState: React.FC<SetPollQuestionLockStateProps> = ({\n  pollQuestionId,\n  setActiveState,\n}) => {\n  const classes = useStyles();\n  const [readyToPublish, setReadyToPublish] = React.useState<boolean>(\n    setActiveState,\n  );\n  const [setPollQuestionState] = useSetPublishPollQuestionStateMutation({\n    variables: {\n      pollQuestionId: pollQuestionId,\n      is_active: setActiveState,\n    },\n  });\n  const { data, loading } = useWatchGetPollAnswersSubscription({\n    variables: {\n      pollQuestionId: pollQuestionId,\n    },\n  });\n\n  useEffect(() => {\n    const totalAnswers = data?.poll_answers?.length;\n    if (totalAnswers && totalAnswers > 1) {\n      setReadyToPublish(false);\n    } else {\n      setReadyToPublish(true);\n    }\n  }, [readyToPublish, data]);\n\n  const handleSetPollQuestionPublishState = async () => {\n    await setPollQuestionState({\n      variables: {\n        pollQuestionId: pollQuestionId,\n        is_active: !setActiveState,\n      },\n    });\n  };\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      <Button\n        color=\"secondary\"\n        disabled={readyToPublish}\n        startIcon={\n          setActiveState ? (\n            <LockIcon className={classes.lock} />\n          ) : (\n            <LockOpenIcon className={classes.unlock} />\n          )\n        }\n        onClick={handleSetPollQuestionPublishState}\n      >\n        {setActiveState ? 'locked' : 'unlocked'}\n      </Button>\n    </>\n  );\n};\n\nexport default SetPollQuestionLockState;\n","import React from 'react';\nimport { theme } from '../../theme/theme';\nimport { Link } from 'react-router-dom';\nimport { useRecoilState } from 'recoil';\nimport {\n  Accordion,\n  AccordionActions,\n  AccordionDetails,\n  AccordionSummary,\n  Badge,\n  Box,\n  Button,\n  ButtonGroup,\n  Chip,\n  Typography,\n} from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Edit from '@material-ui/icons/Edit';\nimport {\n  useWatchGetPollQuestionsSubscription,\n  useWatchGetChannelsSubscription,\n} from '../../api/generated/graphql';\nimport { getPollQuestionAnswers } from '../../atom';\nimport DeleteQuestion from './DeleteQuestion';\nimport GetChannels from './GetChannels';\nimport Loader from '../shared/Loader';\nimport SetPollQuestionLockState from './SetPollQuestionLockState';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { logToConsole } from '../../helpers/helpers';\n\nconst useStyles = makeStyles((theme) => ({\n  badge: {\n    backgroundColor: theme.palette.error.light,\n    color: theme.palette.error.light,\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n    '&::after': {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      borderRadius: '50%',\n      animation: '$ripple 1.2s infinite ease-in-out',\n      border: '1px solid currentColor',\n      content: '\"\"',\n    },\n  },\n  '@keyframes ripple': {\n    '0%': {\n      transform: 'scale(.8)',\n      opacity: 1,\n    },\n    '100%': {\n      transform: 'scale(2.4)',\n      opacity: 0,\n    },\n  },\n  text: {\n    marginLeft: theme.spacing(2),\n    [theme.breakpoints.down('sm')]: {\n      fontSize: 14,\n      lineHeight: '15px',\n    },\n  },\n  details: {\n    alignItems: 'flex-start',\n  },\n  voteIcon: {\n    color: 'grey',\n  },\n  voteIconPublished: {\n    color: theme.palette.primary.main,\n  },\n}));\n\nconst GetPollQuestions: React.FC = () => {\n  const classes = useStyles();\n  const { data, loading, error } = useWatchGetPollQuestionsSubscription({\n    variables: {},\n  });\n  const [, setPollQuestion] = useRecoilState<number>(getPollQuestionAnswers);\n\n  const { loading: loadingGetChannel } = useWatchGetChannelsSubscription();\n\n  const handleClick = (questionId: number) => {\n    setPollQuestion(questionId);\n  };\n\n  if (loading || loadingGetChannel) {\n    return <Loader />;\n  }\n\n  if (error) {\n    logToConsole('GetPollQuestions Error', error);\n  }\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        style={{ marginRight: theme.spacing(2) }}\n      >\n        <Typography variant=\"h3\" style={{ padding: theme.spacing(2) }}>\n          Poll list overview:\n        </Typography>\n        <Chip\n          variant=\"outlined\"\n          size=\"small\"\n          color=\"secondary\"\n          label={'Total polls: ' + data?.questions.length}\n        />\n      </Box>\n      {data?.questions.length === 0 ? (\n        <Alert severity=\"info\">Please add a new question.</Alert>\n      ) : (\n        data?.questions\n          .sort((a, b) => b.id - a.id)\n          .map((question, index) => (\n            <Accordion key={index} defaultExpanded={false}>\n              <AccordionSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls={question.text}\n              >\n                {question?.channel_polls.length > 0 ? (\n                  <Badge\n                    variant=\"dot\"\n                    badgeContent={question.id}\n                    classes={{ badge: classes.badge }}\n                  >\n                    <HowToVoteIcon className={classes.voteIconPublished} />\n                  </Badge>\n                ) : (\n                  <HowToVoteIcon className={classes.voteIcon} />\n                )}\n\n                <Typography\n                  color={\n                    question?.channel_polls.length > 0 ? 'secondary' : 'primary'\n                  }\n                  component={Link}\n                  onClick={() => {\n                    handleClick(question.id);\n                  }}\n                  to={{\n                    pathname:\n                      '/dashboard/pollings/edit/question/' + question.id,\n                    state: { fromDashboard: true },\n                  }}\n                  className={classes.text}\n                >\n                  {question.text}\n                </Typography>\n              </AccordionSummary>\n              <AccordionDetails className={classes.details}>\n                <div\n                  onMouseEnter={() => {\n                    handleClick(question.id);\n                  }}\n                >\n                  <>\n                    <Typography variant=\"caption\">\n                      Where you want to publish this poll? Orange colored\n                      channels has an active poll.\n                    </Typography>\n                    <GetChannels\n                      questionId={question.id}\n                      questionLocked={question.is_active}\n                    />\n                  </>\n                </div>\n              </AccordionDetails>\n              <AccordionActions>\n                <ButtonGroup disableElevation variant=\"outlined\">\n                  <Button\n                    color=\"secondary\"\n                    component={Link}\n                    to={`/dashboard/pollings/edit/question/${question.id}`}\n                    aria-label=\"Poll Question\"\n                    size=\"small\"\n                    startIcon={<Edit />}\n                  >\n                    Edit\n                  </Button>\n                  <SetPollQuestionLockState\n                    pollQuestionId={question.id}\n                    setActiveState={question.is_active}\n                  />\n                  <DeleteQuestion\n                    questionId={question.id}\n                    setActiveState={question.is_active}\n                  />\n                </ButtonGroup>\n              </AccordionActions>\n            </Accordion>\n          ))\n      )}\n    </>\n  );\n};\n\nexport default GetPollQuestions;\n","import React, { useState, useEffect } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useAddPollQuestionMutation } from '../../api/generated/graphql';\nimport { theme } from '../../theme/theme';\nimport {\n  Box,\n  FormGroup,\n  IconButton,\n  InputAdornment,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n  form: {},\n  messageInput: {\n    floatingLabelFocusStyle: {\n      color: theme.palette.secondary.dark,\n    },\n  },\n  messageButton: {\n    [theme.breakpoints.down('md')]: {\n      width: '100%',\n      size: 'small',\n    },\n    [theme.breakpoints.up('md')]: {\n      size: 'large',\n      width: '25%',\n    },\n    marginTop: theme.spacing(2),\n    marginLeft: theme.spacing(0),\n    backgroundColor: theme.palette.primary.dark,\n  },\n}));\n\nconst AddPollQuestion: React.FC = () => {\n  const classes = useStyles();\n  const { user: userAuth0 } = useAuth0();\n  const [addPollQuestionMutation] = useAddPollQuestionMutation();\n  const [pollTitle, setPollTitle] = React.useState<{ title: string }>({\n    title: '',\n  });\n  const [fieldError, setFieldError] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (fieldError === true) {\n      setTimeout(() => {\n        pollTitle.title = '';\n        setFieldError(false);\n      }, 1000);\n    }\n  }, [fieldError, pollTitle]);\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    setFieldError(false);\n    setPollTitle({ ...pollTitle, [e.target.id]: e.target.value });\n  };\n\n  const handleAddTitle = async (\n    e: React.FormEvent<HTMLFormElement> | React.KeyboardEvent<HTMLDivElement>,\n  ) => {\n    e.preventDefault();\n\n    if (pollTitle.title === '' || !pollTitle.title.trim()) {\n      setFieldError(true);\n      pollTitle.title = '';\n      return;\n    } else {\n      setFieldError(false);\n    }\n\n    await addPollQuestionMutation({\n      variables: {\n        text: pollTitle.title.trim(),\n        owner_id: userAuth0.sub,\n      },\n    });\n\n    setPollTitle({ title: '' });\n  };\n\n  return (\n    <>\n      <Box className={classes.root}>\n        <Typography variant=\"h2\" style={{ paddingBottom: theme.spacing(2) }}>\n          Add new poll\n        </Typography>\n        <form\n          className={classes.form}\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleAddTitle}\n        >\n          <FormGroup>\n            <TextField\n              error={fieldError}\n              id=\"title\"\n              key={1}\n              required\n              value={pollTitle.title}\n              onChange={(e) => handleChange(e)}\n              size=\"small\"\n              variant=\"outlined\"\n              multiline\n              rows={1}\n              autoComplete=\"off\"\n              placeholder=\"Type your question here ...\"\n              onKeyPress={(e) => {\n                if (e.key === 'Enter') {\n                  handleAddTitle(e);\n                }\n              }}\n              onFocus={() => {\n                setFieldError(false);\n              }}\n              label={\n                fieldError === true\n                  ? 'Error adding question'\n                  : 'Add an meaningfull question'\n              }\n              fullWidth\n              inputProps={{\n                maxLength: 200,\n              }}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      id=\"message_submit\"\n                      type=\"submit\"\n                      color=\"secondary\"\n                      aria-label=\"Send message\"\n                    >\n                      <SendIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n                classes: {\n                  input: classes.messageInput,\n                },\n              }}\n              InputLabelProps={{\n                className: classes.messageInput,\n              }}\n            />\n          </FormGroup>\n        </form>\n      </Box>\n    </>\n  );\n};\n\nexport default AddPollQuestion;\n","import React from 'react';\nimport { Divider } from '@material-ui/core';\nimport GetPollQuestions from './GetPollQuestions';\nimport AddPollQuestion from './AddPollQuestion';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  divider: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst PollingDashBoard: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <AddPollQuestion />\n      <Divider className={classes.divider} />\n      <GetPollQuestions />\n    </>\n  );\n};\n\nexport default PollingDashBoard;\n","import React, { useEffect } from 'react';\nimport { Chip } from '@material-ui/core';\n\ninterface GetPollAnswerIdProps {\n  pollQuestionId: number;\n}\n\nconst GetPollAnswerId: React.FC<GetPollAnswerIdProps> = ({\n  pollQuestionId,\n}) => {\n  useEffect(() => {}, [pollQuestionId]);\n\n  return (\n    <>\n      <Chip\n        color=\"secondary\"\n        size=\"small\"\n        variant=\"outlined\"\n        label={'Poll question id: ' + pollQuestionId}\n      />\n    </>\n  );\n};\n\nexport default GetPollAnswerId;\n","import React, { useEffect } from 'react';\nimport { useDeletePollAnswerIdMutation } from '../../api/generated/graphql';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { IconButton } from '@material-ui/core';\n\ninterface DeleteAnswerProps {\n  answerId: number;\n  setActiveState: boolean;\n}\n\nconst DeleteAnswer: React.FC<DeleteAnswerProps> = ({\n  answerId,\n  setActiveState,\n}) => {\n  const [deletePollAnswerIdMutation] = useDeletePollAnswerIdMutation({\n    variables: {\n      pollAnswerId: answerId,\n    },\n  });\n\n  useEffect(() => {}, [answerId, setActiveState]);\n\n  const handleDeleteAnswer = async (answerId: number) => {\n    await deletePollAnswerIdMutation({\n      variables: {\n        pollAnswerId: answerId,\n      },\n    });\n  };\n\n  return (\n    <>\n      <IconButton\n        id=\"answer_update\"\n        type=\"submit\"\n        color=\"secondary\"\n        aria-label=\"Update answer text\"\n        disabled={setActiveState}\n        onClick={() => {\n          handleDeleteAnswer(answerId);\n        }}\n      >\n        <DeleteIcon />\n      </IconButton>\n    </>\n  );\n};\n\nexport default DeleteAnswer;\n","import React, { useState, useEffect } from 'react';\nimport {\n  useWatchGetPollAnswersSubscription,\n  useUpdatePollAnswerTextMutation,\n  useWatchGetPollQuestionSubscription,\n} from '../../api/generated/graphql';\nimport {\n  Badge,\n  Box,\n  Chip,\n  FormGroup,\n  InputAdornment,\n  IconButton,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\nimport UpdateIcon from '@material-ui/icons/Update';\nimport Alert from '@material-ui/lab/Alert';\nimport DeleteAnswer from './DeleteAnswer';\nimport Loader from '../shared/Loader';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  messageInput: {\n    floatingLabelFocusStyle: {\n      color: theme.palette.secondary.dark,\n    },\n    [theme.breakpoints.down('sm')]: {\n      fontSize: 14,\n    },\n  },\n}));\n\ninterface PollAnswerListProps {\n  pollQuestionId: number;\n}\n\nconst PollAnswerList: React.FC<PollAnswerListProps> = ({ pollQuestionId }) => {\n  const classes = useStyles();\n  const [updateEnabled, setUpdateEnabled] = React.useState(true);\n  const [answerTextUpdateId, setAnswerTextUpdateId] = React.useState<number>(0);\n  const [fieldError, setFieldError] = useState<boolean>(false);\n  const [answerText, setAnswerText] = React.useState({\n    text: '',\n  });\n  const getPollQuestion = useWatchGetPollQuestionSubscription({\n    variables: {\n      pollQuestionId: pollQuestionId,\n    },\n  });\n  const { data, loading } = useWatchGetPollAnswersSubscription({\n    variables: {\n      pollQuestionId: pollQuestionId,\n    },\n  });\n  const [updatePollAnswerTextMutation] = useUpdatePollAnswerTextMutation({\n    variables: {\n      text: answerText.text,\n      pollAnswerId: answerTextUpdateId,\n    },\n  });\n\n  useEffect(() => {\n    if (fieldError === true) {\n      setTimeout(() => {\n        setAnswerText({ text: '' });\n        setFieldError(false);\n      }, 1000);\n    }\n  }, [fieldError, answerText]);\n\n  const handleAnswerChange = (\n    index?: number,\n    e?: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    let text = e?.target.value.trim() || '';\n    setAnswerText({ text: text });\n    setUpdateEnabled(false);\n  };\n\n  const handleUpdateAnswerText = (answerId: number) => {\n    setAnswerTextUpdateId(answerId);\n\n    if (answerText.text === '' || !answerText.text.trim()) {\n      setUpdateEnabled(false);\n      setFieldError(true);\n      answerText.text = '';\n      return;\n    } else {\n      setFieldError(false);\n    }\n\n    updatePollAnswerTextMutation({\n      variables: {\n        text: Object.values(answerText)[0],\n        pollAnswerId: answerId,\n      },\n    });\n    answerText.text = '';\n    setUpdateEnabled(true);\n  };\n\n  if (getPollQuestion.loading || loading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      <Box display=\"flex\" justifyContent=\"flex-start\" alignItems=\"center\">\n        <Typography variant=\"h3\">Answers to these question</Typography>\n        <Chip\n          variant=\"outlined\"\n          size=\"small\"\n          color=\"primary\"\n          label={'Total answers: ' + data?.poll_answers.length}\n          style={{ marginLeft: '16px' }}\n        />\n      </Box>\n      {data?.poll_answers.length === 0 ? (\n        <Alert severity=\"info\">\n          Please add at least two answers to the poll.\n        </Alert>\n      ) : (\n        data?.poll_answers\n          .sort((a, b) => a.id - b.id)\n          .map((answer) => (\n            <FormGroup row key={answer.id}>\n              <TextField\n                error={fieldError}\n                key={answer.id}\n                name={answer.text + answer.id}\n                required\n                disabled={getPollQuestion?.data?.poll_question[0].is_active}\n                onKeyPress={(e) => {\n                  if (e.key === 'Enter') {\n                    handleUpdateAnswerText(answer.id);\n                    answerText.text = '';\n                  }\n                }}\n                onChange={(e) => {\n                  handleAnswerChange(answer?.id, e);\n                  setAnswerTextUpdateId(answer.id);\n                }}\n                onFocus={(e) => {\n                  setFieldError(false);\n                  answerText.text = '';\n                }}\n                onBlur={() => {\n                  setFieldError(false);\n                }}\n                onMouseOut={() => {\n                  setFieldError(false);\n                }}\n                rows={1}\n                size=\"small\"\n                variant=\"outlined\"\n                autoComplete=\"off\"\n                placeholder={answer.text}\n                label={answer.text}\n                fullWidth\n                margin=\"dense\"\n                inputProps={{\n                  maxLength: 250,\n                }}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        key={answer.id}\n                        id=\"answer_update\"\n                        type=\"submit\"\n                        color=\"secondary\"\n                        aria-label=\"update_answer_text\"\n                        onClick={() => {\n                          handleUpdateAnswerText(answer.id);\n                        }}\n                        disabled={\n                          answer.id !== answerTextUpdateId\n                            ? true\n                            : false || updateEnabled === true\n                        }\n                      >\n                        <UpdateIcon />\n                      </IconButton>\n                      <DeleteAnswer\n                        answerId={answer.id}\n                        setActiveState={\n                          getPollQuestion?.data?.poll_question[0].is_active ||\n                          answer.votes !== 0\n                            ? true\n                            : false\n                        }\n                      />\n                      <Badge\n                        badgeContent={answer.votes ? answer.votes : 0}\n                        color=\"secondary\"\n                      >\n                        <HowToVoteIcon color=\"primary\" />\n                      </Badge>\n                    </InputAdornment>\n                  ),\n                  classes: {\n                    input: classes.messageInput,\n                  },\n                }}\n                InputLabelProps={{\n                  shrink: true,\n                  className: classes.messageInput,\n                }}\n              />\n            </FormGroup>\n          ))\n      )}\n    </>\n  );\n};\n\nexport default PollAnswerList;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Divider,\n  FormGroup,\n  IconButton,\n  InputAdornment,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport UpdateIcon from '@material-ui/icons/Update';\nimport { useUpdatePollQuestionMutation } from '../../api/generated/graphql';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Loader from '../shared/Loader';\n\nconst useStyles = makeStyles((theme) => ({\n  divider: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  form: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  messageInput: {\n    floatingLabelFocusStyle: {\n      color: theme.palette.secondary.dark,\n    },\n    [theme.breakpoints.down('sm')]: {\n      fontSize: 14,\n    },\n  },\n}));\n\ninterface UpdatePollQuestionLProps {\n  pollQuestion: string;\n  pollQuestionId: number;\n  pollQuestionDisabled: boolean;\n}\n\nconst UpdatePollQuestion: React.FC<UpdatePollQuestionLProps> = ({\n  pollQuestion,\n  pollQuestionId,\n  pollQuestionDisabled,\n}) => {\n  const classes = useStyles();\n  const [pollQuestionText, setPollQuestionText] = useState(pollQuestion);\n  const [updateDisabled, setUpdateEnabled] = useState<boolean>(true);\n  const [fieldError, setFieldError] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (fieldError === true) {\n      setTimeout(() => {\n        setPollQuestionText('');\n        setFieldError(false);\n      }, 1000);\n    }\n  }, [fieldError, pollQuestionText]);\n\n  const [\n    updatePollQuestionMutation,\n    { loading, error },\n  ] = useUpdatePollQuestionMutation({\n    variables: {\n      pollQuestionId: pollQuestionId,\n      text: pollQuestionText.trim(),\n    },\n  });\n\n  const handlePollQuestionChange = (\n    e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    setPollQuestionText(e?.target.value);\n    setUpdateEnabled(false);\n  };\n\n  const handleUpdatePollQuestion = async () => {\n    if (!pollQuestionText.trim() || pollQuestionText === '') {\n      setFieldError(true);\n      setPollQuestionText('');\n      return;\n    } else {\n      setFieldError(false);\n    }\n\n    await updatePollQuestionMutation({\n      variables: {\n        pollQuestionId: pollQuestionId,\n        text: pollQuestionText,\n      },\n    });\n    setPollQuestionText('');\n  };\n\n  if (loading || error) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      <Typography variant=\"h2\" style={{ minHeight: '2rem' }}>\n        {pollQuestion}\n      </Typography>\n\n      <FormGroup row className={classes.form}>\n        <TextField\n          error={fieldError}\n          key={pollQuestionId}\n          name=\"poll_answer\"\n          value={pollQuestionText}\n          required\n          id=\"outlined-multiline-static\"\n          label={\n            fieldError === true\n              ? 'Error update question title'\n              : 'Update poll question'\n          }\n          multiline\n          rows={1}\n          size=\"small\"\n          variant=\"outlined\"\n          autoComplete=\"off\"\n          placeholder={pollQuestionText}\n          disabled={pollQuestionDisabled}\n          fullWidth\n          onKeyPress={(e) => {\n            if (e.key === 'Enter') {\n              handleUpdatePollQuestion();\n            }\n          }}\n          onChange={(e) => {\n            handlePollQuestionChange(e);\n          }}\n          onBlur={() => {\n            setFieldError(false);\n          }}\n          onMouseOut={() => {\n            setFieldError(false);\n          }}\n          inputProps={{\n            maxLength: 500,\n          }}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  key={pollQuestionId}\n                  id=\"question_update\"\n                  type=\"submit\"\n                  color=\"secondary\"\n                  aria-label=\"Update question\"\n                  disabled={pollQuestionDisabled || updateDisabled}\n                  onClick={handleUpdatePollQuestion}\n                >\n                  <UpdateIcon />\n                </IconButton>\n              </InputAdornment>\n            ),\n            classes: {\n              input: classes.messageInput,\n            },\n          }}\n          InputLabelProps={{\n            className: classes.messageInput,\n          }}\n        />\n      </FormGroup>\n      <Divider className={classes.divider} />\n    </>\n  );\n};\n\nexport default UpdatePollQuestion;\n","import React, { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  IconButton,\n  Divider,\n  FormGroup,\n  InputAdornment,\n  TextField,\n} from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport {\n  useWatchGetPollQuestionSubscription,\n  useAddAnswerToQuestionMutation,\n} from '../../api/generated/graphql';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport GetPollAnswerId from './GetPollAnswerId';\nimport PollAnswerList from './PollAnswerList';\nimport SetPollQuestionLockState from './SetPollQuestionLockState';\nimport UpdatePollQuestion from './UpdatePollQuestion';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n    marginTop: theme.spacing(5),\n  },\n  divider: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  form: {},\n  messageInput: {\n    floatingLabelFocusStyle: {\n      color: theme.palette.secondary.dark,\n    },\n    [theme.breakpoints.down('sm')]: {\n      fontSize: 14,\n    },\n  },\n  messageButton: {\n    [theme.breakpoints.down('md')]: {\n      width: '100%',\n      size: 'small',\n    },\n    [theme.breakpoints.up('md')]: {\n      size: 'large',\n      width: '25%',\n    },\n    marginTop: theme.spacing(2),\n    marginLeft: theme.spacing(0),\n    backgroundColor: theme.palette.primary.dark,\n  },\n}));\n\ninterface ParamType {\n  question: string;\n}\n\nconst PollAnswers: React.FC = () => {\n  const classes = useStyles();\n  const [answerNewText, setAnswerNewText] = React.useState({\n    text: '',\n  });\n  const [, setCurrentAnswerId] = React.useState<number>(0);\n  const { question: pollQuestionId } = useParams<ParamType>();\n  const [fieldError, setFieldError] = useState<boolean>(false);\n\n  const getPollQuestion = useWatchGetPollQuestionSubscription({\n    variables: {\n      pollQuestionId: parseInt(pollQuestionId),\n    },\n  });\n\n  const [addPollQuestionMutation] = useAddAnswerToQuestionMutation();\n\n  useEffect(() => {\n    if (fieldError === true) {\n      setTimeout(() => {\n        setAnswerNewText({ text: '' });\n        setFieldError(false);\n      }, 1000);\n    }\n  }, [fieldError, answerNewText]);\n\n  const handleNewAnswerChange = (\n    index?: number,\n    e?: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const text: string = e?.target.value || '';\n    const id: string = e?.target.id || '';\n    if (id !== undefined && text !== undefined) {\n      setCurrentAnswerId(parseInt(id));\n      setAnswerNewText({ text: text });\n    }\n  };\n\n  const handleAddAnswer = (\n    e: React.FormEvent<HTMLFormElement> | React.KeyboardEvent<HTMLDivElement>,\n  ) => {\n    e.preventDefault();\n\n    if (!answerNewText.text.trim() || answerNewText.text === '') {\n      setFieldError(true);\n      answerNewText.text = '';\n      return;\n    } else {\n      setFieldError(false);\n    }\n    addPollQuestionMutation({\n      variables: {\n        text: answerNewText.text.trim(),\n        pollQuestionId: parseInt(pollQuestionId),\n      },\n    });\n\n    setAnswerNewText({ text: '' });\n  };\n\n  return (\n    <>\n      <Box className={classes.root}>\n        <GetPollAnswerId pollQuestionId={parseInt(pollQuestionId)} />\n        <UpdatePollQuestion\n          pollQuestion={\n            getPollQuestion?.data?.poll_question[0]?.text\n              ? getPollQuestion?.data?.poll_question[0]?.text\n              : ''\n          }\n          pollQuestionId={parseInt(pollQuestionId)}\n          pollQuestionDisabled={\n            getPollQuestion?.data?.poll_question[0]?.is_active ? true : false\n          }\n        />\n\n        <form\n          className={classes.form}\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleAddAnswer}\n        >\n          <FormGroup row>\n            <TextField\n              error={fieldError}\n              value={answerNewText.text}\n              key={getPollQuestion?.data?.poll_question[0]?.id}\n              name=\"poll_answer\"\n              required\n              id=\"outlined-multiline-static\"\n              label={\n                fieldError === true\n                  ? 'Error adding answer'\n                  : 'Add an answer to these question'\n              }\n              multiline\n              rows={1}\n              size=\"small\"\n              variant=\"outlined\"\n              autoComplete=\"off\"\n              placeholder=\"Type your answers here ...\"\n              disabled={getPollQuestion?.data?.poll_question[0]?.is_active}\n              onKeyPress={(e) => {\n                if (e.key === 'Enter') {\n                  handleAddAnswer(e);\n                }\n              }}\n              onFocus={() => {\n                setFieldError(false);\n              }}\n              onBlur={() => {\n                setFieldError(false);\n              }}\n              onMouseOut={() => {\n                setFieldError(false);\n              }}\n              onChange={(e) =>\n                handleNewAnswerChange(\n                  getPollQuestion?.data?.poll_question[0]?.id,\n                  e,\n                )\n              }\n              fullWidth\n              inputProps={{\n                maxLength: 150,\n              }}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      id=\"message_submit\"\n                      type=\"submit\"\n                      color=\"secondary\"\n                      aria-label=\"Send message\"\n                      disabled={\n                        getPollQuestion?.data?.poll_question[0]?.is_active\n                      }\n                    >\n                      <SendIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n                classes: {\n                  input: classes.messageInput,\n                },\n              }}\n              InputLabelProps={{\n                className: classes.messageInput,\n              }}\n            />\n          </FormGroup>\n        </form>\n        <Divider className={classes.divider} />\n        <PollAnswerList pollQuestionId={parseInt(pollQuestionId)} />\n        <Divider className={classes.divider} />\n        <ButtonGroup disableElevation variant=\"outlined\">\n          <Button\n            color=\"secondary\"\n            component={Link}\n            to={'/dashboard'}\n            aria-label={`back to dashboard`}\n            startIcon={<ArrowBackIosIcon />}\n          >\n            Back\n          </Button>\n          <SetPollQuestionLockState\n            pollQuestionId={parseInt(pollQuestionId)}\n            setActiveState={\n              getPollQuestion?.data?.poll_question[0]?.is_active ? true : false\n            }\n          />\n        </ButtonGroup>\n      </Box>\n    </>\n  );\n};\n\nexport default PollAnswers;\n","import React from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { theme } from '../../theme/theme';\nimport { Box, Chip, IconButton } from '@material-ui/core';\nimport PeopleIcon from '@material-ui/icons/People';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport Logout from '../Logout';\nimport MenuBarDrawer from '../shared/MenuBarDrawer';\nimport SideBar from '../shared/SideBar';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    justifyContent: 'space-between',\n    backgroundColor: theme.palette.background.default,\n    marginTop: theme.spacing(0),\n    paddingTop: theme.spacing(2),\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    zIndex: 1000,\n    [theme.breakpoints.up('md')]: {\n      position: 'fixed',\n      width: '75vw',\n    },\n    [theme.breakpoints.down('md')]: {\n      position: 'fixed',\n    },\n  },\n  menuButton: {\n    width: theme.spacing(5),\n    height: theme.spacing(5),\n    backgroundColor: theme.palette.secondary.main,\n    marginLeft: theme.spacing(0),\n    '& .MuiIconButton-label': {\n      marginLeft: theme.spacing(1),\n    },\n  },\n  title: {\n    width: 180,\n    maxWidth: theme.spacing(22),\n  },\n}));\n\ninterface MobileHeaderMenuProps {\n  channelName: string;\n}\n\nconst MobileHeaderDashboardMenu: React.FC<MobileHeaderMenuProps> = ({\n  channelName,\n}) => {\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        flexDirection=\"row\"\n        width={1}\n        className={classes.root}\n        component=\"header\"\n      >\n        {matches === false && (\n          <IconButton\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"open menu\"\n            onClick={handleDrawerOpen}\n          >\n            <ArrowBackIosIcon />\n          </IconButton>\n        )}\n        <Chip\n          size=\"small\"\n          variant=\"outlined\"\n          color=\"primary\"\n          label={channelName}\n          icon={<PeopleIcon />}\n          className={classes.title}\n          aria-label={`channel: ${channelName}`}\n        />\n        <Logout />\n      </Box>\n      <MenuBarDrawer open={open}>\n        <SideBar handleDrawerClose={handleDrawerClose} open={open} />\n      </MenuBarDrawer>\n    </>\n  );\n};\n\nexport default MobileHeaderDashboardMenu;\n","import React from 'react';\nimport { theme } from '../../theme/theme';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Route, Switch } from 'react-router-dom';\nimport Alert from '@material-ui/lab/Alert';\nimport { Box, Grid } from '@material-ui/core/';\nimport AdminUserList from './AdminUserList';\nimport PollingDashBoard from './PollingDashBoard';\nimport PollAnswers from './PollAnswers';\nimport NotFound from '../shared/NotFound';\nimport MobileHeaderDashboardMenu from './MobileHeaderDashboardMenu';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    overflowY: 'scroll',\n    maxHeight: '100vh',\n    height: '100vh',\n    padding: theme.spacing(0),\n  },\n  article: {\n    padding: theme.spacing(0),\n    paddingTop: theme.spacing(8),\n  },\n}));\n\nconst AdminContainer: React.FC = () => {\n  const classes = useStyles();\n  const { user, isAuthenticated } = useAuth0();\n  const role = sessionStorage.getItem(user.sub);\n\n  return (\n    <>\n      {isAuthenticated && role === 'admin' ? (\n        <>\n          <Grid\n            item\n            xs={12}\n            md={9}\n            component=\"section\"\n            className={classes.root}\n          >\n            <MobileHeaderDashboardMenu channelName=\"Dashboard\" />\n            <Box component=\"article\" className={classes.article}>\n              <Switch>\n                <Route\n                  exact\n                  path=\"/dashboard/users\"\n                  component={AdminUserList}\n                />\n                <Route exact path=\"/dashboard\" component={PollingDashBoard} />\n                <Route\n                  exact\n                  path=\"/dashboard/pollings\"\n                  component={PollingDashBoard}\n                />\n                <Route\n                  exact\n                  path=\"/dashboard/pollings/edit/question/:question\"\n                  component={PollAnswers}\n                />\n                <Route component={NotFound} />\n              </Switch>\n            </Box>\n          </Grid>\n        </>\n      ) : (\n        <Grid item xs={12} md={9} component=\"section\" className={classes.root}>\n          <MobileHeaderDashboardMenu channelName=\"No permission!\" />\n          <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            style={{ height: '100vh', padding: theme.spacing(3) }}\n          >\n            <Alert severity=\"warning\">\n              You have no permission to access this page! If you still need\n              access, contact our administrator.\n            </Alert>\n          </Box>\n        </Grid>\n      )}\n    </>\n  );\n};\n\nexport default AdminContainer;\n","import React, { useEffect } from 'react';\nimport AdminContainer from '../admin/AdminContainer';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useSetUserOnlineMutation } from '../../api/generated/graphql';\n\nconst AdminBoard: React.FC = () => {\n  const { user } = useAuth0();\n\n  const [sendUserIsOnline] = useSetUserOnlineMutation({\n    variables: { user_id: user?.sub },\n  });\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (user?.sub !== undefined) {\n        sendUserIsOnline();\n      }\n    }, 7000);\n    return function cleanup() {\n      clearInterval(interval);\n    };\n  }, [sendUserIsOnline, user]);\n\n  return <AdminContainer />;\n};\n\nexport default AdminBoard;\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { theme } from './theme/theme';\nimport {\n  Box,\n  Container,\n  Grid,\n  makeStyles,\n  useMediaQuery,\n} from '@material-ui/core';\nimport SignIn from './components/shared/SignIn';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport NotFound from './components/shared/NotFound';\nimport PrivateRoute from './components/PrivateRoute';\nimport AddChannelMembers from './components/chat/AddChannelMembers';\nimport AddDirectMessageChannel from './components/chat/AddDirectMessageChannel';\nimport ThreadBoard from './components/layout/ThreadBoard';\nimport ChatBoard from './components/layout/ChatBoard';\nimport AdminBoard from './components/layout/AdminBoard';\nimport Logo from './components/shared/Logo';\nimport SideBar from './components/shared/SideBar';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    // overflowY: 'scroll',\n    maxHeight: '100vh',\n    margin: 0,\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    overflowX: 'hidden',\n    height: '100vh',\n    [theme.breakpoints.down('md')]: {\n      overflowY: 'hidden',\n    },\n  },\n  sidebar: {\n    overflowY: 'hidden',\n    minHeight: '50vh',\n    display: 'flex',\n    alignItems: 'flex-start',\n  },\n}));\n\nconst App: React.FC = () => {\n  const { isAuthenticated, isLoading } = useAuth0();\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n\n  if (isLoading) {\n    return (\n      <>\n        <Box\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          flexDirection=\"column\"\n          style={{\n            height: '100vh',\n            backgroundColor: theme.palette.error.dark,\n          }}\n        >\n          <Box>\n            <Logo />\n            <LinearProgress color=\"primary\" style={{ marginTop: '16px' }} />\n          </Box>\n        </Box>\n      </>\n    );\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      {isAuthenticated ? (\n        <Container\n          component=\"main\"\n          disableGutters\n          maxWidth=\"xl\"\n          className={classes.container}\n        >\n          <>\n            {matches === true && (\n              <Grid\n                item\n                xs={5}\n                sm={4}\n                md={3}\n                className={classes.sidebar}\n                component=\"nav\"\n              >\n                <SideBar handleDrawerClose={() => false} open={false} />\n              </Grid>\n            )}\n            <Switch>\n              <Redirect exact from=\"/\" to=\"/channel/general\" />\n              <Redirect exact from=\"/channel\" to=\"/channel/general\" />\n\n              <PrivateRoute\n                path=\"/channel/:channel/thread/:messageId\"\n                component={ThreadBoard}\n              />\n              <PrivateRoute path=\"/channel/threads\" component={ThreadBoard} />\n              <PrivateRoute path=\"/channel/:channel\" component={ChatBoard} />\n\n              <PrivateRoute path=\"/add-user-to-channel\" component={ChatBoard} />\n              <PrivateRoute\n                path=\"/addChannelMembers\"\n                component={AddChannelMembers}\n              />\n              <PrivateRoute\n                path=\"/addDirectMessageChannelMembers\"\n                component={AddDirectMessageChannel}\n              />\n              <PrivateRoute path=\"/dashboard\" component={AdminBoard} />\n              <Route exact path=\"/404-not-found\" component={NotFound} />\n              <Redirect to=\"/404-not-found\" />\n            </Switch>\n          </>\n        </Container>\n      ) : (\n        <Switch>\n          <Redirect exact from=\"/channel\" to=\"/channel/general\" />\n          <PrivateRoute path=\"/channel/:channel\" component={ChatBoard} />\n          <PrivateRoute path=\"/dashboard\" component={AdminBoard} />\n          <Route path=\"/\" component={SignIn} />\n          <Redirect to=\"/\" />\n        </Switch>\n      )}\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Auth0Provider } from '@auth0/auth0-react';\nimport ApolloWrapper from './components/ApolloWrapper';\nimport { AppState } from '@auth0/auth0-react/dist/auth0-provider';\nimport './index.css';\nimport App from './App';\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = (appState: AppState) => {\n  window.history.replaceState(\n    {},\n    document.title,\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname,\n  );\n};\n\nconst domain: string = process.env.REACT_APP_AUTH0_DOMAIN || '';\nconst clientId: string = process.env.REACT_APP_AUTH0_CLIENT_ID || '';\nconst redirectUri: string = process.env.REACT_APP_AUTH0_REDIRECT_URI || '';\nconst audience: string = process.env.REACT_APP_AUTH0_AUDIENCE || '';\n\nReactDOM.render(\n  <Auth0Provider\n    domain={domain}\n    clientId={clientId}\n    redirectUri={redirectUri}\n    onRedirectCallback={onRedirectCallback}\n    audience={audience}\n  >\n    <BrowserRouter>\n      <RecoilRoot>\n        <ApolloWrapper>\n          <React.Fragment>\n            <App />\n          </React.Fragment>\n        </ApolloWrapper>\n      </RecoilRoot>\n    </BrowserRouter>\n  </Auth0Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}