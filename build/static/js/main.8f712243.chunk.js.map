{"version":3,"sources":["api/generated/graphql.tsx","components/ApolloWrapper.tsx","theme/theme.tsx","theme/typography.ts","theme/overrides.ts","components/Login.tsx","components/shared/SignIn.tsx","components/shared/NotFound.tsx","components/shared/Loader.tsx","components/PrivateRoute.tsx","atom.js","components/shared/Logo.tsx","components/chat/AddChannelMembers.tsx","components/chat/AddDirectMessageChannel.tsx","components/shared/UserStatus.tsx","components/chat/ChannelListMessageCounter.tsx","components/shared/ThreadsLink.tsx","components/chat/ChannelList.tsx","components/chat/DirectMessageUserList.tsx","components/Logout.tsx","components/chat/AddChannel.tsx","components/shared/SideBar.tsx","components/chat/threads/ThreadInfo.tsx","components/chat/threads/ThreadDeleteMessage.tsx","components/chat/threads/ThreadMessageList.tsx","components/shared/GiphyCarousel.tsx","components/shared/MenuBarDrawer.tsx","components/adminPollings/ResultGraph.tsx","components/adminPollings/VoteButton.tsx","components/adminPollings/ShowTotalVotes.tsx","components/adminPollings/PublishChannelPolling.tsx","components/adminPollings/PollPopup.tsx","components/chat/MobileMenu.tsx","components/shared/MenuBar.tsx","components/chat/threads/ThreadMessageInput.tsx","components/chat/threads/Thread.tsx","components/chat/threads/ThreadListInputContainer.tsx","components/chat/threads/ThreadList.tsx","components/chat/threads/ThreadMenuBar.tsx","components/chat/threads/ThreadListContainer.tsx","components/chat/threads/ThreadContainer.tsx","components/layout/ThreadBoard.tsx","components/chat/threads/ThreadReply.tsx","components/chat/UpdateMessage.tsx","components/chat/MessageList.tsx","components/shared/TypingIndicator.tsx","components/chat/MessageInput.tsx","components/chat/Chat.tsx","components/chat/ChatApp.tsx","components/chat/ChatContainer.tsx","components/layout/ChatBoard.tsx","components/admin/AdminSidebar.tsx","components/admin/AdminUserList.tsx","components/adminPollings/DeleteQuestion.tsx","components/adminPollings/ShowPollQuestionLockState.tsx","components/adminPollings/GetChannels.tsx","components/adminPollings/GetPollQuestions.tsx","components/adminPollings/AddPollQuestion.tsx","components/adminPollings/PollingDashBoard.tsx","components/adminPollings/GetPollAnswerId.tsx","components/adminPollings/DeleteAnswer.tsx","components/adminPollings/PollAnswerList.tsx","components/adminPollings/SetPollQuestionLockState.tsx","components/adminPollings/PollAnswers.tsx","components/admin/AdminContainer.tsx","components/layout/AdminBoard.tsx","App.tsx","index.tsx"],"names":["AddDirectMessageChannelChannelTypeEnum","MyMutationChannelTypeEnum","ValidateAndAddDirectMessageChannelTypeEnum","Channel_Constraint","Channel_Poll_Constraint","Channel_Poll_Select_Column","Channel_Poll_Update_Column","Channel_Select_Column","Channel_Thread_Constraint","Channel_Thread_Message_Constraint","Channel_Thread_Message_Select_Column","Channel_Thread_Message_Update_Column","Channel_Thread_Select_Column","Channel_Thread_Update_Column","Channel_Type_Constraint","Channel_Type_Enum","Channel_Type_Select_Column","Channel_Type_Update_Column","Channel_Update_Column","Message_Constraint","Message_Cursor_Constraint","Message_Cursor_Select_Column","Message_Cursor_Update_Column","Message_Select_Column","Message_Update_Column","Order_By","Poll_Anwers_Constraint","Poll_Anwers_Select_Column","Poll_Anwers_Update_Column","Poll_Questions_Constraint","Poll_Questions_Select_Column","Poll_Questions_Update_Column","User_Channels_Constraint","User_Channels_Select_Column","User_Channels_Update_Column","User_Constraint","User_Online_Select_Column","User_Select_Column","User_Typing_Select_Column","User_Update_Column","User_Votes_Constraint","User_Votes_Select_Column","User_Votes_Update_Column","ApolloWrapper","children","useAuth0","isAuthenticated","getAccessTokenSilently","getHeaders","a","headers","token","Authorization","authMiddleware","setContext","operation","originalHeaders","wsLinkOptions","uri","process","options","reconnect","lazy","connectionParams","httpLink","createHttpLink","wsLink","WebSocketLink","link","split","query","getMainDefinition","kind","concat","cache","InMemoryCache","client","ApolloClient","theme","createMuiTheme","palette","common","black","white","type","background","paper","default","primary","light","main","dark","contrastText","secondary","error","success","shape","borderRadius","mixins","toolbar","spacing","props","MuiCheckbox","style","fontSize","MuiChip","padding","MuiList","MuiListItemIcon","color","MuiPaper","draggable","elevation","overflow","MuiAppBar","top","bottom","MuiButton","disableElevation","variant","size","disableFocusRipple","disableTouchRipple","typography","body1","body2","fontWeight","button","h1","paddingBottom","h2","marginTop","h3","marginBottom","h4","h5","h6","overrides","MuiCssBaseline","width","height","backgroundColor","textDecoration","MuiBackdrop","root","MuiFab","boxShadow","label","MuiSpeedDial","direction","directionUp","actions","display","MuiSpeedDialAction","fab","staticTooltip","tooltipOpen","tooltipPlacement","tooltipPlacementLeft","staticTooltipLabel","right","whiteSpace","MuiTableCell","borderBottom","MuiInputBase","MuiContainer","margin","MuiListItemText","MuiDivider","opacity","MuiTypography","contained","MuiIconButton","Login","loginWithRedirect","Button","onClick","useStyles","makeStyles","justifyContent","alignItems","flexDirection","title","textTransform","paddingTop","SignIn","classes","Container","maxWidth","Grid","container","className","item","Box","src","alt","Typography","toolbarIcon","NotFound","Loader","flex","CircularProgress","PrivateRoute","component","args","withAuthenticationRequired","onRedirecting","InsertMessageDocument","gql","useInsertMessageMutation","baseOptions","Apollo","UpdateMessageDocument","SetUserOnlineDocument","useSetUserOnlineMutation","AddChannelDocument","ValidateAndAddDirectMessageChannelDocument","AddChannelUserDocument","SendTypingEventDocument","useSendTypingEventMutation","UpsertMessageCursorDocument","useUpsertMessageCursorMutation","InsertChannelThreadMessageDocument","useInsertChannelThreadMessageMutation","DeleteThreadMessageDocument","InsertChannelThreadDocument","AddPollQuestionDocument","AddAnswerToQuestionDocument","AddPublishPollQuestionToChannelDocument","SetPollAnswerVoteDocument","SetPublishPollQuestionStateDocument","DeletePollQuestionDocument","DeletePollQuestionFromChannelDocument","UpdatePollAnswerTextDocument","DeletePollAnswerIdDocument","SetUserVotePollQuestionDocument","GetUserListDocument","GetChannelByNameDocument","GetChannelThreadDocument","WatchMessagesDocument","useWatchMessagesSubscription","WatchChannelThreadMessagesDocument","useWatchChannelThreadMessagesSubscription","WatchThreadsDocument","WatchOnlineUsersDocument","useWatchOnlineUsersSubscription","WatchChannelsDocument","WatchDirectMessageChannelsDocument","WatchUsersWhoHaveNotSubscribedToChannelDocument","WatchUsersWhoHaveSubscribedToDirectMessageChannelDocument","GetUserIsTypingDocument","WatchMessageCursorDocument","WatchGetPollQuestionsDocument","WatchGetPollQuestionDocument","useWatchGetPollQuestionSubscription","WatchGetPollAnswersDocument","useWatchGetPollAnswersSubscription","WatchChannelPollQuestionDocument","WatchPollAnswerVotesDocument","WatchGetChannelsDocument","WatchChannelHasActivePollDocument","WatchChannelPollActiveStateDocument","WatchCheckUserHasVotedDocument","atom","key","currentChannelState","getPollQuestionAnswers","giphyState","deletedMessageState","large","backgroundSize","Logo","Avatar","overflowY","avatar","spacer","AddChannelMembers","history","useHistory","useRecoilState","currentChannel","loadingAuth0","isLoading","variables","user_id","owner_id","channel_id","id","users","data","loading","useAddChannelUserMutation","addChannelUserMutation","addChannelUserError","handleUsersToggle","event","console","log","xs","mt","mb","name","user","length","Alert","severity","Divider","List","aria-label","map","u","index","ListItem","auth0_user_id","ListItemIcon","Badge","username","substring","toUpperCase","ListItemText","push","AddDirectMessageChannel","useState","setAnchorEl","setUsers","sub","upsertMessageCursorMutation","upsertMessageError","sendMessage","sendUpdateMessageError","useValidateAndAddDirectMessageChannelMutation","validateAndAddDirectMessageChannelMutation","addDMError","useEffect","checkUserSubscriptions","filter","user_channels","user_channel","channel","check","handleAddUser","dm_user","uuidv4","user_id1","user_id2","message","text","validateAndAddDirectMessageChannel","message_id","UserStatus","usersOnline","justify","Chip","icon","nickname","Tooltip","placement","badgeContent","flexWrap","ChannelListMessageCounter","channelId","auth0Error","count","setCount","fetchPolicy","useWatchMessageCursorData","useWatchMessageCursorLoading","useWatchMessageCursorError","messageId","message_cursor","undefined","messageCounterArray","messages","m","Fragment","treeView","badge","ThreadsLink","to","Channels","React","open","setOpen","useMediaQuery","breakpoints","down","channel_type","ChatMessage","Collapse","in","timeout","unmountOnExit","channels","is_private","data-channel-name","nested","paddingLeft","form","flexGrow","submit","itemText","DirectMessageUserList","onlineUsers","onlineUsersError","DirectMessage","setOnlineUsersStatus","onlineUser","invisible","up","Logout","logout","endIcon","returnTo","window","localStorage","clear","checkbox","AddChannel","matches","openAlert","setOpenAlert","channelName","setChannelName","channelIsPrivate","setChannelIsPrivate","addChannel","userAuth0","setSnackbarPosition","handleAlert","handleSubmit","e","preventDefault","toLocaleLowerCase","dataAddChannel","insert_channel","returning","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","noValidate","autoComplete","onSubmit","TextField","disabled","value","autoFocus","onChange","target","placeholder","fullWidth","FormControlLabel","control","Checkbox","checked","marginRight","marginLeft","maxHeight","paddingRight","branding","logo","SideBar","ChannelList","head","messageText","reply","ThreadInfo","channelThread","vspaceTop","ListItemAvatar","deleted","location","origin","moment","timestamp","fromNow","vspace","vspaceBottom","renderThreadInfo","ThreadDeleteMessage","deleteThreadMessageMutation","delete_channel_thread_message","affected_rows","IconButton","handleDelete","ThreadMessageList","reverse","image","renderMessage","giphySearchInput","giphyCarousel","giphyFetch","GiphyFetch","GiphyCarousel","hideGiphyCarousel","setGif","giphySearchString","setGiphySearchString","fetchGifs","offset","search","limit","trending","onGifClick","gif","gifHeight","gutter","ev","menuButton","menuButtonHidden","drawerPaper","transition","transitions","create","easing","easeInOut","duration","enteringScreen","drawerPaperClose","overflowX","easeOut","leavingScreen","appBarSpacer","giphyImage","MenuBarDrawer","handleDrawerClose","Drawer","anchor","clsx","Toolbar","disableGutters","order","clickable","ResultGraph","answerId","userVote","pollVotes","totalVotes","LinearProgressWithLabel","mr","LinearProgress","toFixed","answerid","pollSubmit","VoteButton","enabled","ShowTotalVotes","pollCard","transform","minWidth","PublishChannelPolling","selectedPollAnswerId","setSelectedPollAnswerId","pollAnswerId","getPollAnswerVotes","getPollAnswerVotesLoading","useWatchChannelPollQuestionSubscription","useSetPollAnswerVoteMutation","setPollAnswerVoteMutation","numbers","getChannelPoll","poll_question","poll_anwers","num","votes","reduce","b","useWatchCheckUserHasVotedSubscription","pollQuestionId","auth0UserId","userVoteLoading","useSetUserVotePollQuestionMutation","userName","setUserVotePollQuestionMutation","handleChange","parseInt","currentPollAnswerVotes","pollAnswerVotes","newVote","user_votes","Paper","channelPoll","sort","poll_answer_id","FormControl","RadioGroup","pollAnswer","Radio","popoverRoot","popupWidth","position","left","animation","border","content","PollPopUp","currentChannelId","poll_questions","popupId","popupState","bindTrigger","Popover","anchorReference","bindPopover","close","createStyles","speedDial","action","backdrop","MobileMenu","isPrivate","handleDrawerOpen","handleGiphyClick","hidden","state","handleClose","Backdrop","SpeedDial","ariaLabel","SpeedDialIcon","onOpen","SpeedDialAction","tooltipTitle","appBar","sharp","appBarShift","MenuBar","showGiphyCarousel","setShowGiphyCarousel","AppBar","rootSingleChip","giphyVisible","giphyHidden","messageInput","floatingLabelFocusStyle","messageButton","ThreadMessageInput","setText","setdeletedMessage","sendTypingEventMutation","alert","channelThreadId","channel_thread_id","images","fixed_width_small","url","textLength","handleTyping","setTextFieldSize","InputProps","input","InputLabelProps","setButtonSize","Icon","messageContainer","Thread","messagesEndRef","useRef","useParams","getChannelThreadData","getChannelThreadLoading","getChannelThreadError","current","scrollIntoView","scrollToBottom","channel_thread_message","channel_thread","ref","ThreadListInputContainer","bitly_url","ThreadList","ThreadMenuBar","end","ThreadListContainer","channel_thread_messages","sidebar","borderRightWidth","borderRightStyle","borderRightColor","ThreadContainer","ChatBoard","sendUserIsOnline","setInterval","ThreadReply","insertChannelThreadMutation","navigateToThreadChannel","handleClick","channel_threads","UpdateMessage","updateMessageMutation","handleUpdate","_eq","update_message","MessageList","lastMessage","preLastMessageId","showUpdate","setShowUpdate","showUpdateMessageId","setShowUpdateMessageId","deletedMessage","useRecoilValue","handleShowUpdate","giphy","i","indicator","TypingIndicator","self_id","user_typing","ChatInput","handleSetLastMessage","focused","polling","Chat","channelType","setLastMessage","MessageInput","ChatApp","setCurrentChannel","isLoadingAuth0","channelLoading","channelError","ChatContainer","AdminSidebar","aria-labelledby","subheader","ListSubheader","AdminUserList","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","scope","last_seen","DeleteQuestion","questionId","setActiveState","channelPollState","tobeDeleted","deleteQuestion","handleQuestionDelete","locked","unlocked","ShowPollQuestionLockState","GetChannels","questionIdState","setQuestionIdState","getPollQuestionId","useWatchChannelPollActiveStateSubscription","useAddPublishPollQuestionToChannelMutation","pollQuestionToChannel","useDeletePollQuestionFromChannelMutation","deletePollQuestionFromChannelMutation","deleteError","handlePublishOnChannel","kanalId","channelID","pollQuestionID","handleDeleteQuestionFromChannel","pb","chn","channel_polls","onDelete","play","stop","heading","pxToRem","details","column","flexBasis","helper","borderLeft","divider","GetPollQuestions","setPollQuestion","questions","question","Accordion","defaultExpanded","AccordionSummary","expandIcon","aria-controls","pathname","fromDashboard","is_active","created_at","format","AccordionDetails","onMouseEnter","AccordionActions","href","AddPollQuestion","addPollQuestionMutation","pollTitle","setPollTitle","handleAddTitle","FormGroup","required","data-testid","PollingDashBoard","GetPollAnswerId","DeleteAnswer","deletePollAnswerIdMutation","handleDeleteAnswer","PollAnswerList","updateEnabled","setUpdateEnabled","answerTextUpdateId","setAnswerTextUpdateId","answerText","setAnswerText","getPollQuestion","updatePollAnswerTextMutation","handleUpdateAnswerText","Object","values","poll_answers","answer","row","handleAnswerChange","inputProps","maxLength","lock","unlock","SetPollQuestionLockState","readyToPublish","setReadyToPublish","setPollQuestionState","totalAnswers","handleSetPollQuestionPublishState","PollAnswers","answerNewText","setAnswerNewText","currentAnswerId","setCurrentAnswerId","handleAddAnswer","p","handleNewAnswerChange","AdminContainer","md","exact","path","AdminBoard","App","ThemeProvider","CssBaseline","from","ThreadBoard","ReactDOM","render","domain","clientId","redirectUri","onRedirectCallback","appState","replaceState","document","targetUrl","audience","getElementById"],"mappings":"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AAA,E,oBAAAA,M,cA+KAC,K,0DAAAA,E,yCAAAA,M,cAiIAC,K,wDAAAA,M,cAyGAC,K,oCAAAA,E,QAAAA,E,cAAAA,E,kBAAAA,E,sBAAAA,E,kBAAAA,M,cA8EAC,K,oCAAAA,E,QAAAA,E,cAAAA,E,kBAAAA,E,sBAAAA,E,kBAAAA,M,cAuGAC,K,QAAAA,E,wBAAAA,M,cAkEAC,K,QAAAA,E,wBAAAA,M,cA2HAC,K,qCAAAA,M,cAKAC,K,2BAAAA,E,gCAAAA,M,cAoFAC,K,kBAAAA,E,eAAAA,M,cAcAC,K,kBAAAA,E,eAAAA,M,cAQAC,K,2BAAAA,E,QAAAA,E,uBAAAA,E,YAAAA,E,oBAAAA,M,cAsLAC,K,4BAAAA,M,cA4FAC,K,wEAAAA,E,yCAAAA,M,cA4FAC,K,uBAAAA,E,QAAAA,E,uBAAAA,E,kBAAAA,M,cAgFAC,K,uBAAAA,E,QAAAA,E,uBAAAA,E,kBAAAA,M,cAgKAC,K,uBAAAA,E,kBAAAA,E,QAAAA,E,cAAAA,E,YAAAA,E,sBAAAA,E,kBAAAA,M,cAiFAC,K,uBAAAA,E,kBAAAA,E,QAAAA,E,cAAAA,E,YAAAA,E,sBAAAA,E,kBAAAA,M,cA4xBAC,K,UAAAA,E,gCAAAA,E,8BAAAA,E,YAAAA,E,kCAAAA,E,iCAAAA,M,cA+GAC,K,mCAAAA,M,cA8GAC,K,uBAAAA,E,QAAAA,E,yBAAAA,E,YAAAA,E,uBAAAA,E,iBAAAA,E,eAAAA,M,cAyFAC,K,uBAAAA,E,QAAAA,E,yBAAAA,E,YAAAA,E,uBAAAA,E,iBAAAA,E,eAAAA,M,cAuMAC,K,yCAAAA,M,cAoGAC,K,uBAAAA,E,QAAAA,E,qBAAAA,E,mBAAAA,E,YAAAA,E,wBAAAA,M,cAsEAC,K,uBAAAA,E,QAAAA,E,qBAAAA,E,mBAAAA,E,YAAAA,E,wBAAAA,M,cAwuCAC,K,uCAAAA,M,cAiFAC,K,uBAAAA,E,kBAAAA,M,cA0DAC,K,uBAAAA,E,kBAAAA,M,cAyCAC,K,4CAAAA,E,sBAAAA,M,cA0PAC,K,4BAAAA,E,QAAAA,E,qBAAAA,E,uBAAAA,E,qBAAAA,M,cAuHAC,K,4BAAAA,E,QAAAA,E,qBAAAA,E,uBA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","file":"static/js/main.8f712243.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  json: any;\n  timestamptz: any;\n  uuid: any;\n};\n\nexport type AddChannelUserOutput = {\n  __typename?: 'AddChannelUserOutput';\n  affected_rows: Scalars['Int'];\n};\n\nexport type AddChannelUserSubscriptionOutput = {\n  __typename?: 'AddChannelUserSubscriptionOutput';\n  affected_rows: Scalars['Int'];\n};\n\nexport enum AddDirectMessageChannelChannelTypeEnum {\n  /** this channel type is for chat messages in a private or public channel */\n  ChatMessage = 'CHAT_MESSAGE',\n  /** this channel type is for direct messages */\n  DirectMessage = 'DIRECT_MESSAGE'\n}\n\nexport type AddDirectMessageChannelOutput = {\n  __typename?: 'AddDirectMessageChannelOutput';\n  affected_rows: Scalars['Int'];\n};\n\n/** expression to compare columns of type Boolean. All fields are combined with logical 'AND'. */\nexport type Boolean_Comparison_Exp = {\n  _eq?: Maybe<Scalars['Boolean']>;\n  _gt?: Maybe<Scalars['Boolean']>;\n  _gte?: Maybe<Scalars['Boolean']>;\n  _in?: Maybe<Array<Scalars['Boolean']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Boolean']>;\n  _lte?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<Scalars['Boolean']>;\n  _nin?: Maybe<Array<Scalars['Boolean']>>;\n};\n\n/** expression to compare columns of type Int. All fields are combined with logical 'AND'. */\nexport type Int_Comparison_Exp = {\n  _eq?: Maybe<Scalars['Int']>;\n  _gt?: Maybe<Scalars['Int']>;\n  _gte?: Maybe<Scalars['Int']>;\n  _in?: Maybe<Array<Scalars['Int']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Int']>;\n  _lte?: Maybe<Scalars['Int']>;\n  _neq?: Maybe<Scalars['Int']>;\n  _nin?: Maybe<Array<Scalars['Int']>>;\n};\n\nexport type MyMutationBooleanComparisonExp = {\n  _eq?: Maybe<Scalars['Boolean']>;\n  _gt?: Maybe<Scalars['Boolean']>;\n  _gte?: Maybe<Scalars['Boolean']>;\n  _in?: Maybe<Array<Scalars['Boolean']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Boolean']>;\n  _lte?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<Scalars['Boolean']>;\n  _nin?: Maybe<Array<Scalars['Boolean']>>;\n};\n\nexport type MyMutationChannelBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationChannelBoolExp>>>;\n  _not?: Maybe<MyMutationChannelBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationChannelBoolExp>>>;\n  channelTypeByChannelType?: Maybe<MyMutationChannelTypeBoolExp>;\n  channel_polls?: Maybe<MyMutationChannelPollBoolExp>;\n  channel_type?: Maybe<MyMutationChannelTypeEnumComparisonExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  is_private?: Maybe<MyMutationBooleanComparisonExp>;\n  messages?: Maybe<MyMutationMessageBoolExp>;\n  name?: Maybe<MyMutationStringComparisonExp>;\n  owner_id?: Maybe<MyMutationStringComparisonExp>;\n  user?: Maybe<MyMutationUserBoolExp>;\n  user_channels?: Maybe<MyMutationUserChannelsBoolExp>;\n};\n\nexport type MyMutationChannelPollBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationChannelPollBoolExp>>>;\n  _not?: Maybe<MyMutationChannelPollBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationChannelPollBoolExp>>>;\n  channel?: Maybe<MyMutationChannelBoolExp>;\n  channel_id?: Maybe<MyMutationIntComparisonExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  poll_question?: Maybe<MyMutationPollQuestionsBoolExp>;\n  poll_questions?: Maybe<MyMutationIntComparisonExp>;\n};\n\nexport type MyMutationChannelThreadBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationChannelThreadBoolExp>>>;\n  _not?: Maybe<MyMutationChannelThreadBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationChannelThreadBoolExp>>>;\n  channel_thread_messages?: Maybe<MyMutationChannelThreadMessageBoolExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  message?: Maybe<MyMutationMessageBoolExp>;\n  message_id?: Maybe<MyMutationIntComparisonExp>;\n};\n\nexport type MyMutationChannelThreadMessageBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationChannelThreadMessageBoolExp>>>;\n  _not?: Maybe<MyMutationChannelThreadMessageBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationChannelThreadMessageBoolExp>>>;\n  channel_thread?: Maybe<MyMutationChannelThreadBoolExp>;\n  channel_thread_id?: Maybe<MyMutationIntComparisonExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  message?: Maybe<MyMutationStringComparisonExp>;\n  user?: Maybe<MyMutationUserBoolExp>;\n  user_id?: Maybe<MyMutationStringComparisonExp>;\n};\n\nexport type MyMutationChannelTypeBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationChannelTypeBoolExp>>>;\n  _not?: Maybe<MyMutationChannelTypeBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationChannelTypeBoolExp>>>;\n  channels?: Maybe<MyMutationChannelBoolExp>;\n  comment?: Maybe<MyMutationStringComparisonExp>;\n  value?: Maybe<MyMutationStringComparisonExp>;\n};\n\nexport enum MyMutationChannelTypeEnum {\n  /** this channel type is for chat messages in a private or public channel */\n  ChatMessage = 'CHAT_MESSAGE',\n  /** this channel type is for direct messages */\n  DirectMessage = 'DIRECT_MESSAGE'\n}\n\nexport type MyMutationChannelTypeEnumComparisonExp = {\n  _eq?: Maybe<MyMutationChannelTypeEnum>;\n  _in?: Maybe<Array<MyMutationChannelTypeEnum>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<MyMutationChannelTypeEnum>;\n  _nin?: Maybe<Array<MyMutationChannelTypeEnum>>;\n};\n\nexport type MyMutationIntComparisonExp = {\n  _eq?: Maybe<Scalars['Int']>;\n  _gt?: Maybe<Scalars['Int']>;\n  _gte?: Maybe<Scalars['Int']>;\n  _in?: Maybe<Array<Scalars['Int']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Int']>;\n  _lte?: Maybe<Scalars['Int']>;\n  _neq?: Maybe<Scalars['Int']>;\n  _nin?: Maybe<Array<Scalars['Int']>>;\n};\n\nexport type MyMutationMessageBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationMessageBoolExp>>>;\n  _not?: Maybe<MyMutationMessageBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationMessageBoolExp>>>;\n  channel?: Maybe<MyMutationChannelBoolExp>;\n  channel_id?: Maybe<MyMutationIntComparisonExp>;\n  channel_threads?: Maybe<MyMutationChannelThreadBoolExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  text?: Maybe<MyMutationStringComparisonExp>;\n  timestamp?: Maybe<MyMutationTimestamptzComparisonExp>;\n  user?: Maybe<MyMutationUserBoolExp>;\n  user_id?: Maybe<MyMutationStringComparisonExp>;\n};\n\nexport type MyMutationOutput = {\n  __typename?: 'MyMutationOutput';\n  affected_rows: Scalars['Int'];\n};\n\nexport type MyMutationPollAnwersBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationPollAnwersBoolExp>>>;\n  _not?: Maybe<MyMutationPollAnwersBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationPollAnwersBoolExp>>>;\n  created_at?: Maybe<MyMutationTimestamptzComparisonExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  poll_question?: Maybe<MyMutationPollQuestionsBoolExp>;\n  question_id?: Maybe<MyMutationIntComparisonExp>;\n  text?: Maybe<MyMutationStringComparisonExp>;\n  updated_at?: Maybe<MyMutationTimestamptzComparisonExp>;\n  user_id?: Maybe<MyMutationStringComparisonExp>;\n  votes?: Maybe<MyMutationIntComparisonExp>;\n};\n\nexport type MyMutationPollQuestionsBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationPollQuestionsBoolExp>>>;\n  _not?: Maybe<MyMutationPollQuestionsBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationPollQuestionsBoolExp>>>;\n  channel_polls?: Maybe<MyMutationChannelPollBoolExp>;\n  created_at?: Maybe<MyMutationTimestamptzComparisonExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  is_active?: Maybe<MyMutationBooleanComparisonExp>;\n  owner_id?: Maybe<MyMutationStringComparisonExp>;\n  poll_anwers?: Maybe<MyMutationPollAnwersBoolExp>;\n  text?: Maybe<MyMutationStringComparisonExp>;\n  updated_at?: Maybe<MyMutationTimestamptzComparisonExp>;\n};\n\nexport type MyMutationStringComparisonExp = {\n  _eq?: Maybe<Scalars['String']>;\n  _gt?: Maybe<Scalars['String']>;\n  _gte?: Maybe<Scalars['String']>;\n  _ilike?: Maybe<Scalars['String']>;\n  _in?: Maybe<Array<Scalars['String']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _like?: Maybe<Scalars['String']>;\n  _lt?: Maybe<Scalars['String']>;\n  _lte?: Maybe<Scalars['String']>;\n  _neq?: Maybe<Scalars['String']>;\n  _nilike?: Maybe<Scalars['String']>;\n  _nin?: Maybe<Array<Scalars['String']>>;\n  _nlike?: Maybe<Scalars['String']>;\n  _nsimilar?: Maybe<Scalars['String']>;\n  _similar?: Maybe<Scalars['String']>;\n};\n\nexport type MyMutationTimestamptzComparisonExp = {\n  _eq?: Maybe<Scalars['timestamptz']>;\n  _gt?: Maybe<Scalars['timestamptz']>;\n  _gte?: Maybe<Scalars['timestamptz']>;\n  _in?: Maybe<Array<Scalars['timestamptz']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['timestamptz']>;\n  _lte?: Maybe<Scalars['timestamptz']>;\n  _neq?: Maybe<Scalars['timestamptz']>;\n  _nin?: Maybe<Array<Scalars['timestamptz']>>;\n};\n\nexport type MyMutationUserBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationUserBoolExp>>>;\n  _not?: Maybe<MyMutationUserBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationUserBoolExp>>>;\n  auth0_user_id?: Maybe<MyMutationStringComparisonExp>;\n  channel_thread_messages?: Maybe<MyMutationChannelThreadMessageBoolExp>;\n  channels?: Maybe<MyMutationChannelBoolExp>;\n  id?: Maybe<MyMutationIntComparisonExp>;\n  last_seen?: Maybe<MyMutationTimestamptzComparisonExp>;\n  last_typed?: Maybe<MyMutationTimestamptzComparisonExp>;\n  messages?: Maybe<MyMutationMessageBoolExp>;\n  user_channels?: Maybe<MyMutationUserChannelsBoolExp>;\n  username?: Maybe<MyMutationStringComparisonExp>;\n};\n\nexport type MyMutationUserChannelsBoolExp = {\n  _and?: Maybe<Array<Maybe<MyMutationUserChannelsBoolExp>>>;\n  _not?: Maybe<MyMutationUserChannelsBoolExp>;\n  _or?: Maybe<Array<Maybe<MyMutationUserChannelsBoolExp>>>;\n  channel?: Maybe<MyMutationChannelBoolExp>;\n  channel_id?: Maybe<MyMutationIntComparisonExp>;\n  user?: Maybe<MyMutationUserBoolExp>;\n  user_id?: Maybe<MyMutationStringComparisonExp>;\n};\n\nexport type SampleInput = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\nexport type SampleOutput = {\n  __typename?: 'SampleOutput';\n  accessToken: Scalars['String'];\n};\n\n/** expression to compare columns of type String. All fields are combined with logical 'AND'. */\nexport type String_Comparison_Exp = {\n  _eq?: Maybe<Scalars['String']>;\n  _gt?: Maybe<Scalars['String']>;\n  _gte?: Maybe<Scalars['String']>;\n  _ilike?: Maybe<Scalars['String']>;\n  _in?: Maybe<Array<Scalars['String']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _like?: Maybe<Scalars['String']>;\n  _lt?: Maybe<Scalars['String']>;\n  _lte?: Maybe<Scalars['String']>;\n  _neq?: Maybe<Scalars['String']>;\n  _nilike?: Maybe<Scalars['String']>;\n  _nin?: Maybe<Array<Scalars['String']>>;\n  _nlike?: Maybe<Scalars['String']>;\n  _nsimilar?: Maybe<Scalars['String']>;\n  _similar?: Maybe<Scalars['String']>;\n};\n\nexport enum ValidateAndAddDirectMessageChannelTypeEnum {\n  /** this channel type is for chat messages in a private or public channel */\n  ChatMessage = 'CHAT_MESSAGE',\n  /** this channel type is for direct messages */\n  DirectMessage = 'DIRECT_MESSAGE'\n}\n\n/** columns and relationships of \"channel\" */\nexport type Channel = {\n  __typename?: 'channel';\n  /** An object relationship */\n  channelTypeByChannelType: Channel_Type;\n  /** An array relationship */\n  channel_polls: Array<Channel_Poll>;\n  /** An aggregated array relationship */\n  channel_polls_aggregate: Channel_Poll_Aggregate;\n  channel_type: Channel_Type_Enum;\n  id: Scalars['Int'];\n  is_private: Scalars['Boolean'];\n  /** An array relationship */\n  messages: Array<Message>;\n  /** An aggregated array relationship */\n  messages_aggregate: Message_Aggregate;\n  name: Scalars['String'];\n  owner_id?: Maybe<Scalars['String']>;\n  /** An object relationship */\n  user?: Maybe<User>;\n  /** An array relationship */\n  user_channels: Array<User_Channels>;\n  /** An aggregated array relationship */\n  user_channels_aggregate: User_Channels_Aggregate;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelChannel_PollsArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelChannel_Polls_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelMessagesArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelMessages_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelUser_ChannelsArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel\" */\nexport type ChannelUser_Channels_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n/** aggregated selection of \"channel\" */\nexport type Channel_Aggregate = {\n  __typename?: 'channel_aggregate';\n  aggregate?: Maybe<Channel_Aggregate_Fields>;\n  nodes: Array<Channel>;\n};\n\n/** aggregate fields of \"channel\" */\nexport type Channel_Aggregate_Fields = {\n  __typename?: 'channel_aggregate_fields';\n  avg?: Maybe<Channel_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Channel_Max_Fields>;\n  min?: Maybe<Channel_Min_Fields>;\n  stddev?: Maybe<Channel_Stddev_Fields>;\n  stddev_pop?: Maybe<Channel_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Channel_Stddev_Samp_Fields>;\n  sum?: Maybe<Channel_Sum_Fields>;\n  var_pop?: Maybe<Channel_Var_Pop_Fields>;\n  var_samp?: Maybe<Channel_Var_Samp_Fields>;\n  variance?: Maybe<Channel_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"channel\" */\nexport type Channel_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Channel_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"channel\" */\nexport type Channel_Aggregate_Order_By = {\n  avg?: Maybe<Channel_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Channel_Max_Order_By>;\n  min?: Maybe<Channel_Min_Order_By>;\n  stddev?: Maybe<Channel_Stddev_Order_By>;\n  stddev_pop?: Maybe<Channel_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Channel_Stddev_Samp_Order_By>;\n  sum?: Maybe<Channel_Sum_Order_By>;\n  var_pop?: Maybe<Channel_Var_Pop_Order_By>;\n  var_samp?: Maybe<Channel_Var_Samp_Order_By>;\n  variance?: Maybe<Channel_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"channel\" */\nexport type Channel_Arr_Rel_Insert_Input = {\n  data: Array<Channel_Insert_Input>;\n  on_conflict?: Maybe<Channel_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Channel_Avg_Fields = {\n  __typename?: 'channel_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"channel\" */\nexport type Channel_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"channel\". All fields are combined with a logical 'AND'. */\nexport type Channel_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Channel_Bool_Exp>>>;\n  _not?: Maybe<Channel_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Channel_Bool_Exp>>>;\n  channelTypeByChannelType?: Maybe<Channel_Type_Bool_Exp>;\n  channel_polls?: Maybe<Channel_Poll_Bool_Exp>;\n  channel_type?: Maybe<Channel_Type_Enum_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  is_private?: Maybe<Boolean_Comparison_Exp>;\n  messages?: Maybe<Message_Bool_Exp>;\n  name?: Maybe<String_Comparison_Exp>;\n  owner_id?: Maybe<String_Comparison_Exp>;\n  user?: Maybe<User_Bool_Exp>;\n  user_channels?: Maybe<User_Channels_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"channel\" */\nexport enum Channel_Constraint {\n  /** unique or primary key constraint */\n  ChannelNameKey = 'channel_name_key',\n  /** unique or primary key constraint */\n  ChannelPkey = 'channel_pkey'\n}\n\n/** input type for incrementing integer column in table \"channel\" */\nexport type Channel_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"channel\" */\nexport type Channel_Insert_Input = {\n  channelTypeByChannelType?: Maybe<Channel_Type_Obj_Rel_Insert_Input>;\n  channel_polls?: Maybe<Channel_Poll_Arr_Rel_Insert_Input>;\n  channel_type?: Maybe<Channel_Type_Enum>;\n  id?: Maybe<Scalars['Int']>;\n  is_private?: Maybe<Scalars['Boolean']>;\n  messages?: Maybe<Message_Arr_Rel_Insert_Input>;\n  name?: Maybe<Scalars['String']>;\n  owner_id?: Maybe<Scalars['String']>;\n  user?: Maybe<User_Obj_Rel_Insert_Input>;\n  user_channels?: Maybe<User_Channels_Arr_Rel_Insert_Input>;\n};\n\n/** aggregate max on columns */\nexport type Channel_Max_Fields = {\n  __typename?: 'channel_max_fields';\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  owner_id?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"channel\" */\nexport type Channel_Max_Order_By = {\n  id?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Channel_Min_Fields = {\n  __typename?: 'channel_min_fields';\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  owner_id?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"channel\" */\nexport type Channel_Min_Order_By = {\n  id?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"channel\" */\nexport type Channel_Mutation_Response = {\n  __typename?: 'channel_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Channel>;\n};\n\n/** input type for inserting object relation for remote table \"channel\" */\nexport type Channel_Obj_Rel_Insert_Input = {\n  data: Channel_Insert_Input;\n  on_conflict?: Maybe<Channel_On_Conflict>;\n};\n\n/** on conflict condition type for table \"channel\" */\nexport type Channel_On_Conflict = {\n  constraint: Channel_Constraint;\n  update_columns: Array<Channel_Update_Column>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"channel\" */\nexport type Channel_Order_By = {\n  channelTypeByChannelType?: Maybe<Channel_Type_Order_By>;\n  channel_polls_aggregate?: Maybe<Channel_Poll_Aggregate_Order_By>;\n  channel_type?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  is_private?: Maybe<Order_By>;\n  messages_aggregate?: Maybe<Message_Aggregate_Order_By>;\n  name?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n  user?: Maybe<User_Order_By>;\n  user_channels_aggregate?: Maybe<User_Channels_Aggregate_Order_By>;\n};\n\n/** primary key columns input for table: \"channel\" */\nexport type Channel_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** columns and relationships of \"channel_poll\" */\nexport type Channel_Poll = {\n  __typename?: 'channel_poll';\n  /** An object relationship */\n  channel: Channel;\n  channel_id: Scalars['Int'];\n  id: Scalars['Int'];\n  is_active?: Maybe<Scalars['Boolean']>;\n  /** An object relationship */\n  poll_question: Poll_Questions;\n  poll_questions: Scalars['Int'];\n};\n\n/** aggregated selection of \"channel_poll\" */\nexport type Channel_Poll_Aggregate = {\n  __typename?: 'channel_poll_aggregate';\n  aggregate?: Maybe<Channel_Poll_Aggregate_Fields>;\n  nodes: Array<Channel_Poll>;\n};\n\n/** aggregate fields of \"channel_poll\" */\nexport type Channel_Poll_Aggregate_Fields = {\n  __typename?: 'channel_poll_aggregate_fields';\n  avg?: Maybe<Channel_Poll_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Channel_Poll_Max_Fields>;\n  min?: Maybe<Channel_Poll_Min_Fields>;\n  stddev?: Maybe<Channel_Poll_Stddev_Fields>;\n  stddev_pop?: Maybe<Channel_Poll_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Channel_Poll_Stddev_Samp_Fields>;\n  sum?: Maybe<Channel_Poll_Sum_Fields>;\n  var_pop?: Maybe<Channel_Poll_Var_Pop_Fields>;\n  var_samp?: Maybe<Channel_Poll_Var_Samp_Fields>;\n  variance?: Maybe<Channel_Poll_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"channel_poll\" */\nexport type Channel_Poll_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Channel_Poll_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"channel_poll\" */\nexport type Channel_Poll_Aggregate_Order_By = {\n  avg?: Maybe<Channel_Poll_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Channel_Poll_Max_Order_By>;\n  min?: Maybe<Channel_Poll_Min_Order_By>;\n  stddev?: Maybe<Channel_Poll_Stddev_Order_By>;\n  stddev_pop?: Maybe<Channel_Poll_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Channel_Poll_Stddev_Samp_Order_By>;\n  sum?: Maybe<Channel_Poll_Sum_Order_By>;\n  var_pop?: Maybe<Channel_Poll_Var_Pop_Order_By>;\n  var_samp?: Maybe<Channel_Poll_Var_Samp_Order_By>;\n  variance?: Maybe<Channel_Poll_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"channel_poll\" */\nexport type Channel_Poll_Arr_Rel_Insert_Input = {\n  data: Array<Channel_Poll_Insert_Input>;\n  on_conflict?: Maybe<Channel_Poll_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Channel_Poll_Avg_Fields = {\n  __typename?: 'channel_poll_avg_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Avg_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"channel_poll\". All fields are combined with a logical 'AND'. */\nexport type Channel_Poll_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Channel_Poll_Bool_Exp>>>;\n  _not?: Maybe<Channel_Poll_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Channel_Poll_Bool_Exp>>>;\n  channel?: Maybe<Channel_Bool_Exp>;\n  channel_id?: Maybe<Int_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  is_active?: Maybe<Boolean_Comparison_Exp>;\n  poll_question?: Maybe<Poll_Questions_Bool_Exp>;\n  poll_questions?: Maybe<Int_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"channel_poll\" */\nexport enum Channel_Poll_Constraint {\n  /** unique or primary key constraint */\n  ChannelPollPkey = 'channel_poll_pkey'\n}\n\n/** input type for incrementing integer column in table \"channel_poll\" */\nexport type Channel_Poll_Inc_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"channel_poll\" */\nexport type Channel_Poll_Insert_Input = {\n  channel?: Maybe<Channel_Obj_Rel_Insert_Input>;\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  is_active?: Maybe<Scalars['Boolean']>;\n  poll_question?: Maybe<Poll_Questions_Obj_Rel_Insert_Input>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Channel_Poll_Max_Fields = {\n  __typename?: 'channel_poll_max_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** order by max() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Max_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Channel_Poll_Min_Fields = {\n  __typename?: 'channel_poll_min_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** order by min() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Min_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"channel_poll\" */\nexport type Channel_Poll_Mutation_Response = {\n  __typename?: 'channel_poll_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Channel_Poll>;\n};\n\n/** input type for inserting object relation for remote table \"channel_poll\" */\nexport type Channel_Poll_Obj_Rel_Insert_Input = {\n  data: Channel_Poll_Insert_Input;\n  on_conflict?: Maybe<Channel_Poll_On_Conflict>;\n};\n\n/** on conflict condition type for table \"channel_poll\" */\nexport type Channel_Poll_On_Conflict = {\n  constraint: Channel_Poll_Constraint;\n  update_columns: Array<Channel_Poll_Update_Column>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"channel_poll\" */\nexport type Channel_Poll_Order_By = {\n  channel?: Maybe<Channel_Order_By>;\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  is_active?: Maybe<Order_By>;\n  poll_question?: Maybe<Poll_Questions_Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"channel_poll\" */\nexport type Channel_Poll_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"channel_poll\" */\nexport enum Channel_Poll_Select_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsActive = 'is_active',\n  /** column name */\n  PollQuestions = 'poll_questions'\n}\n\n/** input type for updating data in table \"channel_poll\" */\nexport type Channel_Poll_Set_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  is_active?: Maybe<Scalars['Boolean']>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Channel_Poll_Stddev_Fields = {\n  __typename?: 'channel_poll_stddev_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Stddev_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Channel_Poll_Stddev_Pop_Fields = {\n  __typename?: 'channel_poll_stddev_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Stddev_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Channel_Poll_Stddev_Samp_Fields = {\n  __typename?: 'channel_poll_stddev_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Stddev_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Channel_Poll_Sum_Fields = {\n  __typename?: 'channel_poll_sum_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_questions?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Sum_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** update columns of table \"channel_poll\" */\nexport enum Channel_Poll_Update_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsActive = 'is_active',\n  /** column name */\n  PollQuestions = 'poll_questions'\n}\n\n/** aggregate var_pop on columns */\nexport type Channel_Poll_Var_Pop_Fields = {\n  __typename?: 'channel_poll_var_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Var_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Channel_Poll_Var_Samp_Fields = {\n  __typename?: 'channel_poll_var_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Var_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Channel_Poll_Variance_Fields = {\n  __typename?: 'channel_poll_variance_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  poll_questions?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"channel_poll\" */\nexport type Channel_Poll_Variance_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_questions?: Maybe<Order_By>;\n};\n\n/** select columns of table \"channel\" */\nexport enum Channel_Select_Column {\n  /** column name */\n  ChannelType = 'channel_type',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsPrivate = 'is_private',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  OwnerId = 'owner_id'\n}\n\n/** input type for updating data in table \"channel\" */\nexport type Channel_Set_Input = {\n  channel_type?: Maybe<Channel_Type_Enum>;\n  id?: Maybe<Scalars['Int']>;\n  is_private?: Maybe<Scalars['Boolean']>;\n  name?: Maybe<Scalars['String']>;\n  owner_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type Channel_Stddev_Fields = {\n  __typename?: 'channel_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"channel\" */\nexport type Channel_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Channel_Stddev_Pop_Fields = {\n  __typename?: 'channel_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"channel\" */\nexport type Channel_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Channel_Stddev_Samp_Fields = {\n  __typename?: 'channel_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"channel\" */\nexport type Channel_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Channel_Sum_Fields = {\n  __typename?: 'channel_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"channel\" */\nexport type Channel_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"channel_thread\" */\nexport type Channel_Thread = {\n  __typename?: 'channel_thread';\n  /** An array relationship */\n  channel_thread_messages: Array<Channel_Thread_Message>;\n  /** An aggregated array relationship */\n  channel_thread_messages_aggregate: Channel_Thread_Message_Aggregate;\n  id: Scalars['Int'];\n  /** An object relationship */\n  message?: Maybe<Message>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n\n/** columns and relationships of \"channel_thread\" */\nexport type Channel_ThreadChannel_Thread_MessagesArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel_thread\" */\nexport type Channel_ThreadChannel_Thread_Messages_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n/** aggregated selection of \"channel_thread\" */\nexport type Channel_Thread_Aggregate = {\n  __typename?: 'channel_thread_aggregate';\n  aggregate?: Maybe<Channel_Thread_Aggregate_Fields>;\n  nodes: Array<Channel_Thread>;\n};\n\n/** aggregate fields of \"channel_thread\" */\nexport type Channel_Thread_Aggregate_Fields = {\n  __typename?: 'channel_thread_aggregate_fields';\n  avg?: Maybe<Channel_Thread_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Channel_Thread_Max_Fields>;\n  min?: Maybe<Channel_Thread_Min_Fields>;\n  stddev?: Maybe<Channel_Thread_Stddev_Fields>;\n  stddev_pop?: Maybe<Channel_Thread_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Channel_Thread_Stddev_Samp_Fields>;\n  sum?: Maybe<Channel_Thread_Sum_Fields>;\n  var_pop?: Maybe<Channel_Thread_Var_Pop_Fields>;\n  var_samp?: Maybe<Channel_Thread_Var_Samp_Fields>;\n  variance?: Maybe<Channel_Thread_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"channel_thread\" */\nexport type Channel_Thread_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Channel_Thread_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"channel_thread\" */\nexport type Channel_Thread_Aggregate_Order_By = {\n  avg?: Maybe<Channel_Thread_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Channel_Thread_Max_Order_By>;\n  min?: Maybe<Channel_Thread_Min_Order_By>;\n  stddev?: Maybe<Channel_Thread_Stddev_Order_By>;\n  stddev_pop?: Maybe<Channel_Thread_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Channel_Thread_Stddev_Samp_Order_By>;\n  sum?: Maybe<Channel_Thread_Sum_Order_By>;\n  var_pop?: Maybe<Channel_Thread_Var_Pop_Order_By>;\n  var_samp?: Maybe<Channel_Thread_Var_Samp_Order_By>;\n  variance?: Maybe<Channel_Thread_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"channel_thread\" */\nexport type Channel_Thread_Arr_Rel_Insert_Input = {\n  data: Array<Channel_Thread_Insert_Input>;\n  on_conflict?: Maybe<Channel_Thread_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Channel_Thread_Avg_Fields = {\n  __typename?: 'channel_thread_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"channel_thread\". All fields are combined with a logical 'AND'. */\nexport type Channel_Thread_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Channel_Thread_Bool_Exp>>>;\n  _not?: Maybe<Channel_Thread_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Channel_Thread_Bool_Exp>>>;\n  channel_thread_messages?: Maybe<Channel_Thread_Message_Bool_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  message?: Maybe<Message_Bool_Exp>;\n  message_id?: Maybe<Int_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"channel_thread\" */\nexport enum Channel_Thread_Constraint {\n  /** unique or primary key constraint */\n  ChannelThreadMessageIdKey = 'channel_thread_message_id_key',\n  /** unique or primary key constraint */\n  ChannelThreadPkey = 'channel_thread_pkey'\n}\n\n/** input type for incrementing integer column in table \"channel_thread\" */\nexport type Channel_Thread_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"channel_thread\" */\nexport type Channel_Thread_Insert_Input = {\n  channel_thread_messages?: Maybe<Channel_Thread_Message_Arr_Rel_Insert_Input>;\n  id?: Maybe<Scalars['Int']>;\n  message?: Maybe<Message_Obj_Rel_Insert_Input>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Channel_Thread_Max_Fields = {\n  __typename?: 'channel_thread_max_fields';\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by max() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Max_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"channel_thread_message\" */\nexport type Channel_Thread_Message = {\n  __typename?: 'channel_thread_message';\n  /** An object relationship */\n  channel_thread: Channel_Thread;\n  channel_thread_id: Scalars['Int'];\n  id: Scalars['Int'];\n  image?: Maybe<Scalars['String']>;\n  message: Scalars['String'];\n  timestamp: Scalars['timestamptz'];\n  /** An object relationship */\n  user: User;\n  user_id: Scalars['String'];\n};\n\n/** aggregated selection of \"channel_thread_message\" */\nexport type Channel_Thread_Message_Aggregate = {\n  __typename?: 'channel_thread_message_aggregate';\n  aggregate?: Maybe<Channel_Thread_Message_Aggregate_Fields>;\n  nodes: Array<Channel_Thread_Message>;\n};\n\n/** aggregate fields of \"channel_thread_message\" */\nexport type Channel_Thread_Message_Aggregate_Fields = {\n  __typename?: 'channel_thread_message_aggregate_fields';\n  avg?: Maybe<Channel_Thread_Message_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Channel_Thread_Message_Max_Fields>;\n  min?: Maybe<Channel_Thread_Message_Min_Fields>;\n  stddev?: Maybe<Channel_Thread_Message_Stddev_Fields>;\n  stddev_pop?: Maybe<Channel_Thread_Message_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Channel_Thread_Message_Stddev_Samp_Fields>;\n  sum?: Maybe<Channel_Thread_Message_Sum_Fields>;\n  var_pop?: Maybe<Channel_Thread_Message_Var_Pop_Fields>;\n  var_samp?: Maybe<Channel_Thread_Message_Var_Samp_Fields>;\n  variance?: Maybe<Channel_Thread_Message_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"channel_thread_message\" */\nexport type Channel_Thread_Message_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Aggregate_Order_By = {\n  avg?: Maybe<Channel_Thread_Message_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Channel_Thread_Message_Max_Order_By>;\n  min?: Maybe<Channel_Thread_Message_Min_Order_By>;\n  stddev?: Maybe<Channel_Thread_Message_Stddev_Order_By>;\n  stddev_pop?: Maybe<Channel_Thread_Message_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Channel_Thread_Message_Stddev_Samp_Order_By>;\n  sum?: Maybe<Channel_Thread_Message_Sum_Order_By>;\n  var_pop?: Maybe<Channel_Thread_Message_Var_Pop_Order_By>;\n  var_samp?: Maybe<Channel_Thread_Message_Var_Samp_Order_By>;\n  variance?: Maybe<Channel_Thread_Message_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Arr_Rel_Insert_Input = {\n  data: Array<Channel_Thread_Message_Insert_Input>;\n  on_conflict?: Maybe<Channel_Thread_Message_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Channel_Thread_Message_Avg_Fields = {\n  __typename?: 'channel_thread_message_avg_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Avg_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"channel_thread_message\". All fields are combined with a logical 'AND'. */\nexport type Channel_Thread_Message_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Channel_Thread_Message_Bool_Exp>>>;\n  _not?: Maybe<Channel_Thread_Message_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Channel_Thread_Message_Bool_Exp>>>;\n  channel_thread?: Maybe<Channel_Thread_Bool_Exp>;\n  channel_thread_id?: Maybe<Int_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  image?: Maybe<String_Comparison_Exp>;\n  message?: Maybe<String_Comparison_Exp>;\n  timestamp?: Maybe<Timestamptz_Comparison_Exp>;\n  user?: Maybe<User_Bool_Exp>;\n  user_id?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"channel_thread_message\" */\nexport enum Channel_Thread_Message_Constraint {\n  /** unique or primary key constraint */\n  ChannelThreadMessagePkey = 'channel_thread_message_pkey'\n}\n\n/** input type for incrementing integer column in table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Inc_Input = {\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Insert_Input = {\n  channel_thread?: Maybe<Channel_Thread_Obj_Rel_Insert_Input>;\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  message?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user?: Maybe<User_Obj_Rel_Insert_Input>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Channel_Thread_Message_Max_Fields = {\n  __typename?: 'channel_thread_message_max_fields';\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  message?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Max_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  message?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Channel_Thread_Message_Min_Fields = {\n  __typename?: 'channel_thread_message_min_fields';\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  message?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Min_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  message?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Mutation_Response = {\n  __typename?: 'channel_thread_message_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Channel_Thread_Message>;\n};\n\n/** input type for inserting object relation for remote table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Obj_Rel_Insert_Input = {\n  data: Channel_Thread_Message_Insert_Input;\n  on_conflict?: Maybe<Channel_Thread_Message_On_Conflict>;\n};\n\n/** on conflict condition type for table \"channel_thread_message\" */\nexport type Channel_Thread_Message_On_Conflict = {\n  constraint: Channel_Thread_Message_Constraint;\n  update_columns: Array<Channel_Thread_Message_Update_Column>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"channel_thread_message\" */\nexport type Channel_Thread_Message_Order_By = {\n  channel_thread?: Maybe<Channel_Thread_Order_By>;\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  message?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user?: Maybe<User_Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"channel_thread_message\" */\nexport type Channel_Thread_Message_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"channel_thread_message\" */\nexport enum Channel_Thread_Message_Select_Column {\n  /** column name */\n  ChannelThreadId = 'channel_thread_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Image = 'image',\n  /** column name */\n  Message = 'message',\n  /** column name */\n  Timestamp = 'timestamp',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** input type for updating data in table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Set_Input = {\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  message?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type Channel_Thread_Message_Stddev_Fields = {\n  __typename?: 'channel_thread_message_stddev_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Stddev_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Channel_Thread_Message_Stddev_Pop_Fields = {\n  __typename?: 'channel_thread_message_stddev_pop_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Stddev_Pop_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Channel_Thread_Message_Stddev_Samp_Fields = {\n  __typename?: 'channel_thread_message_stddev_samp_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Stddev_Samp_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Channel_Thread_Message_Sum_Fields = {\n  __typename?: 'channel_thread_message_sum_fields';\n  channel_thread_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Sum_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"channel_thread_message\" */\nexport enum Channel_Thread_Message_Update_Column {\n  /** column name */\n  ChannelThreadId = 'channel_thread_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Image = 'image',\n  /** column name */\n  Message = 'message',\n  /** column name */\n  Timestamp = 'timestamp',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Channel_Thread_Message_Var_Pop_Fields = {\n  __typename?: 'channel_thread_message_var_pop_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Var_Pop_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Channel_Thread_Message_Var_Samp_Fields = {\n  __typename?: 'channel_thread_message_var_samp_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Var_Samp_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Channel_Thread_Message_Variance_Fields = {\n  __typename?: 'channel_thread_message_variance_fields';\n  channel_thread_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"channel_thread_message\" */\nexport type Channel_Thread_Message_Variance_Order_By = {\n  channel_thread_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Channel_Thread_Min_Fields = {\n  __typename?: 'channel_thread_min_fields';\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by min() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Min_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"channel_thread\" */\nexport type Channel_Thread_Mutation_Response = {\n  __typename?: 'channel_thread_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Channel_Thread>;\n};\n\n/** input type for inserting object relation for remote table \"channel_thread\" */\nexport type Channel_Thread_Obj_Rel_Insert_Input = {\n  data: Channel_Thread_Insert_Input;\n  on_conflict?: Maybe<Channel_Thread_On_Conflict>;\n};\n\n/** on conflict condition type for table \"channel_thread\" */\nexport type Channel_Thread_On_Conflict = {\n  constraint: Channel_Thread_Constraint;\n  update_columns: Array<Channel_Thread_Update_Column>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"channel_thread\" */\nexport type Channel_Thread_Order_By = {\n  channel_thread_messages_aggregate?: Maybe<Channel_Thread_Message_Aggregate_Order_By>;\n  id?: Maybe<Order_By>;\n  message?: Maybe<Message_Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"channel_thread\" */\nexport type Channel_Thread_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"channel_thread\" */\nexport enum Channel_Thread_Select_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  MessageId = 'message_id'\n}\n\n/** input type for updating data in table \"channel_thread\" */\nexport type Channel_Thread_Set_Input = {\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Channel_Thread_Stddev_Fields = {\n  __typename?: 'channel_thread_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Channel_Thread_Stddev_Pop_Fields = {\n  __typename?: 'channel_thread_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Channel_Thread_Stddev_Samp_Fields = {\n  __typename?: 'channel_thread_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Channel_Thread_Sum_Fields = {\n  __typename?: 'channel_thread_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"channel_thread\" */\nexport enum Channel_Thread_Update_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  MessageId = 'message_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Channel_Thread_Var_Pop_Fields = {\n  __typename?: 'channel_thread_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Channel_Thread_Var_Samp_Fields = {\n  __typename?: 'channel_thread_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Channel_Thread_Variance_Fields = {\n  __typename?: 'channel_thread_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"channel_thread\" */\nexport type Channel_Thread_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"channel_type\" */\nexport type Channel_Type = {\n  __typename?: 'channel_type';\n  /** An array relationship */\n  channels: Array<Channel>;\n  /** An aggregated array relationship */\n  channels_aggregate: Channel_Aggregate;\n  comment?: Maybe<Scalars['String']>;\n  value: Scalars['String'];\n};\n\n\n/** columns and relationships of \"channel_type\" */\nexport type Channel_TypeChannelsArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"channel_type\" */\nexport type Channel_TypeChannels_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n/** aggregated selection of \"channel_type\" */\nexport type Channel_Type_Aggregate = {\n  __typename?: 'channel_type_aggregate';\n  aggregate?: Maybe<Channel_Type_Aggregate_Fields>;\n  nodes: Array<Channel_Type>;\n};\n\n/** aggregate fields of \"channel_type\" */\nexport type Channel_Type_Aggregate_Fields = {\n  __typename?: 'channel_type_aggregate_fields';\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Channel_Type_Max_Fields>;\n  min?: Maybe<Channel_Type_Min_Fields>;\n};\n\n\n/** aggregate fields of \"channel_type\" */\nexport type Channel_Type_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Channel_Type_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"channel_type\" */\nexport type Channel_Type_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<Channel_Type_Max_Order_By>;\n  min?: Maybe<Channel_Type_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"channel_type\" */\nexport type Channel_Type_Arr_Rel_Insert_Input = {\n  data: Array<Channel_Type_Insert_Input>;\n  on_conflict?: Maybe<Channel_Type_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"channel_type\". All fields are combined with a logical 'AND'. */\nexport type Channel_Type_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Channel_Type_Bool_Exp>>>;\n  _not?: Maybe<Channel_Type_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Channel_Type_Bool_Exp>>>;\n  channels?: Maybe<Channel_Bool_Exp>;\n  comment?: Maybe<String_Comparison_Exp>;\n  value?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"channel_type\" */\nexport enum Channel_Type_Constraint {\n  /** unique or primary key constraint */\n  ChannelTypePkey = 'channel_type_pkey'\n}\n\nexport enum Channel_Type_Enum {\n  /** This represents a chat message */\n  ChatMessage = 'CHAT_MESSAGE',\n  /** This represents a direct message */\n  DirectMessage = 'DIRECT_MESSAGE'\n}\n\n/** expression to compare columns of type channel_type_enum. All fields are combined with logical 'AND'. */\nexport type Channel_Type_Enum_Comparison_Exp = {\n  _eq?: Maybe<Channel_Type_Enum>;\n  _in?: Maybe<Array<Channel_Type_Enum>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<Channel_Type_Enum>;\n  _nin?: Maybe<Array<Channel_Type_Enum>>;\n};\n\n/** input type for inserting data into table \"channel_type\" */\nexport type Channel_Type_Insert_Input = {\n  channels?: Maybe<Channel_Arr_Rel_Insert_Input>;\n  comment?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Channel_Type_Max_Fields = {\n  __typename?: 'channel_type_max_fields';\n  comment?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"channel_type\" */\nexport type Channel_Type_Max_Order_By = {\n  comment?: Maybe<Order_By>;\n  value?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Channel_Type_Min_Fields = {\n  __typename?: 'channel_type_min_fields';\n  comment?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"channel_type\" */\nexport type Channel_Type_Min_Order_By = {\n  comment?: Maybe<Order_By>;\n  value?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"channel_type\" */\nexport type Channel_Type_Mutation_Response = {\n  __typename?: 'channel_type_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Channel_Type>;\n};\n\n/** input type for inserting object relation for remote table \"channel_type\" */\nexport type Channel_Type_Obj_Rel_Insert_Input = {\n  data: Channel_Type_Insert_Input;\n  on_conflict?: Maybe<Channel_Type_On_Conflict>;\n};\n\n/** on conflict condition type for table \"channel_type\" */\nexport type Channel_Type_On_Conflict = {\n  constraint: Channel_Type_Constraint;\n  update_columns: Array<Channel_Type_Update_Column>;\n  where?: Maybe<Channel_Type_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"channel_type\" */\nexport type Channel_Type_Order_By = {\n  channels_aggregate?: Maybe<Channel_Aggregate_Order_By>;\n  comment?: Maybe<Order_By>;\n  value?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"channel_type\" */\nexport type Channel_Type_Pk_Columns_Input = {\n  value: Scalars['String'];\n};\n\n/** select columns of table \"channel_type\" */\nexport enum Channel_Type_Select_Column {\n  /** column name */\n  Comment = 'comment',\n  /** column name */\n  Value = 'value'\n}\n\n/** input type for updating data in table \"channel_type\" */\nexport type Channel_Type_Set_Input = {\n  comment?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n};\n\n/** update columns of table \"channel_type\" */\nexport enum Channel_Type_Update_Column {\n  /** column name */\n  Comment = 'comment',\n  /** column name */\n  Value = 'value'\n}\n\n/** update columns of table \"channel\" */\nexport enum Channel_Update_Column {\n  /** column name */\n  ChannelType = 'channel_type',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsPrivate = 'is_private',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  OwnerId = 'owner_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Channel_Var_Pop_Fields = {\n  __typename?: 'channel_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"channel\" */\nexport type Channel_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Channel_Var_Samp_Fields = {\n  __typename?: 'channel_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"channel\" */\nexport type Channel_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Channel_Variance_Fields = {\n  __typename?: 'channel_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"channel\" */\nexport type Channel_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n\n/** expression to compare columns of type json. All fields are combined with logical 'AND'. */\nexport type Json_Comparison_Exp = {\n  _eq?: Maybe<Scalars['json']>;\n  _gt?: Maybe<Scalars['json']>;\n  _gte?: Maybe<Scalars['json']>;\n  _in?: Maybe<Array<Scalars['json']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['json']>;\n  _lte?: Maybe<Scalars['json']>;\n  _neq?: Maybe<Scalars['json']>;\n  _nin?: Maybe<Array<Scalars['json']>>;\n};\n\n/** columns and relationships of \"message\" */\nexport type Message = {\n  __typename?: 'message';\n  /** An object relationship */\n  channel: Channel;\n  channel_id: Scalars['Int'];\n  /** An array relationship */\n  channel_threads: Array<Channel_Thread>;\n  /** An aggregated array relationship */\n  channel_threads_aggregate: Channel_Thread_Aggregate;\n  deleted?: Maybe<Scalars['Boolean']>;\n  id: Scalars['Int'];\n  image?: Maybe<Scalars['String']>;\n  text: Scalars['String'];\n  timestamp: Scalars['timestamptz'];\n  /** An object relationship */\n  user: User;\n  user_id: Scalars['String'];\n};\n\n\n/** columns and relationships of \"message\" */\nexport type MessageChannel_ThreadsArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"message\" */\nexport type MessageChannel_Threads_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n/** aggregated selection of \"message\" */\nexport type Message_Aggregate = {\n  __typename?: 'message_aggregate';\n  aggregate?: Maybe<Message_Aggregate_Fields>;\n  nodes: Array<Message>;\n};\n\n/** aggregate fields of \"message\" */\nexport type Message_Aggregate_Fields = {\n  __typename?: 'message_aggregate_fields';\n  avg?: Maybe<Message_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Message_Max_Fields>;\n  min?: Maybe<Message_Min_Fields>;\n  stddev?: Maybe<Message_Stddev_Fields>;\n  stddev_pop?: Maybe<Message_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Message_Stddev_Samp_Fields>;\n  sum?: Maybe<Message_Sum_Fields>;\n  var_pop?: Maybe<Message_Var_Pop_Fields>;\n  var_samp?: Maybe<Message_Var_Samp_Fields>;\n  variance?: Maybe<Message_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"message\" */\nexport type Message_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Message_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"message\" */\nexport type Message_Aggregate_Order_By = {\n  avg?: Maybe<Message_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Message_Max_Order_By>;\n  min?: Maybe<Message_Min_Order_By>;\n  stddev?: Maybe<Message_Stddev_Order_By>;\n  stddev_pop?: Maybe<Message_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Message_Stddev_Samp_Order_By>;\n  sum?: Maybe<Message_Sum_Order_By>;\n  var_pop?: Maybe<Message_Var_Pop_Order_By>;\n  var_samp?: Maybe<Message_Var_Samp_Order_By>;\n  variance?: Maybe<Message_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"message\" */\nexport type Message_Arr_Rel_Insert_Input = {\n  data: Array<Message_Insert_Input>;\n  on_conflict?: Maybe<Message_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Message_Avg_Fields = {\n  __typename?: 'message_avg_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"message\" */\nexport type Message_Avg_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"message\". All fields are combined with a logical 'AND'. */\nexport type Message_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Message_Bool_Exp>>>;\n  _not?: Maybe<Message_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Message_Bool_Exp>>>;\n  channel?: Maybe<Channel_Bool_Exp>;\n  channel_id?: Maybe<Int_Comparison_Exp>;\n  channel_threads?: Maybe<Channel_Thread_Bool_Exp>;\n  deleted?: Maybe<Boolean_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  image?: Maybe<String_Comparison_Exp>;\n  text?: Maybe<String_Comparison_Exp>;\n  timestamp?: Maybe<Timestamptz_Comparison_Exp>;\n  user?: Maybe<User_Bool_Exp>;\n  user_id?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"message\" */\nexport enum Message_Constraint {\n  /** unique or primary key constraint */\n  MessagePkey = 'message_pkey'\n}\n\n/** columns and relationships of \"message_cursor\" */\nexport type Message_Cursor = {\n  __typename?: 'message_cursor';\n  channel_id: Scalars['Int'];\n  id: Scalars['Int'];\n  message_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n/** aggregated selection of \"message_cursor\" */\nexport type Message_Cursor_Aggregate = {\n  __typename?: 'message_cursor_aggregate';\n  aggregate?: Maybe<Message_Cursor_Aggregate_Fields>;\n  nodes: Array<Message_Cursor>;\n};\n\n/** aggregate fields of \"message_cursor\" */\nexport type Message_Cursor_Aggregate_Fields = {\n  __typename?: 'message_cursor_aggregate_fields';\n  avg?: Maybe<Message_Cursor_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Message_Cursor_Max_Fields>;\n  min?: Maybe<Message_Cursor_Min_Fields>;\n  stddev?: Maybe<Message_Cursor_Stddev_Fields>;\n  stddev_pop?: Maybe<Message_Cursor_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Message_Cursor_Stddev_Samp_Fields>;\n  sum?: Maybe<Message_Cursor_Sum_Fields>;\n  var_pop?: Maybe<Message_Cursor_Var_Pop_Fields>;\n  var_samp?: Maybe<Message_Cursor_Var_Samp_Fields>;\n  variance?: Maybe<Message_Cursor_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"message_cursor\" */\nexport type Message_Cursor_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Message_Cursor_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"message_cursor\" */\nexport type Message_Cursor_Aggregate_Order_By = {\n  avg?: Maybe<Message_Cursor_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Message_Cursor_Max_Order_By>;\n  min?: Maybe<Message_Cursor_Min_Order_By>;\n  stddev?: Maybe<Message_Cursor_Stddev_Order_By>;\n  stddev_pop?: Maybe<Message_Cursor_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Message_Cursor_Stddev_Samp_Order_By>;\n  sum?: Maybe<Message_Cursor_Sum_Order_By>;\n  var_pop?: Maybe<Message_Cursor_Var_Pop_Order_By>;\n  var_samp?: Maybe<Message_Cursor_Var_Samp_Order_By>;\n  variance?: Maybe<Message_Cursor_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"message_cursor\" */\nexport type Message_Cursor_Arr_Rel_Insert_Input = {\n  data: Array<Message_Cursor_Insert_Input>;\n  on_conflict?: Maybe<Message_Cursor_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Message_Cursor_Avg_Fields = {\n  __typename?: 'message_cursor_avg_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Avg_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"message_cursor\". All fields are combined with a logical 'AND'. */\nexport type Message_Cursor_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Message_Cursor_Bool_Exp>>>;\n  _not?: Maybe<Message_Cursor_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Message_Cursor_Bool_Exp>>>;\n  channel_id?: Maybe<Int_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  message_id?: Maybe<Int_Comparison_Exp>;\n  user_id?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"message_cursor\" */\nexport enum Message_Cursor_Constraint {\n  /** unique or primary key constraint */\n  MessageCursorChannelIdUserIdKey = 'message_cursor_channel_id_user_id_key',\n  /** unique or primary key constraint */\n  MessageCursorPkey = 'message_cursor_pkey'\n}\n\n/** input type for incrementing integer column in table \"message_cursor\" */\nexport type Message_Cursor_Inc_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"message_cursor\" */\nexport type Message_Cursor_Insert_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Message_Cursor_Max_Fields = {\n  __typename?: 'message_cursor_max_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Max_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Message_Cursor_Min_Fields = {\n  __typename?: 'message_cursor_min_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Min_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"message_cursor\" */\nexport type Message_Cursor_Mutation_Response = {\n  __typename?: 'message_cursor_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Message_Cursor>;\n};\n\n/** input type for inserting object relation for remote table \"message_cursor\" */\nexport type Message_Cursor_Obj_Rel_Insert_Input = {\n  data: Message_Cursor_Insert_Input;\n  on_conflict?: Maybe<Message_Cursor_On_Conflict>;\n};\n\n/** on conflict condition type for table \"message_cursor\" */\nexport type Message_Cursor_On_Conflict = {\n  constraint: Message_Cursor_Constraint;\n  update_columns: Array<Message_Cursor_Update_Column>;\n  where?: Maybe<Message_Cursor_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"message_cursor\" */\nexport type Message_Cursor_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"message_cursor\" */\nexport type Message_Cursor_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"message_cursor\" */\nexport enum Message_Cursor_Select_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  MessageId = 'message_id',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** input type for updating data in table \"message_cursor\" */\nexport type Message_Cursor_Set_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type Message_Cursor_Stddev_Fields = {\n  __typename?: 'message_cursor_stddev_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Stddev_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Message_Cursor_Stddev_Pop_Fields = {\n  __typename?: 'message_cursor_stddev_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Stddev_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Message_Cursor_Stddev_Samp_Fields = {\n  __typename?: 'message_cursor_stddev_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Stddev_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Message_Cursor_Sum_Fields = {\n  __typename?: 'message_cursor_sum_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Sum_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"message_cursor\" */\nexport enum Message_Cursor_Update_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  MessageId = 'message_id',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Message_Cursor_Var_Pop_Fields = {\n  __typename?: 'message_cursor_var_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Var_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Message_Cursor_Var_Samp_Fields = {\n  __typename?: 'message_cursor_var_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Var_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Message_Cursor_Variance_Fields = {\n  __typename?: 'message_cursor_variance_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n  message_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"message_cursor\" */\nexport type Message_Cursor_Variance_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  message_id?: Maybe<Order_By>;\n};\n\n/** input type for incrementing integer column in table \"message\" */\nexport type Message_Inc_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"message\" */\nexport type Message_Insert_Input = {\n  channel?: Maybe<Channel_Obj_Rel_Insert_Input>;\n  channel_id?: Maybe<Scalars['Int']>;\n  channel_threads?: Maybe<Channel_Thread_Arr_Rel_Insert_Input>;\n  deleted?: Maybe<Scalars['Boolean']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user?: Maybe<User_Obj_Rel_Insert_Input>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Message_Max_Fields = {\n  __typename?: 'message_max_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"message\" */\nexport type Message_Max_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Message_Min_Fields = {\n  __typename?: 'message_min_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"message\" */\nexport type Message_Min_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"message\" */\nexport type Message_Mutation_Response = {\n  __typename?: 'message_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Message>;\n};\n\n/** input type for inserting object relation for remote table \"message\" */\nexport type Message_Obj_Rel_Insert_Input = {\n  data: Message_Insert_Input;\n  on_conflict?: Maybe<Message_On_Conflict>;\n};\n\n/** on conflict condition type for table \"message\" */\nexport type Message_On_Conflict = {\n  constraint: Message_Constraint;\n  update_columns: Array<Message_Update_Column>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"message\" */\nexport type Message_Order_By = {\n  channel?: Maybe<Channel_Order_By>;\n  channel_id?: Maybe<Order_By>;\n  channel_threads_aggregate?: Maybe<Channel_Thread_Aggregate_Order_By>;\n  deleted?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  image?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  timestamp?: Maybe<Order_By>;\n  user?: Maybe<User_Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"message\" */\nexport type Message_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"message\" */\nexport enum Message_Select_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Deleted = 'deleted',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Image = 'image',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  Timestamp = 'timestamp',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** input type for updating data in table \"message\" */\nexport type Message_Set_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  deleted?: Maybe<Scalars['Boolean']>;\n  id?: Maybe<Scalars['Int']>;\n  image?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  timestamp?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type Message_Stddev_Fields = {\n  __typename?: 'message_stddev_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"message\" */\nexport type Message_Stddev_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Message_Stddev_Pop_Fields = {\n  __typename?: 'message_stddev_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"message\" */\nexport type Message_Stddev_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Message_Stddev_Samp_Fields = {\n  __typename?: 'message_stddev_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"message\" */\nexport type Message_Stddev_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Message_Sum_Fields = {\n  __typename?: 'message_sum_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"message\" */\nexport type Message_Sum_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"message\" */\nexport enum Message_Update_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  Deleted = 'deleted',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Image = 'image',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  Timestamp = 'timestamp',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Message_Var_Pop_Fields = {\n  __typename?: 'message_var_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"message\" */\nexport type Message_Var_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Message_Var_Samp_Fields = {\n  __typename?: 'message_var_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"message\" */\nexport type Message_Var_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Message_Variance_Fields = {\n  __typename?: 'message_variance_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"message\" */\nexport type Message_Variance_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** mutation root */\nexport type Mutation_Root = {\n  __typename?: 'mutation_root';\n  /** perform the action: \"addChannelUser\" */\n  addChannelUser?: Maybe<AddChannelUserOutput>;\n  /** delete data from the table: \"channel\" */\n  delete_channel?: Maybe<Channel_Mutation_Response>;\n  /** delete single row from the table: \"channel\" */\n  delete_channel_by_pk?: Maybe<Channel>;\n  /** delete data from the table: \"channel_poll\" */\n  delete_channel_poll?: Maybe<Channel_Poll_Mutation_Response>;\n  /** delete single row from the table: \"channel_poll\" */\n  delete_channel_poll_by_pk?: Maybe<Channel_Poll>;\n  /** delete data from the table: \"channel_thread\" */\n  delete_channel_thread?: Maybe<Channel_Thread_Mutation_Response>;\n  /** delete single row from the table: \"channel_thread\" */\n  delete_channel_thread_by_pk?: Maybe<Channel_Thread>;\n  /** delete data from the table: \"channel_thread_message\" */\n  delete_channel_thread_message?: Maybe<Channel_Thread_Message_Mutation_Response>;\n  /** delete single row from the table: \"channel_thread_message\" */\n  delete_channel_thread_message_by_pk?: Maybe<Channel_Thread_Message>;\n  /** delete data from the table: \"channel_type\" */\n  delete_channel_type?: Maybe<Channel_Type_Mutation_Response>;\n  /** delete single row from the table: \"channel_type\" */\n  delete_channel_type_by_pk?: Maybe<Channel_Type>;\n  /** delete data from the table: \"message\" */\n  delete_message?: Maybe<Message_Mutation_Response>;\n  /** delete single row from the table: \"message\" */\n  delete_message_by_pk?: Maybe<Message>;\n  /** delete data from the table: \"message_cursor\" */\n  delete_message_cursor?: Maybe<Message_Cursor_Mutation_Response>;\n  /** delete single row from the table: \"message_cursor\" */\n  delete_message_cursor_by_pk?: Maybe<Message_Cursor>;\n  /** delete data from the table: \"poll_anwers\" */\n  delete_poll_anwers?: Maybe<Poll_Anwers_Mutation_Response>;\n  /** delete single row from the table: \"poll_anwers\" */\n  delete_poll_anwers_by_pk?: Maybe<Poll_Anwers>;\n  /** delete data from the table: \"poll_questions\" */\n  delete_poll_questions?: Maybe<Poll_Questions_Mutation_Response>;\n  /** delete single row from the table: \"poll_questions\" */\n  delete_poll_questions_by_pk?: Maybe<Poll_Questions>;\n  /** delete data from the table: \"user\" */\n  delete_user?: Maybe<User_Mutation_Response>;\n  /** delete single row from the table: \"user\" */\n  delete_user_by_pk?: Maybe<User>;\n  /** delete data from the table: \"user_channels\" */\n  delete_user_channels?: Maybe<User_Channels_Mutation_Response>;\n  /** delete single row from the table: \"user_channels\" */\n  delete_user_channels_by_pk?: Maybe<User_Channels>;\n  /** delete data from the table: \"user_online\" */\n  delete_user_online?: Maybe<User_Online_Mutation_Response>;\n  /** delete data from the table: \"user_typing\" */\n  delete_user_typing?: Maybe<User_Typing_Mutation_Response>;\n  /** delete data from the table: \"user_votes\" */\n  delete_user_votes?: Maybe<User_Votes_Mutation_Response>;\n  /** delete single row from the table: \"user_votes\" */\n  delete_user_votes_by_pk?: Maybe<User_Votes>;\n  /** insert data into the table: \"channel\" */\n  insert_channel?: Maybe<Channel_Mutation_Response>;\n  /** insert a single row into the table: \"channel\" */\n  insert_channel_one?: Maybe<Channel>;\n  /** insert data into the table: \"channel_poll\" */\n  insert_channel_poll?: Maybe<Channel_Poll_Mutation_Response>;\n  /** insert a single row into the table: \"channel_poll\" */\n  insert_channel_poll_one?: Maybe<Channel_Poll>;\n  /** insert data into the table: \"channel_thread\" */\n  insert_channel_thread?: Maybe<Channel_Thread_Mutation_Response>;\n  /** insert data into the table: \"channel_thread_message\" */\n  insert_channel_thread_message?: Maybe<Channel_Thread_Message_Mutation_Response>;\n  /** insert a single row into the table: \"channel_thread_message\" */\n  insert_channel_thread_message_one?: Maybe<Channel_Thread_Message>;\n  /** insert a single row into the table: \"channel_thread\" */\n  insert_channel_thread_one?: Maybe<Channel_Thread>;\n  /** insert data into the table: \"channel_type\" */\n  insert_channel_type?: Maybe<Channel_Type_Mutation_Response>;\n  /** insert a single row into the table: \"channel_type\" */\n  insert_channel_type_one?: Maybe<Channel_Type>;\n  /** insert data into the table: \"message\" */\n  insert_message?: Maybe<Message_Mutation_Response>;\n  /** insert data into the table: \"message_cursor\" */\n  insert_message_cursor?: Maybe<Message_Cursor_Mutation_Response>;\n  /** insert a single row into the table: \"message_cursor\" */\n  insert_message_cursor_one?: Maybe<Message_Cursor>;\n  /** insert a single row into the table: \"message\" */\n  insert_message_one?: Maybe<Message>;\n  /** insert data into the table: \"poll_anwers\" */\n  insert_poll_anwers?: Maybe<Poll_Anwers_Mutation_Response>;\n  /** insert a single row into the table: \"poll_anwers\" */\n  insert_poll_anwers_one?: Maybe<Poll_Anwers>;\n  /** insert data into the table: \"poll_questions\" */\n  insert_poll_questions?: Maybe<Poll_Questions_Mutation_Response>;\n  /** insert a single row into the table: \"poll_questions\" */\n  insert_poll_questions_one?: Maybe<Poll_Questions>;\n  /** insert data into the table: \"user\" */\n  insert_user?: Maybe<User_Mutation_Response>;\n  /** insert data into the table: \"user_channels\" */\n  insert_user_channels?: Maybe<User_Channels_Mutation_Response>;\n  /** insert a single row into the table: \"user_channels\" */\n  insert_user_channels_one?: Maybe<User_Channels>;\n  /** insert a single row into the table: \"user\" */\n  insert_user_one?: Maybe<User>;\n  /** insert data into the table: \"user_online\" */\n  insert_user_online?: Maybe<User_Online_Mutation_Response>;\n  /** insert a single row into the table: \"user_online\" */\n  insert_user_online_one?: Maybe<User_Online>;\n  /** insert data into the table: \"user_typing\" */\n  insert_user_typing?: Maybe<User_Typing_Mutation_Response>;\n  /** insert a single row into the table: \"user_typing\" */\n  insert_user_typing_one?: Maybe<User_Typing>;\n  /** insert data into the table: \"user_votes\" */\n  insert_user_votes?: Maybe<User_Votes_Mutation_Response>;\n  /** insert a single row into the table: \"user_votes\" */\n  insert_user_votes_one?: Maybe<User_Votes>;\n  /** update data of the table: \"channel\" */\n  update_channel?: Maybe<Channel_Mutation_Response>;\n  /** update single row of the table: \"channel\" */\n  update_channel_by_pk?: Maybe<Channel>;\n  /** update data of the table: \"channel_poll\" */\n  update_channel_poll?: Maybe<Channel_Poll_Mutation_Response>;\n  /** update single row of the table: \"channel_poll\" */\n  update_channel_poll_by_pk?: Maybe<Channel_Poll>;\n  /** update data of the table: \"channel_thread\" */\n  update_channel_thread?: Maybe<Channel_Thread_Mutation_Response>;\n  /** update single row of the table: \"channel_thread\" */\n  update_channel_thread_by_pk?: Maybe<Channel_Thread>;\n  /** update data of the table: \"channel_thread_message\" */\n  update_channel_thread_message?: Maybe<Channel_Thread_Message_Mutation_Response>;\n  /** update single row of the table: \"channel_thread_message\" */\n  update_channel_thread_message_by_pk?: Maybe<Channel_Thread_Message>;\n  /** update data of the table: \"channel_type\" */\n  update_channel_type?: Maybe<Channel_Type_Mutation_Response>;\n  /** update single row of the table: \"channel_type\" */\n  update_channel_type_by_pk?: Maybe<Channel_Type>;\n  /** update data of the table: \"message\" */\n  update_message?: Maybe<Message_Mutation_Response>;\n  /** update single row of the table: \"message\" */\n  update_message_by_pk?: Maybe<Message>;\n  /** update data of the table: \"message_cursor\" */\n  update_message_cursor?: Maybe<Message_Cursor_Mutation_Response>;\n  /** update single row of the table: \"message_cursor\" */\n  update_message_cursor_by_pk?: Maybe<Message_Cursor>;\n  /** update data of the table: \"poll_anwers\" */\n  update_poll_anwers?: Maybe<Poll_Anwers_Mutation_Response>;\n  /** update single row of the table: \"poll_anwers\" */\n  update_poll_anwers_by_pk?: Maybe<Poll_Anwers>;\n  /** update data of the table: \"poll_questions\" */\n  update_poll_questions?: Maybe<Poll_Questions_Mutation_Response>;\n  /** update single row of the table: \"poll_questions\" */\n  update_poll_questions_by_pk?: Maybe<Poll_Questions>;\n  /** update data of the table: \"user\" */\n  update_user?: Maybe<User_Mutation_Response>;\n  /** update single row of the table: \"user\" */\n  update_user_by_pk?: Maybe<User>;\n  /** update data of the table: \"user_channels\" */\n  update_user_channels?: Maybe<User_Channels_Mutation_Response>;\n  /** update single row of the table: \"user_channels\" */\n  update_user_channels_by_pk?: Maybe<User_Channels>;\n  /** update data of the table: \"user_online\" */\n  update_user_online?: Maybe<User_Online_Mutation_Response>;\n  /** update data of the table: \"user_typing\" */\n  update_user_typing?: Maybe<User_Typing_Mutation_Response>;\n  /** update data of the table: \"user_votes\" */\n  update_user_votes?: Maybe<User_Votes_Mutation_Response>;\n  /** update single row of the table: \"user_votes\" */\n  update_user_votes_by_pk?: Maybe<User_Votes>;\n  /** perform the action: \"validateAndAddDirectMessageChannel\" */\n  validateAndAddDirectMessageChannel?: Maybe<ValidateAndAddDirectMessageChannelOutput>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootAddChannelUserArgs = {\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_ChannelArgs = {\n  where: Channel_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_PollArgs = {\n  where: Channel_Poll_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_Poll_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_ThreadArgs = {\n  where: Channel_Thread_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_Thread_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_Thread_MessageArgs = {\n  where: Channel_Thread_Message_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_Thread_Message_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_TypeArgs = {\n  where: Channel_Type_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Channel_Type_By_PkArgs = {\n  value: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_MessageArgs = {\n  where: Message_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Message_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Message_CursorArgs = {\n  where: Message_Cursor_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Message_Cursor_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Poll_AnwersArgs = {\n  where: Poll_Anwers_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Poll_Anwers_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Poll_QuestionsArgs = {\n  where: Poll_Questions_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Poll_Questions_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_UserArgs = {\n  where: User_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_ChannelsArgs = {\n  where: User_Channels_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_Channels_By_PkArgs = {\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_OnlineArgs = {\n  where: User_Online_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_TypingArgs = {\n  where: User_Typing_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_VotesArgs = {\n  where: User_Votes_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_Votes_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_ChannelArgs = {\n  objects: Array<Channel_Insert_Input>;\n  on_conflict?: Maybe<Channel_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_OneArgs = {\n  object: Channel_Insert_Input;\n  on_conflict?: Maybe<Channel_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_PollArgs = {\n  objects: Array<Channel_Poll_Insert_Input>;\n  on_conflict?: Maybe<Channel_Poll_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_Poll_OneArgs = {\n  object: Channel_Poll_Insert_Input;\n  on_conflict?: Maybe<Channel_Poll_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_ThreadArgs = {\n  objects: Array<Channel_Thread_Insert_Input>;\n  on_conflict?: Maybe<Channel_Thread_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_Thread_MessageArgs = {\n  objects: Array<Channel_Thread_Message_Insert_Input>;\n  on_conflict?: Maybe<Channel_Thread_Message_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_Thread_Message_OneArgs = {\n  object: Channel_Thread_Message_Insert_Input;\n  on_conflict?: Maybe<Channel_Thread_Message_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_Thread_OneArgs = {\n  object: Channel_Thread_Insert_Input;\n  on_conflict?: Maybe<Channel_Thread_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_TypeArgs = {\n  objects: Array<Channel_Type_Insert_Input>;\n  on_conflict?: Maybe<Channel_Type_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Channel_Type_OneArgs = {\n  object: Channel_Type_Insert_Input;\n  on_conflict?: Maybe<Channel_Type_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_MessageArgs = {\n  objects: Array<Message_Insert_Input>;\n  on_conflict?: Maybe<Message_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Message_CursorArgs = {\n  objects: Array<Message_Cursor_Insert_Input>;\n  on_conflict?: Maybe<Message_Cursor_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Message_Cursor_OneArgs = {\n  object: Message_Cursor_Insert_Input;\n  on_conflict?: Maybe<Message_Cursor_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Message_OneArgs = {\n  object: Message_Insert_Input;\n  on_conflict?: Maybe<Message_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Poll_AnwersArgs = {\n  objects: Array<Poll_Anwers_Insert_Input>;\n  on_conflict?: Maybe<Poll_Anwers_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Poll_Anwers_OneArgs = {\n  object: Poll_Anwers_Insert_Input;\n  on_conflict?: Maybe<Poll_Anwers_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Poll_QuestionsArgs = {\n  objects: Array<Poll_Questions_Insert_Input>;\n  on_conflict?: Maybe<Poll_Questions_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Poll_Questions_OneArgs = {\n  object: Poll_Questions_Insert_Input;\n  on_conflict?: Maybe<Poll_Questions_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_UserArgs = {\n  objects: Array<User_Insert_Input>;\n  on_conflict?: Maybe<User_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_ChannelsArgs = {\n  objects: Array<User_Channels_Insert_Input>;\n  on_conflict?: Maybe<User_Channels_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_Channels_OneArgs = {\n  object: User_Channels_Insert_Input;\n  on_conflict?: Maybe<User_Channels_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_OneArgs = {\n  object: User_Insert_Input;\n  on_conflict?: Maybe<User_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_OnlineArgs = {\n  objects: Array<User_Online_Insert_Input>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_Online_OneArgs = {\n  object: User_Online_Insert_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_TypingArgs = {\n  objects: Array<User_Typing_Insert_Input>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_Typing_OneArgs = {\n  object: User_Typing_Insert_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_VotesArgs = {\n  objects: Array<User_Votes_Insert_Input>;\n  on_conflict?: Maybe<User_Votes_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_Votes_OneArgs = {\n  object: User_Votes_Insert_Input;\n  on_conflict?: Maybe<User_Votes_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_ChannelArgs = {\n  _inc?: Maybe<Channel_Inc_Input>;\n  _set?: Maybe<Channel_Set_Input>;\n  where: Channel_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_By_PkArgs = {\n  _inc?: Maybe<Channel_Inc_Input>;\n  _set?: Maybe<Channel_Set_Input>;\n  pk_columns: Channel_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_PollArgs = {\n  _inc?: Maybe<Channel_Poll_Inc_Input>;\n  _set?: Maybe<Channel_Poll_Set_Input>;\n  where: Channel_Poll_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_Poll_By_PkArgs = {\n  _inc?: Maybe<Channel_Poll_Inc_Input>;\n  _set?: Maybe<Channel_Poll_Set_Input>;\n  pk_columns: Channel_Poll_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_ThreadArgs = {\n  _inc?: Maybe<Channel_Thread_Inc_Input>;\n  _set?: Maybe<Channel_Thread_Set_Input>;\n  where: Channel_Thread_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_Thread_By_PkArgs = {\n  _inc?: Maybe<Channel_Thread_Inc_Input>;\n  _set?: Maybe<Channel_Thread_Set_Input>;\n  pk_columns: Channel_Thread_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_Thread_MessageArgs = {\n  _inc?: Maybe<Channel_Thread_Message_Inc_Input>;\n  _set?: Maybe<Channel_Thread_Message_Set_Input>;\n  where: Channel_Thread_Message_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_Thread_Message_By_PkArgs = {\n  _inc?: Maybe<Channel_Thread_Message_Inc_Input>;\n  _set?: Maybe<Channel_Thread_Message_Set_Input>;\n  pk_columns: Channel_Thread_Message_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_TypeArgs = {\n  _set?: Maybe<Channel_Type_Set_Input>;\n  where: Channel_Type_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Channel_Type_By_PkArgs = {\n  _set?: Maybe<Channel_Type_Set_Input>;\n  pk_columns: Channel_Type_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_MessageArgs = {\n  _inc?: Maybe<Message_Inc_Input>;\n  _set?: Maybe<Message_Set_Input>;\n  where: Message_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Message_By_PkArgs = {\n  _inc?: Maybe<Message_Inc_Input>;\n  _set?: Maybe<Message_Set_Input>;\n  pk_columns: Message_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Message_CursorArgs = {\n  _inc?: Maybe<Message_Cursor_Inc_Input>;\n  _set?: Maybe<Message_Cursor_Set_Input>;\n  where: Message_Cursor_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Message_Cursor_By_PkArgs = {\n  _inc?: Maybe<Message_Cursor_Inc_Input>;\n  _set?: Maybe<Message_Cursor_Set_Input>;\n  pk_columns: Message_Cursor_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Poll_AnwersArgs = {\n  _inc?: Maybe<Poll_Anwers_Inc_Input>;\n  _set?: Maybe<Poll_Anwers_Set_Input>;\n  where: Poll_Anwers_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Poll_Anwers_By_PkArgs = {\n  _inc?: Maybe<Poll_Anwers_Inc_Input>;\n  _set?: Maybe<Poll_Anwers_Set_Input>;\n  pk_columns: Poll_Anwers_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Poll_QuestionsArgs = {\n  _inc?: Maybe<Poll_Questions_Inc_Input>;\n  _set?: Maybe<Poll_Questions_Set_Input>;\n  where: Poll_Questions_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Poll_Questions_By_PkArgs = {\n  _inc?: Maybe<Poll_Questions_Inc_Input>;\n  _set?: Maybe<Poll_Questions_Set_Input>;\n  pk_columns: Poll_Questions_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_UserArgs = {\n  _inc?: Maybe<User_Inc_Input>;\n  _set?: Maybe<User_Set_Input>;\n  where: User_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_By_PkArgs = {\n  _inc?: Maybe<User_Inc_Input>;\n  _set?: Maybe<User_Set_Input>;\n  pk_columns: User_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_ChannelsArgs = {\n  _inc?: Maybe<User_Channels_Inc_Input>;\n  _set?: Maybe<User_Channels_Set_Input>;\n  where: User_Channels_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_Channels_By_PkArgs = {\n  _inc?: Maybe<User_Channels_Inc_Input>;\n  _set?: Maybe<User_Channels_Set_Input>;\n  pk_columns: User_Channels_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_OnlineArgs = {\n  _inc?: Maybe<User_Online_Inc_Input>;\n  _set?: Maybe<User_Online_Set_Input>;\n  where: User_Online_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_TypingArgs = {\n  _inc?: Maybe<User_Typing_Inc_Input>;\n  _set?: Maybe<User_Typing_Set_Input>;\n  where: User_Typing_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_VotesArgs = {\n  _inc?: Maybe<User_Votes_Inc_Input>;\n  _set?: Maybe<User_Votes_Set_Input>;\n  where: User_Votes_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_Votes_By_PkArgs = {\n  _inc?: Maybe<User_Votes_Inc_Input>;\n  _set?: Maybe<User_Votes_Set_Input>;\n  pk_columns: User_Votes_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootValidateAndAddDirectMessageChannelArgs = {\n  name: Scalars['String'];\n  user_id1: Scalars['String'];\n  user_id2: Scalars['String'];\n};\n\n/** column ordering options */\nexport enum Order_By {\n  /** in the ascending order, nulls last */\n  Asc = 'asc',\n  /** in the ascending order, nulls first */\n  AscNullsFirst = 'asc_nulls_first',\n  /** in the ascending order, nulls last */\n  AscNullsLast = 'asc_nulls_last',\n  /** in the descending order, nulls first */\n  Desc = 'desc',\n  /** in the descending order, nulls first */\n  DescNullsFirst = 'desc_nulls_first',\n  /** in the descending order, nulls last */\n  DescNullsLast = 'desc_nulls_last'\n}\n\n/** columns and relationships of \"poll_anwers\" */\nexport type Poll_Anwers = {\n  __typename?: 'poll_anwers';\n  created_at: Scalars['timestamptz'];\n  id: Scalars['Int'];\n  /** An object relationship */\n  poll_question: Poll_Questions;\n  question_id: Scalars['Int'];\n  text: Scalars['String'];\n  updated_at: Scalars['timestamptz'];\n  user_id?: Maybe<Scalars['String']>;\n  votes: Scalars['Int'];\n};\n\n/** aggregated selection of \"poll_anwers\" */\nexport type Poll_Anwers_Aggregate = {\n  __typename?: 'poll_anwers_aggregate';\n  aggregate?: Maybe<Poll_Anwers_Aggregate_Fields>;\n  nodes: Array<Poll_Anwers>;\n};\n\n/** aggregate fields of \"poll_anwers\" */\nexport type Poll_Anwers_Aggregate_Fields = {\n  __typename?: 'poll_anwers_aggregate_fields';\n  avg?: Maybe<Poll_Anwers_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Poll_Anwers_Max_Fields>;\n  min?: Maybe<Poll_Anwers_Min_Fields>;\n  stddev?: Maybe<Poll_Anwers_Stddev_Fields>;\n  stddev_pop?: Maybe<Poll_Anwers_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Poll_Anwers_Stddev_Samp_Fields>;\n  sum?: Maybe<Poll_Anwers_Sum_Fields>;\n  var_pop?: Maybe<Poll_Anwers_Var_Pop_Fields>;\n  var_samp?: Maybe<Poll_Anwers_Var_Samp_Fields>;\n  variance?: Maybe<Poll_Anwers_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"poll_anwers\" */\nexport type Poll_Anwers_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"poll_anwers\" */\nexport type Poll_Anwers_Aggregate_Order_By = {\n  avg?: Maybe<Poll_Anwers_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Poll_Anwers_Max_Order_By>;\n  min?: Maybe<Poll_Anwers_Min_Order_By>;\n  stddev?: Maybe<Poll_Anwers_Stddev_Order_By>;\n  stddev_pop?: Maybe<Poll_Anwers_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Poll_Anwers_Stddev_Samp_Order_By>;\n  sum?: Maybe<Poll_Anwers_Sum_Order_By>;\n  var_pop?: Maybe<Poll_Anwers_Var_Pop_Order_By>;\n  var_samp?: Maybe<Poll_Anwers_Var_Samp_Order_By>;\n  variance?: Maybe<Poll_Anwers_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"poll_anwers\" */\nexport type Poll_Anwers_Arr_Rel_Insert_Input = {\n  data: Array<Poll_Anwers_Insert_Input>;\n  on_conflict?: Maybe<Poll_Anwers_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Poll_Anwers_Avg_Fields = {\n  __typename?: 'poll_anwers_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"poll_anwers\". All fields are combined with a logical 'AND'. */\nexport type Poll_Anwers_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Poll_Anwers_Bool_Exp>>>;\n  _not?: Maybe<Poll_Anwers_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Poll_Anwers_Bool_Exp>>>;\n  created_at?: Maybe<Timestamptz_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  poll_question?: Maybe<Poll_Questions_Bool_Exp>;\n  question_id?: Maybe<Int_Comparison_Exp>;\n  text?: Maybe<String_Comparison_Exp>;\n  updated_at?: Maybe<Timestamptz_Comparison_Exp>;\n  user_id?: Maybe<String_Comparison_Exp>;\n  votes?: Maybe<Int_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"poll_anwers\" */\nexport enum Poll_Anwers_Constraint {\n  /** unique or primary key constraint */\n  PollAnwersPkey = 'poll_anwers_pkey'\n}\n\n/** input type for incrementing integer column in table \"poll_anwers\" */\nexport type Poll_Anwers_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  question_id?: Maybe<Scalars['Int']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"poll_anwers\" */\nexport type Poll_Anwers_Insert_Input = {\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_question?: Maybe<Poll_Questions_Obj_Rel_Insert_Input>;\n  question_id?: Maybe<Scalars['Int']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Poll_Anwers_Max_Fields = {\n  __typename?: 'poll_anwers_max_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  question_id?: Maybe<Scalars['Int']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** order by max() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Max_Order_By = {\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Poll_Anwers_Min_Fields = {\n  __typename?: 'poll_anwers_min_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  question_id?: Maybe<Scalars['Int']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** order by min() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Min_Order_By = {\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"poll_anwers\" */\nexport type Poll_Anwers_Mutation_Response = {\n  __typename?: 'poll_anwers_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Poll_Anwers>;\n};\n\n/** input type for inserting object relation for remote table \"poll_anwers\" */\nexport type Poll_Anwers_Obj_Rel_Insert_Input = {\n  data: Poll_Anwers_Insert_Input;\n  on_conflict?: Maybe<Poll_Anwers_On_Conflict>;\n};\n\n/** on conflict condition type for table \"poll_anwers\" */\nexport type Poll_Anwers_On_Conflict = {\n  constraint: Poll_Anwers_Constraint;\n  update_columns: Array<Poll_Anwers_Update_Column>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"poll_anwers\" */\nexport type Poll_Anwers_Order_By = {\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_question?: Maybe<Poll_Questions_Order_By>;\n  question_id?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"poll_anwers\" */\nexport type Poll_Anwers_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"poll_anwers\" */\nexport enum Poll_Anwers_Select_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  QuestionId = 'question_id',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  UpdatedAt = 'updated_at',\n  /** column name */\n  UserId = 'user_id',\n  /** column name */\n  Votes = 'votes'\n}\n\n/** input type for updating data in table \"poll_anwers\" */\nexport type Poll_Anwers_Set_Input = {\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  question_id?: Maybe<Scalars['Int']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  user_id?: Maybe<Scalars['String']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Poll_Anwers_Stddev_Fields = {\n  __typename?: 'poll_anwers_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Poll_Anwers_Stddev_Pop_Fields = {\n  __typename?: 'poll_anwers_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Poll_Anwers_Stddev_Samp_Fields = {\n  __typename?: 'poll_anwers_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Poll_Anwers_Sum_Fields = {\n  __typename?: 'poll_anwers_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  question_id?: Maybe<Scalars['Int']>;\n  votes?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** update columns of table \"poll_anwers\" */\nexport enum Poll_Anwers_Update_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  QuestionId = 'question_id',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  UpdatedAt = 'updated_at',\n  /** column name */\n  UserId = 'user_id',\n  /** column name */\n  Votes = 'votes'\n}\n\n/** aggregate var_pop on columns */\nexport type Poll_Anwers_Var_Pop_Fields = {\n  __typename?: 'poll_anwers_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Poll_Anwers_Var_Samp_Fields = {\n  __typename?: 'poll_anwers_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Poll_Anwers_Variance_Fields = {\n  __typename?: 'poll_anwers_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  question_id?: Maybe<Scalars['Float']>;\n  votes?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"poll_anwers\" */\nexport type Poll_Anwers_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  question_id?: Maybe<Order_By>;\n  votes?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"poll_questions\" */\nexport type Poll_Questions = {\n  __typename?: 'poll_questions';\n  /** An array relationship */\n  channel_polls: Array<Channel_Poll>;\n  /** An aggregated array relationship */\n  channel_polls_aggregate: Channel_Poll_Aggregate;\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id: Scalars['Int'];\n  is_active: Scalars['Boolean'];\n  owner_id: Scalars['String'];\n  /** An array relationship */\n  poll_anwers: Array<Poll_Anwers>;\n  /** An aggregated array relationship */\n  poll_anwers_aggregate: Poll_Anwers_Aggregate;\n  text: Scalars['String'];\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n\n/** columns and relationships of \"poll_questions\" */\nexport type Poll_QuestionsChannel_PollsArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"poll_questions\" */\nexport type Poll_QuestionsChannel_Polls_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"poll_questions\" */\nexport type Poll_QuestionsPoll_AnwersArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"poll_questions\" */\nexport type Poll_QuestionsPoll_Anwers_AggregateArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n/** aggregated selection of \"poll_questions\" */\nexport type Poll_Questions_Aggregate = {\n  __typename?: 'poll_questions_aggregate';\n  aggregate?: Maybe<Poll_Questions_Aggregate_Fields>;\n  nodes: Array<Poll_Questions>;\n};\n\n/** aggregate fields of \"poll_questions\" */\nexport type Poll_Questions_Aggregate_Fields = {\n  __typename?: 'poll_questions_aggregate_fields';\n  avg?: Maybe<Poll_Questions_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Poll_Questions_Max_Fields>;\n  min?: Maybe<Poll_Questions_Min_Fields>;\n  stddev?: Maybe<Poll_Questions_Stddev_Fields>;\n  stddev_pop?: Maybe<Poll_Questions_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Poll_Questions_Stddev_Samp_Fields>;\n  sum?: Maybe<Poll_Questions_Sum_Fields>;\n  var_pop?: Maybe<Poll_Questions_Var_Pop_Fields>;\n  var_samp?: Maybe<Poll_Questions_Var_Samp_Fields>;\n  variance?: Maybe<Poll_Questions_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"poll_questions\" */\nexport type Poll_Questions_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Poll_Questions_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"poll_questions\" */\nexport type Poll_Questions_Aggregate_Order_By = {\n  avg?: Maybe<Poll_Questions_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Poll_Questions_Max_Order_By>;\n  min?: Maybe<Poll_Questions_Min_Order_By>;\n  stddev?: Maybe<Poll_Questions_Stddev_Order_By>;\n  stddev_pop?: Maybe<Poll_Questions_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Poll_Questions_Stddev_Samp_Order_By>;\n  sum?: Maybe<Poll_Questions_Sum_Order_By>;\n  var_pop?: Maybe<Poll_Questions_Var_Pop_Order_By>;\n  var_samp?: Maybe<Poll_Questions_Var_Samp_Order_By>;\n  variance?: Maybe<Poll_Questions_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"poll_questions\" */\nexport type Poll_Questions_Arr_Rel_Insert_Input = {\n  data: Array<Poll_Questions_Insert_Input>;\n  on_conflict?: Maybe<Poll_Questions_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Poll_Questions_Avg_Fields = {\n  __typename?: 'poll_questions_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"poll_questions\". All fields are combined with a logical 'AND'. */\nexport type Poll_Questions_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Poll_Questions_Bool_Exp>>>;\n  _not?: Maybe<Poll_Questions_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Poll_Questions_Bool_Exp>>>;\n  channel_polls?: Maybe<Channel_Poll_Bool_Exp>;\n  created_at?: Maybe<Timestamptz_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  is_active?: Maybe<Boolean_Comparison_Exp>;\n  owner_id?: Maybe<String_Comparison_Exp>;\n  poll_anwers?: Maybe<Poll_Anwers_Bool_Exp>;\n  text?: Maybe<String_Comparison_Exp>;\n  updated_at?: Maybe<Timestamptz_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"poll_questions\" */\nexport enum Poll_Questions_Constraint {\n  /** unique or primary key constraint */\n  PollQuestionsPkey = 'poll_questions_pkey'\n}\n\n/** input type for incrementing integer column in table \"poll_questions\" */\nexport type Poll_Questions_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"poll_questions\" */\nexport type Poll_Questions_Insert_Input = {\n  channel_polls?: Maybe<Channel_Poll_Arr_Rel_Insert_Input>;\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  is_active?: Maybe<Scalars['Boolean']>;\n  owner_id?: Maybe<Scalars['String']>;\n  poll_anwers?: Maybe<Poll_Anwers_Arr_Rel_Insert_Input>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** aggregate max on columns */\nexport type Poll_Questions_Max_Fields = {\n  __typename?: 'poll_questions_max_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  owner_id?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by max() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Max_Order_By = {\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Poll_Questions_Min_Fields = {\n  __typename?: 'poll_questions_min_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  owner_id?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by min() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Min_Order_By = {\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"poll_questions\" */\nexport type Poll_Questions_Mutation_Response = {\n  __typename?: 'poll_questions_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Poll_Questions>;\n};\n\n/** input type for inserting object relation for remote table \"poll_questions\" */\nexport type Poll_Questions_Obj_Rel_Insert_Input = {\n  data: Poll_Questions_Insert_Input;\n  on_conflict?: Maybe<Poll_Questions_On_Conflict>;\n};\n\n/** on conflict condition type for table \"poll_questions\" */\nexport type Poll_Questions_On_Conflict = {\n  constraint: Poll_Questions_Constraint;\n  update_columns: Array<Poll_Questions_Update_Column>;\n  where?: Maybe<Poll_Questions_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"poll_questions\" */\nexport type Poll_Questions_Order_By = {\n  channel_polls_aggregate?: Maybe<Channel_Poll_Aggregate_Order_By>;\n  created_at?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  is_active?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n  poll_anwers_aggregate?: Maybe<Poll_Anwers_Aggregate_Order_By>;\n  text?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"poll_questions\" */\nexport type Poll_Questions_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"poll_questions\" */\nexport enum Poll_Questions_Select_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsActive = 'is_active',\n  /** column name */\n  OwnerId = 'owner_id',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  UpdatedAt = 'updated_at'\n}\n\n/** input type for updating data in table \"poll_questions\" */\nexport type Poll_Questions_Set_Input = {\n  created_at?: Maybe<Scalars['timestamptz']>;\n  id?: Maybe<Scalars['Int']>;\n  is_active?: Maybe<Scalars['Boolean']>;\n  owner_id?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** aggregate stddev on columns */\nexport type Poll_Questions_Stddev_Fields = {\n  __typename?: 'poll_questions_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Poll_Questions_Stddev_Pop_Fields = {\n  __typename?: 'poll_questions_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Poll_Questions_Stddev_Samp_Fields = {\n  __typename?: 'poll_questions_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Poll_Questions_Sum_Fields = {\n  __typename?: 'poll_questions_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"poll_questions\" */\nexport enum Poll_Questions_Update_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsActive = 'is_active',\n  /** column name */\n  OwnerId = 'owner_id',\n  /** column name */\n  Text = 'text',\n  /** column name */\n  UpdatedAt = 'updated_at'\n}\n\n/** aggregate var_pop on columns */\nexport type Poll_Questions_Var_Pop_Fields = {\n  __typename?: 'poll_questions_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Poll_Questions_Var_Samp_Fields = {\n  __typename?: 'poll_questions_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Poll_Questions_Variance_Fields = {\n  __typename?: 'poll_questions_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"poll_questions\" */\nexport type Poll_Questions_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** query root */\nexport type Query_Root = {\n  __typename?: 'query_root';\n  /** fetch data from the table: \"channel\" */\n  channel: Array<Channel>;\n  /** fetch aggregated fields from the table: \"channel\" */\n  channel_aggregate: Channel_Aggregate;\n  /** fetch data from the table: \"channel\" using primary key columns */\n  channel_by_pk?: Maybe<Channel>;\n  /** fetch data from the table: \"channel_poll\" */\n  channel_poll: Array<Channel_Poll>;\n  /** fetch aggregated fields from the table: \"channel_poll\" */\n  channel_poll_aggregate: Channel_Poll_Aggregate;\n  /** fetch data from the table: \"channel_poll\" using primary key columns */\n  channel_poll_by_pk?: Maybe<Channel_Poll>;\n  /** fetch data from the table: \"channel_thread\" */\n  channel_thread: Array<Channel_Thread>;\n  /** fetch aggregated fields from the table: \"channel_thread\" */\n  channel_thread_aggregate: Channel_Thread_Aggregate;\n  /** fetch data from the table: \"channel_thread\" using primary key columns */\n  channel_thread_by_pk?: Maybe<Channel_Thread>;\n  /** fetch data from the table: \"channel_thread_message\" */\n  channel_thread_message: Array<Channel_Thread_Message>;\n  /** fetch aggregated fields from the table: \"channel_thread_message\" */\n  channel_thread_message_aggregate: Channel_Thread_Message_Aggregate;\n  /** fetch data from the table: \"channel_thread_message\" using primary key columns */\n  channel_thread_message_by_pk?: Maybe<Channel_Thread_Message>;\n  /** fetch data from the table: \"channel_type\" */\n  channel_type: Array<Channel_Type>;\n  /** fetch aggregated fields from the table: \"channel_type\" */\n  channel_type_aggregate: Channel_Type_Aggregate;\n  /** fetch data from the table: \"channel_type\" using primary key columns */\n  channel_type_by_pk?: Maybe<Channel_Type>;\n  /** fetch data from the table: \"message\" */\n  message: Array<Message>;\n  /** fetch aggregated fields from the table: \"message\" */\n  message_aggregate: Message_Aggregate;\n  /** fetch data from the table: \"message\" using primary key columns */\n  message_by_pk?: Maybe<Message>;\n  /** fetch data from the table: \"message_cursor\" */\n  message_cursor: Array<Message_Cursor>;\n  /** fetch aggregated fields from the table: \"message_cursor\" */\n  message_cursor_aggregate: Message_Cursor_Aggregate;\n  /** fetch data from the table: \"message_cursor\" using primary key columns */\n  message_cursor_by_pk?: Maybe<Message_Cursor>;\n  /** fetch data from the table: \"poll_anwers\" */\n  poll_anwers: Array<Poll_Anwers>;\n  /** fetch aggregated fields from the table: \"poll_anwers\" */\n  poll_anwers_aggregate: Poll_Anwers_Aggregate;\n  /** fetch data from the table: \"poll_anwers\" using primary key columns */\n  poll_anwers_by_pk?: Maybe<Poll_Anwers>;\n  /** fetch data from the table: \"poll_questions\" */\n  poll_questions: Array<Poll_Questions>;\n  /** fetch aggregated fields from the table: \"poll_questions\" */\n  poll_questions_aggregate: Poll_Questions_Aggregate;\n  /** fetch data from the table: \"poll_questions\" using primary key columns */\n  poll_questions_by_pk?: Maybe<Poll_Questions>;\n  /** fetch data from the table: \"user\" */\n  user: Array<User>;\n  /** fetch aggregated fields from the table: \"user\" */\n  user_aggregate: User_Aggregate;\n  /** fetch data from the table: \"user\" using primary key columns */\n  user_by_pk?: Maybe<User>;\n  /** fetch data from the table: \"user_channels\" */\n  user_channels: Array<User_Channels>;\n  /** fetch aggregated fields from the table: \"user_channels\" */\n  user_channels_aggregate: User_Channels_Aggregate;\n  /** fetch data from the table: \"user_channels\" using primary key columns */\n  user_channels_by_pk?: Maybe<User_Channels>;\n  /** fetch data from the table: \"user_online\" */\n  user_online: Array<User_Online>;\n  /** fetch aggregated fields from the table: \"user_online\" */\n  user_online_aggregate: User_Online_Aggregate;\n  /** fetch data from the table: \"user_typing\" */\n  user_typing: Array<User_Typing>;\n  /** fetch aggregated fields from the table: \"user_typing\" */\n  user_typing_aggregate: User_Typing_Aggregate;\n  /** fetch data from the table: \"user_votes\" */\n  user_votes: Array<User_Votes>;\n  /** fetch aggregated fields from the table: \"user_votes\" */\n  user_votes_aggregate: User_Votes_Aggregate;\n  /** fetch data from the table: \"user_votes\" using primary key columns */\n  user_votes_by_pk?: Maybe<User_Votes>;\n};\n\n\n/** query root */\nexport type Query_RootChannelArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootChannel_PollArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Poll_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Poll_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootChannel_ThreadArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Thread_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Thread_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootChannel_Thread_MessageArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Thread_Message_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Thread_Message_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootChannel_TypeArgs = {\n  distinct_on?: Maybe<Array<Channel_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Type_Order_By>>;\n  where?: Maybe<Channel_Type_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Type_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Type_Order_By>>;\n  where?: Maybe<Channel_Type_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootChannel_Type_By_PkArgs = {\n  value: Scalars['String'];\n};\n\n\n/** query root */\nexport type Query_RootMessageArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootMessage_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootMessage_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootMessage_CursorArgs = {\n  distinct_on?: Maybe<Array<Message_Cursor_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Cursor_Order_By>>;\n  where?: Maybe<Message_Cursor_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootMessage_Cursor_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Cursor_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Cursor_Order_By>>;\n  where?: Maybe<Message_Cursor_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootMessage_Cursor_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootPoll_AnwersArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPoll_Anwers_AggregateArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPoll_Anwers_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootPoll_QuestionsArgs = {\n  distinct_on?: Maybe<Array<Poll_Questions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Questions_Order_By>>;\n  where?: Maybe<Poll_Questions_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPoll_Questions_AggregateArgs = {\n  distinct_on?: Maybe<Array<Poll_Questions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Questions_Order_By>>;\n  where?: Maybe<Poll_Questions_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPoll_Questions_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootUserArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootUser_ChannelsArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Channels_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Channels_By_PkArgs = {\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n\n/** query root */\nexport type Query_RootUser_OnlineArgs = {\n  distinct_on?: Maybe<Array<User_Online_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Online_Order_By>>;\n  where?: Maybe<User_Online_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Online_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Online_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Online_Order_By>>;\n  where?: Maybe<User_Online_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_TypingArgs = {\n  distinct_on?: Maybe<Array<User_Typing_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Typing_Order_By>>;\n  where?: Maybe<User_Typing_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Typing_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Typing_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Typing_Order_By>>;\n  where?: Maybe<User_Typing_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_VotesArgs = {\n  distinct_on?: Maybe<Array<User_Votes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Votes_Order_By>>;\n  where?: Maybe<User_Votes_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Votes_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Votes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Votes_Order_By>>;\n  where?: Maybe<User_Votes_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootUser_Votes_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n/** subscription root */\nexport type Subscription_Root = {\n  __typename?: 'subscription_root';\n  /** fetch data from the table: \"channel\" */\n  channel: Array<Channel>;\n  /** fetch aggregated fields from the table: \"channel\" */\n  channel_aggregate: Channel_Aggregate;\n  /** fetch data from the table: \"channel\" using primary key columns */\n  channel_by_pk?: Maybe<Channel>;\n  /** fetch data from the table: \"channel_poll\" */\n  channel_poll: Array<Channel_Poll>;\n  /** fetch aggregated fields from the table: \"channel_poll\" */\n  channel_poll_aggregate: Channel_Poll_Aggregate;\n  /** fetch data from the table: \"channel_poll\" using primary key columns */\n  channel_poll_by_pk?: Maybe<Channel_Poll>;\n  /** fetch data from the table: \"channel_thread\" */\n  channel_thread: Array<Channel_Thread>;\n  /** fetch aggregated fields from the table: \"channel_thread\" */\n  channel_thread_aggregate: Channel_Thread_Aggregate;\n  /** fetch data from the table: \"channel_thread\" using primary key columns */\n  channel_thread_by_pk?: Maybe<Channel_Thread>;\n  /** fetch data from the table: \"channel_thread_message\" */\n  channel_thread_message: Array<Channel_Thread_Message>;\n  /** fetch aggregated fields from the table: \"channel_thread_message\" */\n  channel_thread_message_aggregate: Channel_Thread_Message_Aggregate;\n  /** fetch data from the table: \"channel_thread_message\" using primary key columns */\n  channel_thread_message_by_pk?: Maybe<Channel_Thread_Message>;\n  /** fetch data from the table: \"channel_type\" */\n  channel_type: Array<Channel_Type>;\n  /** fetch aggregated fields from the table: \"channel_type\" */\n  channel_type_aggregate: Channel_Type_Aggregate;\n  /** fetch data from the table: \"channel_type\" using primary key columns */\n  channel_type_by_pk?: Maybe<Channel_Type>;\n  /** fetch data from the table: \"message\" */\n  message: Array<Message>;\n  /** fetch aggregated fields from the table: \"message\" */\n  message_aggregate: Message_Aggregate;\n  /** fetch data from the table: \"message\" using primary key columns */\n  message_by_pk?: Maybe<Message>;\n  /** fetch data from the table: \"message_cursor\" */\n  message_cursor: Array<Message_Cursor>;\n  /** fetch aggregated fields from the table: \"message_cursor\" */\n  message_cursor_aggregate: Message_Cursor_Aggregate;\n  /** fetch data from the table: \"message_cursor\" using primary key columns */\n  message_cursor_by_pk?: Maybe<Message_Cursor>;\n  /** fetch data from the table: \"poll_anwers\" */\n  poll_anwers: Array<Poll_Anwers>;\n  /** fetch aggregated fields from the table: \"poll_anwers\" */\n  poll_anwers_aggregate: Poll_Anwers_Aggregate;\n  /** fetch data from the table: \"poll_anwers\" using primary key columns */\n  poll_anwers_by_pk?: Maybe<Poll_Anwers>;\n  /** fetch data from the table: \"poll_questions\" */\n  poll_questions: Array<Poll_Questions>;\n  /** fetch aggregated fields from the table: \"poll_questions\" */\n  poll_questions_aggregate: Poll_Questions_Aggregate;\n  /** fetch data from the table: \"poll_questions\" using primary key columns */\n  poll_questions_by_pk?: Maybe<Poll_Questions>;\n  /** fetch data from the table: \"user\" */\n  user: Array<User>;\n  /** fetch aggregated fields from the table: \"user\" */\n  user_aggregate: User_Aggregate;\n  /** fetch data from the table: \"user\" using primary key columns */\n  user_by_pk?: Maybe<User>;\n  /** fetch data from the table: \"user_channels\" */\n  user_channels: Array<User_Channels>;\n  /** fetch aggregated fields from the table: \"user_channels\" */\n  user_channels_aggregate: User_Channels_Aggregate;\n  /** fetch data from the table: \"user_channels\" using primary key columns */\n  user_channels_by_pk?: Maybe<User_Channels>;\n  /** fetch data from the table: \"user_online\" */\n  user_online: Array<User_Online>;\n  /** fetch aggregated fields from the table: \"user_online\" */\n  user_online_aggregate: User_Online_Aggregate;\n  /** fetch data from the table: \"user_typing\" */\n  user_typing: Array<User_Typing>;\n  /** fetch aggregated fields from the table: \"user_typing\" */\n  user_typing_aggregate: User_Typing_Aggregate;\n  /** fetch data from the table: \"user_votes\" */\n  user_votes: Array<User_Votes>;\n  /** fetch aggregated fields from the table: \"user_votes\" */\n  user_votes_aggregate: User_Votes_Aggregate;\n  /** fetch data from the table: \"user_votes\" using primary key columns */\n  user_votes_by_pk?: Maybe<User_Votes>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannelArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_PollArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Poll_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Poll_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Poll_Order_By>>;\n  where?: Maybe<Channel_Poll_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Poll_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_ThreadArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Thread_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Order_By>>;\n  where?: Maybe<Channel_Thread_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Thread_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Thread_MessageArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Thread_Message_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Thread_Message_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_TypeArgs = {\n  distinct_on?: Maybe<Array<Channel_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Type_Order_By>>;\n  where?: Maybe<Channel_Type_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Type_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Type_Order_By>>;\n  where?: Maybe<Channel_Type_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootChannel_Type_By_PkArgs = {\n  value: Scalars['String'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessageArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessage_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessage_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessage_CursorArgs = {\n  distinct_on?: Maybe<Array<Message_Cursor_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Cursor_Order_By>>;\n  where?: Maybe<Message_Cursor_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessage_Cursor_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Cursor_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Cursor_Order_By>>;\n  where?: Maybe<Message_Cursor_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootMessage_Cursor_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_AnwersArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_Anwers_AggregateArgs = {\n  distinct_on?: Maybe<Array<Poll_Anwers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Anwers_Order_By>>;\n  where?: Maybe<Poll_Anwers_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_Anwers_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_QuestionsArgs = {\n  distinct_on?: Maybe<Array<Poll_Questions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Questions_Order_By>>;\n  where?: Maybe<Poll_Questions_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_Questions_AggregateArgs = {\n  distinct_on?: Maybe<Array<Poll_Questions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Poll_Questions_Order_By>>;\n  where?: Maybe<Poll_Questions_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPoll_Questions_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootUserArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_ChannelsArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Channels_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Channels_By_PkArgs = {\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_OnlineArgs = {\n  distinct_on?: Maybe<Array<User_Online_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Online_Order_By>>;\n  where?: Maybe<User_Online_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Online_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Online_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Online_Order_By>>;\n  where?: Maybe<User_Online_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_TypingArgs = {\n  distinct_on?: Maybe<Array<User_Typing_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Typing_Order_By>>;\n  where?: Maybe<User_Typing_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Typing_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Typing_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Typing_Order_By>>;\n  where?: Maybe<User_Typing_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_VotesArgs = {\n  distinct_on?: Maybe<Array<User_Votes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Votes_Order_By>>;\n  where?: Maybe<User_Votes_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Votes_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Votes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Votes_Order_By>>;\n  where?: Maybe<User_Votes_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootUser_Votes_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** expression to compare columns of type timestamptz. All fields are combined with logical 'AND'. */\nexport type Timestamptz_Comparison_Exp = {\n  _eq?: Maybe<Scalars['timestamptz']>;\n  _gt?: Maybe<Scalars['timestamptz']>;\n  _gte?: Maybe<Scalars['timestamptz']>;\n  _in?: Maybe<Array<Scalars['timestamptz']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['timestamptz']>;\n  _lte?: Maybe<Scalars['timestamptz']>;\n  _neq?: Maybe<Scalars['timestamptz']>;\n  _nin?: Maybe<Array<Scalars['timestamptz']>>;\n};\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type User = {\n  __typename?: 'user';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  /** An array relationship */\n  channel_thread_messages: Array<Channel_Thread_Message>;\n  /** An aggregated array relationship */\n  channel_thread_messages_aggregate: Channel_Thread_Message_Aggregate;\n  /** An array relationship */\n  channels: Array<Channel>;\n  /** An aggregated array relationship */\n  channels_aggregate: Channel_Aggregate;\n  id: Scalars['Int'];\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  /** An array relationship */\n  messages: Array<Message>;\n  /** An aggregated array relationship */\n  messages_aggregate: Message_Aggregate;\n  /** An array relationship */\n  user_channels: Array<User_Channels>;\n  /** An aggregated array relationship */\n  user_channels_aggregate: User_Channels_Aggregate;\n  username: Scalars['String'];\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserChannel_Thread_MessagesArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserChannel_Thread_Messages_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Thread_Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Thread_Message_Order_By>>;\n  where?: Maybe<Channel_Thread_Message_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserChannelsArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserChannels_AggregateArgs = {\n  distinct_on?: Maybe<Array<Channel_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Channel_Order_By>>;\n  where?: Maybe<Channel_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserMessagesArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserMessages_AggregateArgs = {\n  distinct_on?: Maybe<Array<Message_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Message_Order_By>>;\n  where?: Maybe<Message_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserUser_ChannelsArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n\n/**\n * This table stores user data\n * \n * \n * columns and relationships of \"user\"\n */\nexport type UserUser_Channels_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Channels_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Channels_Order_By>>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n/** aggregated selection of \"user\" */\nexport type User_Aggregate = {\n  __typename?: 'user_aggregate';\n  aggregate?: Maybe<User_Aggregate_Fields>;\n  nodes: Array<User>;\n};\n\n/** aggregate fields of \"user\" */\nexport type User_Aggregate_Fields = {\n  __typename?: 'user_aggregate_fields';\n  avg?: Maybe<User_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<User_Max_Fields>;\n  min?: Maybe<User_Min_Fields>;\n  stddev?: Maybe<User_Stddev_Fields>;\n  stddev_pop?: Maybe<User_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<User_Stddev_Samp_Fields>;\n  sum?: Maybe<User_Sum_Fields>;\n  var_pop?: Maybe<User_Var_Pop_Fields>;\n  var_samp?: Maybe<User_Var_Samp_Fields>;\n  variance?: Maybe<User_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"user\" */\nexport type User_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<User_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"user\" */\nexport type User_Aggregate_Order_By = {\n  avg?: Maybe<User_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<User_Max_Order_By>;\n  min?: Maybe<User_Min_Order_By>;\n  stddev?: Maybe<User_Stddev_Order_By>;\n  stddev_pop?: Maybe<User_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<User_Stddev_Samp_Order_By>;\n  sum?: Maybe<User_Sum_Order_By>;\n  var_pop?: Maybe<User_Var_Pop_Order_By>;\n  var_samp?: Maybe<User_Var_Samp_Order_By>;\n  variance?: Maybe<User_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"user\" */\nexport type User_Arr_Rel_Insert_Input = {\n  data: Array<User_Insert_Input>;\n  on_conflict?: Maybe<User_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type User_Avg_Fields = {\n  __typename?: 'user_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"user\" */\nexport type User_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"user\". All fields are combined with a logical 'AND'. */\nexport type User_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<User_Bool_Exp>>>;\n  _not?: Maybe<User_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<User_Bool_Exp>>>;\n  auth0_user_id?: Maybe<String_Comparison_Exp>;\n  channel_thread_messages?: Maybe<Channel_Thread_Message_Bool_Exp>;\n  channels?: Maybe<Channel_Bool_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  last_seen?: Maybe<Timestamptz_Comparison_Exp>;\n  last_typed?: Maybe<Timestamptz_Comparison_Exp>;\n  last_typed_channel?: Maybe<Int_Comparison_Exp>;\n  messages?: Maybe<Message_Bool_Exp>;\n  user_channels?: Maybe<User_Channels_Bool_Exp>;\n  username?: Maybe<String_Comparison_Exp>;\n};\n\n/** columns and relationships of \"user_channels\" */\nexport type User_Channels = {\n  __typename?: 'user_channels';\n  /** An object relationship */\n  channel: Channel;\n  channel_id: Scalars['Int'];\n  /** An object relationship */\n  user: User;\n  user_id: Scalars['String'];\n};\n\n/** aggregated selection of \"user_channels\" */\nexport type User_Channels_Aggregate = {\n  __typename?: 'user_channels_aggregate';\n  aggregate?: Maybe<User_Channels_Aggregate_Fields>;\n  nodes: Array<User_Channels>;\n};\n\n/** aggregate fields of \"user_channels\" */\nexport type User_Channels_Aggregate_Fields = {\n  __typename?: 'user_channels_aggregate_fields';\n  avg?: Maybe<User_Channels_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<User_Channels_Max_Fields>;\n  min?: Maybe<User_Channels_Min_Fields>;\n  stddev?: Maybe<User_Channels_Stddev_Fields>;\n  stddev_pop?: Maybe<User_Channels_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<User_Channels_Stddev_Samp_Fields>;\n  sum?: Maybe<User_Channels_Sum_Fields>;\n  var_pop?: Maybe<User_Channels_Var_Pop_Fields>;\n  var_samp?: Maybe<User_Channels_Var_Samp_Fields>;\n  variance?: Maybe<User_Channels_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"user_channels\" */\nexport type User_Channels_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<User_Channels_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"user_channels\" */\nexport type User_Channels_Aggregate_Order_By = {\n  avg?: Maybe<User_Channels_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<User_Channels_Max_Order_By>;\n  min?: Maybe<User_Channels_Min_Order_By>;\n  stddev?: Maybe<User_Channels_Stddev_Order_By>;\n  stddev_pop?: Maybe<User_Channels_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<User_Channels_Stddev_Samp_Order_By>;\n  sum?: Maybe<User_Channels_Sum_Order_By>;\n  var_pop?: Maybe<User_Channels_Var_Pop_Order_By>;\n  var_samp?: Maybe<User_Channels_Var_Samp_Order_By>;\n  variance?: Maybe<User_Channels_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"user_channels\" */\nexport type User_Channels_Arr_Rel_Insert_Input = {\n  data: Array<User_Channels_Insert_Input>;\n  on_conflict?: Maybe<User_Channels_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type User_Channels_Avg_Fields = {\n  __typename?: 'user_channels_avg_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"user_channels\" */\nexport type User_Channels_Avg_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"user_channels\". All fields are combined with a logical 'AND'. */\nexport type User_Channels_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<User_Channels_Bool_Exp>>>;\n  _not?: Maybe<User_Channels_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<User_Channels_Bool_Exp>>>;\n  channel?: Maybe<Channel_Bool_Exp>;\n  channel_id?: Maybe<Int_Comparison_Exp>;\n  user?: Maybe<User_Bool_Exp>;\n  user_id?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"user_channels\" */\nexport enum User_Channels_Constraint {\n  /** unique or primary key constraint */\n  UserChannelsPkey = 'user_channels_pkey'\n}\n\n/** input type for incrementing integer column in table \"user_channels\" */\nexport type User_Channels_Inc_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"user_channels\" */\nexport type User_Channels_Insert_Input = {\n  channel?: Maybe<Channel_Obj_Rel_Insert_Input>;\n  channel_id?: Maybe<Scalars['Int']>;\n  user?: Maybe<User_Obj_Rel_Insert_Input>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type User_Channels_Max_Fields = {\n  __typename?: 'user_channels_max_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"user_channels\" */\nexport type User_Channels_Max_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type User_Channels_Min_Fields = {\n  __typename?: 'user_channels_min_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"user_channels\" */\nexport type User_Channels_Min_Order_By = {\n  channel_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"user_channels\" */\nexport type User_Channels_Mutation_Response = {\n  __typename?: 'user_channels_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<User_Channels>;\n};\n\n/** input type for inserting object relation for remote table \"user_channels\" */\nexport type User_Channels_Obj_Rel_Insert_Input = {\n  data: User_Channels_Insert_Input;\n  on_conflict?: Maybe<User_Channels_On_Conflict>;\n};\n\n/** on conflict condition type for table \"user_channels\" */\nexport type User_Channels_On_Conflict = {\n  constraint: User_Channels_Constraint;\n  update_columns: Array<User_Channels_Update_Column>;\n  where?: Maybe<User_Channels_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"user_channels\" */\nexport type User_Channels_Order_By = {\n  channel?: Maybe<Channel_Order_By>;\n  channel_id?: Maybe<Order_By>;\n  user?: Maybe<User_Order_By>;\n  user_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"user_channels\" */\nexport type User_Channels_Pk_Columns_Input = {\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n};\n\n/** select columns of table \"user_channels\" */\nexport enum User_Channels_Select_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** input type for updating data in table \"user_channels\" */\nexport type User_Channels_Set_Input = {\n  channel_id?: Maybe<Scalars['Int']>;\n  user_id?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type User_Channels_Stddev_Fields = {\n  __typename?: 'user_channels_stddev_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"user_channels\" */\nexport type User_Channels_Stddev_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type User_Channels_Stddev_Pop_Fields = {\n  __typename?: 'user_channels_stddev_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"user_channels\" */\nexport type User_Channels_Stddev_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type User_Channels_Stddev_Samp_Fields = {\n  __typename?: 'user_channels_stddev_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"user_channels\" */\nexport type User_Channels_Stddev_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type User_Channels_Sum_Fields = {\n  __typename?: 'user_channels_sum_fields';\n  channel_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"user_channels\" */\nexport type User_Channels_Sum_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"user_channels\" */\nexport enum User_Channels_Update_Column {\n  /** column name */\n  ChannelId = 'channel_id',\n  /** column name */\n  UserId = 'user_id'\n}\n\n/** aggregate var_pop on columns */\nexport type User_Channels_Var_Pop_Fields = {\n  __typename?: 'user_channels_var_pop_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"user_channels\" */\nexport type User_Channels_Var_Pop_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type User_Channels_Var_Samp_Fields = {\n  __typename?: 'user_channels_var_samp_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"user_channels\" */\nexport type User_Channels_Var_Samp_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type User_Channels_Variance_Fields = {\n  __typename?: 'user_channels_variance_fields';\n  channel_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"user_channels\" */\nexport type User_Channels_Variance_Order_By = {\n  channel_id?: Maybe<Order_By>;\n};\n\n/** unique or primary key constraints on table \"user\" */\nexport enum User_Constraint {\n  /** unique or primary key constraint */\n  UserAuth0UserIdKey = 'user_auth0_user_id_key',\n  /** unique or primary key constraint */\n  UserPkey = 'user_pkey'\n}\n\n/** input type for incrementing integer column in table \"user\" */\nexport type User_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"user\" */\nexport type User_Insert_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  channel_thread_messages?: Maybe<Channel_Thread_Message_Arr_Rel_Insert_Input>;\n  channels?: Maybe<Channel_Arr_Rel_Insert_Input>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  messages?: Maybe<Message_Arr_Rel_Insert_Input>;\n  user_channels?: Maybe<User_Channels_Arr_Rel_Insert_Input>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type User_Max_Fields = {\n  __typename?: 'user_max_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"user\" */\nexport type User_Max_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type User_Min_Fields = {\n  __typename?: 'user_min_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"user\" */\nexport type User_Min_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"user\" */\nexport type User_Mutation_Response = {\n  __typename?: 'user_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<User>;\n};\n\n/** input type for inserting object relation for remote table \"user\" */\nexport type User_Obj_Rel_Insert_Input = {\n  data: User_Insert_Input;\n  on_conflict?: Maybe<User_On_Conflict>;\n};\n\n/** on conflict condition type for table \"user\" */\nexport type User_On_Conflict = {\n  constraint: User_Constraint;\n  update_columns: Array<User_Update_Column>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n/** columns and relationships of \"user_online\" */\nexport type User_Online = {\n  __typename?: 'user_online';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregated selection of \"user_online\" */\nexport type User_Online_Aggregate = {\n  __typename?: 'user_online_aggregate';\n  aggregate?: Maybe<User_Online_Aggregate_Fields>;\n  nodes: Array<User_Online>;\n};\n\n/** aggregate fields of \"user_online\" */\nexport type User_Online_Aggregate_Fields = {\n  __typename?: 'user_online_aggregate_fields';\n  avg?: Maybe<User_Online_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<User_Online_Max_Fields>;\n  min?: Maybe<User_Online_Min_Fields>;\n  stddev?: Maybe<User_Online_Stddev_Fields>;\n  stddev_pop?: Maybe<User_Online_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<User_Online_Stddev_Samp_Fields>;\n  sum?: Maybe<User_Online_Sum_Fields>;\n  var_pop?: Maybe<User_Online_Var_Pop_Fields>;\n  var_samp?: Maybe<User_Online_Var_Samp_Fields>;\n  variance?: Maybe<User_Online_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"user_online\" */\nexport type User_Online_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<User_Online_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"user_online\" */\nexport type User_Online_Aggregate_Order_By = {\n  avg?: Maybe<User_Online_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<User_Online_Max_Order_By>;\n  min?: Maybe<User_Online_Min_Order_By>;\n  stddev?: Maybe<User_Online_Stddev_Order_By>;\n  stddev_pop?: Maybe<User_Online_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<User_Online_Stddev_Samp_Order_By>;\n  sum?: Maybe<User_Online_Sum_Order_By>;\n  var_pop?: Maybe<User_Online_Var_Pop_Order_By>;\n  var_samp?: Maybe<User_Online_Var_Samp_Order_By>;\n  variance?: Maybe<User_Online_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"user_online\" */\nexport type User_Online_Arr_Rel_Insert_Input = {\n  data: Array<User_Online_Insert_Input>;\n};\n\n/** aggregate avg on columns */\nexport type User_Online_Avg_Fields = {\n  __typename?: 'user_online_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"user_online\" */\nexport type User_Online_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"user_online\". All fields are combined with a logical 'AND'. */\nexport type User_Online_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<User_Online_Bool_Exp>>>;\n  _not?: Maybe<User_Online_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<User_Online_Bool_Exp>>>;\n  auth0_user_id?: Maybe<String_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  last_seen?: Maybe<Timestamptz_Comparison_Exp>;\n  last_typed?: Maybe<Timestamptz_Comparison_Exp>;\n  username?: Maybe<String_Comparison_Exp>;\n};\n\n/** input type for incrementing integer column in table \"user_online\" */\nexport type User_Online_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"user_online\" */\nexport type User_Online_Insert_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type User_Online_Max_Fields = {\n  __typename?: 'user_online_max_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"user_online\" */\nexport type User_Online_Max_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type User_Online_Min_Fields = {\n  __typename?: 'user_online_min_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"user_online\" */\nexport type User_Online_Min_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"user_online\" */\nexport type User_Online_Mutation_Response = {\n  __typename?: 'user_online_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<User_Online>;\n};\n\n/** input type for inserting object relation for remote table \"user_online\" */\nexport type User_Online_Obj_Rel_Insert_Input = {\n  data: User_Online_Insert_Input;\n};\n\n/** ordering options when selecting data from \"user_online\" */\nexport type User_Online_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** select columns of table \"user_online\" */\nexport enum User_Online_Select_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  LastSeen = 'last_seen',\n  /** column name */\n  LastTyped = 'last_typed',\n  /** column name */\n  Username = 'username'\n}\n\n/** input type for updating data in table \"user_online\" */\nexport type User_Online_Set_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type User_Online_Stddev_Fields = {\n  __typename?: 'user_online_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"user_online\" */\nexport type User_Online_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type User_Online_Stddev_Pop_Fields = {\n  __typename?: 'user_online_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"user_online\" */\nexport type User_Online_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type User_Online_Stddev_Samp_Fields = {\n  __typename?: 'user_online_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"user_online\" */\nexport type User_Online_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type User_Online_Sum_Fields = {\n  __typename?: 'user_online_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"user_online\" */\nexport type User_Online_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_pop on columns */\nexport type User_Online_Var_Pop_Fields = {\n  __typename?: 'user_online_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"user_online\" */\nexport type User_Online_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type User_Online_Var_Samp_Fields = {\n  __typename?: 'user_online_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"user_online\" */\nexport type User_Online_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type User_Online_Variance_Fields = {\n  __typename?: 'user_online_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"user_online\" */\nexport type User_Online_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** ordering options when selecting data from \"user\" */\nexport type User_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  channel_thread_messages_aggregate?: Maybe<Channel_Thread_Message_Aggregate_Order_By>;\n  channels_aggregate?: Maybe<Channel_Aggregate_Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  messages_aggregate?: Maybe<Message_Aggregate_Order_By>;\n  user_channels_aggregate?: Maybe<User_Channels_Aggregate_Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"user\" */\nexport type User_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"user\" */\nexport enum User_Select_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  LastSeen = 'last_seen',\n  /** column name */\n  LastTyped = 'last_typed',\n  /** column name */\n  LastTypedChannel = 'last_typed_channel',\n  /** column name */\n  Username = 'username'\n}\n\n/** input type for updating data in table \"user\" */\nexport type User_Set_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type User_Stddev_Fields = {\n  __typename?: 'user_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"user\" */\nexport type User_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type User_Stddev_Pop_Fields = {\n  __typename?: 'user_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"user\" */\nexport type User_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type User_Stddev_Samp_Fields = {\n  __typename?: 'user_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"user\" */\nexport type User_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type User_Sum_Fields = {\n  __typename?: 'user_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"user\" */\nexport type User_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"user_typing\" */\nexport type User_Typing = {\n  __typename?: 'user_typing';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregated selection of \"user_typing\" */\nexport type User_Typing_Aggregate = {\n  __typename?: 'user_typing_aggregate';\n  aggregate?: Maybe<User_Typing_Aggregate_Fields>;\n  nodes: Array<User_Typing>;\n};\n\n/** aggregate fields of \"user_typing\" */\nexport type User_Typing_Aggregate_Fields = {\n  __typename?: 'user_typing_aggregate_fields';\n  avg?: Maybe<User_Typing_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<User_Typing_Max_Fields>;\n  min?: Maybe<User_Typing_Min_Fields>;\n  stddev?: Maybe<User_Typing_Stddev_Fields>;\n  stddev_pop?: Maybe<User_Typing_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<User_Typing_Stddev_Samp_Fields>;\n  sum?: Maybe<User_Typing_Sum_Fields>;\n  var_pop?: Maybe<User_Typing_Var_Pop_Fields>;\n  var_samp?: Maybe<User_Typing_Var_Samp_Fields>;\n  variance?: Maybe<User_Typing_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"user_typing\" */\nexport type User_Typing_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<User_Typing_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"user_typing\" */\nexport type User_Typing_Aggregate_Order_By = {\n  avg?: Maybe<User_Typing_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<User_Typing_Max_Order_By>;\n  min?: Maybe<User_Typing_Min_Order_By>;\n  stddev?: Maybe<User_Typing_Stddev_Order_By>;\n  stddev_pop?: Maybe<User_Typing_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<User_Typing_Stddev_Samp_Order_By>;\n  sum?: Maybe<User_Typing_Sum_Order_By>;\n  var_pop?: Maybe<User_Typing_Var_Pop_Order_By>;\n  var_samp?: Maybe<User_Typing_Var_Samp_Order_By>;\n  variance?: Maybe<User_Typing_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"user_typing\" */\nexport type User_Typing_Arr_Rel_Insert_Input = {\n  data: Array<User_Typing_Insert_Input>;\n};\n\n/** aggregate avg on columns */\nexport type User_Typing_Avg_Fields = {\n  __typename?: 'user_typing_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"user_typing\" */\nexport type User_Typing_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"user_typing\". All fields are combined with a logical 'AND'. */\nexport type User_Typing_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<User_Typing_Bool_Exp>>>;\n  _not?: Maybe<User_Typing_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<User_Typing_Bool_Exp>>>;\n  auth0_user_id?: Maybe<String_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  last_seen?: Maybe<Timestamptz_Comparison_Exp>;\n  last_typed?: Maybe<Timestamptz_Comparison_Exp>;\n  last_typed_channel?: Maybe<Int_Comparison_Exp>;\n  username?: Maybe<String_Comparison_Exp>;\n};\n\n/** input type for incrementing integer column in table \"user_typing\" */\nexport type User_Typing_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"user_typing\" */\nexport type User_Typing_Insert_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type User_Typing_Max_Fields = {\n  __typename?: 'user_typing_max_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"user_typing\" */\nexport type User_Typing_Max_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type User_Typing_Min_Fields = {\n  __typename?: 'user_typing_min_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"user_typing\" */\nexport type User_Typing_Min_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"user_typing\" */\nexport type User_Typing_Mutation_Response = {\n  __typename?: 'user_typing_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<User_Typing>;\n};\n\n/** input type for inserting object relation for remote table \"user_typing\" */\nexport type User_Typing_Obj_Rel_Insert_Input = {\n  data: User_Typing_Insert_Input;\n};\n\n/** ordering options when selecting data from \"user_typing\" */\nexport type User_Typing_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  last_seen?: Maybe<Order_By>;\n  last_typed?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** select columns of table \"user_typing\" */\nexport enum User_Typing_Select_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  LastSeen = 'last_seen',\n  /** column name */\n  LastTyped = 'last_typed',\n  /** column name */\n  LastTypedChannel = 'last_typed_channel',\n  /** column name */\n  Username = 'username'\n}\n\n/** input type for updating data in table \"user_typing\" */\nexport type User_Typing_Set_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  last_seen?: Maybe<Scalars['timestamptz']>;\n  last_typed?: Maybe<Scalars['timestamptz']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type User_Typing_Stddev_Fields = {\n  __typename?: 'user_typing_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"user_typing\" */\nexport type User_Typing_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type User_Typing_Stddev_Pop_Fields = {\n  __typename?: 'user_typing_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"user_typing\" */\nexport type User_Typing_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type User_Typing_Stddev_Samp_Fields = {\n  __typename?: 'user_typing_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"user_typing\" */\nexport type User_Typing_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type User_Typing_Sum_Fields = {\n  __typename?: 'user_typing_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  last_typed_channel?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"user_typing\" */\nexport type User_Typing_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate var_pop on columns */\nexport type User_Typing_Var_Pop_Fields = {\n  __typename?: 'user_typing_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"user_typing\" */\nexport type User_Typing_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type User_Typing_Var_Samp_Fields = {\n  __typename?: 'user_typing_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"user_typing\" */\nexport type User_Typing_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type User_Typing_Variance_Fields = {\n  __typename?: 'user_typing_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"user_typing\" */\nexport type User_Typing_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** update columns of table \"user\" */\nexport enum User_Update_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  LastSeen = 'last_seen',\n  /** column name */\n  LastTyped = 'last_typed',\n  /** column name */\n  LastTypedChannel = 'last_typed_channel',\n  /** column name */\n  Username = 'username'\n}\n\n/** aggregate var_pop on columns */\nexport type User_Var_Pop_Fields = {\n  __typename?: 'user_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"user\" */\nexport type User_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type User_Var_Samp_Fields = {\n  __typename?: 'user_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"user\" */\nexport type User_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type User_Variance_Fields = {\n  __typename?: 'user_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  last_typed_channel?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"user\" */\nexport type User_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  last_typed_channel?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"user_votes\" */\nexport type User_Votes = {\n  __typename?: 'user_votes';\n  auth0_user_id: Scalars['String'];\n  id: Scalars['Int'];\n  poll_answer_id: Scalars['Int'];\n  poll_question_id: Scalars['Int'];\n  username: Scalars['String'];\n  voted_at: Scalars['timestamptz'];\n};\n\n/** aggregated selection of \"user_votes\" */\nexport type User_Votes_Aggregate = {\n  __typename?: 'user_votes_aggregate';\n  aggregate?: Maybe<User_Votes_Aggregate_Fields>;\n  nodes: Array<User_Votes>;\n};\n\n/** aggregate fields of \"user_votes\" */\nexport type User_Votes_Aggregate_Fields = {\n  __typename?: 'user_votes_aggregate_fields';\n  avg?: Maybe<User_Votes_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<User_Votes_Max_Fields>;\n  min?: Maybe<User_Votes_Min_Fields>;\n  stddev?: Maybe<User_Votes_Stddev_Fields>;\n  stddev_pop?: Maybe<User_Votes_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<User_Votes_Stddev_Samp_Fields>;\n  sum?: Maybe<User_Votes_Sum_Fields>;\n  var_pop?: Maybe<User_Votes_Var_Pop_Fields>;\n  var_samp?: Maybe<User_Votes_Var_Samp_Fields>;\n  variance?: Maybe<User_Votes_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"user_votes\" */\nexport type User_Votes_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<User_Votes_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"user_votes\" */\nexport type User_Votes_Aggregate_Order_By = {\n  avg?: Maybe<User_Votes_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<User_Votes_Max_Order_By>;\n  min?: Maybe<User_Votes_Min_Order_By>;\n  stddev?: Maybe<User_Votes_Stddev_Order_By>;\n  stddev_pop?: Maybe<User_Votes_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<User_Votes_Stddev_Samp_Order_By>;\n  sum?: Maybe<User_Votes_Sum_Order_By>;\n  var_pop?: Maybe<User_Votes_Var_Pop_Order_By>;\n  var_samp?: Maybe<User_Votes_Var_Samp_Order_By>;\n  variance?: Maybe<User_Votes_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"user_votes\" */\nexport type User_Votes_Arr_Rel_Insert_Input = {\n  data: Array<User_Votes_Insert_Input>;\n  on_conflict?: Maybe<User_Votes_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type User_Votes_Avg_Fields = {\n  __typename?: 'user_votes_avg_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"user_votes\" */\nexport type User_Votes_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"user_votes\". All fields are combined with a logical 'AND'. */\nexport type User_Votes_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<User_Votes_Bool_Exp>>>;\n  _not?: Maybe<User_Votes_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<User_Votes_Bool_Exp>>>;\n  auth0_user_id?: Maybe<String_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  poll_answer_id?: Maybe<Int_Comparison_Exp>;\n  poll_question_id?: Maybe<Int_Comparison_Exp>;\n  username?: Maybe<String_Comparison_Exp>;\n  voted_at?: Maybe<Timestamptz_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"user_votes\" */\nexport enum User_Votes_Constraint {\n  /** unique or primary key constraint */\n  UserVotesPkey = 'user_votes_pkey'\n}\n\n/** input type for incrementing integer column in table \"user_votes\" */\nexport type User_Votes_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"user_votes\" */\nexport type User_Votes_Insert_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n  voted_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** aggregate max on columns */\nexport type User_Votes_Max_Fields = {\n  __typename?: 'user_votes_max_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n  voted_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by max() on columns of table \"user_votes\" */\nexport type User_Votes_Max_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n  voted_at?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type User_Votes_Min_Fields = {\n  __typename?: 'user_votes_min_fields';\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n  voted_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by min() on columns of table \"user_votes\" */\nexport type User_Votes_Min_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n  voted_at?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"user_votes\" */\nexport type User_Votes_Mutation_Response = {\n  __typename?: 'user_votes_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<User_Votes>;\n};\n\n/** input type for inserting object relation for remote table \"user_votes\" */\nexport type User_Votes_Obj_Rel_Insert_Input = {\n  data: User_Votes_Insert_Input;\n  on_conflict?: Maybe<User_Votes_On_Conflict>;\n};\n\n/** on conflict condition type for table \"user_votes\" */\nexport type User_Votes_On_Conflict = {\n  constraint: User_Votes_Constraint;\n  update_columns: Array<User_Votes_Update_Column>;\n  where?: Maybe<User_Votes_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"user_votes\" */\nexport type User_Votes_Order_By = {\n  auth0_user_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n  voted_at?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"user_votes\" */\nexport type User_Votes_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"user_votes\" */\nexport enum User_Votes_Select_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  PollAnswerId = 'poll_answer_id',\n  /** column name */\n  PollQuestionId = 'poll_question_id',\n  /** column name */\n  Username = 'username',\n  /** column name */\n  VotedAt = 'voted_at'\n}\n\n/** input type for updating data in table \"user_votes\" */\nexport type User_Votes_Set_Input = {\n  auth0_user_id?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n  username?: Maybe<Scalars['String']>;\n  voted_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** aggregate stddev on columns */\nexport type User_Votes_Stddev_Fields = {\n  __typename?: 'user_votes_stddev_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"user_votes\" */\nexport type User_Votes_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type User_Votes_Stddev_Pop_Fields = {\n  __typename?: 'user_votes_stddev_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"user_votes\" */\nexport type User_Votes_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type User_Votes_Stddev_Samp_Fields = {\n  __typename?: 'user_votes_stddev_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"user_votes\" */\nexport type User_Votes_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type User_Votes_Sum_Fields = {\n  __typename?: 'user_votes_sum_fields';\n  id?: Maybe<Scalars['Int']>;\n  poll_answer_id?: Maybe<Scalars['Int']>;\n  poll_question_id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"user_votes\" */\nexport type User_Votes_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"user_votes\" */\nexport enum User_Votes_Update_Column {\n  /** column name */\n  Auth0UserId = 'auth0_user_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  PollAnswerId = 'poll_answer_id',\n  /** column name */\n  PollQuestionId = 'poll_question_id',\n  /** column name */\n  Username = 'username',\n  /** column name */\n  VotedAt = 'voted_at'\n}\n\n/** aggregate var_pop on columns */\nexport type User_Votes_Var_Pop_Fields = {\n  __typename?: 'user_votes_var_pop_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"user_votes\" */\nexport type User_Votes_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type User_Votes_Var_Samp_Fields = {\n  __typename?: 'user_votes_var_samp_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"user_votes\" */\nexport type User_Votes_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type User_Votes_Variance_Fields = {\n  __typename?: 'user_votes_variance_fields';\n  id?: Maybe<Scalars['Float']>;\n  poll_answer_id?: Maybe<Scalars['Float']>;\n  poll_question_id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"user_votes\" */\nexport type User_Votes_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n  poll_answer_id?: Maybe<Order_By>;\n  poll_question_id?: Maybe<Order_By>;\n};\n\n\nexport type ValidateAndAddDirectMessageChannelOutput = {\n  __typename?: 'validateAndAddDirectMessageChannelOutput';\n  id: Scalars['Int'];\n  name: Scalars['String'];\n};\n\nexport type InsertMessageMutationVariables = Exact<{\n  message: Message_Insert_Input;\n}>;\n\n\nexport type InsertMessageMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_message?: Maybe<(\n    { __typename?: 'message_mutation_response' }\n    & { returning: Array<(\n      { __typename?: 'message' }\n      & Pick<Message, 'id' | 'timestamp' | 'text'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'username'>\n      ), channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'name'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type UpdateMessageMutationVariables = Exact<{\n  _eq: Scalars['Int'];\n  text: Scalars['String'];\n  deleted?: Maybe<Scalars['Boolean']>;\n}>;\n\n\nexport type UpdateMessageMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_message?: Maybe<(\n    { __typename?: 'message_mutation_response' }\n    & Pick<Message_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type DeleteMessageMutationVariables = Exact<{\n  message_id?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type DeleteMessageMutation = (\n  { __typename?: 'mutation_root' }\n  & { delete_message?: Maybe<(\n    { __typename?: 'message_mutation_response' }\n    & Pick<Message_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type SetUserOnlineMutationVariables = Exact<{\n  user_id: Scalars['String'];\n}>;\n\n\nexport type SetUserOnlineMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_user?: Maybe<(\n    { __typename?: 'user_mutation_response' }\n    & Pick<User_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type AddChannelMutationVariables = Exact<{\n  channel: Channel_Insert_Input;\n}>;\n\n\nexport type AddChannelMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_channel?: Maybe<(\n    { __typename?: 'channel_mutation_response' }\n    & { returning: Array<(\n      { __typename?: 'channel' }\n      & Pick<Channel, 'id' | 'name' | 'owner_id' | 'is_private'>\n    )> }\n  )> }\n);\n\nexport type ValidateAndAddDirectMessageChannelMutationVariables = Exact<{\n  name: Scalars['String'];\n  user_id1: Scalars['String'];\n  user_id2: Scalars['String'];\n}>;\n\n\nexport type ValidateAndAddDirectMessageChannelMutation = (\n  { __typename?: 'mutation_root' }\n  & { validateAndAddDirectMessageChannel?: Maybe<(\n    { __typename?: 'validateAndAddDirectMessageChannelOutput' }\n    & Pick<ValidateAndAddDirectMessageChannelOutput, 'id' | 'name'>\n  )> }\n);\n\nexport type AddChannelUserMutationVariables = Exact<{\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n}>;\n\n\nexport type AddChannelUserMutation = (\n  { __typename?: 'mutation_root' }\n  & { addChannelUser?: Maybe<(\n    { __typename?: 'AddChannelUserOutput' }\n    & Pick<AddChannelUserOutput, 'affected_rows'>\n  )> }\n);\n\nexport type SendTypingEventMutationVariables = Exact<{\n  user_id: Scalars['String'];\n  channel_id: Scalars['Int'];\n}>;\n\n\nexport type SendTypingEventMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_user?: Maybe<(\n    { __typename?: 'user_mutation_response' }\n    & Pick<User_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type UpsertMessageCursorMutationVariables = Exact<{\n  channel_id: Scalars['Int'];\n  message_id: Scalars['Int'];\n  user_id: Scalars['String'];\n}>;\n\n\nexport type UpsertMessageCursorMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_message_cursor?: Maybe<(\n    { __typename?: 'message_cursor_mutation_response' }\n    & { returning: Array<(\n      { __typename?: 'message_cursor' }\n      & Pick<Message_Cursor, 'channel_id' | 'message_id' | 'user_id'>\n    )> }\n  )> }\n);\n\nexport type InsertChannelThreadMessageMutationVariables = Exact<{\n  channel_thread_id: Scalars['Int'];\n  message: Scalars['String'];\n  user_id: Scalars['String'];\n  image?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type InsertChannelThreadMessageMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_channel_thread_message?: Maybe<(\n    { __typename?: 'channel_thread_message_mutation_response' }\n    & Pick<Channel_Thread_Message_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'channel_thread_message' }\n      & Pick<Channel_Thread_Message, 'id' | 'image' | 'message' | 'timestamp' | 'user_id'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'auth0_user_id' | 'username'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type DeleteThreadMessageMutationVariables = Exact<{\n  message_id: Scalars['Int'];\n}>;\n\n\nexport type DeleteThreadMessageMutation = (\n  { __typename?: 'mutation_root' }\n  & { delete_channel_thread_message?: Maybe<(\n    { __typename?: 'channel_thread_message_mutation_response' }\n    & Pick<Channel_Thread_Message_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type InsertChannelThreadMutationVariables = Exact<{\n  message_id: Scalars['Int'];\n}>;\n\n\nexport type InsertChannelThreadMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_channel_thread?: Maybe<(\n    { __typename?: 'channel_thread_mutation_response' }\n    & { returning: Array<(\n      { __typename?: 'channel_thread' }\n      & { message?: Maybe<(\n        { __typename?: 'message' }\n        & Pick<Message, 'image' | 'text' | 'timestamp' | 'id'>\n        & { user: (\n          { __typename?: 'user' }\n          & Pick<User, 'auth0_user_id' | 'id' | 'username'>\n        ) }\n      )> }\n    )> }\n  )> }\n);\n\nexport type AddPollQuestionMutationVariables = Exact<{\n  text?: Maybe<Scalars['String']>;\n  owner_id?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type AddPollQuestionMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_poll_questions?: Maybe<(\n    { __typename?: 'poll_questions_mutation_response' }\n    & Pick<Poll_Questions_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type AddAnswerToQuestionMutationVariables = Exact<{\n  text: Scalars['String'];\n  pollQuestionId: Scalars['Int'];\n}>;\n\n\nexport type AddAnswerToQuestionMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_poll_anwers?: Maybe<(\n    { __typename?: 'poll_anwers_mutation_response' }\n    & Pick<Poll_Anwers_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type AddPublishPollQuestionToChannelMutationVariables = Exact<{\n  channelID: Scalars['Int'];\n  pollQuestionID: Scalars['Int'];\n}>;\n\n\nexport type AddPublishPollQuestionToChannelMutation = (\n  { __typename?: 'mutation_root' }\n  & { channelPoll?: Maybe<(\n    { __typename?: 'channel_poll_mutation_response' }\n    & Pick<Channel_Poll_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'channel_poll' }\n      & Pick<Channel_Poll, 'channel_id' | 'id' | 'poll_questions'>\n    )> }\n  )> }\n);\n\nexport type SetPollAnswerVoteMutationVariables = Exact<{\n  pollAnswerId: Scalars['Int'];\n  newVote: Scalars['Int'];\n}>;\n\n\nexport type SetPollAnswerVoteMutation = (\n  { __typename?: 'mutation_root' }\n  & { updatePollAnswer?: Maybe<(\n    { __typename?: 'poll_anwers_mutation_response' }\n    & Pick<Poll_Anwers_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'poll_anwers' }\n      & Pick<Poll_Anwers, 'votes'>\n    )> }\n  )> }\n);\n\nexport type SetPublishPollQuestionStateMutationVariables = Exact<{\n  pollQuestionId: Scalars['Int'];\n  is_active?: Maybe<Scalars['Boolean']>;\n}>;\n\n\nexport type SetPublishPollQuestionStateMutation = (\n  { __typename?: 'mutation_root' }\n  & { setPollQuestionState?: Maybe<(\n    { __typename?: 'poll_questions_mutation_response' }\n    & Pick<Poll_Questions_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'poll_questions' }\n      & Pick<Poll_Questions, 'is_active'>\n    )> }\n  )> }\n);\n\nexport type DeletePollQuestionMutationVariables = Exact<{\n  pollQuestionId: Scalars['Int'];\n}>;\n\n\nexport type DeletePollQuestionMutation = (\n  { __typename?: 'mutation_root' }\n  & { delete_poll_anwers?: Maybe<(\n    { __typename?: 'poll_anwers_mutation_response' }\n    & Pick<Poll_Anwers_Mutation_Response, 'affected_rows'>\n  )>, deletePollQuestion?: Maybe<(\n    { __typename?: 'poll_questions_mutation_response' }\n    & Pick<Poll_Questions_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type DeletePollQuestionFromChannelMutationVariables = Exact<{\n  pollQuestionId: Scalars['Int'];\n  channelId: Scalars['Int'];\n}>;\n\n\nexport type DeletePollQuestionFromChannelMutation = (\n  { __typename?: 'mutation_root' }\n  & { delete_channel_poll?: Maybe<(\n    { __typename?: 'channel_poll_mutation_response' }\n    & Pick<Channel_Poll_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type UpdatePollAnswerTextMutationVariables = Exact<{\n  text: Scalars['String'];\n  pollAnswerId: Scalars['Int'];\n}>;\n\n\nexport type UpdatePollAnswerTextMutation = (\n  { __typename?: 'mutation_root' }\n  & { pollAnswerText?: Maybe<(\n    { __typename?: 'poll_anwers_mutation_response' }\n    & Pick<Poll_Anwers_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'poll_anwers' }\n      & Pick<Poll_Anwers, 'text'>\n    )> }\n  )> }\n);\n\nexport type DeletePollAnswerIdMutationVariables = Exact<{\n  pollAnswerId: Scalars['Int'];\n}>;\n\n\nexport type DeletePollAnswerIdMutation = (\n  { __typename?: 'mutation_root' }\n  & { delete_poll_anwers?: Maybe<(\n    { __typename?: 'poll_anwers_mutation_response' }\n    & Pick<Poll_Anwers_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type SetUserVotePollQuestionMutationVariables = Exact<{\n  userName?: Maybe<Scalars['String']>;\n  auth0UserId?: Maybe<Scalars['String']>;\n  pollQuestionId?: Maybe<Scalars['Int']>;\n  pollAnswerId?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type SetUserVotePollQuestionMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_user_votes?: Maybe<(\n    { __typename?: 'user_votes_mutation_response' }\n    & Pick<User_Votes_Mutation_Response, 'affected_rows'>\n  )> }\n);\n\nexport type GetMessagesQueryVariables = Exact<{\n  last_received_id?: Maybe<Scalars['Int']>;\n  last_received_ts?: Maybe<Scalars['timestamptz']>;\n  channel?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type GetMessagesQuery = (\n  { __typename?: 'query_root' }\n  & { channel: Array<(\n    { __typename?: 'channel' }\n    & { messages: Array<(\n      { __typename?: 'message' }\n      & Pick<Message, 'id' | 'text' | 'timestamp'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'username'>\n      ), channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'name'>\n      ), channel_threads: Array<(\n        { __typename?: 'channel_thread' }\n        & Pick<Channel_Thread, 'id'>\n      )> }\n    )> }\n  )> }\n);\n\nexport type GetMessagesSumQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetMessagesSumQuery = (\n  { __typename?: 'query_root' }\n  & { channel_aggregate: (\n    { __typename?: 'channel_aggregate' }\n    & { nodes: Array<(\n      { __typename?: 'channel' }\n      & { messages: Array<(\n        { __typename?: 'message' }\n        & Pick<Message, 'channel_id'>\n        & { channel: (\n          { __typename?: 'channel' }\n          & Pick<Channel, 'name'>\n        ) }\n      )>, messages_aggregate: (\n        { __typename?: 'message_aggregate' }\n        & { aggregate?: Maybe<(\n          { __typename?: 'message_aggregate_fields' }\n          & Pick<Message_Aggregate_Fields, 'count'>\n        )> }\n      ) }\n    )> }\n  ) }\n);\n\nexport type GetChannelsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetChannelsQuery = (\n  { __typename?: 'query_root' }\n  & { channels: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'name' | 'id' | 'is_private' | 'owner_id'>\n  )> }\n);\n\nexport type GetUserListQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserListQuery = (\n  { __typename?: 'query_root' }\n  & { users: Array<(\n    { __typename?: 'user' }\n    & Pick<User, 'username' | 'id' | 'auth0_user_id' | 'last_seen'>\n  )> }\n);\n\nexport type GetChannelByNameQueryVariables = Exact<{\n  name: Scalars['String'];\n}>;\n\n\nexport type GetChannelByNameQuery = (\n  { __typename?: 'query_root' }\n  & { channel: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'name' | 'id' | 'is_private' | 'owner_id' | 'channel_type'>\n  )> }\n);\n\nexport type GetAuth0UserByIdQueryVariables = Exact<{\n  user_id?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type GetAuth0UserByIdQuery = (\n  { __typename?: 'query_root' }\n  & { user: Array<(\n    { __typename?: 'user' }\n    & Pick<User, 'id' | 'username' | 'auth0_user_id'>\n    & { user_channels: Array<(\n      { __typename?: 'user_channels' }\n      & { channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'name' | 'id' | 'is_private'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type GetChannelThreadIdQueryVariables = Exact<{\n  message_id?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetChannelThreadIdQuery = (\n  { __typename?: 'query_root' }\n  & { channel_thread: Array<(\n    { __typename?: 'channel_thread' }\n    & Pick<Channel_Thread, 'id'>\n  )> }\n);\n\nexport type GetChannelThreadParentMessageQueryVariables = Exact<{\n  limit?: Maybe<Scalars['Int']>;\n  message_id?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetChannelThreadParentMessageQuery = (\n  { __typename?: 'query_root' }\n  & { channel_thread_message: Array<(\n    { __typename?: 'channel_thread_message' }\n    & Pick<Channel_Thread_Message, 'channel_thread_id' | 'timestamp'>\n    & { channel_thread: (\n      { __typename?: 'channel_thread' }\n      & { message?: Maybe<(\n        { __typename?: 'message' }\n        & Pick<Message, 'text' | 'timestamp' | 'image' | 'id' | 'user_id'>\n        & { user: (\n          { __typename?: 'user' }\n          & Pick<User, 'auth0_user_id' | 'username'>\n        ) }\n      )> }\n    ) }\n  )> }\n);\n\nexport type GetChannelThreadQueryVariables = Exact<{\n  message_id?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetChannelThreadQuery = (\n  { __typename?: 'query_root' }\n  & { channel_thread: Array<(\n    { __typename?: 'channel_thread' }\n    & Pick<Channel_Thread, 'id'>\n    & { message?: Maybe<(\n      { __typename?: 'message' }\n      & Pick<Message, 'id' | 'image' | 'text' | 'deleted' | 'timestamp'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'auth0_user_id' | 'id' | 'username'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type GetPollQuestionsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetPollQuestionsQuery = (\n  { __typename?: 'query_root' }\n  & { questions: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'id' | 'owner_id' | 'text'>\n  )> }\n);\n\nexport type GetPollQuestionAnswersQueryVariables = Exact<{\n  pollQuestionId?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetPollQuestionAnswersQuery = (\n  { __typename?: 'query_root' }\n  & { poll_question: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'id' | 'text' | 'is_active'>\n  )>, poll_answers: Array<(\n    { __typename?: 'poll_anwers' }\n    & Pick<Poll_Anwers, 'question_id' | 'text' | 'id' | 'votes'>\n  )> }\n);\n\nexport type GetPublicChannelsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetPublicChannelsQuery = (\n  { __typename?: 'query_root' }\n  & { channels: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'id' | 'name'>\n    & { channel_polls: Array<(\n      { __typename?: 'channel_poll' }\n      & { poll_question: (\n        { __typename?: 'poll_questions' }\n        & Pick<Poll_Questions, 'is_active'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type GetChannelPollsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetChannelPollsQuery = (\n  { __typename?: 'query_root' }\n  & { channelPoll: Array<(\n    { __typename?: 'channel_poll' }\n    & Pick<Channel_Poll, 'channel_id' | 'id' | 'poll_questions'>\n  )> }\n);\n\nexport type GetChannelPollQuestionQueryVariables = Exact<{\n  channelId?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetChannelPollQuestionQuery = (\n  { __typename?: 'query_root' }\n  & { getChannelPoll: Array<(\n    { __typename?: 'channel_poll' }\n    & Pick<Channel_Poll, 'id'>\n    & { poll_question: (\n      { __typename?: 'poll_questions' }\n      & Pick<Poll_Questions, 'id' | 'text'>\n      & { poll_anwers: Array<(\n        { __typename?: 'poll_anwers' }\n        & Pick<Poll_Anwers, 'text' | 'question_id'>\n      )> }\n    ) }\n  )> }\n);\n\nexport type GetPollAnswerVotesQueryVariables = Exact<{\n  pollAnswerId: Scalars['Int'];\n}>;\n\n\nexport type GetPollAnswerVotesQuery = (\n  { __typename?: 'query_root' }\n  & { poll_anwers: Array<(\n    { __typename?: 'poll_anwers' }\n    & Pick<Poll_Anwers, 'id' | 'votes'>\n  )> }\n);\n\nexport type WatchMessagesSubscriptionVariables = Exact<{\n  channelId: Scalars['Int'];\n  limit?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type WatchMessagesSubscription = (\n  { __typename?: 'subscription_root' }\n  & { messages: Array<(\n    { __typename?: 'message' }\n    & Pick<Message, 'id' | 'text' | 'image' | 'timestamp' | 'deleted'>\n    & { user: (\n      { __typename?: 'user' }\n      & Pick<User, 'username' | 'auth0_user_id'>\n    ), channel: (\n      { __typename?: 'channel' }\n      & Pick<Channel, 'name'>\n    ) }\n  )> }\n);\n\nexport type WatchChannelThreadMessagesSubscriptionVariables = Exact<{\n  limit: Scalars['Int'];\n  message_id: Scalars['Int'];\n}>;\n\n\nexport type WatchChannelThreadMessagesSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channel_thread_message: Array<(\n    { __typename?: 'channel_thread_message' }\n    & Pick<Channel_Thread_Message, 'id' | 'message' | 'image' | 'channel_thread_id' | 'timestamp'>\n    & { user: (\n      { __typename?: 'user' }\n      & Pick<User, 'username' | 'id' | 'auth0_user_id'>\n    ) }\n  )> }\n);\n\nexport type WatchThreadsSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchThreadsSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channel_thread: Array<(\n    { __typename?: 'channel_thread' }\n    & Pick<Channel_Thread, 'id' | 'message_id'>\n    & { message?: Maybe<(\n      { __typename?: 'message' }\n      & Pick<Message, 'image' | 'text' | 'deleted' | 'timestamp' | 'id' | 'user_id'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'auth0_user_id' | 'username'>\n      ), channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'id' | 'name'>\n      ) }\n    )>, channel_thread_messages: Array<(\n      { __typename?: 'channel_thread_message' }\n      & Pick<Channel_Thread_Message, 'id' | 'image' | 'message' | 'timestamp' | 'user_id'>\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'auth0_user_id' | 'username'>\n      ) }\n    )>, channel_thread_messages_aggregate: (\n      { __typename?: 'channel_thread_message_aggregate' }\n      & { aggregate?: Maybe<(\n        { __typename?: 'channel_thread_message_aggregate_fields' }\n        & Pick<Channel_Thread_Message_Aggregate_Fields, 'count'>\n      )> }\n    ) }\n  )> }\n);\n\nexport type WatchOnlineUsersSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchOnlineUsersSubscription = (\n  { __typename?: 'subscription_root' }\n  & { users: Array<(\n    { __typename?: 'user_online' }\n    & Pick<User_Online, 'id' | 'username' | 'auth0_user_id'>\n  )> }\n);\n\nexport type WatchChannelsSubscriptionVariables = Exact<{\n  channel_type: Channel_Type_Enum;\n}>;\n\n\nexport type WatchChannelsSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channels: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'name' | 'id' | 'is_private' | 'owner_id'>\n  )> }\n);\n\nexport type WatchDirectMessageChannelsSubscriptionVariables = Exact<{\n  channel_type: Channel_Type_Enum;\n  user_id?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type WatchDirectMessageChannelsSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channels: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'name' | 'id' | 'is_private' | 'owner_id'>\n    & { user_channels: Array<(\n      { __typename?: 'user_channels' }\n      & { user: (\n        { __typename?: 'user' }\n        & Pick<User, 'username' | 'auth0_user_id'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type WatchUsersSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchUsersSubscription = (\n  { __typename?: 'subscription_root' }\n  & { user: Array<(\n    { __typename?: 'user' }\n    & Pick<User, 'username' | 'auth0_user_id'>\n  )> }\n);\n\nexport type WatchUsersWhoHaveNotSubscribedToChannelSubscriptionVariables = Exact<{\n  user_id: Scalars['String'];\n  channel_id: Scalars['Int'];\n}>;\n\n\nexport type WatchUsersWhoHaveNotSubscribedToChannelSubscription = (\n  { __typename?: 'subscription_root' }\n  & { user: Array<(\n    { __typename?: 'user' }\n    & Pick<User, 'auth0_user_id' | 'username'>\n  )> }\n);\n\nexport type WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscriptionVariables = Exact<{\n  user_id: Scalars['String'];\n}>;\n\n\nexport type WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription = (\n  { __typename?: 'subscription_root' }\n  & { user: Array<(\n    { __typename?: 'user' }\n    & Pick<User, 'auth0_user_id' | 'username'>\n    & { user_channels: Array<(\n      { __typename?: 'user_channels' }\n      & Pick<User_Channels, 'channel_id'>\n      & { channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'name'>\n        & { user_channels: Array<(\n          { __typename?: 'user_channels' }\n          & { user: (\n            { __typename?: 'user' }\n            & Pick<User, 'auth0_user_id' | 'username'>\n          ) }\n        )> }\n      ) }\n    )> }\n  )> }\n);\n\nexport type GetUserIsTypingSubscriptionVariables = Exact<{\n  self_id: Scalars['String'];\n  channel_id: Scalars['Int'];\n}>;\n\n\nexport type GetUserIsTypingSubscription = (\n  { __typename?: 'subscription_root' }\n  & { user_typing: Array<(\n    { __typename?: 'user_typing' }\n    & Pick<User_Typing, 'last_typed' | 'username'>\n  )> }\n);\n\nexport type WatchNewMessagesSubscriptionVariables = Exact<{\n  channelId: Scalars['Int'];\n}>;\n\n\nexport type WatchNewMessagesSubscription = (\n  { __typename?: 'subscription_root' }\n  & { newMessages: Array<(\n    { __typename?: 'message' }\n    & Pick<Message, 'id' | 'text' | 'timestamp'>\n    & { user: (\n      { __typename?: 'user' }\n      & Pick<User, 'username'>\n    ) }\n  )> }\n);\n\nexport type WatchChannelsLastMessageIdSubscriptionVariables = Exact<{\n  channel_type?: Channel_Type_Enum;\n}>;\n\n\nexport type WatchChannelsLastMessageIdSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channels: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'name' | 'id' | 'is_private' | 'owner_id'>\n    & { messages: Array<(\n      { __typename?: 'message' }\n      & Pick<Message, 'id'>\n    )> }\n  )> }\n);\n\nexport type WatchMessageCursorSubscriptionVariables = Exact<{\n  channel_id: Scalars['Int'];\n  user_id: Scalars['String'];\n}>;\n\n\nexport type WatchMessageCursorSubscription = (\n  { __typename?: 'subscription_root' }\n  & { message_cursor: Array<(\n    { __typename?: 'message_cursor' }\n    & Pick<Message_Cursor, 'channel_id' | 'message_id' | 'user_id'>\n  )> }\n);\n\nexport type WatchGetPollQuestionsSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchGetPollQuestionsSubscription = (\n  { __typename?: 'subscription_root' }\n  & { questions: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'id' | 'text' | 'created_at' | 'updated_at' | 'owner_id' | 'is_active'>\n    & { channel_polls: Array<(\n      { __typename?: 'channel_poll' }\n      & { channel: (\n        { __typename?: 'channel' }\n        & Pick<Channel, 'name'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type WatchGetChannelPollQuestionPublishStateSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchGetChannelPollQuestionPublishStateSubscription = (\n  { __typename?: 'subscription_root' }\n  & { getChannelPollQuestionPublishState: Array<(\n    { __typename?: 'channel_poll' }\n    & Pick<Channel_Poll, 'channel_id' | 'id' | 'poll_questions'>\n    & { channel: (\n      { __typename?: 'channel' }\n      & Pick<Channel, 'name'>\n    ), poll_question: (\n      { __typename?: 'poll_questions' }\n      & Pick<Poll_Questions, 'text' | 'is_active'>\n    ) }\n  )> }\n);\n\nexport type WatchGetPollQuestionSubscriptionVariables = Exact<{\n  pollQuestionId?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type WatchGetPollQuestionSubscription = (\n  { __typename?: 'subscription_root' }\n  & { poll_question: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'id' | 'text' | 'is_active'>\n  )> }\n);\n\nexport type WatchGetPollAnswersSubscriptionVariables = Exact<{\n  pollQuestionId: Scalars['Int'];\n}>;\n\n\nexport type WatchGetPollAnswersSubscription = (\n  { __typename?: 'subscription_root' }\n  & { poll_answers: Array<(\n    { __typename?: 'poll_anwers' }\n    & Pick<Poll_Anwers, 'question_id' | 'text' | 'id' | 'votes'>\n  )> }\n);\n\nexport type WatchChannelPollQuestionSubscriptionVariables = Exact<{\n  channelId: Scalars['Int'];\n}>;\n\n\nexport type WatchChannelPollQuestionSubscription = (\n  { __typename?: 'subscription_root' }\n  & { getChannelPoll: Array<(\n    { __typename?: 'channel_poll' }\n    & Pick<Channel_Poll, 'id'>\n    & { poll_question: (\n      { __typename?: 'poll_questions' }\n      & Pick<Poll_Questions, 'id' | 'text'>\n      & { poll_anwers: Array<(\n        { __typename?: 'poll_anwers' }\n        & Pick<Poll_Anwers, 'text' | 'votes' | 'id'>\n      )> }\n    ) }\n  )> }\n);\n\nexport type WatchPollAnswerVotesSubscriptionVariables = Exact<{\n  pollAnswerId: Scalars['Int'];\n}>;\n\n\nexport type WatchPollAnswerVotesSubscription = (\n  { __typename?: 'subscription_root' }\n  & { pollAnswerVotes: Array<(\n    { __typename?: 'poll_anwers' }\n    & Pick<Poll_Anwers, 'id' | 'votes'>\n  )> }\n);\n\nexport type GetPollQuestionStateSubscriptionVariables = Exact<{\n  pollQuestionId: Scalars['Int'];\n}>;\n\n\nexport type GetPollQuestionStateSubscription = (\n  { __typename?: 'subscription_root' }\n  & { poll_questions: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'is_active'>\n  )> }\n);\n\nexport type WatchGetChannelsSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchGetChannelsSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channel: Array<(\n    { __typename?: 'channel' }\n    & Pick<Channel, 'id' | 'name'>\n    & { channel_polls: Array<(\n      { __typename?: 'channel_poll' }\n      & Pick<Channel_Poll, 'channel_id'>\n      & { poll_question: (\n        { __typename?: 'poll_questions' }\n        & Pick<Poll_Questions, 'id' | 'text'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type WatchChannelHasActivePollSubscriptionVariables = Exact<{\n  currentChannelId: Scalars['Int'];\n}>;\n\n\nexport type WatchChannelHasActivePollSubscription = (\n  { __typename?: 'subscription_root' }\n  & { poll_questions: Array<(\n    { __typename?: 'poll_questions' }\n    & Pick<Poll_Questions, 'id' | 'text'>\n  )> }\n);\n\nexport type WatchChannelPollActiveStateSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type WatchChannelPollActiveStateSubscription = (\n  { __typename?: 'subscription_root' }\n  & { channel_poll: Array<(\n    { __typename?: 'channel_poll' }\n    & Pick<Channel_Poll, 'id'>\n    & { channel: (\n      { __typename?: 'channel' }\n      & Pick<Channel, 'name'>\n      & { channel_polls: Array<(\n        { __typename?: 'channel_poll' }\n        & { poll_question: (\n          { __typename?: 'poll_questions' }\n          & Pick<Poll_Questions, 'created_at'>\n        ) }\n      )> }\n    ) }\n  )> }\n);\n\nexport type WatchCheckUserHasVotedSubscriptionVariables = Exact<{\n  pollQuestionId?: Maybe<Scalars['Int']>;\n  auth0UserId?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type WatchCheckUserHasVotedSubscription = (\n  { __typename?: 'subscription_root' }\n  & { user_votes: Array<(\n    { __typename?: 'user_votes' }\n    & Pick<User_Votes, 'auth0_user_id' | 'poll_question_id' | 'poll_answer_id'>\n  )> }\n);\n\n\nexport const InsertMessageDocument = gql`\n    mutation insertMessage($message: message_insert_input!) {\n  insert_message(objects: [$message]) {\n    returning {\n      id\n      timestamp\n      text\n      user {\n        username\n      }\n      channel {\n        name\n      }\n    }\n  }\n}\n    `;\nexport type InsertMessageMutationFn = Apollo.MutationFunction<InsertMessageMutation, InsertMessageMutationVariables>;\n\n/**\n * __useInsertMessageMutation__\n *\n * To run a mutation, you first call `useInsertMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useInsertMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [insertMessageMutation, { data, loading, error }] = useInsertMessageMutation({\n *   variables: {\n *      message: // value for 'message'\n *   },\n * });\n */\nexport function useInsertMessageMutation(baseOptions?: Apollo.MutationHookOptions<InsertMessageMutation, InsertMessageMutationVariables>) {\n        return Apollo.useMutation<InsertMessageMutation, InsertMessageMutationVariables>(InsertMessageDocument, baseOptions);\n      }\nexport type InsertMessageMutationHookResult = ReturnType<typeof useInsertMessageMutation>;\nexport type InsertMessageMutationResult = Apollo.MutationResult<InsertMessageMutation>;\nexport type InsertMessageMutationOptions = Apollo.BaseMutationOptions<InsertMessageMutation, InsertMessageMutationVariables>;\nexport const UpdateMessageDocument = gql`\n    mutation updateMessage($_eq: Int!, $text: String!, $deleted: Boolean = false) {\n  update_message(where: {id: {_eq: $_eq}}, _set: {text: $text, deleted: $deleted}) {\n    affected_rows\n  }\n}\n    `;\nexport type UpdateMessageMutationFn = Apollo.MutationFunction<UpdateMessageMutation, UpdateMessageMutationVariables>;\n\n/**\n * __useUpdateMessageMutation__\n *\n * To run a mutation, you first call `useUpdateMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateMessageMutation, { data, loading, error }] = useUpdateMessageMutation({\n *   variables: {\n *      _eq: // value for '_eq'\n *      text: // value for 'text'\n *      deleted: // value for 'deleted'\n *   },\n * });\n */\nexport function useUpdateMessageMutation(baseOptions?: Apollo.MutationHookOptions<UpdateMessageMutation, UpdateMessageMutationVariables>) {\n        return Apollo.useMutation<UpdateMessageMutation, UpdateMessageMutationVariables>(UpdateMessageDocument, baseOptions);\n      }\nexport type UpdateMessageMutationHookResult = ReturnType<typeof useUpdateMessageMutation>;\nexport type UpdateMessageMutationResult = Apollo.MutationResult<UpdateMessageMutation>;\nexport type UpdateMessageMutationOptions = Apollo.BaseMutationOptions<UpdateMessageMutation, UpdateMessageMutationVariables>;\nexport const DeleteMessageDocument = gql`\n    mutation deleteMessage($message_id: Int) {\n  delete_message(where: {id: {_eq: $message_id}}) {\n    affected_rows\n  }\n}\n    `;\nexport type DeleteMessageMutationFn = Apollo.MutationFunction<DeleteMessageMutation, DeleteMessageMutationVariables>;\n\n/**\n * __useDeleteMessageMutation__\n *\n * To run a mutation, you first call `useDeleteMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteMessageMutation, { data, loading, error }] = useDeleteMessageMutation({\n *   variables: {\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useDeleteMessageMutation(baseOptions?: Apollo.MutationHookOptions<DeleteMessageMutation, DeleteMessageMutationVariables>) {\n        return Apollo.useMutation<DeleteMessageMutation, DeleteMessageMutationVariables>(DeleteMessageDocument, baseOptions);\n      }\nexport type DeleteMessageMutationHookResult = ReturnType<typeof useDeleteMessageMutation>;\nexport type DeleteMessageMutationResult = Apollo.MutationResult<DeleteMessageMutation>;\nexport type DeleteMessageMutationOptions = Apollo.BaseMutationOptions<DeleteMessageMutation, DeleteMessageMutationVariables>;\nexport const SetUserOnlineDocument = gql`\n    mutation setUserOnline($user_id: String!) {\n  update_user(_set: {last_seen: \"now()\"}, where: {auth0_user_id: {_eq: $user_id}}) {\n    affected_rows\n  }\n}\n    `;\nexport type SetUserOnlineMutationFn = Apollo.MutationFunction<SetUserOnlineMutation, SetUserOnlineMutationVariables>;\n\n/**\n * __useSetUserOnlineMutation__\n *\n * To run a mutation, you first call `useSetUserOnlineMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetUserOnlineMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setUserOnlineMutation, { data, loading, error }] = useSetUserOnlineMutation({\n *   variables: {\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useSetUserOnlineMutation(baseOptions?: Apollo.MutationHookOptions<SetUserOnlineMutation, SetUserOnlineMutationVariables>) {\n        return Apollo.useMutation<SetUserOnlineMutation, SetUserOnlineMutationVariables>(SetUserOnlineDocument, baseOptions);\n      }\nexport type SetUserOnlineMutationHookResult = ReturnType<typeof useSetUserOnlineMutation>;\nexport type SetUserOnlineMutationResult = Apollo.MutationResult<SetUserOnlineMutation>;\nexport type SetUserOnlineMutationOptions = Apollo.BaseMutationOptions<SetUserOnlineMutation, SetUserOnlineMutationVariables>;\nexport const AddChannelDocument = gql`\n    mutation addChannel($channel: channel_insert_input!) {\n  insert_channel(objects: [$channel]) {\n    returning {\n      id\n      name\n      owner_id\n      is_private\n    }\n  }\n}\n    `;\nexport type AddChannelMutationFn = Apollo.MutationFunction<AddChannelMutation, AddChannelMutationVariables>;\n\n/**\n * __useAddChannelMutation__\n *\n * To run a mutation, you first call `useAddChannelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddChannelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addChannelMutation, { data, loading, error }] = useAddChannelMutation({\n *   variables: {\n *      channel: // value for 'channel'\n *   },\n * });\n */\nexport function useAddChannelMutation(baseOptions?: Apollo.MutationHookOptions<AddChannelMutation, AddChannelMutationVariables>) {\n        return Apollo.useMutation<AddChannelMutation, AddChannelMutationVariables>(AddChannelDocument, baseOptions);\n      }\nexport type AddChannelMutationHookResult = ReturnType<typeof useAddChannelMutation>;\nexport type AddChannelMutationResult = Apollo.MutationResult<AddChannelMutation>;\nexport type AddChannelMutationOptions = Apollo.BaseMutationOptions<AddChannelMutation, AddChannelMutationVariables>;\nexport const ValidateAndAddDirectMessageChannelDocument = gql`\n    mutation validateAndAddDirectMessageChannel($name: String!, $user_id1: String!, $user_id2: String!) {\n  validateAndAddDirectMessageChannel(name: $name, user_id1: $user_id1, user_id2: $user_id2) {\n    id\n    name\n  }\n}\n    `;\nexport type ValidateAndAddDirectMessageChannelMutationFn = Apollo.MutationFunction<ValidateAndAddDirectMessageChannelMutation, ValidateAndAddDirectMessageChannelMutationVariables>;\n\n/**\n * __useValidateAndAddDirectMessageChannelMutation__\n *\n * To run a mutation, you first call `useValidateAndAddDirectMessageChannelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useValidateAndAddDirectMessageChannelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [validateAndAddDirectMessageChannelMutation, { data, loading, error }] = useValidateAndAddDirectMessageChannelMutation({\n *   variables: {\n *      name: // value for 'name'\n *      user_id1: // value for 'user_id1'\n *      user_id2: // value for 'user_id2'\n *   },\n * });\n */\nexport function useValidateAndAddDirectMessageChannelMutation(baseOptions?: Apollo.MutationHookOptions<ValidateAndAddDirectMessageChannelMutation, ValidateAndAddDirectMessageChannelMutationVariables>) {\n        return Apollo.useMutation<ValidateAndAddDirectMessageChannelMutation, ValidateAndAddDirectMessageChannelMutationVariables>(ValidateAndAddDirectMessageChannelDocument, baseOptions);\n      }\nexport type ValidateAndAddDirectMessageChannelMutationHookResult = ReturnType<typeof useValidateAndAddDirectMessageChannelMutation>;\nexport type ValidateAndAddDirectMessageChannelMutationResult = Apollo.MutationResult<ValidateAndAddDirectMessageChannelMutation>;\nexport type ValidateAndAddDirectMessageChannelMutationOptions = Apollo.BaseMutationOptions<ValidateAndAddDirectMessageChannelMutation, ValidateAndAddDirectMessageChannelMutationVariables>;\nexport const AddChannelUserDocument = gql`\n    mutation addChannelUser($channel_id: Int!, $user_id: String!) {\n  addChannelUser(user_id: $user_id, channel_id: $channel_id) {\n    affected_rows\n  }\n}\n    `;\nexport type AddChannelUserMutationFn = Apollo.MutationFunction<AddChannelUserMutation, AddChannelUserMutationVariables>;\n\n/**\n * __useAddChannelUserMutation__\n *\n * To run a mutation, you first call `useAddChannelUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddChannelUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addChannelUserMutation, { data, loading, error }] = useAddChannelUserMutation({\n *   variables: {\n *      channel_id: // value for 'channel_id'\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useAddChannelUserMutation(baseOptions?: Apollo.MutationHookOptions<AddChannelUserMutation, AddChannelUserMutationVariables>) {\n        return Apollo.useMutation<AddChannelUserMutation, AddChannelUserMutationVariables>(AddChannelUserDocument, baseOptions);\n      }\nexport type AddChannelUserMutationHookResult = ReturnType<typeof useAddChannelUserMutation>;\nexport type AddChannelUserMutationResult = Apollo.MutationResult<AddChannelUserMutation>;\nexport type AddChannelUserMutationOptions = Apollo.BaseMutationOptions<AddChannelUserMutation, AddChannelUserMutationVariables>;\nexport const SendTypingEventDocument = gql`\n    mutation sendTypingEvent($user_id: String!, $channel_id: Int!) {\n  update_user(_set: {last_typed: \"now()\", last_typed_channel: $channel_id}, where: {auth0_user_id: {_eq: $user_id}}) {\n    affected_rows\n  }\n}\n    `;\nexport type SendTypingEventMutationFn = Apollo.MutationFunction<SendTypingEventMutation, SendTypingEventMutationVariables>;\n\n/**\n * __useSendTypingEventMutation__\n *\n * To run a mutation, you first call `useSendTypingEventMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSendTypingEventMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [sendTypingEventMutation, { data, loading, error }] = useSendTypingEventMutation({\n *   variables: {\n *      user_id: // value for 'user_id'\n *      channel_id: // value for 'channel_id'\n *   },\n * });\n */\nexport function useSendTypingEventMutation(baseOptions?: Apollo.MutationHookOptions<SendTypingEventMutation, SendTypingEventMutationVariables>) {\n        return Apollo.useMutation<SendTypingEventMutation, SendTypingEventMutationVariables>(SendTypingEventDocument, baseOptions);\n      }\nexport type SendTypingEventMutationHookResult = ReturnType<typeof useSendTypingEventMutation>;\nexport type SendTypingEventMutationResult = Apollo.MutationResult<SendTypingEventMutation>;\nexport type SendTypingEventMutationOptions = Apollo.BaseMutationOptions<SendTypingEventMutation, SendTypingEventMutationVariables>;\nexport const UpsertMessageCursorDocument = gql`\n    mutation upsertMessageCursor($channel_id: Int!, $message_id: Int!, $user_id: String!) {\n  insert_message_cursor(objects: {channel_id: $channel_id, message_id: $message_id, user_id: $user_id}, on_conflict: {constraint: message_cursor_channel_id_user_id_key, update_columns: message_id}) {\n    returning {\n      channel_id\n      message_id\n      user_id\n    }\n  }\n}\n    `;\nexport type UpsertMessageCursorMutationFn = Apollo.MutationFunction<UpsertMessageCursorMutation, UpsertMessageCursorMutationVariables>;\n\n/**\n * __useUpsertMessageCursorMutation__\n *\n * To run a mutation, you first call `useUpsertMessageCursorMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpsertMessageCursorMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [upsertMessageCursorMutation, { data, loading, error }] = useUpsertMessageCursorMutation({\n *   variables: {\n *      channel_id: // value for 'channel_id'\n *      message_id: // value for 'message_id'\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useUpsertMessageCursorMutation(baseOptions?: Apollo.MutationHookOptions<UpsertMessageCursorMutation, UpsertMessageCursorMutationVariables>) {\n        return Apollo.useMutation<UpsertMessageCursorMutation, UpsertMessageCursorMutationVariables>(UpsertMessageCursorDocument, baseOptions);\n      }\nexport type UpsertMessageCursorMutationHookResult = ReturnType<typeof useUpsertMessageCursorMutation>;\nexport type UpsertMessageCursorMutationResult = Apollo.MutationResult<UpsertMessageCursorMutation>;\nexport type UpsertMessageCursorMutationOptions = Apollo.BaseMutationOptions<UpsertMessageCursorMutation, UpsertMessageCursorMutationVariables>;\nexport const InsertChannelThreadMessageDocument = gql`\n    mutation insertChannelThreadMessage($channel_thread_id: Int!, $message: String!, $user_id: String!, $image: String) {\n  insert_channel_thread_message(objects: {user_id: $user_id, channel_thread_id: $channel_thread_id, message: $message, image: $image}) {\n    affected_rows\n    returning {\n      id\n      image\n      message\n      timestamp\n      user_id\n      user {\n        auth0_user_id\n        username\n      }\n    }\n  }\n}\n    `;\nexport type InsertChannelThreadMessageMutationFn = Apollo.MutationFunction<InsertChannelThreadMessageMutation, InsertChannelThreadMessageMutationVariables>;\n\n/**\n * __useInsertChannelThreadMessageMutation__\n *\n * To run a mutation, you first call `useInsertChannelThreadMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useInsertChannelThreadMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [insertChannelThreadMessageMutation, { data, loading, error }] = useInsertChannelThreadMessageMutation({\n *   variables: {\n *      channel_thread_id: // value for 'channel_thread_id'\n *      message: // value for 'message'\n *      user_id: // value for 'user_id'\n *      image: // value for 'image'\n *   },\n * });\n */\nexport function useInsertChannelThreadMessageMutation(baseOptions?: Apollo.MutationHookOptions<InsertChannelThreadMessageMutation, InsertChannelThreadMessageMutationVariables>) {\n        return Apollo.useMutation<InsertChannelThreadMessageMutation, InsertChannelThreadMessageMutationVariables>(InsertChannelThreadMessageDocument, baseOptions);\n      }\nexport type InsertChannelThreadMessageMutationHookResult = ReturnType<typeof useInsertChannelThreadMessageMutation>;\nexport type InsertChannelThreadMessageMutationResult = Apollo.MutationResult<InsertChannelThreadMessageMutation>;\nexport type InsertChannelThreadMessageMutationOptions = Apollo.BaseMutationOptions<InsertChannelThreadMessageMutation, InsertChannelThreadMessageMutationVariables>;\nexport const DeleteThreadMessageDocument = gql`\n    mutation deleteThreadMessage($message_id: Int!) {\n  delete_channel_thread_message(where: {id: {_eq: $message_id}}) {\n    affected_rows\n  }\n}\n    `;\nexport type DeleteThreadMessageMutationFn = Apollo.MutationFunction<DeleteThreadMessageMutation, DeleteThreadMessageMutationVariables>;\n\n/**\n * __useDeleteThreadMessageMutation__\n *\n * To run a mutation, you first call `useDeleteThreadMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteThreadMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteThreadMessageMutation, { data, loading, error }] = useDeleteThreadMessageMutation({\n *   variables: {\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useDeleteThreadMessageMutation(baseOptions?: Apollo.MutationHookOptions<DeleteThreadMessageMutation, DeleteThreadMessageMutationVariables>) {\n        return Apollo.useMutation<DeleteThreadMessageMutation, DeleteThreadMessageMutationVariables>(DeleteThreadMessageDocument, baseOptions);\n      }\nexport type DeleteThreadMessageMutationHookResult = ReturnType<typeof useDeleteThreadMessageMutation>;\nexport type DeleteThreadMessageMutationResult = Apollo.MutationResult<DeleteThreadMessageMutation>;\nexport type DeleteThreadMessageMutationOptions = Apollo.BaseMutationOptions<DeleteThreadMessageMutation, DeleteThreadMessageMutationVariables>;\nexport const InsertChannelThreadDocument = gql`\n    mutation insertChannelThread($message_id: Int!) {\n  insert_channel_thread(objects: {message_id: $message_id}) {\n    returning {\n      message {\n        image\n        text\n        timestamp\n        id\n        user {\n          auth0_user_id\n          id\n          username\n        }\n      }\n    }\n  }\n}\n    `;\nexport type InsertChannelThreadMutationFn = Apollo.MutationFunction<InsertChannelThreadMutation, InsertChannelThreadMutationVariables>;\n\n/**\n * __useInsertChannelThreadMutation__\n *\n * To run a mutation, you first call `useInsertChannelThreadMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useInsertChannelThreadMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [insertChannelThreadMutation, { data, loading, error }] = useInsertChannelThreadMutation({\n *   variables: {\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useInsertChannelThreadMutation(baseOptions?: Apollo.MutationHookOptions<InsertChannelThreadMutation, InsertChannelThreadMutationVariables>) {\n        return Apollo.useMutation<InsertChannelThreadMutation, InsertChannelThreadMutationVariables>(InsertChannelThreadDocument, baseOptions);\n      }\nexport type InsertChannelThreadMutationHookResult = ReturnType<typeof useInsertChannelThreadMutation>;\nexport type InsertChannelThreadMutationResult = Apollo.MutationResult<InsertChannelThreadMutation>;\nexport type InsertChannelThreadMutationOptions = Apollo.BaseMutationOptions<InsertChannelThreadMutation, InsertChannelThreadMutationVariables>;\nexport const AddPollQuestionDocument = gql`\n    mutation addPollQuestion($text: String, $owner_id: String) {\n  insert_poll_questions(objects: {text: $text, owner_id: $owner_id}) {\n    affected_rows\n  }\n}\n    `;\nexport type AddPollQuestionMutationFn = Apollo.MutationFunction<AddPollQuestionMutation, AddPollQuestionMutationVariables>;\n\n/**\n * __useAddPollQuestionMutation__\n *\n * To run a mutation, you first call `useAddPollQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddPollQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addPollQuestionMutation, { data, loading, error }] = useAddPollQuestionMutation({\n *   variables: {\n *      text: // value for 'text'\n *      owner_id: // value for 'owner_id'\n *   },\n * });\n */\nexport function useAddPollQuestionMutation(baseOptions?: Apollo.MutationHookOptions<AddPollQuestionMutation, AddPollQuestionMutationVariables>) {\n        return Apollo.useMutation<AddPollQuestionMutation, AddPollQuestionMutationVariables>(AddPollQuestionDocument, baseOptions);\n      }\nexport type AddPollQuestionMutationHookResult = ReturnType<typeof useAddPollQuestionMutation>;\nexport type AddPollQuestionMutationResult = Apollo.MutationResult<AddPollQuestionMutation>;\nexport type AddPollQuestionMutationOptions = Apollo.BaseMutationOptions<AddPollQuestionMutation, AddPollQuestionMutationVariables>;\nexport const AddAnswerToQuestionDocument = gql`\n    mutation addAnswerToQuestion($text: String!, $pollQuestionId: Int!) {\n  insert_poll_anwers(objects: {question_id: $pollQuestionId, text: $text}) {\n    affected_rows\n  }\n}\n    `;\nexport type AddAnswerToQuestionMutationFn = Apollo.MutationFunction<AddAnswerToQuestionMutation, AddAnswerToQuestionMutationVariables>;\n\n/**\n * __useAddAnswerToQuestionMutation__\n *\n * To run a mutation, you first call `useAddAnswerToQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddAnswerToQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addAnswerToQuestionMutation, { data, loading, error }] = useAddAnswerToQuestionMutation({\n *   variables: {\n *      text: // value for 'text'\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useAddAnswerToQuestionMutation(baseOptions?: Apollo.MutationHookOptions<AddAnswerToQuestionMutation, AddAnswerToQuestionMutationVariables>) {\n        return Apollo.useMutation<AddAnswerToQuestionMutation, AddAnswerToQuestionMutationVariables>(AddAnswerToQuestionDocument, baseOptions);\n      }\nexport type AddAnswerToQuestionMutationHookResult = ReturnType<typeof useAddAnswerToQuestionMutation>;\nexport type AddAnswerToQuestionMutationResult = Apollo.MutationResult<AddAnswerToQuestionMutation>;\nexport type AddAnswerToQuestionMutationOptions = Apollo.BaseMutationOptions<AddAnswerToQuestionMutation, AddAnswerToQuestionMutationVariables>;\nexport const AddPublishPollQuestionToChannelDocument = gql`\n    mutation addPublishPollQuestionToChannel($channelID: Int!, $pollQuestionID: Int!) {\n  channelPoll: insert_channel_poll(objects: {channel_id: $channelID, poll_questions: $pollQuestionID, id: $channelID}, on_conflict: {constraint: channel_poll_pkey, update_columns: poll_questions, where: {id: {_eq: $channelID}}}) {\n    affected_rows\n    returning {\n      channel_id\n      id\n      poll_questions\n    }\n  }\n}\n    `;\nexport type AddPublishPollQuestionToChannelMutationFn = Apollo.MutationFunction<AddPublishPollQuestionToChannelMutation, AddPublishPollQuestionToChannelMutationVariables>;\n\n/**\n * __useAddPublishPollQuestionToChannelMutation__\n *\n * To run a mutation, you first call `useAddPublishPollQuestionToChannelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddPublishPollQuestionToChannelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addPublishPollQuestionToChannelMutation, { data, loading, error }] = useAddPublishPollQuestionToChannelMutation({\n *   variables: {\n *      channelID: // value for 'channelID'\n *      pollQuestionID: // value for 'pollQuestionID'\n *   },\n * });\n */\nexport function useAddPublishPollQuestionToChannelMutation(baseOptions?: Apollo.MutationHookOptions<AddPublishPollQuestionToChannelMutation, AddPublishPollQuestionToChannelMutationVariables>) {\n        return Apollo.useMutation<AddPublishPollQuestionToChannelMutation, AddPublishPollQuestionToChannelMutationVariables>(AddPublishPollQuestionToChannelDocument, baseOptions);\n      }\nexport type AddPublishPollQuestionToChannelMutationHookResult = ReturnType<typeof useAddPublishPollQuestionToChannelMutation>;\nexport type AddPublishPollQuestionToChannelMutationResult = Apollo.MutationResult<AddPublishPollQuestionToChannelMutation>;\nexport type AddPublishPollQuestionToChannelMutationOptions = Apollo.BaseMutationOptions<AddPublishPollQuestionToChannelMutation, AddPublishPollQuestionToChannelMutationVariables>;\nexport const SetPollAnswerVoteDocument = gql`\n    mutation setPollAnswerVote($pollAnswerId: Int!, $newVote: Int!) {\n  updatePollAnswer: update_poll_anwers(where: {id: {_eq: $pollAnswerId}}, _set: {votes: $newVote}) {\n    affected_rows\n    returning {\n      votes\n    }\n  }\n}\n    `;\nexport type SetPollAnswerVoteMutationFn = Apollo.MutationFunction<SetPollAnswerVoteMutation, SetPollAnswerVoteMutationVariables>;\n\n/**\n * __useSetPollAnswerVoteMutation__\n *\n * To run a mutation, you first call `useSetPollAnswerVoteMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetPollAnswerVoteMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setPollAnswerVoteMutation, { data, loading, error }] = useSetPollAnswerVoteMutation({\n *   variables: {\n *      pollAnswerId: // value for 'pollAnswerId'\n *      newVote: // value for 'newVote'\n *   },\n * });\n */\nexport function useSetPollAnswerVoteMutation(baseOptions?: Apollo.MutationHookOptions<SetPollAnswerVoteMutation, SetPollAnswerVoteMutationVariables>) {\n        return Apollo.useMutation<SetPollAnswerVoteMutation, SetPollAnswerVoteMutationVariables>(SetPollAnswerVoteDocument, baseOptions);\n      }\nexport type SetPollAnswerVoteMutationHookResult = ReturnType<typeof useSetPollAnswerVoteMutation>;\nexport type SetPollAnswerVoteMutationResult = Apollo.MutationResult<SetPollAnswerVoteMutation>;\nexport type SetPollAnswerVoteMutationOptions = Apollo.BaseMutationOptions<SetPollAnswerVoteMutation, SetPollAnswerVoteMutationVariables>;\nexport const SetPublishPollQuestionStateDocument = gql`\n    mutation setPublishPollQuestionState($pollQuestionId: Int!, $is_active: Boolean = false) {\n  setPollQuestionState: update_poll_questions(where: {id: {_eq: $pollQuestionId}}, _set: {is_active: $is_active}) {\n    affected_rows\n    returning {\n      is_active\n    }\n  }\n}\n    `;\nexport type SetPublishPollQuestionStateMutationFn = Apollo.MutationFunction<SetPublishPollQuestionStateMutation, SetPublishPollQuestionStateMutationVariables>;\n\n/**\n * __useSetPublishPollQuestionStateMutation__\n *\n * To run a mutation, you first call `useSetPublishPollQuestionStateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetPublishPollQuestionStateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setPublishPollQuestionStateMutation, { data, loading, error }] = useSetPublishPollQuestionStateMutation({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *      is_active: // value for 'is_active'\n *   },\n * });\n */\nexport function useSetPublishPollQuestionStateMutation(baseOptions?: Apollo.MutationHookOptions<SetPublishPollQuestionStateMutation, SetPublishPollQuestionStateMutationVariables>) {\n        return Apollo.useMutation<SetPublishPollQuestionStateMutation, SetPublishPollQuestionStateMutationVariables>(SetPublishPollQuestionStateDocument, baseOptions);\n      }\nexport type SetPublishPollQuestionStateMutationHookResult = ReturnType<typeof useSetPublishPollQuestionStateMutation>;\nexport type SetPublishPollQuestionStateMutationResult = Apollo.MutationResult<SetPublishPollQuestionStateMutation>;\nexport type SetPublishPollQuestionStateMutationOptions = Apollo.BaseMutationOptions<SetPublishPollQuestionStateMutation, SetPublishPollQuestionStateMutationVariables>;\nexport const DeletePollQuestionDocument = gql`\n    mutation deletePollQuestion($pollQuestionId: Int!) {\n  delete_poll_anwers(where: {question_id: {_eq: $pollQuestionId}}) {\n    affected_rows\n  }\n  deletePollQuestion: delete_poll_questions(where: {id: {_eq: $pollQuestionId}, is_active: {_neq: true}}) {\n    affected_rows\n  }\n}\n    `;\nexport type DeletePollQuestionMutationFn = Apollo.MutationFunction<DeletePollQuestionMutation, DeletePollQuestionMutationVariables>;\n\n/**\n * __useDeletePollQuestionMutation__\n *\n * To run a mutation, you first call `useDeletePollQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePollQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePollQuestionMutation, { data, loading, error }] = useDeletePollQuestionMutation({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useDeletePollQuestionMutation(baseOptions?: Apollo.MutationHookOptions<DeletePollQuestionMutation, DeletePollQuestionMutationVariables>) {\n        return Apollo.useMutation<DeletePollQuestionMutation, DeletePollQuestionMutationVariables>(DeletePollQuestionDocument, baseOptions);\n      }\nexport type DeletePollQuestionMutationHookResult = ReturnType<typeof useDeletePollQuestionMutation>;\nexport type DeletePollQuestionMutationResult = Apollo.MutationResult<DeletePollQuestionMutation>;\nexport type DeletePollQuestionMutationOptions = Apollo.BaseMutationOptions<DeletePollQuestionMutation, DeletePollQuestionMutationVariables>;\nexport const DeletePollQuestionFromChannelDocument = gql`\n    mutation deletePollQuestionFromChannel($pollQuestionId: Int!, $channelId: Int!) {\n  delete_channel_poll(where: {poll_questions: {_eq: $pollQuestionId}, channel_id: {_eq: $channelId}}) {\n    affected_rows\n  }\n}\n    `;\nexport type DeletePollQuestionFromChannelMutationFn = Apollo.MutationFunction<DeletePollQuestionFromChannelMutation, DeletePollQuestionFromChannelMutationVariables>;\n\n/**\n * __useDeletePollQuestionFromChannelMutation__\n *\n * To run a mutation, you first call `useDeletePollQuestionFromChannelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePollQuestionFromChannelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePollQuestionFromChannelMutation, { data, loading, error }] = useDeletePollQuestionFromChannelMutation({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useDeletePollQuestionFromChannelMutation(baseOptions?: Apollo.MutationHookOptions<DeletePollQuestionFromChannelMutation, DeletePollQuestionFromChannelMutationVariables>) {\n        return Apollo.useMutation<DeletePollQuestionFromChannelMutation, DeletePollQuestionFromChannelMutationVariables>(DeletePollQuestionFromChannelDocument, baseOptions);\n      }\nexport type DeletePollQuestionFromChannelMutationHookResult = ReturnType<typeof useDeletePollQuestionFromChannelMutation>;\nexport type DeletePollQuestionFromChannelMutationResult = Apollo.MutationResult<DeletePollQuestionFromChannelMutation>;\nexport type DeletePollQuestionFromChannelMutationOptions = Apollo.BaseMutationOptions<DeletePollQuestionFromChannelMutation, DeletePollQuestionFromChannelMutationVariables>;\nexport const UpdatePollAnswerTextDocument = gql`\n    mutation updatePollAnswerText($text: String!, $pollAnswerId: Int!) {\n  pollAnswerText: update_poll_anwers(where: {id: {_eq: $pollAnswerId}}, _set: {text: $text}) {\n    affected_rows\n    returning {\n      text\n    }\n  }\n}\n    `;\nexport type UpdatePollAnswerTextMutationFn = Apollo.MutationFunction<UpdatePollAnswerTextMutation, UpdatePollAnswerTextMutationVariables>;\n\n/**\n * __useUpdatePollAnswerTextMutation__\n *\n * To run a mutation, you first call `useUpdatePollAnswerTextMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePollAnswerTextMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePollAnswerTextMutation, { data, loading, error }] = useUpdatePollAnswerTextMutation({\n *   variables: {\n *      text: // value for 'text'\n *      pollAnswerId: // value for 'pollAnswerId'\n *   },\n * });\n */\nexport function useUpdatePollAnswerTextMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePollAnswerTextMutation, UpdatePollAnswerTextMutationVariables>) {\n        return Apollo.useMutation<UpdatePollAnswerTextMutation, UpdatePollAnswerTextMutationVariables>(UpdatePollAnswerTextDocument, baseOptions);\n      }\nexport type UpdatePollAnswerTextMutationHookResult = ReturnType<typeof useUpdatePollAnswerTextMutation>;\nexport type UpdatePollAnswerTextMutationResult = Apollo.MutationResult<UpdatePollAnswerTextMutation>;\nexport type UpdatePollAnswerTextMutationOptions = Apollo.BaseMutationOptions<UpdatePollAnswerTextMutation, UpdatePollAnswerTextMutationVariables>;\nexport const DeletePollAnswerIdDocument = gql`\n    mutation deletePollAnswerId($pollAnswerId: Int!) {\n  delete_poll_anwers(where: {id: {_eq: $pollAnswerId}}) {\n    affected_rows\n  }\n}\n    `;\nexport type DeletePollAnswerIdMutationFn = Apollo.MutationFunction<DeletePollAnswerIdMutation, DeletePollAnswerIdMutationVariables>;\n\n/**\n * __useDeletePollAnswerIdMutation__\n *\n * To run a mutation, you first call `useDeletePollAnswerIdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePollAnswerIdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePollAnswerIdMutation, { data, loading, error }] = useDeletePollAnswerIdMutation({\n *   variables: {\n *      pollAnswerId: // value for 'pollAnswerId'\n *   },\n * });\n */\nexport function useDeletePollAnswerIdMutation(baseOptions?: Apollo.MutationHookOptions<DeletePollAnswerIdMutation, DeletePollAnswerIdMutationVariables>) {\n        return Apollo.useMutation<DeletePollAnswerIdMutation, DeletePollAnswerIdMutationVariables>(DeletePollAnswerIdDocument, baseOptions);\n      }\nexport type DeletePollAnswerIdMutationHookResult = ReturnType<typeof useDeletePollAnswerIdMutation>;\nexport type DeletePollAnswerIdMutationResult = Apollo.MutationResult<DeletePollAnswerIdMutation>;\nexport type DeletePollAnswerIdMutationOptions = Apollo.BaseMutationOptions<DeletePollAnswerIdMutation, DeletePollAnswerIdMutationVariables>;\nexport const SetUserVotePollQuestionDocument = gql`\n    mutation setUserVotePollQuestion($userName: String, $auth0UserId: String, $pollQuestionId: Int, $pollAnswerId: Int) {\n  insert_user_votes(objects: {username: $userName, auth0_user_id: $auth0UserId, poll_question_id: $pollQuestionId, poll_answer_id: $pollAnswerId}) {\n    affected_rows\n  }\n}\n    `;\nexport type SetUserVotePollQuestionMutationFn = Apollo.MutationFunction<SetUserVotePollQuestionMutation, SetUserVotePollQuestionMutationVariables>;\n\n/**\n * __useSetUserVotePollQuestionMutation__\n *\n * To run a mutation, you first call `useSetUserVotePollQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetUserVotePollQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setUserVotePollQuestionMutation, { data, loading, error }] = useSetUserVotePollQuestionMutation({\n *   variables: {\n *      userName: // value for 'userName'\n *      auth0UserId: // value for 'auth0UserId'\n *      pollQuestionId: // value for 'pollQuestionId'\n *      pollAnswerId: // value for 'pollAnswerId'\n *   },\n * });\n */\nexport function useSetUserVotePollQuestionMutation(baseOptions?: Apollo.MutationHookOptions<SetUserVotePollQuestionMutation, SetUserVotePollQuestionMutationVariables>) {\n        return Apollo.useMutation<SetUserVotePollQuestionMutation, SetUserVotePollQuestionMutationVariables>(SetUserVotePollQuestionDocument, baseOptions);\n      }\nexport type SetUserVotePollQuestionMutationHookResult = ReturnType<typeof useSetUserVotePollQuestionMutation>;\nexport type SetUserVotePollQuestionMutationResult = Apollo.MutationResult<SetUserVotePollQuestionMutation>;\nexport type SetUserVotePollQuestionMutationOptions = Apollo.BaseMutationOptions<SetUserVotePollQuestionMutation, SetUserVotePollQuestionMutationVariables>;\nexport const GetMessagesDocument = gql`\n    query getMessages($last_received_id: Int, $last_received_ts: timestamptz, $channel: String) {\n  channel(where: {name: {_eq: $channel}}) {\n    messages(order_by: {timestamp: asc}, where: {_and: {id: {_neq: $last_received_id}, timestamp: {_gte: $last_received_ts}}}) {\n      id\n      text\n      timestamp\n      user {\n        username\n      }\n      channel {\n        name\n      }\n      channel_threads {\n        id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetMessagesQuery__\n *\n * To run a query within a React component, call `useGetMessagesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMessagesQuery({\n *   variables: {\n *      last_received_id: // value for 'last_received_id'\n *      last_received_ts: // value for 'last_received_ts'\n *      channel: // value for 'channel'\n *   },\n * });\n */\nexport function useGetMessagesQuery(baseOptions?: Apollo.QueryHookOptions<GetMessagesQuery, GetMessagesQueryVariables>) {\n        return Apollo.useQuery<GetMessagesQuery, GetMessagesQueryVariables>(GetMessagesDocument, baseOptions);\n      }\nexport function useGetMessagesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMessagesQuery, GetMessagesQueryVariables>) {\n          return Apollo.useLazyQuery<GetMessagesQuery, GetMessagesQueryVariables>(GetMessagesDocument, baseOptions);\n        }\nexport type GetMessagesQueryHookResult = ReturnType<typeof useGetMessagesQuery>;\nexport type GetMessagesLazyQueryHookResult = ReturnType<typeof useGetMessagesLazyQuery>;\nexport type GetMessagesQueryResult = Apollo.QueryResult<GetMessagesQuery, GetMessagesQueryVariables>;\nexport const GetMessagesSumDocument = gql`\n    query getMessagesSum {\n  channel_aggregate(where: {channel_type: {_eq: CHAT_MESSAGE}}, order_by: {name: asc}) {\n    nodes {\n      messages(distinct_on: channel_id) {\n        channel_id\n        channel {\n          name\n        }\n      }\n      messages_aggregate {\n        aggregate {\n          count\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetMessagesSumQuery__\n *\n * To run a query within a React component, call `useGetMessagesSumQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMessagesSumQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMessagesSumQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetMessagesSumQuery(baseOptions?: Apollo.QueryHookOptions<GetMessagesSumQuery, GetMessagesSumQueryVariables>) {\n        return Apollo.useQuery<GetMessagesSumQuery, GetMessagesSumQueryVariables>(GetMessagesSumDocument, baseOptions);\n      }\nexport function useGetMessagesSumLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMessagesSumQuery, GetMessagesSumQueryVariables>) {\n          return Apollo.useLazyQuery<GetMessagesSumQuery, GetMessagesSumQueryVariables>(GetMessagesSumDocument, baseOptions);\n        }\nexport type GetMessagesSumQueryHookResult = ReturnType<typeof useGetMessagesSumQuery>;\nexport type GetMessagesSumLazyQueryHookResult = ReturnType<typeof useGetMessagesSumLazyQuery>;\nexport type GetMessagesSumQueryResult = Apollo.QueryResult<GetMessagesSumQuery, GetMessagesSumQueryVariables>;\nexport const GetChannelsDocument = gql`\n    query getChannels {\n  channels: channel {\n    name\n    id\n    is_private\n    owner_id\n  }\n}\n    `;\n\n/**\n * __useGetChannelsQuery__\n *\n * To run a query within a React component, call `useGetChannelsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetChannelsQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelsQuery, GetChannelsQueryVariables>) {\n        return Apollo.useQuery<GetChannelsQuery, GetChannelsQueryVariables>(GetChannelsDocument, baseOptions);\n      }\nexport function useGetChannelsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelsQuery, GetChannelsQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelsQuery, GetChannelsQueryVariables>(GetChannelsDocument, baseOptions);\n        }\nexport type GetChannelsQueryHookResult = ReturnType<typeof useGetChannelsQuery>;\nexport type GetChannelsLazyQueryHookResult = ReturnType<typeof useGetChannelsLazyQuery>;\nexport type GetChannelsQueryResult = Apollo.QueryResult<GetChannelsQuery, GetChannelsQueryVariables>;\nexport const GetUserListDocument = gql`\n    query getUserList {\n  users: user {\n    username\n    id\n    auth0_user_id\n    last_seen\n  }\n}\n    `;\n\n/**\n * __useGetUserListQuery__\n *\n * To run a query within a React component, call `useGetUserListQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserListQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserListQuery(baseOptions?: Apollo.QueryHookOptions<GetUserListQuery, GetUserListQueryVariables>) {\n        return Apollo.useQuery<GetUserListQuery, GetUserListQueryVariables>(GetUserListDocument, baseOptions);\n      }\nexport function useGetUserListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserListQuery, GetUserListQueryVariables>) {\n          return Apollo.useLazyQuery<GetUserListQuery, GetUserListQueryVariables>(GetUserListDocument, baseOptions);\n        }\nexport type GetUserListQueryHookResult = ReturnType<typeof useGetUserListQuery>;\nexport type GetUserListLazyQueryHookResult = ReturnType<typeof useGetUserListLazyQuery>;\nexport type GetUserListQueryResult = Apollo.QueryResult<GetUserListQuery, GetUserListQueryVariables>;\nexport const GetChannelByNameDocument = gql`\n    query getChannelByName($name: String!) {\n  channel(where: {name: {_eq: $name}}) {\n    name\n    id\n    is_private\n    owner_id\n    channel_type\n  }\n}\n    `;\n\n/**\n * __useGetChannelByNameQuery__\n *\n * To run a query within a React component, call `useGetChannelByNameQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelByNameQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelByNameQuery({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useGetChannelByNameQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelByNameQuery, GetChannelByNameQueryVariables>) {\n        return Apollo.useQuery<GetChannelByNameQuery, GetChannelByNameQueryVariables>(GetChannelByNameDocument, baseOptions);\n      }\nexport function useGetChannelByNameLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelByNameQuery, GetChannelByNameQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelByNameQuery, GetChannelByNameQueryVariables>(GetChannelByNameDocument, baseOptions);\n        }\nexport type GetChannelByNameQueryHookResult = ReturnType<typeof useGetChannelByNameQuery>;\nexport type GetChannelByNameLazyQueryHookResult = ReturnType<typeof useGetChannelByNameLazyQuery>;\nexport type GetChannelByNameQueryResult = Apollo.QueryResult<GetChannelByNameQuery, GetChannelByNameQueryVariables>;\nexport const GetAuth0UserByIdDocument = gql`\n    query getAuth0UserById($user_id: String) {\n  user(where: {auth0_user_id: {_eq: $user_id}}) {\n    id\n    username\n    auth0_user_id\n    user_channels {\n      channel {\n        name\n        id\n        is_private\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetAuth0UserByIdQuery__\n *\n * To run a query within a React component, call `useGetAuth0UserByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAuth0UserByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAuth0UserByIdQuery({\n *   variables: {\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useGetAuth0UserByIdQuery(baseOptions?: Apollo.QueryHookOptions<GetAuth0UserByIdQuery, GetAuth0UserByIdQueryVariables>) {\n        return Apollo.useQuery<GetAuth0UserByIdQuery, GetAuth0UserByIdQueryVariables>(GetAuth0UserByIdDocument, baseOptions);\n      }\nexport function useGetAuth0UserByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAuth0UserByIdQuery, GetAuth0UserByIdQueryVariables>) {\n          return Apollo.useLazyQuery<GetAuth0UserByIdQuery, GetAuth0UserByIdQueryVariables>(GetAuth0UserByIdDocument, baseOptions);\n        }\nexport type GetAuth0UserByIdQueryHookResult = ReturnType<typeof useGetAuth0UserByIdQuery>;\nexport type GetAuth0UserByIdLazyQueryHookResult = ReturnType<typeof useGetAuth0UserByIdLazyQuery>;\nexport type GetAuth0UserByIdQueryResult = Apollo.QueryResult<GetAuth0UserByIdQuery, GetAuth0UserByIdQueryVariables>;\nexport const GetChannelThreadIdDocument = gql`\n    query getChannelThreadId($message_id: Int) {\n  channel_thread(where: {message_id: {_eq: $message_id}}) {\n    id\n  }\n}\n    `;\n\n/**\n * __useGetChannelThreadIdQuery__\n *\n * To run a query within a React component, call `useGetChannelThreadIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelThreadIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelThreadIdQuery({\n *   variables: {\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useGetChannelThreadIdQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelThreadIdQuery, GetChannelThreadIdQueryVariables>) {\n        return Apollo.useQuery<GetChannelThreadIdQuery, GetChannelThreadIdQueryVariables>(GetChannelThreadIdDocument, baseOptions);\n      }\nexport function useGetChannelThreadIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelThreadIdQuery, GetChannelThreadIdQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelThreadIdQuery, GetChannelThreadIdQueryVariables>(GetChannelThreadIdDocument, baseOptions);\n        }\nexport type GetChannelThreadIdQueryHookResult = ReturnType<typeof useGetChannelThreadIdQuery>;\nexport type GetChannelThreadIdLazyQueryHookResult = ReturnType<typeof useGetChannelThreadIdLazyQuery>;\nexport type GetChannelThreadIdQueryResult = Apollo.QueryResult<GetChannelThreadIdQuery, GetChannelThreadIdQueryVariables>;\nexport const GetChannelThreadParentMessageDocument = gql`\n    query getChannelThreadParentMessage($limit: Int, $message_id: Int) {\n  channel_thread_message(limit: $limit, order_by: {id: asc}, where: {channel_thread: {message_id: {_eq: $message_id}}}) {\n    channel_thread_id\n    timestamp\n    channel_thread {\n      message {\n        text\n        timestamp\n        image\n        id\n        user_id\n        user {\n          auth0_user_id\n          username\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetChannelThreadParentMessageQuery__\n *\n * To run a query within a React component, call `useGetChannelThreadParentMessageQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelThreadParentMessageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelThreadParentMessageQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useGetChannelThreadParentMessageQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelThreadParentMessageQuery, GetChannelThreadParentMessageQueryVariables>) {\n        return Apollo.useQuery<GetChannelThreadParentMessageQuery, GetChannelThreadParentMessageQueryVariables>(GetChannelThreadParentMessageDocument, baseOptions);\n      }\nexport function useGetChannelThreadParentMessageLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelThreadParentMessageQuery, GetChannelThreadParentMessageQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelThreadParentMessageQuery, GetChannelThreadParentMessageQueryVariables>(GetChannelThreadParentMessageDocument, baseOptions);\n        }\nexport type GetChannelThreadParentMessageQueryHookResult = ReturnType<typeof useGetChannelThreadParentMessageQuery>;\nexport type GetChannelThreadParentMessageLazyQueryHookResult = ReturnType<typeof useGetChannelThreadParentMessageLazyQuery>;\nexport type GetChannelThreadParentMessageQueryResult = Apollo.QueryResult<GetChannelThreadParentMessageQuery, GetChannelThreadParentMessageQueryVariables>;\nexport const GetChannelThreadDocument = gql`\n    query getChannelThread($message_id: Int) {\n  channel_thread(where: {message_id: {_eq: $message_id}}) {\n    id\n    message {\n      id\n      image\n      text\n      deleted\n      timestamp\n      user {\n        auth0_user_id\n        id\n        username\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetChannelThreadQuery__\n *\n * To run a query within a React component, call `useGetChannelThreadQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelThreadQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelThreadQuery({\n *   variables: {\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useGetChannelThreadQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelThreadQuery, GetChannelThreadQueryVariables>) {\n        return Apollo.useQuery<GetChannelThreadQuery, GetChannelThreadQueryVariables>(GetChannelThreadDocument, baseOptions);\n      }\nexport function useGetChannelThreadLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelThreadQuery, GetChannelThreadQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelThreadQuery, GetChannelThreadQueryVariables>(GetChannelThreadDocument, baseOptions);\n        }\nexport type GetChannelThreadQueryHookResult = ReturnType<typeof useGetChannelThreadQuery>;\nexport type GetChannelThreadLazyQueryHookResult = ReturnType<typeof useGetChannelThreadLazyQuery>;\nexport type GetChannelThreadQueryResult = Apollo.QueryResult<GetChannelThreadQuery, GetChannelThreadQueryVariables>;\nexport const GetPollQuestionsDocument = gql`\n    query getPollQuestions {\n  questions: poll_questions {\n    id\n    owner_id\n    text\n  }\n}\n    `;\n\n/**\n * __useGetPollQuestionsQuery__\n *\n * To run a query within a React component, call `useGetPollQuestionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPollQuestionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPollQuestionsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetPollQuestionsQuery(baseOptions?: Apollo.QueryHookOptions<GetPollQuestionsQuery, GetPollQuestionsQueryVariables>) {\n        return Apollo.useQuery<GetPollQuestionsQuery, GetPollQuestionsQueryVariables>(GetPollQuestionsDocument, baseOptions);\n      }\nexport function useGetPollQuestionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPollQuestionsQuery, GetPollQuestionsQueryVariables>) {\n          return Apollo.useLazyQuery<GetPollQuestionsQuery, GetPollQuestionsQueryVariables>(GetPollQuestionsDocument, baseOptions);\n        }\nexport type GetPollQuestionsQueryHookResult = ReturnType<typeof useGetPollQuestionsQuery>;\nexport type GetPollQuestionsLazyQueryHookResult = ReturnType<typeof useGetPollQuestionsLazyQuery>;\nexport type GetPollQuestionsQueryResult = Apollo.QueryResult<GetPollQuestionsQuery, GetPollQuestionsQueryVariables>;\nexport const GetPollQuestionAnswersDocument = gql`\n    query getPollQuestionAnswers($pollQuestionId: Int) {\n  poll_question: poll_questions(where: {id: {_eq: $pollQuestionId}}) {\n    id\n    text\n    is_active\n  }\n  poll_answers: poll_anwers(where: {poll_question: {id: {_eq: $pollQuestionId}}}) {\n    question_id\n    text\n    id\n    votes\n  }\n}\n    `;\n\n/**\n * __useGetPollQuestionAnswersQuery__\n *\n * To run a query within a React component, call `useGetPollQuestionAnswersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPollQuestionAnswersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPollQuestionAnswersQuery({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useGetPollQuestionAnswersQuery(baseOptions?: Apollo.QueryHookOptions<GetPollQuestionAnswersQuery, GetPollQuestionAnswersQueryVariables>) {\n        return Apollo.useQuery<GetPollQuestionAnswersQuery, GetPollQuestionAnswersQueryVariables>(GetPollQuestionAnswersDocument, baseOptions);\n      }\nexport function useGetPollQuestionAnswersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPollQuestionAnswersQuery, GetPollQuestionAnswersQueryVariables>) {\n          return Apollo.useLazyQuery<GetPollQuestionAnswersQuery, GetPollQuestionAnswersQueryVariables>(GetPollQuestionAnswersDocument, baseOptions);\n        }\nexport type GetPollQuestionAnswersQueryHookResult = ReturnType<typeof useGetPollQuestionAnswersQuery>;\nexport type GetPollQuestionAnswersLazyQueryHookResult = ReturnType<typeof useGetPollQuestionAnswersLazyQuery>;\nexport type GetPollQuestionAnswersQueryResult = Apollo.QueryResult<GetPollQuestionAnswersQuery, GetPollQuestionAnswersQueryVariables>;\nexport const GetPublicChannelsDocument = gql`\n    query getPublicChannels {\n  channels: channel(where: {is_private: {_neq: true}}) {\n    id\n    name\n    channel_polls(where: {poll_question: {is_active: {_eq: true}}}) {\n      poll_question {\n        is_active\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetPublicChannelsQuery__\n *\n * To run a query within a React component, call `useGetPublicChannelsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPublicChannelsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPublicChannelsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetPublicChannelsQuery(baseOptions?: Apollo.QueryHookOptions<GetPublicChannelsQuery, GetPublicChannelsQueryVariables>) {\n        return Apollo.useQuery<GetPublicChannelsQuery, GetPublicChannelsQueryVariables>(GetPublicChannelsDocument, baseOptions);\n      }\nexport function useGetPublicChannelsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPublicChannelsQuery, GetPublicChannelsQueryVariables>) {\n          return Apollo.useLazyQuery<GetPublicChannelsQuery, GetPublicChannelsQueryVariables>(GetPublicChannelsDocument, baseOptions);\n        }\nexport type GetPublicChannelsQueryHookResult = ReturnType<typeof useGetPublicChannelsQuery>;\nexport type GetPublicChannelsLazyQueryHookResult = ReturnType<typeof useGetPublicChannelsLazyQuery>;\nexport type GetPublicChannelsQueryResult = Apollo.QueryResult<GetPublicChannelsQuery, GetPublicChannelsQueryVariables>;\nexport const GetChannelPollsDocument = gql`\n    query getChannelPolls {\n  channelPoll: channel_poll {\n    channel_id\n    id\n    poll_questions\n  }\n}\n    `;\n\n/**\n * __useGetChannelPollsQuery__\n *\n * To run a query within a React component, call `useGetChannelPollsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelPollsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelPollsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetChannelPollsQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelPollsQuery, GetChannelPollsQueryVariables>) {\n        return Apollo.useQuery<GetChannelPollsQuery, GetChannelPollsQueryVariables>(GetChannelPollsDocument, baseOptions);\n      }\nexport function useGetChannelPollsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelPollsQuery, GetChannelPollsQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelPollsQuery, GetChannelPollsQueryVariables>(GetChannelPollsDocument, baseOptions);\n        }\nexport type GetChannelPollsQueryHookResult = ReturnType<typeof useGetChannelPollsQuery>;\nexport type GetChannelPollsLazyQueryHookResult = ReturnType<typeof useGetChannelPollsLazyQuery>;\nexport type GetChannelPollsQueryResult = Apollo.QueryResult<GetChannelPollsQuery, GetChannelPollsQueryVariables>;\nexport const GetChannelPollQuestionDocument = gql`\n    query getChannelPollQuestion($channelId: Int) {\n  getChannelPoll: channel_poll(where: {channel_id: {_eq: $channelId}, is_active: {_eq: true}}) {\n    id\n    poll_question {\n      id\n      text\n      poll_anwers(where: {poll_question: {}}) {\n        text\n        question_id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetChannelPollQuestionQuery__\n *\n * To run a query within a React component, call `useGetChannelPollQuestionQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChannelPollQuestionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChannelPollQuestionQuery({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useGetChannelPollQuestionQuery(baseOptions?: Apollo.QueryHookOptions<GetChannelPollQuestionQuery, GetChannelPollQuestionQueryVariables>) {\n        return Apollo.useQuery<GetChannelPollQuestionQuery, GetChannelPollQuestionQueryVariables>(GetChannelPollQuestionDocument, baseOptions);\n      }\nexport function useGetChannelPollQuestionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChannelPollQuestionQuery, GetChannelPollQuestionQueryVariables>) {\n          return Apollo.useLazyQuery<GetChannelPollQuestionQuery, GetChannelPollQuestionQueryVariables>(GetChannelPollQuestionDocument, baseOptions);\n        }\nexport type GetChannelPollQuestionQueryHookResult = ReturnType<typeof useGetChannelPollQuestionQuery>;\nexport type GetChannelPollQuestionLazyQueryHookResult = ReturnType<typeof useGetChannelPollQuestionLazyQuery>;\nexport type GetChannelPollQuestionQueryResult = Apollo.QueryResult<GetChannelPollQuestionQuery, GetChannelPollQuestionQueryVariables>;\nexport const GetPollAnswerVotesDocument = gql`\n    query getPollAnswerVotes($pollAnswerId: Int!) {\n  poll_anwers(where: {id: {_eq: $pollAnswerId}}) {\n    id\n    votes\n  }\n}\n    `;\n\n/**\n * __useGetPollAnswerVotesQuery__\n *\n * To run a query within a React component, call `useGetPollAnswerVotesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPollAnswerVotesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPollAnswerVotesQuery({\n *   variables: {\n *      pollAnswerId: // value for 'pollAnswerId'\n *   },\n * });\n */\nexport function useGetPollAnswerVotesQuery(baseOptions?: Apollo.QueryHookOptions<GetPollAnswerVotesQuery, GetPollAnswerVotesQueryVariables>) {\n        return Apollo.useQuery<GetPollAnswerVotesQuery, GetPollAnswerVotesQueryVariables>(GetPollAnswerVotesDocument, baseOptions);\n      }\nexport function useGetPollAnswerVotesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPollAnswerVotesQuery, GetPollAnswerVotesQueryVariables>) {\n          return Apollo.useLazyQuery<GetPollAnswerVotesQuery, GetPollAnswerVotesQueryVariables>(GetPollAnswerVotesDocument, baseOptions);\n        }\nexport type GetPollAnswerVotesQueryHookResult = ReturnType<typeof useGetPollAnswerVotesQuery>;\nexport type GetPollAnswerVotesLazyQueryHookResult = ReturnType<typeof useGetPollAnswerVotesLazyQuery>;\nexport type GetPollAnswerVotesQueryResult = Apollo.QueryResult<GetPollAnswerVotesQuery, GetPollAnswerVotesQueryVariables>;\nexport const WatchMessagesDocument = gql`\n    subscription watchMessages($channelId: Int!, $limit: Int) {\n  messages: message(order_by: {timestamp: desc}, limit: $limit, where: {channel: {id: {_eq: $channelId}}}) {\n    id\n    text\n    image\n    timestamp\n    deleted\n    user {\n      username\n      auth0_user_id\n    }\n    channel {\n      name\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchMessagesSubscription__\n *\n * To run a query within a React component, call `useWatchMessagesSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchMessagesSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchMessagesSubscription({\n *   variables: {\n *      channelId: // value for 'channelId'\n *      limit: // value for 'limit'\n *   },\n * });\n */\nexport function useWatchMessagesSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchMessagesSubscription, WatchMessagesSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchMessagesSubscription, WatchMessagesSubscriptionVariables>(WatchMessagesDocument, baseOptions);\n      }\nexport type WatchMessagesSubscriptionHookResult = ReturnType<typeof useWatchMessagesSubscription>;\nexport type WatchMessagesSubscriptionResult = Apollo.SubscriptionResult<WatchMessagesSubscription>;\nexport const WatchChannelThreadMessagesDocument = gql`\n    subscription watchChannelThreadMessages($limit: Int!, $message_id: Int!) {\n  channel_thread_message(limit: $limit, order_by: {id: desc}, where: {channel_thread: {message_id: {_eq: $message_id}}}) {\n    id\n    message\n    image\n    user {\n      username\n      id\n      auth0_user_id\n    }\n    channel_thread_id\n    timestamp\n  }\n}\n    `;\n\n/**\n * __useWatchChannelThreadMessagesSubscription__\n *\n * To run a query within a React component, call `useWatchChannelThreadMessagesSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelThreadMessagesSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelThreadMessagesSubscription({\n *   variables: {\n *      limit: // value for 'limit'\n *      message_id: // value for 'message_id'\n *   },\n * });\n */\nexport function useWatchChannelThreadMessagesSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelThreadMessagesSubscription, WatchChannelThreadMessagesSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelThreadMessagesSubscription, WatchChannelThreadMessagesSubscriptionVariables>(WatchChannelThreadMessagesDocument, baseOptions);\n      }\nexport type WatchChannelThreadMessagesSubscriptionHookResult = ReturnType<typeof useWatchChannelThreadMessagesSubscription>;\nexport type WatchChannelThreadMessagesSubscriptionResult = Apollo.SubscriptionResult<WatchChannelThreadMessagesSubscription>;\nexport const WatchThreadsDocument = gql`\n    subscription watchThreads {\n  channel_thread(order_by: {id: desc}) {\n    id\n    message_id\n    message {\n      image\n      text\n      deleted\n      timestamp\n      id\n      user {\n        auth0_user_id\n        username\n      }\n      user_id\n      channel {\n        id\n        name\n      }\n    }\n    channel_thread_messages {\n      id\n      image\n      message\n      timestamp\n      user_id\n      user {\n        auth0_user_id\n        username\n      }\n    }\n    channel_thread_messages_aggregate {\n      aggregate {\n        count(columns: message)\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchThreadsSubscription__\n *\n * To run a query within a React component, call `useWatchThreadsSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchThreadsSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchThreadsSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchThreadsSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchThreadsSubscription, WatchThreadsSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchThreadsSubscription, WatchThreadsSubscriptionVariables>(WatchThreadsDocument, baseOptions);\n      }\nexport type WatchThreadsSubscriptionHookResult = ReturnType<typeof useWatchThreadsSubscription>;\nexport type WatchThreadsSubscriptionResult = Apollo.SubscriptionResult<WatchThreadsSubscription>;\nexport const WatchOnlineUsersDocument = gql`\n    subscription watchOnlineUsers {\n  users: user_online(order_by: {username: asc}) {\n    id\n    username\n    auth0_user_id\n  }\n}\n    `;\n\n/**\n * __useWatchOnlineUsersSubscription__\n *\n * To run a query within a React component, call `useWatchOnlineUsersSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchOnlineUsersSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchOnlineUsersSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchOnlineUsersSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchOnlineUsersSubscription, WatchOnlineUsersSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchOnlineUsersSubscription, WatchOnlineUsersSubscriptionVariables>(WatchOnlineUsersDocument, baseOptions);\n      }\nexport type WatchOnlineUsersSubscriptionHookResult = ReturnType<typeof useWatchOnlineUsersSubscription>;\nexport type WatchOnlineUsersSubscriptionResult = Apollo.SubscriptionResult<WatchOnlineUsersSubscription>;\nexport const WatchChannelsDocument = gql`\n    subscription watchChannels($channel_type: channel_type_enum!) {\n  channels: channel(where: {channel_type: {_eq: $channel_type}}, order_by: {name: asc, is_private: asc}) {\n    name\n    id\n    is_private\n    owner_id\n  }\n}\n    `;\n\n/**\n * __useWatchChannelsSubscription__\n *\n * To run a query within a React component, call `useWatchChannelsSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelsSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelsSubscription({\n *   variables: {\n *      channel_type: // value for 'channel_type'\n *   },\n * });\n */\nexport function useWatchChannelsSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelsSubscription, WatchChannelsSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelsSubscription, WatchChannelsSubscriptionVariables>(WatchChannelsDocument, baseOptions);\n      }\nexport type WatchChannelsSubscriptionHookResult = ReturnType<typeof useWatchChannelsSubscription>;\nexport type WatchChannelsSubscriptionResult = Apollo.SubscriptionResult<WatchChannelsSubscription>;\nexport const WatchDirectMessageChannelsDocument = gql`\n    subscription watchDirectMessageChannels($channel_type: channel_type_enum!, $user_id: String) {\n  channels: channel(where: {channel_type: {_eq: $channel_type}, _and: {user_channels: {user_id: {_eq: $user_id}}}}) {\n    name\n    id\n    is_private\n    owner_id\n    user_channels(where: {user_id: {_neq: $user_id}}) {\n      user {\n        username\n        auth0_user_id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchDirectMessageChannelsSubscription__\n *\n * To run a query within a React component, call `useWatchDirectMessageChannelsSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchDirectMessageChannelsSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchDirectMessageChannelsSubscription({\n *   variables: {\n *      channel_type: // value for 'channel_type'\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useWatchDirectMessageChannelsSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchDirectMessageChannelsSubscription, WatchDirectMessageChannelsSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchDirectMessageChannelsSubscription, WatchDirectMessageChannelsSubscriptionVariables>(WatchDirectMessageChannelsDocument, baseOptions);\n      }\nexport type WatchDirectMessageChannelsSubscriptionHookResult = ReturnType<typeof useWatchDirectMessageChannelsSubscription>;\nexport type WatchDirectMessageChannelsSubscriptionResult = Apollo.SubscriptionResult<WatchDirectMessageChannelsSubscription>;\nexport const WatchUsersDocument = gql`\n    subscription watchUsers {\n  user(order_by: {username: asc}) {\n    username\n    auth0_user_id\n  }\n}\n    `;\n\n/**\n * __useWatchUsersSubscription__\n *\n * To run a query within a React component, call `useWatchUsersSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchUsersSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchUsersSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchUsersSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchUsersSubscription, WatchUsersSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchUsersSubscription, WatchUsersSubscriptionVariables>(WatchUsersDocument, baseOptions);\n      }\nexport type WatchUsersSubscriptionHookResult = ReturnType<typeof useWatchUsersSubscription>;\nexport type WatchUsersSubscriptionResult = Apollo.SubscriptionResult<WatchUsersSubscription>;\nexport const WatchUsersWhoHaveNotSubscribedToChannelDocument = gql`\n    subscription watchUsersWhoHaveNotSubscribedToChannel($user_id: String!, $channel_id: Int!) {\n  user(where: {_not: {user_channels: {channel_id: {_eq: $channel_id}}}, auth0_user_id: {_neq: $user_id}}, order_by: {username: asc}) {\n    auth0_user_id\n    username\n  }\n}\n    `;\n\n/**\n * __useWatchUsersWhoHaveNotSubscribedToChannelSubscription__\n *\n * To run a query within a React component, call `useWatchUsersWhoHaveNotSubscribedToChannelSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchUsersWhoHaveNotSubscribedToChannelSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchUsersWhoHaveNotSubscribedToChannelSubscription({\n *   variables: {\n *      user_id: // value for 'user_id'\n *      channel_id: // value for 'channel_id'\n *   },\n * });\n */\nexport function useWatchUsersWhoHaveNotSubscribedToChannelSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchUsersWhoHaveNotSubscribedToChannelSubscription, WatchUsersWhoHaveNotSubscribedToChannelSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchUsersWhoHaveNotSubscribedToChannelSubscription, WatchUsersWhoHaveNotSubscribedToChannelSubscriptionVariables>(WatchUsersWhoHaveNotSubscribedToChannelDocument, baseOptions);\n      }\nexport type WatchUsersWhoHaveNotSubscribedToChannelSubscriptionHookResult = ReturnType<typeof useWatchUsersWhoHaveNotSubscribedToChannelSubscription>;\nexport type WatchUsersWhoHaveNotSubscribedToChannelSubscriptionResult = Apollo.SubscriptionResult<WatchUsersWhoHaveNotSubscribedToChannelSubscription>;\nexport const WatchUsersWhoHaveSubscribedToDirectMessageChannelDocument = gql`\n    subscription watchUsersWhoHaveSubscribedToDirectMessageChannel($user_id: String!) {\n  user(where: {auth0_user_id: {_neq: $user_id}}, order_by: {username: asc}) {\n    auth0_user_id\n    username\n    user_channels(where: {channel: {channel_type: {_eq: DIRECT_MESSAGE}}}) {\n      channel_id\n      channel {\n        name\n        user_channels(where: {user: {auth0_user_id: {_eq: $user_id}}}) {\n          user {\n            auth0_user_id\n            username\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription__\n *\n * To run a query within a React component, call `useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription({\n *   variables: {\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription, WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription, WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscriptionVariables>(WatchUsersWhoHaveSubscribedToDirectMessageChannelDocument, baseOptions);\n      }\nexport type WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscriptionHookResult = ReturnType<typeof useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription>;\nexport type WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscriptionResult = Apollo.SubscriptionResult<WatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription>;\nexport const GetUserIsTypingDocument = gql`\n    subscription getUserIsTyping($self_id: String!, $channel_id: Int!) {\n  user_typing(where: {auth0_user_id: {_neq: $self_id}, _and: {last_typed_channel: {_eq: $channel_id}}}, limit: 1, order_by: {last_typed: desc}) {\n    last_typed\n    username\n  }\n}\n    `;\n\n/**\n * __useGetUserIsTypingSubscription__\n *\n * To run a query within a React component, call `useGetUserIsTypingSubscription` and pass it any options that fit your needs.\n * When your component renders, `useGetUserIsTypingSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserIsTypingSubscription({\n *   variables: {\n *      self_id: // value for 'self_id'\n *      channel_id: // value for 'channel_id'\n *   },\n * });\n */\nexport function useGetUserIsTypingSubscription(baseOptions?: Apollo.SubscriptionHookOptions<GetUserIsTypingSubscription, GetUserIsTypingSubscriptionVariables>) {\n        return Apollo.useSubscription<GetUserIsTypingSubscription, GetUserIsTypingSubscriptionVariables>(GetUserIsTypingDocument, baseOptions);\n      }\nexport type GetUserIsTypingSubscriptionHookResult = ReturnType<typeof useGetUserIsTypingSubscription>;\nexport type GetUserIsTypingSubscriptionResult = Apollo.SubscriptionResult<GetUserIsTypingSubscription>;\nexport const WatchNewMessagesDocument = gql`\n    subscription watchNewMessages($channelId: Int!) {\n  newMessages: message(order_by: {id: desc}, limit: 1, where: {channel: {id: {_eq: $channelId}}}) {\n    id\n    text\n    timestamp\n    user {\n      username\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchNewMessagesSubscription__\n *\n * To run a query within a React component, call `useWatchNewMessagesSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchNewMessagesSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchNewMessagesSubscription({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useWatchNewMessagesSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchNewMessagesSubscription, WatchNewMessagesSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchNewMessagesSubscription, WatchNewMessagesSubscriptionVariables>(WatchNewMessagesDocument, baseOptions);\n      }\nexport type WatchNewMessagesSubscriptionHookResult = ReturnType<typeof useWatchNewMessagesSubscription>;\nexport type WatchNewMessagesSubscriptionResult = Apollo.SubscriptionResult<WatchNewMessagesSubscription>;\nexport const WatchChannelsLastMessageIdDocument = gql`\n    subscription watchChannelsLastMessageId($channel_type: channel_type_enum! = CHAT_MESSAGE) {\n  channels: channel(where: {channel_type: {_eq: $channel_type}}, order_by: {name: asc, is_private: asc}) {\n    name\n    id\n    is_private\n    owner_id\n    messages(order_by: {id: desc}, limit: 1) {\n      id\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchChannelsLastMessageIdSubscription__\n *\n * To run a query within a React component, call `useWatchChannelsLastMessageIdSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelsLastMessageIdSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelsLastMessageIdSubscription({\n *   variables: {\n *      channel_type: // value for 'channel_type'\n *   },\n * });\n */\nexport function useWatchChannelsLastMessageIdSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelsLastMessageIdSubscription, WatchChannelsLastMessageIdSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelsLastMessageIdSubscription, WatchChannelsLastMessageIdSubscriptionVariables>(WatchChannelsLastMessageIdDocument, baseOptions);\n      }\nexport type WatchChannelsLastMessageIdSubscriptionHookResult = ReturnType<typeof useWatchChannelsLastMessageIdSubscription>;\nexport type WatchChannelsLastMessageIdSubscriptionResult = Apollo.SubscriptionResult<WatchChannelsLastMessageIdSubscription>;\nexport const WatchMessageCursorDocument = gql`\n    subscription watchMessageCursor($channel_id: Int!, $user_id: String!) {\n  message_cursor(where: {user_id: {_eq: $user_id}, _and: {channel_id: {_eq: $channel_id}}}) {\n    channel_id\n    message_id\n    user_id\n  }\n}\n    `;\n\n/**\n * __useWatchMessageCursorSubscription__\n *\n * To run a query within a React component, call `useWatchMessageCursorSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchMessageCursorSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchMessageCursorSubscription({\n *   variables: {\n *      channel_id: // value for 'channel_id'\n *      user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useWatchMessageCursorSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchMessageCursorSubscription, WatchMessageCursorSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchMessageCursorSubscription, WatchMessageCursorSubscriptionVariables>(WatchMessageCursorDocument, baseOptions);\n      }\nexport type WatchMessageCursorSubscriptionHookResult = ReturnType<typeof useWatchMessageCursorSubscription>;\nexport type WatchMessageCursorSubscriptionResult = Apollo.SubscriptionResult<WatchMessageCursorSubscription>;\nexport const WatchGetPollQuestionsDocument = gql`\n    subscription WatchGetPollQuestions {\n  questions: poll_questions {\n    id\n    text\n    created_at\n    updated_at\n    owner_id\n    is_active\n    channel_polls {\n      channel {\n        name\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchGetPollQuestionsSubscription__\n *\n * To run a query within a React component, call `useWatchGetPollQuestionsSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchGetPollQuestionsSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchGetPollQuestionsSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchGetPollQuestionsSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchGetPollQuestionsSubscription, WatchGetPollQuestionsSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchGetPollQuestionsSubscription, WatchGetPollQuestionsSubscriptionVariables>(WatchGetPollQuestionsDocument, baseOptions);\n      }\nexport type WatchGetPollQuestionsSubscriptionHookResult = ReturnType<typeof useWatchGetPollQuestionsSubscription>;\nexport type WatchGetPollQuestionsSubscriptionResult = Apollo.SubscriptionResult<WatchGetPollQuestionsSubscription>;\nexport const WatchGetChannelPollQuestionPublishStateDocument = gql`\n    subscription watchGetChannelPollQuestionPublishState {\n  getChannelPollQuestionPublishState: channel_poll {\n    channel_id\n    id\n    poll_questions\n    channel {\n      name\n    }\n    poll_question {\n      text\n      is_active\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchGetChannelPollQuestionPublishStateSubscription__\n *\n * To run a query within a React component, call `useWatchGetChannelPollQuestionPublishStateSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchGetChannelPollQuestionPublishStateSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchGetChannelPollQuestionPublishStateSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchGetChannelPollQuestionPublishStateSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchGetChannelPollQuestionPublishStateSubscription, WatchGetChannelPollQuestionPublishStateSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchGetChannelPollQuestionPublishStateSubscription, WatchGetChannelPollQuestionPublishStateSubscriptionVariables>(WatchGetChannelPollQuestionPublishStateDocument, baseOptions);\n      }\nexport type WatchGetChannelPollQuestionPublishStateSubscriptionHookResult = ReturnType<typeof useWatchGetChannelPollQuestionPublishStateSubscription>;\nexport type WatchGetChannelPollQuestionPublishStateSubscriptionResult = Apollo.SubscriptionResult<WatchGetChannelPollQuestionPublishStateSubscription>;\nexport const WatchGetPollQuestionDocument = gql`\n    subscription watchGetPollQuestion($pollQuestionId: Int) {\n  poll_question: poll_questions(where: {id: {_eq: $pollQuestionId}}) {\n    id\n    text\n    is_active\n  }\n}\n    `;\n\n/**\n * __useWatchGetPollQuestionSubscription__\n *\n * To run a query within a React component, call `useWatchGetPollQuestionSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchGetPollQuestionSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchGetPollQuestionSubscription({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useWatchGetPollQuestionSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchGetPollQuestionSubscription, WatchGetPollQuestionSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchGetPollQuestionSubscription, WatchGetPollQuestionSubscriptionVariables>(WatchGetPollQuestionDocument, baseOptions);\n      }\nexport type WatchGetPollQuestionSubscriptionHookResult = ReturnType<typeof useWatchGetPollQuestionSubscription>;\nexport type WatchGetPollQuestionSubscriptionResult = Apollo.SubscriptionResult<WatchGetPollQuestionSubscription>;\nexport const WatchGetPollAnswersDocument = gql`\n    subscription watchGetPollAnswers($pollQuestionId: Int!) {\n  poll_answers: poll_anwers(where: {poll_question: {id: {_eq: $pollQuestionId}}}) {\n    question_id\n    text\n    id\n    votes\n  }\n}\n    `;\n\n/**\n * __useWatchGetPollAnswersSubscription__\n *\n * To run a query within a React component, call `useWatchGetPollAnswersSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchGetPollAnswersSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchGetPollAnswersSubscription({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useWatchGetPollAnswersSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchGetPollAnswersSubscription, WatchGetPollAnswersSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchGetPollAnswersSubscription, WatchGetPollAnswersSubscriptionVariables>(WatchGetPollAnswersDocument, baseOptions);\n      }\nexport type WatchGetPollAnswersSubscriptionHookResult = ReturnType<typeof useWatchGetPollAnswersSubscription>;\nexport type WatchGetPollAnswersSubscriptionResult = Apollo.SubscriptionResult<WatchGetPollAnswersSubscription>;\nexport const WatchChannelPollQuestionDocument = gql`\n    subscription watchChannelPollQuestion($channelId: Int!) {\n  getChannelPoll: channel_poll(where: {channel_id: {_eq: $channelId}, poll_question: {is_active: {_eq: true}}}) {\n    id\n    poll_question {\n      id\n      text\n      poll_anwers(where: {poll_question: {channel_polls: {channel_id: {_eq: $channelId}}}}) {\n        text\n        votes\n        id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchChannelPollQuestionSubscription__\n *\n * To run a query within a React component, call `useWatchChannelPollQuestionSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelPollQuestionSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelPollQuestionSubscription({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useWatchChannelPollQuestionSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelPollQuestionSubscription, WatchChannelPollQuestionSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelPollQuestionSubscription, WatchChannelPollQuestionSubscriptionVariables>(WatchChannelPollQuestionDocument, baseOptions);\n      }\nexport type WatchChannelPollQuestionSubscriptionHookResult = ReturnType<typeof useWatchChannelPollQuestionSubscription>;\nexport type WatchChannelPollQuestionSubscriptionResult = Apollo.SubscriptionResult<WatchChannelPollQuestionSubscription>;\nexport const WatchPollAnswerVotesDocument = gql`\n    subscription watchPollAnswerVotes($pollAnswerId: Int!) {\n  pollAnswerVotes: poll_anwers(where: {id: {_eq: $pollAnswerId}}) {\n    id\n    votes\n  }\n}\n    `;\n\n/**\n * __useWatchPollAnswerVotesSubscription__\n *\n * To run a query within a React component, call `useWatchPollAnswerVotesSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchPollAnswerVotesSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchPollAnswerVotesSubscription({\n *   variables: {\n *      pollAnswerId: // value for 'pollAnswerId'\n *   },\n * });\n */\nexport function useWatchPollAnswerVotesSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchPollAnswerVotesSubscription, WatchPollAnswerVotesSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchPollAnswerVotesSubscription, WatchPollAnswerVotesSubscriptionVariables>(WatchPollAnswerVotesDocument, baseOptions);\n      }\nexport type WatchPollAnswerVotesSubscriptionHookResult = ReturnType<typeof useWatchPollAnswerVotesSubscription>;\nexport type WatchPollAnswerVotesSubscriptionResult = Apollo.SubscriptionResult<WatchPollAnswerVotesSubscription>;\nexport const GetPollQuestionStateDocument = gql`\n    subscription getPollQuestionState($pollQuestionId: Int!) {\n  poll_questions(where: {id: {_eq: $pollQuestionId}}) {\n    is_active\n  }\n}\n    `;\n\n/**\n * __useGetPollQuestionStateSubscription__\n *\n * To run a query within a React component, call `useGetPollQuestionStateSubscription` and pass it any options that fit your needs.\n * When your component renders, `useGetPollQuestionStateSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPollQuestionStateSubscription({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *   },\n * });\n */\nexport function useGetPollQuestionStateSubscription(baseOptions?: Apollo.SubscriptionHookOptions<GetPollQuestionStateSubscription, GetPollQuestionStateSubscriptionVariables>) {\n        return Apollo.useSubscription<GetPollQuestionStateSubscription, GetPollQuestionStateSubscriptionVariables>(GetPollQuestionStateDocument, baseOptions);\n      }\nexport type GetPollQuestionStateSubscriptionHookResult = ReturnType<typeof useGetPollQuestionStateSubscription>;\nexport type GetPollQuestionStateSubscriptionResult = Apollo.SubscriptionResult<GetPollQuestionStateSubscription>;\nexport const WatchGetChannelsDocument = gql`\n    subscription watchGetChannels {\n  channel(where: {is_private: {_eq: false}}) {\n    id\n    name\n    channel_polls {\n      channel_id\n      poll_question {\n        id\n        text\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchGetChannelsSubscription__\n *\n * To run a query within a React component, call `useWatchGetChannelsSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchGetChannelsSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchGetChannelsSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchGetChannelsSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchGetChannelsSubscription, WatchGetChannelsSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchGetChannelsSubscription, WatchGetChannelsSubscriptionVariables>(WatchGetChannelsDocument, baseOptions);\n      }\nexport type WatchGetChannelsSubscriptionHookResult = ReturnType<typeof useWatchGetChannelsSubscription>;\nexport type WatchGetChannelsSubscriptionResult = Apollo.SubscriptionResult<WatchGetChannelsSubscription>;\nexport const WatchChannelHasActivePollDocument = gql`\n    subscription watchChannelHasActivePoll($currentChannelId: Int!) {\n  poll_questions(where: {channel_polls: {channel_id: {_eq: $currentChannelId}}, _and: {is_active: {_eq: true}}}) {\n    id\n    text\n  }\n}\n    `;\n\n/**\n * __useWatchChannelHasActivePollSubscription__\n *\n * To run a query within a React component, call `useWatchChannelHasActivePollSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelHasActivePollSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelHasActivePollSubscription({\n *   variables: {\n *      currentChannelId: // value for 'currentChannelId'\n *   },\n * });\n */\nexport function useWatchChannelHasActivePollSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelHasActivePollSubscription, WatchChannelHasActivePollSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelHasActivePollSubscription, WatchChannelHasActivePollSubscriptionVariables>(WatchChannelHasActivePollDocument, baseOptions);\n      }\nexport type WatchChannelHasActivePollSubscriptionHookResult = ReturnType<typeof useWatchChannelHasActivePollSubscription>;\nexport type WatchChannelHasActivePollSubscriptionResult = Apollo.SubscriptionResult<WatchChannelHasActivePollSubscription>;\nexport const WatchChannelPollActiveStateDocument = gql`\n    subscription watchChannelPollActiveState {\n  channel_poll {\n    id\n    channel {\n      name\n      channel_polls {\n        poll_question {\n          created_at\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWatchChannelPollActiveStateSubscription__\n *\n * To run a query within a React component, call `useWatchChannelPollActiveStateSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchChannelPollActiveStateSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchChannelPollActiveStateSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useWatchChannelPollActiveStateSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchChannelPollActiveStateSubscription, WatchChannelPollActiveStateSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchChannelPollActiveStateSubscription, WatchChannelPollActiveStateSubscriptionVariables>(WatchChannelPollActiveStateDocument, baseOptions);\n      }\nexport type WatchChannelPollActiveStateSubscriptionHookResult = ReturnType<typeof useWatchChannelPollActiveStateSubscription>;\nexport type WatchChannelPollActiveStateSubscriptionResult = Apollo.SubscriptionResult<WatchChannelPollActiveStateSubscription>;\nexport const WatchCheckUserHasVotedDocument = gql`\n    subscription watchCheckUserHasVoted($pollQuestionId: Int, $auth0UserId: String) {\n  user_votes(where: {poll_question_id: {_eq: $pollQuestionId}, auth0_user_id: {_eq: $auth0UserId}}) {\n    auth0_user_id\n    poll_question_id\n    poll_answer_id\n  }\n}\n    `;\n\n/**\n * __useWatchCheckUserHasVotedSubscription__\n *\n * To run a query within a React component, call `useWatchCheckUserHasVotedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useWatchCheckUserHasVotedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWatchCheckUserHasVotedSubscription({\n *   variables: {\n *      pollQuestionId: // value for 'pollQuestionId'\n *      auth0UserId: // value for 'auth0UserId'\n *   },\n * });\n */\nexport function useWatchCheckUserHasVotedSubscription(baseOptions?: Apollo.SubscriptionHookOptions<WatchCheckUserHasVotedSubscription, WatchCheckUserHasVotedSubscriptionVariables>) {\n        return Apollo.useSubscription<WatchCheckUserHasVotedSubscription, WatchCheckUserHasVotedSubscriptionVariables>(WatchCheckUserHasVotedDocument, baseOptions);\n      }\nexport type WatchCheckUserHasVotedSubscriptionHookResult = ReturnType<typeof useWatchCheckUserHasVotedSubscription>;\nexport type WatchCheckUserHasVotedSubscriptionResult = Apollo.SubscriptionResult<WatchCheckUserHasVotedSubscription>;","import React from 'react';\nimport { ApolloProvider, HttpOptions } from '@apollo/react-hooks';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  createHttpLink,\n  split,\n} from '@apollo/client';\nimport { WebSocketLink, WebSocketParams } from '@apollo/client/link/ws';\nimport { setContext } from '@apollo/client/link/context';\n\ninterface Definition {\n  kind: string;\n  operation?: string;\n}\n\nexport type ApolloHeadersType = {\n  Authorization: string;\n};\n\nconst ApolloWrapper: React.FC<any> = ({ children }) => {\n  const { isAuthenticated, getAccessTokenSilently } = useAuth0();\n\n  const getHeaders = async () => {\n    const headers = {} as ApolloHeadersType;\n    if (isAuthenticated) {\n      const token = await getAccessTokenSilently();\n      //console.log('token', token);\n      headers.Authorization = `Bearer ${token}`;\n    }\n    return headers;\n  };\n\n  const authMiddleware = setContext(async (operation, { originalHeaders }) => {\n    return {\n      headers: {\n        ...originalHeaders,\n        ...(await getHeaders()),\n      },\n    };\n  });\n\n  const httpLinkOptions: HttpOptions = {\n    uri: process.env.REACT_APP_HTTP_BACKEND_LINK,\n  };\n\n  const wsLinkOptions: WebSocketParams = {\n    uri: process.env.REACT_APP_WS_BACKEND_LINK || '',\n    options: {\n      reconnect: true,\n      lazy: true,\n      connectionParams: async () => {\n        return { headers: await getHeaders() };\n      },\n    },\n  };\n\n  const httpLink = createHttpLink(httpLinkOptions);\n  const wsLink = new WebSocketLink(wsLinkOptions);\n\n  const link = split(\n    // split based on operation type\n    ({ query }) => {\n      const { kind, operation }: Definition = getMainDefinition(query);\n      return kind === 'OperationDefinition' && operation === 'subscription';\n    },\n    wsLink,\n    authMiddleware.concat(httpLink),\n  );\n\n  /* Set up local cache */\n  const cache = new InMemoryCache();\n\n  /* Create Apollo Client */\n  const client = new ApolloClient({ link, cache });\n\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n};\n\nexport default ApolloWrapper;\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport typography from './typography';\nimport overrides from './overrides';\n\nexport const theme = createMuiTheme({\n  palette: {\n    common: {\n      black: '#000000',\n      white: '#f9cd8b',\n    },\n    type: 'dark',\n    background: {\n      paper: '#0f1448',\n      default: '#0c103b',\n    },\n    primary: {\n      light: '#81D4FA',\n      main: '#0288D1',\n      dark: 'rgba(255, 255, 255, 0.1)',\n      contrastText: '#EF6C00',\n    },\n    secondary: {\n      light: '#FFA726',\n      main: '#F57C00',\n      dark: '#EF6C00',\n      contrastText: '#ffffff',\n    },\n    error: {\n      light: '#E91E63',\n      main: '#AD1457',\n      dark: '#880E4F',\n    },\n    success: {\n      light: '#0f5',\n      main: '#0f0',\n      dark: '#222',\n    },\n  },\n\n  shape: {\n    borderRadius: 2,\n  },\n  mixins: {\n    toolbar: {\n      // backgroundColor: '#151c66',\n    },\n  },\n  spacing: 0,\n  props: {\n    MuiCheckbox: {\n      style: {\n        fontSize: 10,\n      },\n    },\n    MuiChip: {\n      style: {\n        padding: 3,\n      },\n    },\n    MuiList: {\n      style: {\n        padding: 0,\n      },\n    },\n    MuiListItemIcon: {\n      style: {\n        color: '#5C6BC0',\n      },\n    },\n    MuiPaper: {\n      draggable: false,\n      elevation: 0,\n      style: {\n        overflow: 'hidden',\n      },\n    },\n    MuiAppBar: {\n      style: {\n        top: 'auto',\n        bottom: 0,\n      },\n    },\n    MuiButton: {\n      disableElevation: false,\n      color: 'secondary',\n      variant: 'outlined',\n      size: 'small',\n      disableFocusRipple: false,\n      disableTouchRipple: false,\n    },\n  },\n  typography,\n  overrides,\n});\n","export default {\n  fontSize: 14,\n  body1: {\n    fontSize: 16,\n    color: '#f9cd8b',\n  },\n  body2: {\n    fontSize: 16,\n    fontWeight: 500,\n    // color: '#f9cd8b',\n  },\n  button: {\n    fontSize: 12,\n    fontWeight: 400,\n  },\n  h1: {\n    fontWeight: 700,\n    fontSize: 20,\n    paddingBottom: 16,\n  },\n  h2: {\n    fontWeight: 700,\n    fontSize: 18,\n    marginTop: 16,\n  },\n  h3: {\n    fontWeight: 700,\n    fontSize: 16,\n    marginTop: 16,\n    marginBottom: 16,\n  },\n  h4: {\n    fontWeight: 700,\n    fontSize: 14,\n    marginTop: 16,\n  },\n  h5: {\n    fontWeight: 700,\n    fontSize: 12,\n    marginTop: 16,\n  },\n  h6: {\n    fontWeight: 700,\n    fontSize: 10,\n  },\n};\n","import { theme } from './theme';\nexport default {\n  MuiCssBaseline: {\n    '@global': {\n      '*': {\n        'scrollbar-width': '1rem',\n      },\n      '*::-webkit-scrollbar': {\n        width: '.5rem',\n        height: '1rem',\n      },\n      '*::-webkit-scrollbar-track': {\n        '-webkit-box-shadow': 'inset 0 0 6px rgba(0,0,0,0.00)',\n      },\n      '*::-webkit-scrollbar-thumb': {\n        backgroundColor: 'rgba(0,0,0,.5)',\n        borderRadius: 20,\n      },\n      a: {\n        textDecoration: 'none',\n      },\n    },\n  },\n  MuiBackdrop: {\n    root: {\n      backgroundColor: 'rgba(0, 0, 0, 0.6)',\n    },\n  },\n  MuiFab: {\n    root: {\n      borderRadius: 0,\n    },\n    primary: {\n      color: '#fff',\n      // backgroundColor: 'rgba(255, 255, 255, .1)',\n      boxShadow: 'none',\n    },\n    label: {},\n  },\n  MuiSpeedDial: {\n    direction: 'left',\n    directionUp: { marginBottom: 0 },\n    actions: {\n      display: 'unset',\n      backgroundColor: 'transparent',\n    },\n  },\n  MuiSpeedDialAction: {\n    fab: {\n      backgroundColor: 'transparent',\n      '&:hover': {\n        borderRadius: 3,\n        padding: 10,\n      },\n    },\n    staticTooltip: {\n      // opacity: 1,\n    },\n    tooltipOpen: true,\n    tooltipPlacement: 'top-end',\n    tooltipPlacementLeft: {},\n    staticTooltipLabel: {\n      right: '100%',\n      whiteSpace: 'nowrap',\n    },\n  },\n  MuiTableCell: {\n    root: {\n      borderBottom: 'none',\n    },\n  },\n  MuiInputBase: {\n    root: {},\n  },\n  MuiList: {\n    root: {\n      '&:hover': {\n        // backgroundColor: 'red',\n      },\n    },\n  },\n  MuiListItemIcon: {\n    root: {\n      '& :hover': {\n        color: '#F57C00',\n      },\n    },\n  },\n  MuiContainer: {\n    root: {\n      padding: 0,\n      margin: 0,\n    },\n  },\n  MuiListItemText: {\n    root: {\n      padding: 0,\n      margin: 0,\n      '& span': {\n        padding: 0,\n        fontSize: '.875rem',\n      },\n      '& h6': {\n        fontSize: '.857rem',\n      },\n      '& a': {\n        color: '#fff',\n      },\n      '& a:hover': {\n        color: 'yellow',\n      },\n    },\n  },\n  MuiDivider: {\n    root: {\n      margin: 10,\n      opacity: 0.3,\n    },\n  },\n  MuiTypography: {},\n  MuiButton: {\n    contained: {\n      boxShadow: 'none',\n    },\n  },\n  MuiIconButton: {\n    root: {\n      padding: '3px',\n    },\n  },\n};\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport Button from '@material-ui/core/Button';\n\nconst Login: React.FC<any> = () => {\n  const { loginWithRedirect } = useAuth0();\n\n  const checkAndLogin = () => {\n    loginWithRedirect();\n  };\n\n  return (\n    <>\n      <Button\n        size=\"large\"\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={checkAndLogin}\n      >\n        Login\n      </Button>\n    </>\n  );\n};\n\nexport default Login;\n","import React from 'react';\nimport { Box, Container, Grid, Typography } from '@material-ui/core';\nimport Login from '../Login';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column',\n    height: '100vh',\n  },\n  title: {\n    fontSize: '2rem',\n    fontWeight: 700,\n    textTransform: 'uppercase',\n    paddingTop: theme.spacing(5),\n  },\n}));\n\nconst SignIn: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Grid container className={classes.root}>\n        <Grid item>\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n            <img src=\"/logo-chicken-chat.png\" alt=\"Chicken Chat\" />\n          </Box>\n          <Typography className={classes.title} variant=\"h2\">\n            Welcome to Chicken Chat\n          </Typography>\n          <Typography color=\"textPrimary\" variant=\"body1\">\n            Please register or login. Lets go an cackle your nonsense!\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Login />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default SignIn;\n","import React from 'react';\nimport { Box } from '@material-ui/core';\nimport AvatarGroup from '@material-ui/lab/AvatarGroup';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  toolbarIcon: {\n    ...theme.mixins.toolbar,\n  },\n}));\n\nconst NotFound: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.root}>\n      <h2>Upppsss ....! Something went wrong!</h2>\n    </Box>\n  );\n};\n\nexport default NotFound;\n","import React from 'react';\nimport { Box, CircularProgress } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: theme.spacing(0),\n    width: '100%',\n    // height: '100vh',\n  },\n}));\n\nconst Loader = () => {\n  const classes = useStyles();\n\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      flexDirection=\"column\"\n      flex={1}\n    >\n      <CircularProgress\n        color=\"secondary\"\n        size={20}\n        style={{ margin: '10px' }}\n      />\n    </Box>\n  );\n};\n\nexport default Loader;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { Box, Typography } from '@material-ui/core';\nimport { withAuthenticationRequired } from '@auth0/auth0-react';\nimport Loader from './shared/Loader';\n\ninterface PrivateRouteProps {\n  component: any;\n  path: any;\n}\n\nconst PrivateRoute: React.FC<PrivateRouteProps> = ({ component, ...args }) => {\n  return (\n    <Route\n      component={withAuthenticationRequired(component, {\n        onRedirecting: () => (\n          <>\n            <Loader />\n          </>\n        ),\n      })}\n      {...args}\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import { atom } from 'recoil';\n\nexport const testState = atom({\n  key: 'testState',\n});\n\nexport const currentChannelState = atom({\n  key: 'currentChannelState',\n});\n\nexport const getPollQuestionAnswers = atom({\n  key: 'getPollQuestionAnswersState',\n  default: 1,\n});\n\nexport const giphyState = atom({\n  key: 'giphyState',\n});\n\nexport const deletedMessageState = atom({\n  key: 'deletedMessageState',\n  default: false,\n});\n\nexport const deletedThreadMessageState = atom({\n  key: 'deletedThreadMessageState',\n  default: false,\n});\n","import React from 'react';\nimport { Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  large: {\n    backgroundSize: 'cover',\n    marginTop: theme.spacing(2),\n    width: theme.spacing(10),\n    height: theme.spacing(10),\n  },\n}));\n\nconst Logo = () => {\n  const classes = useStyles();\n\n  return (\n    <Avatar\n      className={classes.large}\n      alt=\"Chicken Fest\"\n      src=\"/chicken-chat-logo.svg\"\n    />\n  );\n};\n\nexport default Logo;\n","import React from 'react';\nimport { Alert } from '@material-ui/lab';\nimport {\n  Avatar,\n  Badge,\n  Box,\n  Button,\n  Container,\n  Divider,\n  Grid,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Typography,\n} from '@material-ui/core';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport {\n  useWatchUsersWhoHaveNotSubscribedToChannelSubscription,\n  useAddChannelUserMutation,\n} from '../../api/generated/graphql';\nimport { useRecoilState } from 'recoil';\nimport { currentChannelState } from '../../atom';\nimport { useHistory } from 'react-router-dom';\nimport Loader from '../shared/Loader';\nimport Logo from '../shared/Logo';\nimport { makeStyles } from '@material-ui/core/';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    overflowY: 'scroll',\n  },\n  avatar: {\n    backgroundColor: '#000000',\n    color: '#F57C00',\n  },\n  spacer: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nconst AddChannelMembers: React.FC = () => {\n  const classes = useStyles();\n\n  let history = useHistory();\n\n  const [currentChannel, setCurrentChannel] = useRecoilState<any>(\n    currentChannelState,\n  );\n\n  const { isLoading: loadingAuth0 } = useAuth0();\n\n  const {\n    data: users,\n    loading,\n    error,\n  } = useWatchUsersWhoHaveNotSubscribedToChannelSubscription({\n    variables: {\n      user_id: currentChannel.owner_id,\n      channel_id: currentChannel.id,\n    },\n  });\n\n  const [\n    addChannelUserMutation,\n    {\n      data: addChannelUserData,\n      loading: addChannelUserLoading,\n      error: addChannelUserError,\n    },\n  ] = useAddChannelUserMutation();\n\n  const handleUsersToggle = async (event: any, user_id: string) => {\n    await addChannelUserMutation({\n      variables: {\n        channel_id: currentChannel.id,\n        user_id,\n      },\n    });\n  };\n\n  const handleClick = () => {\n    history.push(`/channel/${currentChannel.name}`);\n  };\n\n  if (error || addChannelUserError)\n    console.log('error on user subscription', error);\n\n  return (\n    <>\n      <Container maxWidth=\"sm\" className={classes.root}>\n        <Grid item xs={12}>\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n            <Logo />\n          </Box>\n          <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            flexDirection=\"column\"\n            mt={0}\n            mb={5}\n          >\n            <Typography id=\"simple-modal-title\" variant=\"h2\">\n              Add users to {currentChannel.name}\n            </Typography>\n            <Typography\n              color=\"secondary\"\n              variant=\"caption\"\n              id=\"simple-modal-description\"\n            >\n              {users && users.user.length > 0\n                ? 'Select users that you wanna add to this channel.'\n                : 'All users have subscribed to this channel.'}\n            </Typography>\n          </Box>\n          <Box>\n            {error && (\n              <Alert severity={'error'}>\n                Error - something weird happened...\n              </Alert>\n            )}\n\n            {(loadingAuth0 || loading) && <Loader />}\n\n            {!(loadingAuth0 || loading || error) && (\n              <>\n                <Divider className={classes.spacer} />\n                <List\n                  component=\"nav\"\n                  aria-label=\"secondary mailbox folders\"\n                  className={classes.spacer}\n                >\n                  {users &&\n                    users.user.map((u: any, index) => {\n                      return (\n                        <ListItem\n                          button\n                          key={index}\n                          onClick={(event) =>\n                            handleUsersToggle(event, u.auth0_user_id)\n                          }\n                        >\n                          <ListItemIcon>\n                            <Badge variant=\"dot\">\n                              <Avatar className={classes.avatar}>\n                                {u?.username.substring(0, 2).toUpperCase()}\n                              </Avatar>\n                            </Badge>\n                          </ListItemIcon>\n                          <ListItemText primary={u.username} />\n                        </ListItem>\n                      );\n                    })}\n                </List>\n                <Divider className={classes.spacer} />\n              </>\n            )}\n          </Box>\n        </Grid>\n        <Grid item xs={12}>\n          <Box display=\"flex\" justifyContent=\"center\" mt={5}>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              size=\"large\"\n              onClick={handleClick}\n            >\n              Back to channel\n            </Button>\n          </Box>\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default AddChannelMembers;\n","import React, { useEffect, useState } from 'react';\nimport {\n  Avatar,\n  Badge,\n  Box,\n  Button,\n  Container,\n  Divider,\n  Grid,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport {\n  useValidateAndAddDirectMessageChannelMutation,\n  useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription,\n  useUpsertMessageCursorMutation,\n  useInsertMessageMutation,\n} from '../../api/generated/graphql';\nimport { Alert } from '@material-ui/lab';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useHistory } from 'react-router';\nimport Loader from '../shared/Loader';\nimport Logo from '../shared/Logo';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  avatar: {\n    backgroundColor: '#000000',\n    color: '#F57C00',\n  },\n  spacer: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nconst AddDirectMessageChannel: React.FC = () => {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = useState(null);\n  const { user } = useAuth0();\n\n  const [users, setUsers] = useState<any>(null);\n\n  const user_id = user.sub;\n\n  let history = useHistory();\n\n  const {\n    data,\n    loading,\n    error,\n  } = useWatchUsersWhoHaveSubscribedToDirectMessageChannelSubscription({\n    variables: {\n      user_id,\n    },\n  });\n\n  const [\n    upsertMessageCursorMutation,\n    { error: upsertMessageError },\n  ] = useUpsertMessageCursorMutation();\n\n  const [\n    sendMessage,\n    { error: sendUpdateMessageError },\n  ] = useInsertMessageMutation();\n\n  const [\n    validateAndAddDirectMessageChannelMutation,\n    { error: addDMError },\n  ] = useValidateAndAddDirectMessageChannelMutation();\n\n  useEffect(() => {\n    const checkUserSubscriptions = async () => {\n      return data?.user.filter((u) => {\n        return (\n          u.user_channels.filter((user_channel) => {\n            return user_channel.channel.user_channels.length === 1;\n          }).length === 0\n        );\n      });\n    };\n    const check = async () => {\n      const users = await checkUserSubscriptions();\n      setUsers(users);\n    };\n    check();\n  }, [data]);\n\n  if (error || addDMError || upsertMessageError || sendUpdateMessageError) {\n    console.log('error', addDMError);\n    return <Alert severity=\"error\">Fetching users error...</Alert>;\n  }\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  const handleAddUser = async (user_id: string, dm_user: string) => {\n    setAnchorEl(null);\n    const { data } = await validateAndAddDirectMessageChannelMutation({\n      variables: {\n        name: uuidv4(),\n        user_id1: user_id,\n        user_id2: dm_user,\n      },\n    });\n\n    await sendMessage({\n      variables: {\n        message: {\n          user_id: 'admin',\n          text: `Welcome to your new direct message channel`,\n          channel_id: data?.validateAndAddDirectMessageChannel?.id,\n        },\n      },\n    });\n\n    if (\n      data?.validateAndAddDirectMessageChannel?.id &&\n      data?.validateAndAddDirectMessageChannel?.id > 0\n    )\n      upsertMessageCursorMutation({\n        variables: {\n          channel_id: data?.validateAndAddDirectMessageChannel?.id,\n          message_id: 1,\n          user_id: dm_user,\n        },\n      });\n\n    history.push(`/channel/${data?.validateAndAddDirectMessageChannel?.name}`);\n    // TODO: add backend_only flag for addDirectMessageChannel mutation to hasura\n  };\n\n  const handleClick = () => {\n    history.push(`/channel/general`);\n  };\n\n  return (\n    <>\n      <Container maxWidth=\"sm\">\n        <Grid item xs={12}>\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n            <Logo />\n          </Box>\n          <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            flexDirection=\"column\"\n            mb={5}\n          >\n            <Typography variant=\"h2\">Add a user</Typography>\n            <Typography\n              color=\"secondary\"\n              variant=\"caption\"\n              id=\"simple-modal-description\"\n            >\n              {users?.length\n                ? 'Select users that you wanna send direct messages to.'\n                : ''}\n            </Typography>\n          </Box>\n          <Box mb={5}>\n            <Divider className={classes.spacer} />\n            {users?.length ? (\n              <List className={classes.spacer}>\n                {users?.map((dm_user: any, index: any) => {\n                  return (\n                    <ListItem\n                      button\n                      key={index}\n                      onClick={() =>\n                        handleAddUser(user_id, dm_user.auth0_user_id)\n                      }\n                    >\n                      <ListItemIcon>\n                        <Badge variant=\"dot\">\n                          <Avatar className={classes.avatar}>\n                            {dm_user.username.substring(0, 2).toUpperCase()}\n                          </Avatar>\n                        </Badge>\n                      </ListItemIcon>\n                      <ListItemText primary={dm_user.username} />\n                    </ListItem>\n                  );\n                })}\n              </List>\n            ) : (\n              <Alert severity={'success'}>\n                All users have been added. U can send a message, by clicking on\n                the user in the menu sidebar in direct messages.\n              </Alert>\n            )}\n            <Divider className={classes.spacer} />\n          </Box>\n        </Grid>\n        <Grid item xs={12}>\n          <Box display=\"flex\" justifyContent=\"center\" mt={5}>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              size=\"large\"\n              onClick={handleClick}\n            >\n              Back to Channel\n            </Button>\n          </Box>\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default AddDirectMessageChannel;\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Badge, Chip, Container, Grid, Tooltip } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport PeopleIcon from '@material-ui/icons/People';\nimport FaceIcon from '@material-ui/icons/Face';\nimport Loader from './Loader';\nimport { useWatchOnlineUsersSubscription } from '../../api/generated/graphql';\n\ninterface OnlineUsersProps {\n  user_id: string;\n}\n\nconst UserStatus: React.FC<OnlineUsersProps> = ({ user_id }) => {\n  const { data, loading, error } = useWatchOnlineUsersSubscription();\n  const { user } = useAuth0();\n  const usersOnline = data?.users.length ?? 0;\n\n  if (error) {\n    return <Alert severity=\"error\">Online users could not be loaded.</Alert>;\n  }\n\n  return (\n    <>\n      <Container>\n        {!loading ? (\n          <Grid container justify=\"space-between\">\n            <Grid item>\n              <Chip\n                variant=\"outlined\"\n                color=\"primary\"\n                size=\"small\"\n                icon={<FaceIcon />}\n                label={user.nickname}\n              />\n            </Grid>\n            <Grid item>\n              <Tooltip\n                title=\"Users online\"\n                aria-label=\"Unsers online\"\n                placement=\"top\"\n              >\n                <Badge color=\"secondary\" badgeContent={usersOnline}>\n                  <PeopleIcon color=\"primary\" />\n                </Badge>\n              </Tooltip>\n            </Grid>\n          </Grid>\n        ) : (\n          <Grid container justify=\"center\">\n            <Loader />\n          </Grid>\n        )}\n      </Container>\n    </>\n  );\n};\n\nexport default UserStatus;\n","import React, { useState, useEffect } from 'react';\nimport {\n  useWatchMessagesSubscription,\n  useWatchMessageCursorSubscription,\n} from '../../api/generated/graphql';\nimport { useRecoilState } from 'recoil';\nimport { currentChannelState } from '../../atom';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport Alert from '@material-ui/lab/Alert';\nimport { Chip } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    '& > *': {\n      margin: theme.spacing(0.5),\n    },\n  },\n  item: {\n    height: '16px',\n  },\n}));\n\ninterface ChannelListMessageCounterProps {\n  channelId: number;\n}\n\nconst ChannelListMessageCounter: React.FC<ChannelListMessageCounterProps> = ({\n  channelId,\n}) => {\n  const classes = useStyles();\n  const { user, error: auth0Error } = useAuth0();\n  const [count, setCount] = useState<number | undefined>(0);\n\n  const { data, loading, error } = useWatchMessagesSubscription({\n    variables: {\n      channelId,\n    },\n    fetchPolicy: 'network-only',\n  });\n\n  const {\n    data: useWatchMessageCursorData,\n    loading: useWatchMessageCursorLoading,\n    error: useWatchMessageCursorError,\n  } = useWatchMessageCursorSubscription({\n    variables: {\n      user_id: user.sub,\n      channel_id: channelId,\n    },\n  });\n\n  useEffect(() => {\n    let messageId =\n      useWatchMessageCursorData?.message_cursor[0]?.message_id ?? undefined;\n\n    let messageCounterArray = data?.messages.filter((m) => {\n      if (messageId === undefined) return false;\n      return m.id > messageId;\n    });\n\n    setCount(messageCounterArray?.length);\n  }, [data, useWatchMessageCursorData]);\n\n  if (error || useWatchMessageCursorError || auth0Error) {\n    console.log(\n      'Error in ChannelListMessageCounter Component',\n      error,\n      useWatchMessageCursorError,\n      auth0Error,\n    );\n  }\n\n  if (loading || useWatchMessageCursorLoading) {\n    return <React.Fragment></React.Fragment>;\n  }\n\n  return (\n    <>\n      {count && count !== undefined ? (\n        <div className={classes.root}>\n          <Chip\n            variant=\"outlined\"\n            size=\"small\"\n            label={count}\n            color=\"secondary\"\n            className={classes.item}\n          />\n        </div>\n      ) : (\n        ''\n      )}\n    </>\n  );\n};\n\nexport default ChannelListMessageCounter;\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport {\n  Badge,\n  Box,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport ForumOutlinedIcon from '@material-ui/icons/ForumOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  treeView: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  badge: {\n    backgroundColor: '#0f0',\n  },\n}));\n\nconst ThreadsLink: React.FC<any> = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <ListItem button>\n        <ListItemIcon>\n          <ForumOutlinedIcon color=\"secondary\" />\n        </ListItemIcon>\n        <ListItemText>\n          <Link to=\"/channel/threads\">\n            <Typography variant=\"h6\">Threads</Typography>\n          </Link>\n        </ListItemText>\n      </ListItem>\n    </>\n  );\n};\n\nexport default ThreadsLink;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { theme } from '../../theme/theme';\nimport { useWatchChannelsSubscription } from '../../api/generated/graphql';\nimport { Channel_Type_Enum } from '../../api/generated/graphql';\nimport { useRecoilState } from 'recoil';\nimport { currentChannelState } from '../../atom';\nimport {\n  Badge,\n  Collapse,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport Loader from '../shared/Loader';\nimport PeopleIcon from '@material-ui/icons/People';\nimport PeopleOutlineIcon from '@material-ui/icons/PeopleOutline';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport EnhancedEncryptionOutlinedIcon from '@material-ui/icons/EnhancedEncryptionOutlined';\nimport ChannelListMessageCounter from './ChannelListMessageCounter';\nimport ThreadsLink from '../shared/ThreadsLink';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  treeView: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  badge: {\n    backgroundColor: '#0f0',\n  },\n}));\n\nconst Channels: React.FC<any> = () => {\n  const classes = useStyles();\n  const [currentChannel] = useRecoilState<any>(currentChannelState);\n  const [open, setOpen] = React.useState(true);\n  const matches = useMediaQuery(theme.breakpoints.down('md'));\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  const { data, loading, error } = useWatchChannelsSubscription({\n    variables: {\n      channel_type: Channel_Type_Enum.ChatMessage,\n    },\n  });\n\n  if (error) {\n    return <Alert severity=\"error\">Channels could not be loaded.</Alert>;\n  }\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      <List className={classes.root}>\n        <ThreadsLink />\n        <ListItem button onClick={handleClick}>\n          <ListItemIcon>\n            <PeopleOutlineIcon />\n          </ListItemIcon>\n          <ListItemText>\n            <Typography variant=\"h6\">Channels</Typography>\n          </ListItemText>\n          {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <List component=\"div\">\n            {data?.channels?.map((data: any) => (\n              <ListItem key={data.id} button>\n                {data?.name === currentChannel?.name ? (\n                  <ListItemIcon>\n                    <Badge classes={{ badge: classes.badge }} variant=\"dot\">\n                      {data.is_private === true ? (\n                        <EnhancedEncryptionOutlinedIcon />\n                      ) : (\n                        <PeopleIcon color=\"secondary\" />\n                      )}\n                    </Badge>\n                  </ListItemIcon>\n                ) : (\n                  <ListItemIcon>\n                    {data.is_private === true ? (\n                      <EnhancedEncryptionOutlinedIcon />\n                    ) : (\n                      <PeopleIcon color=\"secondary\" />\n                    )}\n                  </ListItemIcon>\n                )}\n                {data?.name === currentChannel?.name ? (\n                  <ListItemText>\n                    <Link\n                      data-channel-name={data.name}\n                      to={'/channel/' + data.name}\n                    >\n                      <Typography variant=\"h6\" color=\"secondary\">\n                        {data.name}\n                      </Typography>\n                    </Link>\n                  </ListItemText>\n                ) : (\n                  <React.Fragment>\n                    <Link\n                      to={'/channel/' + data.name}\n                      data-channel-name={data.name}\n                    >\n                      <ListItemText primary={data?.name} />\n                    </Link>\n                    <ChannelListMessageCounter channelId={data.id} />\n                  </React.Fragment>\n                )}\n              </ListItem>\n            ))}\n          </List>\n        </Collapse>\n      </List>\n    </>\n  );\n};\n\nexport default Channels;\n","import React from 'react';\nimport {\n  Avatar,\n  Badge,\n  Collapse,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport Alert from '@material-ui/lab/Alert';\nimport PersonIcon from '@material-ui/icons/Person';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Loader from '../shared/Loader';\nimport { Link, useHistory } from 'react-router-dom';\nimport {\n  useWatchDirectMessageChannelsSubscription,\n  useWatchOnlineUsersSubscription,\n} from '../../api/generated/graphql';\nimport { Channel_Type_Enum } from '../../api/generated/graphql';\nimport ChannelListMessageCounter from './ChannelListMessageCounter';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  nested: {\n    paddingLeft: theme.spacing(0),\n  },\n  form: {\n    flexGrow: 1,\n    margin: theme.spacing(2),\n  },\n  submit: {\n    marginTop: theme.spacing(2),\n    // flex: 1,\n  },\n  badge: {\n    backgroundColor: '#0f0',\n  },\n  itemText: {\n    color: theme.palette.primary.light,\n    fontWeight: 700,\n  },\n  link: {\n    color: '#f9cd8b',\n  },\n  avatar: {\n    backgroundColor: '#000000',\n    color: '#F57C00',\n  },\n}));\n\ninterface DirectMessageUserListProps {\n  user_id: string;\n}\n\nconst DirectMessageUserList: React.FC<DirectMessageUserListProps> = ({\n  user_id,\n}) => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  let history = useHistory();\n\n  const {\n    data: onlineUsers,\n    loading: onlineUsersLoading,\n    error: onlineUsersError,\n  } = useWatchOnlineUsersSubscription();\n\n  const { data, loading, error } = useWatchDirectMessageChannelsSubscription({\n    variables: {\n      channel_type: Channel_Type_Enum.DirectMessage,\n      user_id,\n    },\n  });\n\n  if (error || onlineUsersError) {\n    console.log('error', error);\n    console.log('onlineUsersError', onlineUsersError);\n    return (\n      <Alert severity=\"error\">A DirectMessageUserListError occured.</Alert>\n    );\n  }\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  const navigateToAddDirectMessageChannelMembers = () => {\n    history.push(`/addDirectMessageChannelMembers`);\n  };\n\n  const setOnlineUsersStatus = (user_id: string) => {\n    if (user_id === undefined) return true;\n\n    const onlineUser = onlineUsers?.users.filter((u) => {\n      return user_id === u.auth0_user_id ? true : false;\n    });\n\n    return onlineUser?.length ? false : true;\n  };\n\n  return (\n    <>\n      <List className={classes.root}>\n        <ListItem button onClick={handleClick}>\n          <ListItemIcon>\n            <Badge classes={{ badge: classes.badge }} variant=\"dot\">\n              <PersonIcon />\n            </Badge>\n          </ListItemIcon>\n          <ListItemText>\n            <Typography variant=\"h6\">Direct Messages</Typography>\n          </ListItemText>\n          <ListItemIcon>\n            <AddCircleOutlineIcon\n              onClick={navigateToAddDirectMessageChannelMembers}\n            />\n          </ListItemIcon>\n          {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <List component=\"div\">\n            {data?.channels.map((data: any) => (\n              <ListItem button key={data.id}>\n                <ChannelListMessageCounter channelId={data.id} />\n                <ListItemText\n                  primary={\n                    <React.Fragment>\n                      <Link\n                        className={classes.link}\n                        to={'/channel/' + data.name}\n                      >\n                        {data.user_channels[0]?.user.username}\n                      </Link>\n                    </React.Fragment>\n                  }\n                />\n                <ListItemIcon>\n                  <Badge\n                    classes={{ badge: classes.badge }}\n                    variant=\"dot\"\n                    invisible={setOnlineUsersStatus(\n                      data.user_channels[0]?.user.auth0_user_id,\n                    )}\n                  >\n                    <Avatar className={classes.avatar}>\n                      {data.user_channels[0]?.user.username\n                        .substring(0, 2)\n                        .toUpperCase()}\n                    </Avatar>\n                  </Badge>\n                </ListItemIcon>\n              </ListItem>\n            ))}\n          </List>\n        </Collapse>\n      </List>\n    </>\n  );\n};\n\nexport default DirectMessageUserList;\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Button } from '@material-ui/core';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    [theme.breakpoints.down('md')]: {\n      width: '100%',\n    },\n    [theme.breakpoints.up('md')]: {\n      width: 'auto',\n    },\n    marginTop: theme.spacing(3),\n  },\n}));\n\nconst Logout: React.FC = () => {\n  const classes = useStyles();\n  const { logout } = useAuth0();\n\n  return (\n    <>\n      <Button\n        variant=\"outlined\"\n        color=\"secondary\"\n        size=\"small\"\n        className={classes.button}\n        endIcon={<ExitToAppIcon />}\n        onClick={() => {\n          logout({\n            returnTo: process.env.REACT_APP_AUTH0_LOGOUT_URL,\n          });\n          window.localStorage.clear();\n        }}\n      >\n        Logout\n      </Button>\n    </>\n  );\n};\n\nexport default Logout;\n","import React, { useState } from 'react';\nimport { Alert } from '@material-ui/lab';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport {\n  useAddChannelMutation,\n  useInsertMessageMutation,\n  Channel_Type_Enum,\n} from '../../api/generated/graphql';\nimport Loader from '../shared/Loader';\nimport {\n  Button,\n  Checkbox,\n  Collapse,\n  FormControlLabel,\n  Grid,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  TextField,\n  Typography,\n  Snackbar,\n} from '@material-ui/core';\nimport { theme } from '../../theme/theme';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\nimport GroupAddOutlinedIcon from '@material-ui/icons/GroupAddOutlined';\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\nimport { useHistory } from 'react-router';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  nested: {\n    paddingLeft: theme.spacing(0),\n  },\n  form: {\n    flexGrow: 1,\n    margin: theme.spacing(2),\n    marginTop: theme.spacing(0),\n  },\n  checkbox: {\n    color: theme.palette.primary.dark,\n  },\n  submit: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst AddChannel: React.FC = () => {\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n  const [open, setOpen] = React.useState(false);\n  const [openAlert, setOpenAlert] = React.useState(true);\n  const [channelName, setChannelName] = useState('');\n  const [channelIsPrivate, setChannelIsPrivate] = useState(false);\n  const { user } = useAuth0();\n  const classes = useStyles();\n\n  const [addChannel, { data, loading, error }] = useAddChannelMutation();\n\n  const [\n    sendMessage,\n    { data: sendUpdateMessageData },\n  ] = useInsertMessageMutation();\n\n  const { user: userAuth0, isLoading: loadingAuth0 } = useAuth0();\n  let history = useHistory();\n\n  const setSnackbarPosition = () => {\n    switch (matches) {\n      case true:\n        return 'right';\n      case false:\n        return 'center';\n\n      default:\n        return 'right';\n    }\n  };\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  const handleAlert = () => {\n    setOpenAlert(!openAlert);\n  };\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!channelName) return;\n    setOpenAlert(true);\n\n    const dataAddChannel = await addChannel({\n      variables: {\n        channel: {\n          owner_id: userAuth0.sub,\n          name: channelName.toLocaleLowerCase(),\n          is_private: channelIsPrivate,\n          channel_type: Channel_Type_Enum.ChatMessage,\n        },\n      },\n    });\n\n    await sendMessage({\n      variables: {\n        message: {\n          user_id: 'admin',\n          text: `Welcome to channel ${dataAddChannel.data?.insert_channel?.returning[0]?.name}`,\n          channel_id: dataAddChannel.data?.insert_channel?.returning[0]?.id,\n        },\n      },\n    });\n\n    setOpen(false);\n    setChannelName('');\n\n    history.push(`/channel/${channelName.toLocaleLowerCase()}`);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setChannelName(e.target.value);\n  };\n\n  const handleIsPrivateChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setChannelIsPrivate(e.target.checked);\n  };\n\n  if (error) {\n    console.log('error mutation', error);\n  }\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <List className={classes.root}>\n      <ListItem button onClick={handleClick}>\n        <ListItemIcon>\n          {open ? <GroupAddIcon /> : <GroupAddOutlinedIcon />}\n        </ListItemIcon>\n        <ListItemText primary=\"Add Channel\" />\n        {open ? (\n          <RemoveCircleIcon fontSize=\"small\" />\n        ) : (\n          <AddCircle color=\"secondary\" fontSize=\"small\" />\n        )}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        {(loadingAuth0 || loading) && <Loader />}\n        <List component=\"div\">\n          {error && (\n            <ListItem className={classes.nested}>\n              <Snackbar\n                open={openAlert}\n                autoHideDuration={5000}\n                onClose={handleAlert}\n                anchorOrigin={{\n                  vertical: 'top',\n                  horizontal: setSnackbarPosition(),\n                }}\n              >\n                <Alert severity={'error'} onClose={handleAlert}>\n                  You can not use this name as it is already taken.\n                </Alert>\n              </Snackbar>\n            </ListItem>\n          )}\n          {data && (\n            <ListItem className={classes.nested}>\n              <Snackbar\n                open={openAlert}\n                autoHideDuration={5000}\n                onClose={handleAlert}\n                anchorOrigin={{\n                  vertical: 'top',\n                  horizontal: setSnackbarPosition(),\n                }}\n              >\n                <Alert severity={'success'} onClose={handleAlert}>\n                  Channel has been added.\n                </Alert>\n              </Snackbar>\n            </ListItem>\n          )}\n          <ListItem className={classes.nested}>\n            <Grid container>\n              <form\n                className={classes.form}\n                noValidate\n                autoComplete=\"off\"\n                onSubmit={handleSubmit}\n              >\n                <Grid item xs={12}>\n                  <TextField\n                    disabled={loadingAuth0 || loading}\n                    value={channelName}\n                    autoFocus={false}\n                    onChange={handleChange}\n                    autoComplete=\"off\"\n                    placeholder=\"Your channel name\"\n                    id=\"add-channel-input\"\n                    label=\"Add a new channel\"\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={channelIsPrivate}\n                        onChange={handleIsPrivateChange}\n                        color=\"secondary\"\n                        name=\"private\"\n                        className={classes.checkbox}\n                      />\n                    }\n                    label={\n                      <Typography variant=\"caption\" color=\"textSecondary\">\n                        Private Channel\n                      </Typography>\n                    }\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Button\n                    disabled={loadingAuth0 || loading}\n                    type=\"submit\"\n                    value=\"Submit\"\n                    endIcon={<AddCircle />}\n                    className={classes.submit}\n                    variant=\"outlined\"\n                  >\n                    Add new channel\n                  </Button>\n                </Grid>\n              </form>\n            </Grid>\n          </ListItem>\n        </List>\n      </Collapse>\n    </List>\n  );\n};\n\nexport default AddChannel;\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Box, Divider, Grid } from '@material-ui/core';\nimport UserStatus from './UserStatus';\nimport ChannelList from '../chat/ChannelList';\nimport DirectMessageUserList from '../chat/DirectMessageUserList';\nimport Logout from '../Logout';\nimport AddChannel from '../chat/AddChannel';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    [theme.breakpoints.up('sm')]: {\n      marginRight: theme.spacing(5),\n      marginLeft: theme.spacing(5),\n      marginTop: theme.spacing(0),\n      marginBottom: theme.spacing(5),\n    },\n    [theme.breakpoints.down('md')]: {\n      padding: theme.spacing(2),\n      margin: theme.spacing(0),\n      paddingTop: theme.spacing(2),\n    },\n    [theme.breakpoints.down('sm')]: {\n      padding: theme.spacing(0),\n      margin: theme.spacing(0),\n      paddingTop: theme.spacing(2),\n    },\n  },\n  treeView: {\n    overflowY: 'hidden',\n    maxHeight: '100vh',\n    marginRight: theme.spacing(0),\n    marginLeft: theme.spacing(0),\n    paddingRight: theme.spacing(0),\n  },\n  branding: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  logo: {\n    [theme.breakpoints.down('md')]: {\n      width: '150px',\n    },\n    [theme.breakpoints.up('md')]: {\n      width: '200px',\n    },\n  },\n}));\n\nconst SideBar: React.FC<any> = () => {\n  const { user } = useAuth0();\n  const classes = useStyles();\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        flex=\"1\"\n        className={classes.root}\n      >\n        <Grid container>\n          <Grid item xs={12}>\n            <UserStatus user_id={user.sub} />\n          </Grid>\n          <Grid item xs={12} className={classes.branding}>\n            <img\n              alt=\"The Great Chicken Fest\"\n              src=\"/the-great-chicken-fest.svg\"\n              className={classes.logo}\n            />\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <AddChannel />\n          <Box className={classes.treeView}>\n            <Divider />\n            <ChannelList />\n            <Divider />\n            <DirectMessageUserList user_id={user.sub} />\n            <Divider />\n            <Logout />\n          </Box>\n        </Grid>\n      </Box>\n    </>\n  );\n};\n\nexport default SideBar;\n","import React from 'react';\nimport moment from 'moment';\nimport { ThreadMessage } from '../../../interfaces/message.interface';\nimport {\n  Avatar,\n  Badge,\n  Box,\n  Divider,\n  ListItem,\n  ListItemAvatar,\n  ListItemIcon,\n  Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  head: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    padding: theme.spacing(0),\n  },\n  root: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    padding: theme.spacing(2),\n  },\n  [theme.breakpoints.up('md')]: {\n    messageText: {\n      paddingBottom: '1rem',\n    },\n    reply: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n      color: '#ffffff',\n    },\n  },\n  [theme.breakpoints.down('md')]: {\n    messageText: {\n      fontSize: 14,\n      paddingBottom: '1rem',\n    },\n    reply: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n      color: '#ffffff',\n    },\n  },\n  [theme.breakpoints.down('sm')]: {\n    messageText: {\n      fontSize: 12,\n      paddingBottom: '1rem',\n    },\n    reply: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n      color: '#ffffff',\n    },\n  },\n  vspace: {\n    marginBottom: theme.spacing(1),\n  },\n  vspaceTop: {\n    marginBottom: theme.spacing(3),\n  },\n  vspaceBottom: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(0),\n  },\n  image: {\n    paddingBottom: '0.5rem',\n  },\n  avatar: {\n    backgroundColor: '#000000',\n    color: '#F57C00',\n  },\n}));\n\ninterface ThreadInfoProps {\n  messages: ThreadMessage[];\n  channelThread: any;\n  currentChannel: any;\n}\n\nconst ThreadInfo: React.FC<ThreadInfoProps> = ({\n  messages,\n  channelThread,\n  currentChannel,\n}) => {\n  const classes = useStyles();\n\n  const renderThreadInfo = (channelThread: any) => {\n    return (\n      <React.Fragment>\n        <Box>\n          <Typography variant=\"caption\">\n            <strong>Thread - {currentChannel.name} </strong>\n          </Typography>\n        </Box>\n        <Divider className={classes.vspaceTop} />\n        <ListItem key={channelThread.message.id} className={classes.head}>\n          <Box\n            display=\"flex\"\n            justifyContent=\"flex-start\"\n            alignItems=\"flex-start\"\n          >\n            <ListItemAvatar>\n              <ListItemIcon>\n                <Badge variant=\"dot\">\n                  {!channelThread.message.deleted ? (\n                    <Avatar className={classes.avatar}>\n                      {channelThread.message.user.username\n                        .substring(0, 2)\n                        .toUpperCase()}\n                    </Avatar>\n                  ) : (\n                    <Avatar\n                      alt=\"Message has been removed\"\n                      src={`${window.location.origin}/deleted.png`}\n                    />\n                  )}\n                </Badge>\n              </ListItemIcon>\n            </ListItemAvatar>\n          </Box>\n          <Box component=\"div\" display=\"flex\" flexDirection=\"column\" flex=\"1\">\n            <Box\n              display=\"flex\"\n              justifyContent=\"space-between\"\n              alignItems=\"flex-start\"\n            >\n              <Box\n                display=\"flex\"\n                justifyContent=\"flex-start\"\n                alignItems=\"flex-start\"\n              >\n                <Typography variant=\"caption\">\n                  {!channelThread.message.deleted ? (\n                    <>\n                      <strong>{channelThread.message.user.username} </strong>\n                      <i>{moment(channelThread.message.timestamp).fromNow()}</i>\n                    </>\n                  ) : (\n                    <strong>Oh sorry it seems...</strong>\n                  )}\n                </Typography>\n                <Divider className={classes.vspace} />\n              </Box>\n            </Box>\n            <Typography component=\"div\" className={classes.messageText}>\n              {channelThread.message.text}\n            </Typography>\n          </Box>\n        </ListItem>\n        <Box className={classes.vspaceBottom}>\n          <Typography component=\"div\" className={classes.reply}>\n            {messages?.length}\n            {messages?.length === 1 ? ' reply' : ' replies'}\n          </Typography>\n        </Box>\n      </React.Fragment>\n    );\n  };\n\n  return <>{channelThread ? renderThreadInfo(channelThread) : ''}</>;\n};\n\nexport default ThreadInfo;\n","import React from 'react';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport { IconButton, CircularProgress } from '@material-ui/core';\nimport { useDeleteThreadMessageMutation } from '../../../api/generated/graphql';\nimport { Alert } from '@material-ui/lab';\n\ninterface ThreadDeleteMessageProps {\n  messageId: number;\n}\n\nconst ThreadDeleteMessage: React.FC<ThreadDeleteMessageProps> = ({\n  messageId,\n}) => {\n  const [\n    deleteThreadMessageMutation,\n    { data, error },\n  ] = useDeleteThreadMessageMutation();\n\n  const handleDelete = (messageId: number) => {\n    deleteThreadMessageMutation({\n      variables: {\n        message_id: messageId,\n      },\n    });\n  };\n\n  if (\n    error ||\n    (data?.delete_channel_thread_message?.affected_rows !== undefined &&\n      data?.delete_channel_thread_message?.affected_rows === 0)\n  ) {\n    return <Alert severity=\"error\">Message could not get deleted...</Alert>;\n  }\n\n  return (\n    <IconButton onClick={() => handleDelete(messageId)}>\n      <HighlightOffIcon color=\"primary\" fontSize=\"small\" />\n    </IconButton>\n  );\n};\n\nexport default ThreadDeleteMessage;\n","import React from 'react';\nimport moment from 'moment';\nimport { ThreadMessage } from '../../../interfaces/message.interface';\nimport ThreadInfo from './ThreadInfo';\nimport ThreadDeleteMessage from './ThreadDeleteMessage';\nimport {\n  Avatar,\n  Badge,\n  Box,\n  Divider,\n  ListItem,\n  ListItemAvatar,\n  ListItemIcon,\n  Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme) => ({\n  head: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    padding: theme.spacing(0),\n  },\n  root: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    padding: theme.spacing(2),\n  },\n  [theme.breakpoints.up('md')]: {\n    messageText: {\n      paddingBottom: '1rem',\n    },\n    reply: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n      color: '#ffffff',\n    },\n  },\n  [theme.breakpoints.down('md')]: {\n    messageText: {\n      fontSize: 14,\n      paddingBottom: '1rem',\n    },\n    reply: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n      color: '#ffffff',\n    },\n  },\n  [theme.breakpoints.down('sm')]: {\n    messageText: {\n      fontSize: 12,\n      paddingBottom: '1rem',\n    },\n    reply: {\n      fontSize: 11,\n      paddingBottom: '1rem',\n      color: '#ffffff',\n    },\n  },\n  vspace: {\n    marginBottom: theme.spacing(1),\n  },\n  vspaceTop: {\n    marginBottom: theme.spacing(3),\n  },\n  vspaceBottom: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(0),\n  },\n  image: {\n    paddingBottom: '0.5rem',\n  },\n  avatar: {\n    backgroundColor: '#000000',\n    color: '#F57C00',\n  },\n}));\n\ninterface ThreadMessageListProps {\n  messages: ThreadMessage[];\n  user: any;\n  channelThread: any;\n  currentChannel: any;\n}\n\nconst ThreadMessageList: React.FC<ThreadMessageListProps> = ({\n  messages,\n  user,\n  channelThread,\n  currentChannel,\n}) => {\n  const classes = useStyles();\n\n  const renderMessage = (message: ThreadMessage) => {\n    return (\n      <ListItem key={message.id} className={classes.root}>\n        <Box display=\"flex\" justifyContent=\"flex-start\" alignItems=\"flex-start\">\n          <ListItemAvatar>\n            <ListItemIcon>\n              <Badge variant=\"dot\">\n                <Avatar className={classes.avatar}>\n                  {message.user.username.substring(0, 2).toUpperCase()}\n                </Avatar>\n              </Badge>\n            </ListItemIcon>\n          </ListItemAvatar>\n        </Box>\n        <Box component=\"div\" display=\"flex\" flexDirection=\"column\" flex=\"1\">\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"flex-start\"\n          >\n            <Box\n              display=\"flex\"\n              justifyContent=\"flex-start\"\n              alignItems=\"flex-start\"\n            >\n              <Typography variant=\"caption\">\n                <strong>{message.user.username} </strong>\n                <i>{moment(message.timestamp).fromNow()}</i>\n              </Typography>\n              <Divider className={classes.vspace} />\n            </Box>\n            <Box>\n              <Typography variant=\"caption\">\n                {user.sub === message.user.auth0_user_id ? (\n                  <ThreadDeleteMessage messageId={message.id} />\n                ) : (\n                  ''\n                )}\n              </Typography>\n            </Box>\n          </Box>\n          <Typography component=\"div\" className={classes.messageText}>\n            {message.message}\n          </Typography>\n          {message.image ? (\n            <Box className={classes.image}>\n              <img src={message.image} />\n            </Box>\n          ) : (\n            ''\n          )}\n          <Divider className={classes.vspace} />\n        </Box>\n      </ListItem>\n    );\n  };\n\n  return (\n    <>\n      <ThreadInfo\n        messages={messages}\n        channelThread={channelThread}\n        currentChannel={currentChannel}\n      />\n      {messages\n        ? [...messages]\n            ?.reverse()\n            ?.map((message: ThreadMessage) => renderMessage(message))\n        : ''}\n    </>\n  );\n};\n\nexport default ThreadMessageList;\n","import React, { useState } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { GiphyFetch } from '@giphy/js-fetch-api';\nimport { giphyState } from '../../atom';\nimport { Box, TextField } from '@material-ui/core';\nimport { Carousel } from '@giphy/react-components';\nimport { IGif } from '@giphy/js-types';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  giphySearchInput: {\n    display: 'flex',\n    flex: 1,\n    paddingBottom: theme.spacing(2),\n    marginTop: theme.spacing(1),\n    [theme.breakpoints.down('md')]: {\n      marginTop: theme.spacing(1),\n    },\n  },\n  giphyCarousel: {\n    display: 'flex',\n    padding: theme.spacing(3),\n  },\n}));\n\nconst giphyFetch = new GiphyFetch('gNDqYmKTip2mgTRqQbS5BwslaLM8Jdq0');\n\ninterface GiphyCarouselProps {\n  hideGiphyCarousel: Function;\n}\n\nconst GiphyCarousel: React.FC<GiphyCarouselProps> = ({ hideGiphyCarousel }) => {\n  const classes = useStyles();\n  const [gif, setGif] = useRecoilState<IGif | null>(giphyState);\n  const [giphySearchString, setGiphySearchString] = useState('');\n\n  const onGifClick = (\n    gif: IGif,\n    e: React.SyntheticEvent<HTMLElement, Event>,\n  ) => {\n    e.preventDefault();\n    setGif(gif);\n    hideGiphyCarousel();\n  };\n\n  const handleOnChange = (ev: any) => {\n    setGiphySearchString(ev.target.value);\n  };\n\n  const fetchGifs = (offset: number) => {\n    return giphySearchString\n      ? giphyFetch.search(giphySearchString, { offset, limit: 5 })\n      : giphyFetch.trending({ offset, limit: 5 });\n  };\n\n  return (\n    <>\n      <Box display=\"flex\" flexDirection=\"column\" style={{ maxWidth: '100%' }}>\n        <Carousel\n          key={giphySearchString}\n          fetchGifs={fetchGifs}\n          onGifClick={onGifClick}\n          gifHeight={50}\n          gutter={6}\n        />\n        <TextField\n          className={classes.giphySearchInput}\n          size=\"small\"\n          label=\"Search giphy ...\"\n          variant=\"standard\"\n          onChange={handleOnChange}\n        />\n      </Box>\n    </>\n  );\n};\n\nexport default GiphyCarousel;\n","import React from 'react';\nimport clsx from 'clsx';\nimport {\n  Box,\n  Chip,\n  Container,\n  Drawer,\n  makeStyles,\n  Toolbar,\n} from '@material-ui/core';\nimport SideBar from './SideBar';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\n\nconst drawerWidth = '100%';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  toolbar: {\n    [theme.breakpoints.up('md')]: {\n      paddingTop: theme.spacing(5),\n      paddingBottom: theme.spacing(5),\n    },\n    [theme.breakpoints.down('md')]: {\n      paddingLeft: theme.spacing(1),\n      paddingRight: theme.spacing(1),\n      paddingTop: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n    },\n    borderTop: 1,\n    borderTopStyle: 'solid',\n    borderTopColor: theme.palette.primary.dark,\n  },\n  menuButton: {\n    marginTop: theme.spacing(5),\n    // marginRight: theme.spacing(0),\n    // flex: '1',\n  },\n  menuButtonHidden: {\n    display: 'none',\n  },\n  drawerPaper: {\n    height: '100vh',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.easeInOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: drawerWidth,\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  fab: {\n    margin: theme.spacing(2),\n  },\n  giphyImage: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\ninterface MenuBarDrawerProps {\n  open: boolean;\n  handleDrawerClose: any;\n}\n\nconst MenuBarDrawer: React.FC<MenuBarDrawerProps> = ({\n  open,\n  handleDrawerClose,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Drawer\n      variant=\"temporary\"\n      elevation={10}\n      anchor=\"bottom\"\n      classes={{\n        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n      }}\n      open={open}\n    >\n      <Toolbar className={classes.toolbar}>\n        <Container maxWidth=\"xl\" disableGutters>\n          <SideBar />\n          <Box\n            order={1}\n            display=\"flex\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n          >\n            <Chip\n              variant=\"default\"\n              aria-label=\"open drawer\"\n              onClick={handleDrawerClose}\n              label=\"Close\"\n              clickable\n              size=\"small\"\n              color=\"secondary\"\n              icon={<ExpandMore />}\n              className={clsx(classes.menuButton, open)}\n            />\n          </Box>\n        </Container>\n      </Toolbar>\n    </Drawer>\n  );\n};\n\nexport default MenuBarDrawer;\n","import React from 'react';\nimport { theme } from '../../theme/theme';\nimport { Box, Chip, LinearProgress, Typography } from '@material-ui/core';\nimport FaceIcon from '@material-ui/icons/Face';\nimport GroupIcon from '@material-ui/icons/Group';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  text: {\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '.875rem',\n    },\n  },\n}));\n\ninterface ResultGraphProps {\n  answerId: number;\n  userVote: number | undefined;\n  pollVotes: number;\n  text: string;\n  totalVotes: any;\n}\n\nconst ResultGraph: React.FC<ResultGraphProps> = ({\n  answerId,\n  userVote,\n  pollVotes,\n  text,\n  totalVotes,\n}) => {\n  const classes = useStyles();\n  const LinearProgressWithLabel = (props: any) => {\n    return (\n      <Box\n        width=\"100%\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        flexDirection=\"row\"\n      >\n        <Box width=\"100%\" mr={1}>\n          <LinearProgress\n            id={answerId}\n            color={userVote === answerId ? 'secondary' : 'primary'}\n            variant=\"determinate\"\n            {...props}\n          />\n        </Box>\n        <Box\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          flexDirection=\"row-reverse\"\n        >\n          <Chip\n            size=\"small\"\n            color={userVote === answerId ? 'secondary' : 'primary'}\n            variant={userVote === answerId ? 'default' : 'outlined'}\n            label={`${pollVotes} / ${props.value.toFixed(1)}%`}\n            icon={userVote === answerId ? <FaceIcon /> : <GroupIcon />}\n          />\n        </Box>\n      </Box>\n    );\n  };\n\n  return (\n    <Box\n      key={answerId}\n      width=\"100%\"\n      display=\"flex\"\n      alignItems=\"flex-start\"\n      flexDirection=\"column\"\n      mb={2}\n    >\n      <Typography variant=\"body1\" className={classes.text}>\n        {text}\n      </Typography>\n      <LinearProgressWithLabel\n        value={(100 * pollVotes) / totalVotes}\n        answerid={answerId}\n      />\n    </Box>\n  );\n};\n\nexport default ResultGraph;\n","import React, { useEffect } from 'react';\nimport { Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  pollSubmit: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\ninterface VoteButtonProps {\n  enabled: boolean;\n}\n\nconst VoteButton: React.FC<VoteButtonProps> = ({ enabled }) => {\n  const classes = useStyles();\n  return (\n    <>\n      <Button\n        type=\"submit\"\n        variant=\"contained\"\n        color=\"secondary\"\n        className={classes.pollSubmit}\n        disabled={enabled}\n      >\n        {enabled ? 'Choose Your Answer' : 'Vote'}\n      </Button>\n    </>\n  );\n};\n\nexport default VoteButton;\n","import React, { useEffect } from 'react';\nimport { Chip } from '@material-ui/core';\n\ninterface ShowTotalVotesProps {\n  totalVotes: number;\n}\n\nconst ShowTotalVotes: React.FC<ShowTotalVotesProps> = ({ totalVotes }) => {\n  return (\n    <>\n      <Chip\n        color=\"primary\"\n        variant=\"outlined\"\n        size=\"small\"\n        label={`Total votes: ${totalVotes}`}\n        style={{ marginLeft: 8 }}\n      />\n    </>\n  );\n};\n\nexport default ShowTotalVotes;\n","import React, { useEffect } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { currentChannelState } from '../../atom.js';\nimport ResultGraph from './ResultGraph';\nimport VoteButton from './VoteButton';\nimport ShowTotalVotes from './ShowTotalVotes';\nimport Loader from '../shared/Loader';\nimport {\n  Box,\n  Radio,\n  RadioGroup,\n  FormControlLabel,\n  FormControl,\n  Paper,\n  Typography,\n} from '@material-ui/core';\nimport {\n  useWatchChannelPollQuestionSubscription,\n  useWatchPollAnswerVotesSubscription,\n  useWatchCheckUserHasVotedSubscription,\n  useSetPollAnswerVoteMutation,\n  useSetUserVotePollQuestionMutation,\n} from '../../api/generated/graphql';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  pollCard: {\n    width: '100%',\n    padding: theme.spacing(5),\n    [theme.breakpoints.down('md')]: {\n      transform: 'scale(50%)',\n      padding: theme.spacing(2),\n      minWidth: '100%',\n    },\n  },\n  text: {\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '.875rem',\n    },\n  },\n}));\n\nconst PublishChannelPolling: React.FC = () => {\n  const classes = useStyles();\n  const { user } = useAuth0();\n  const [currentChannel, setCurrentChannelState] = useRecoilState(\n    currentChannelState,\n  );\n  const [selectedPollAnswerId, setSelectedPollAnswerId] = React.useState<\n    number | null\n  >(null);\n\n  const {\n    data: getPollAnswerVotes,\n    loading: getPollAnswerVotesLoading,\n  } = useWatchPollAnswerVotesSubscription({\n    variables: {\n      pollAnswerId: selectedPollAnswerId ?? 0,\n    },\n  });\n\n  const { data, loading, error } = useWatchChannelPollQuestionSubscription({\n    variables: {\n      channelId: currentChannel.id,\n    },\n  });\n\n  const [setPollAnswerVoteMutation] = useSetPollAnswerVoteMutation();\n\n  const totalVotes = () => {\n    let numbers: Array<any> = data?.getChannelPoll[0]?.poll_question\n      ?.poll_anwers!;\n    const count: any = [];\n    if (numbers !== undefined) {\n      numbers.map((num: any) => count.push(num.votes));\n      const result = count.reduce((a: number, b: number) => a + b);\n      return result;\n    } else {\n      return <Loader />;\n    }\n  };\n\n  const {\n    data: userVote,\n    loading: userVoteLoading,\n  } = useWatchCheckUserHasVotedSubscription({\n    variables: {\n      pollQuestionId: data?.getChannelPoll[0]?.poll_question?.id,\n      auth0UserId: user.sub,\n    },\n  });\n\n  const [setUserVotePollQuestionMutation] = useSetUserVotePollQuestionMutation({\n    variables: {\n      userName: user.username,\n      auth0UserId: user.sub,\n      pollQuestionId: data?.getChannelPoll[0]?.poll_question?.id,\n      pollAnswerId: selectedPollAnswerId,\n    },\n  });\n\n  const handleChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedPollAnswerId(parseInt(e.target.value));\n  };\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (selectedPollAnswerId === null) return;\n\n    console.log('inside', selectedPollAnswerId);\n\n    let currentPollAnswerVotes = getPollAnswerVotes?.pollAnswerVotes[0].votes;\n\n    if (currentPollAnswerVotes !== undefined) {\n      currentPollAnswerVotes++;\n    }\n\n    if (currentPollAnswerVotes === undefined) return;\n    await setPollAnswerVoteMutation({\n      variables: {\n        pollAnswerId: selectedPollAnswerId,\n        newVote: currentPollAnswerVotes,\n      },\n    });\n\n    await setUserVotePollQuestionMutation({\n      variables: {\n        userName: user.nickname,\n        auth0UserId: user.sub,\n        pollQuestionId: data?.getChannelPoll[0]?.poll_question?.id,\n        pollAnswerId: selectedPollAnswerId,\n      },\n    });\n  };\n\n  if (loading || error || getPollAnswerVotesLoading || userVoteLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      {userVote?.user_votes?.length ? (\n        <Paper className={classes.pollCard}>\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            flexDirection=\"row\"\n            mb={3}\n          >\n            <Box>\n              <Typography variant=\"caption\">Anonymous poll</Typography>\n              {data?.getChannelPoll.map((channelPoll) => (\n                <Typography\n                  key={channelPoll.id}\n                  color=\"secondary\"\n                  variant=\"h2\"\n                  style={{ marginTop: 0 }}\n                >\n                  {channelPoll?.poll_question?.text}\n                </Typography>\n              ))}\n            </Box>\n            <ShowTotalVotes totalVotes={totalVotes()} />\n          </Box>\n\n          {data?.getChannelPoll[0]?.poll_question?.poll_anwers\n            .sort((a, b) => (a.id > b.id ? 1 : -1))\n            .map((pollVotes) => (\n              <ResultGraph\n                key={pollVotes.id}\n                answerId={pollVotes.id}\n                userVote={userVote?.user_votes[0]?.poll_answer_id}\n                pollVotes={pollVotes.votes}\n                text={pollVotes.text}\n                totalVotes={totalVotes()}\n              />\n            ))}\n        </Paper>\n      ) : (\n        <Paper className={classes.pollCard}>\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"flex-end\"\n            flexDirection=\"row\"\n            mb={3}\n          >\n            <Box>\n              <Typography variant=\"caption\">Anonymous poll</Typography>\n              <Typography variant=\"h2\" style={{ marginTop: 0 }}>\n                {data?.getChannelPoll[0]\n                  ? data?.getChannelPoll[0].poll_question?.text\n                  : 'no value'}\n              </Typography>\n            </Box>\n            <ShowTotalVotes totalVotes={totalVotes()} />\n          </Box>\n\n          <form onSubmit={handleSubmit}>\n            <FormControl component=\"fieldset\">\n              <RadioGroup\n                aria-label=\"poll\"\n                name=\"poll\"\n                value={selectedPollAnswerId}\n                onChange={handleChange}\n              >\n                {data?.getChannelPoll[0]?.poll_question?.poll_anwers\n                  .sort((a, b) => (a.id > b.id ? 1 : -1))\n                  .map((pollAnswer) => (\n                    <FormControlLabel\n                      key={pollAnswer.id}\n                      value={pollAnswer.id}\n                      control={\n                        <Radio\n                          value={pollAnswer.id}\n                          checked={selectedPollAnswerId === pollAnswer.id}\n                          onChange={handleChange}\n                        />\n                      }\n                      label={\n                        <Typography variant=\"body2\" className={classes.text}>\n                          {pollAnswer.text}\n                        </Typography>\n                      }\n                    />\n                  ))}\n              </RadioGroup>\n              <VoteButton enabled={false} />\n            </FormControl>\n          </form>\n        </Paper>\n      )}\n    </>\n  );\n};\n\nexport default PublishChannelPolling;\n","import React from 'react';\nimport { Badge, Box, Button, Popover } from '@material-ui/core';\nimport { useWatchChannelHasActivePollSubscription } from '../../api/generated/graphql';\nimport PopupState, { bindPopover } from 'material-ui-popup-state';\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\nimport Loader from '../shared/Loader';\nimport PublishChannelPolling from '../adminPollings/PublishChannelPolling';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { bindTrigger } from 'material-ui-popup-state/hooks';\nimport Logo from '../shared/Logo';\n\nconst useStyles = makeStyles((theme) => ({\n  popoverRoot: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  popupWidth: {\n    minWidth: '40vw',\n    maxWidth: '50vw',\n    padding: theme.spacing(5),\n    [theme.breakpoints.down('sm')]: {\n      padding: theme.spacing(3),\n      minWidth: '90vw',\n    },\n  },\n  badge: {\n    backgroundColor: '#44b700',\n    color: '#44b700',\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n    '&::after': {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      borderRadius: '50%',\n      animation: '$ripple 1.2s infinite ease-in-out',\n      border: '1px solid currentColor',\n      content: '\"\"',\n    },\n  },\n  '@keyframes ripple': {\n    '0%': {\n      transform: 'scale(.8)',\n      opacity: 1,\n    },\n    '100%': {\n      transform: 'scale(2.4)',\n      opacity: 0,\n    },\n  },\n}));\n\ninterface PollPopUpProps {\n  channelId: number;\n}\n\nconst PollPopUp: React.FC<PollPopUpProps> = ({ channelId }) => {\n  const classes = useStyles();\n  const { data, loading } = useWatchChannelHasActivePollSubscription({\n    variables: {\n      currentChannelId: channelId,\n    },\n  });\n\n  if (loading) {\n    return <Loader />;\n  }\n  return (\n    <>\n      {data?.poll_questions?.length === 1 ? (\n        <PopupState variant=\"popover\" popupId=\"demoPopper\">\n          {(popupState) => (\n            <>\n              <Badge variant=\"dot\" classes={{ badge: classes.badge }}>\n                <HowToVoteIcon {...bindTrigger(popupState)} />\n              </Badge>\n              <Popover\n                anchorReference={'none'} // set popup center window\n                classes={{\n                  root: classes.popoverRoot,\n                }}\n                {...bindPopover(popupState)}\n              >\n                <Box\n                  display=\"flex\"\n                  justifyContent=\"center\"\n                  alignItems=\"center\"\n                  flexDirection=\"column\"\n                  className={classes.popupWidth}\n                >\n                  <Logo />\n\n                  <PublishChannelPolling />\n                  <Button\n                    aria-label=\"close\"\n                    onClick={popupState.close}\n                    style={{ maxWidth: '10vw' }}\n                  >\n                    Close\n                  </Button>\n                </Box>\n              </Popover>\n            </>\n          )}\n        </PopupState>\n      ) : (\n        <HowToVoteIcon />\n      )}\n    </>\n  );\n};\n\nexport default PollPopUp;\n","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Backdrop, Typography } from '@material-ui/core';\nimport SpeedDial from '@material-ui/lab/SpeedDial';\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\nimport AddGif from '@material-ui/icons/Gif';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport People from '@material-ui/icons/People';\nimport Person from '@material-ui/icons/Person';\nimport EnhancedEncryptionOutlinedIcon from '@material-ui/icons/EnhancedEncryptionOutlined';\nimport PollPopUp from '../../components/adminPollings/PollPopup';\nimport { unstable_batchedUpdates } from 'react-dom';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      transform: 'translateZ(0)',\n      flexGrow: 1,\n      [theme.breakpoints.up('md')]: {\n        '& #SpeedDialexample-action-0': {\n          display: 'none',\n        },\n      },\n    },\n    speedDial: {\n      position: 'absolute',\n      '&.MuiSpeedDial-directionUp, &.MuiSpeedDial-directionLeft': {\n        bottom: theme.spacing(-7),\n        right: theme.spacing(0),\n      },\n      [theme.breakpoints.down('sm')]: {\n        marginRight: theme.spacing(0),\n        marginBottom: theme.spacing(2),\n        height: 30,\n      },\n    },\n    action: {\n      backgroundColor: '#0f1448',\n    },\n    backdrop: {\n      [theme.breakpoints.up('md')]: {},\n    },\n  }),\n);\n\ninterface MobileMenuProps {\n  nickname: string;\n  channelName: string;\n  isPrivate: boolean;\n  // pollQuestion: string;\n  channelId: number;\n  handleDrawerOpen: () => void;\n  handleGiphyClick: () => void;\n}\n\nconst MobileMenu: React.FC<MobileMenuProps> = ({\n  nickname,\n  channelName,\n  isPrivate,\n  // pollQuestion,\n  channelId,\n  handleDrawerOpen,\n  handleGiphyClick,\n}) => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [hidden, setHidden] = React.useState(false);\n  const actions = [\n    {\n      icon: isPrivate ? (\n        <EnhancedEncryptionOutlinedIcon color=\"secondary\" />\n      ) : (\n        <People style={{ color: '#4CAF50' }} />\n      ),\n      type: 'channel',\n      state: true,\n      name: `${channelName}`,\n    },\n    { icon: <Person />, type: 'user', name: `${nickname}` },\n    {\n      icon: <PollPopUp channelId={channelId} />,\n      type: 'poll',\n      state: true,\n      name: 'Admin Polling',\n    },\n    {\n      icon: <AddGif onClick={handleGiphyClick} />,\n      type: 'giphy',\n      state: true,\n      name: `+Giphy`,\n    },\n    {\n      icon: <MenuIcon onClick={handleDrawerOpen} />,\n      type: 'menu',\n      state: true,\n      name: `Menu`,\n    },\n  ];\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  return (\n    <>\n      <Backdrop open={open} className={classes.backdrop} />\n      <div className={classes.root}>\n        <SpeedDial\n          ariaLabel=\"Chickenfest Navi\"\n          className={classes.speedDial}\n          hidden={hidden}\n          icon={<SpeedDialIcon />}\n          onClose={handleClose}\n          onOpen={handleOpen}\n          open={open}\n          direction=\"up\"\n        >\n          {actions.map((action) => (\n            <SpeedDialAction\n              tooltipOpen\n              key={action.type}\n              icon={action.icon}\n              tooltipTitle={action.name}\n              onClick={(e) => {\n                handleClose();\n              }}\n              className={classes.action}\n            />\n          ))}\n        </SpeedDial>\n      </div>\n    </>\n  );\n};\n\nexport default MobileMenu;\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport clsx from 'clsx';\nimport { theme } from '../../theme/theme';\nimport { useRecoilState } from 'recoil';\nimport { currentChannelState } from '../../atom';\nimport { AppBar, Box, Container, Grid, Toolbar } from '@material-ui/core';\nimport MessageInput from '../chat/MessageInput';\nimport GiphyCarousel from './GiphyCarousel';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport MenuBarDrawer from './MenuBarDrawer';\nimport MobileMenu from '../chat/MobileMenu';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst drawerWidth = '100%';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  toolbar: {\n    [theme.breakpoints.up('md')]: {\n      paddingTop: theme.spacing(5),\n      paddingBottom: theme.spacing(3),\n    },\n    [theme.breakpoints.down('md')]: {\n      paddingLeft: theme.spacing(1),\n      paddingRight: theme.spacing(1),\n      paddingTop: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n    },\n    borderTop: 1,\n    borderTopStyle: 'solid',\n    borderTopColor: theme.palette.primary.dark,\n  },\n  appBar: {\n    backgroundColor: theme.palette.background.default,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginTop: theme.spacing(5),\n    flex: '1',\n  },\n  menuButtonHidden: {\n    display: 'none',\n  },\n  drawerPaper: {\n    height: '100vh',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.easeInOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: drawerWidth,\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  fab: {\n    margin: theme.spacing(2),\n  },\n  giphyImage: {\n    padding: theme.spacing(1),\n    marginTop: theme.spacing(2),\n  },\n  popoverRoot: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n}));\n\ninterface MenuBarProps {\n  children: any;\n  channelId: number;\n}\n\nconst MenuBar: React.FC<MenuBarProps> = ({ children, channelId }) => {\n  const { user } = useAuth0();\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n  const [currentChannel, setCurrentChannel] = useRecoilState<any>(\n    currentChannelState,\n  );\n  const [open, setOpen] = React.useState(false); // Sidebar default state\n  const [showGiphyCarousel, setShowGiphyCarousel] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handleGiphyClick = () => {\n    setShowGiphyCarousel(!showGiphyCarousel);\n  };\n\n  const hideGiphyCarousel = () => {\n    setShowGiphyCarousel(false);\n  };\n\n  return (\n    <>\n      <AppBar\n        elevation={0}\n        position=\"fixed\"\n        className={clsx(classes.appBar, open && classes.appBarShift)}\n      >\n        <Toolbar className={classes.toolbar}>\n          <Container maxWidth=\"xl\" disableGutters>\n            <Grid container>\n              <Grid item xs={12}>\n                <MobileMenu\n                  nickname={user.nickname}\n                  channelName={currentChannel.name}\n                  isPrivate={currentChannel?.is_private}\n                  handleDrawerOpen={handleDrawerOpen}\n                  handleGiphyClick={handleGiphyClick}\n                  channelId={channelId}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                {children}\n              </Grid>\n              <Grid item xs={12}>\n                <Box\n                  style={{ display: showGiphyCarousel ? 'block' : 'none' }}\n                  className={classes.giphyImage}\n                  order={1}\n                  flex=\"1\"\n                  justifyContent=\"flex-start\"\n                  alignItems=\"center\"\n                >\n                  <GiphyCarousel\n                    hideGiphyCarousel={() => hideGiphyCarousel()}\n                  />\n                </Box>\n              </Grid>\n            </Grid>\n          </Container>\n        </Toolbar>\n        <MenuBarDrawer open={open} handleDrawerClose={handleDrawerClose} />\n      </AppBar>\n    </>\n  );\n};\n\nexport default MenuBar;\n","import React, { useState } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { TextField, Button, Box } from '@material-ui/core';\nimport { theme } from '../../../theme/theme';\nimport Icon from '@material-ui/core/Icon';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport {\n  useInsertChannelThreadMessageMutation,\n  useSendTypingEventMutation,\n} from '../../../api/generated/graphql';\nimport { useRecoilState } from 'recoil';\nimport { giphyState, deletedMessageState } from '../../../atom';\nimport { IGif } from '@giphy/js-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GiphyCarousel from '../../shared/GiphyCarousel';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  rootSingleChip: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  giphyVisible: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    justifyContent: 'flex-start',\n  },\n  giphyHidden: {\n    display: 'none',\n    marginTop: theme.spacing(2),\n  },\n  giphyImage: {\n    marginTop: theme.spacing(2),\n  },\n  form: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n  },\n  messageInput: {\n    floatingLabelFocusStyle: {\n      color: theme.palette.secondary.dark,\n    },\n  },\n  messageButton: {\n    [theme.breakpoints.down('md')]: {\n      width: '100%',\n      size: 'small',\n    },\n    [theme.breakpoints.up('md')]: {\n      size: 'large',\n      width: '25%',\n    },\n    marginTop: theme.spacing(2),\n    marginLeft: theme.spacing(0),\n    backgroundColor: theme.palette.primary.dark,\n  },\n  image: {\n    maxHeight: 55,\n    paddingRight: theme.spacing(1),\n  },\n}));\n\ninterface ThreadMessageInputProps {\n  channelId: number;\n  channelThreadId: number | undefined;\n}\n\nconst ThreadMessageInput: React.FC<ThreadMessageInputProps> = (props) => {\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n\n  const setTextFieldSize = () => {\n    switch (matches) {\n      case true:\n        return 'medium';\n      case false:\n        return 'small';\n\n      default:\n        return 'small';\n    }\n  };\n\n  const setButtonSize = () => {\n    switch (matches) {\n      case true:\n        return 'large';\n      case false:\n        return 'small';\n\n      default:\n        return 'small';\n    }\n  };\n\n  const { user } = useAuth0();\n  const [text, setText] = useState('');\n  const [gif, setGif] = useRecoilState<IGif | null>(giphyState);\n  const [deletedMessage, setdeletedMessage] = useRecoilState<boolean>(\n    deletedMessageState,\n  );\n\n  const [showGiphyCarousel, setShowGiphyCarousel] = React.useState(false);\n\n  const channelId = props.channelId;\n\n  const [\n    sendTypingEventMutation,\n    { data, loading, error },\n  ] = useSendTypingEventMutation({\n    variables: {\n      user_id: user.sub,\n      channel_id: channelId,\n    },\n  });\n\n  const handleTyping = (text: string) => {\n    const textLength = text.length;\n    if ((textLength !== 0 && textLength % 5 === 0) || textLength === 1) {\n      sendTypingEventMutation();\n    }\n    setText(text);\n  };\n\n  const [\n    sendMessage,\n    { data: sendUpdateMessageData },\n  ] = useInsertChannelThreadMessageMutation();\n\n  const handleSubmit = async (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    if (text === '' && gif === null) {\n      return;\n    }\n\n    if (text.length > 2000) {\n      alert('Your text limit has reached the limit of 2000 characters');\n      return;\n    }\n\n    if (props.channelThreadId === undefined) {\n      return;\n    }\n\n    await sendMessage({\n      variables: {\n        channel_thread_id: props.channelThreadId,\n        message: text,\n        image: gif?.images?.fixed_width_small?.url,\n        user_id: user.sub,\n      },\n    });\n\n    setText('');\n    setGif(null);\n    setdeletedMessage(false);\n  };\n\n  const hideGiphyCarousel = () => {\n    setShowGiphyCarousel(false);\n  };\n\n  return (\n    <div className={classes.rootSingleChip}>\n      <Box className={gif ? classes.giphyImage : ''}>\n        {gif && (\n          <img\n            className={classes.image}\n            src={gif?.images?.fixed_width_small?.url}\n            onClick={() => setGif(null)}\n          />\n        )}\n      </Box>\n      <Box>\n        <Box\n          className={\n            showGiphyCarousel ? classes.giphyVisible : classes.giphyHidden\n          }\n          order={1}\n        >\n          <GiphyCarousel hideGiphyCarousel={() => hideGiphyCarousel()} />\n        </Box>\n      </Box>\n      <form\n        noValidate\n        autoComplete=\"off\"\n        className={classes.form}\n        onSubmit={handleSubmit}\n      >\n        <TextField\n          value={text}\n          autoFocus={false}\n          onChange={(e) => {\n            handleTyping(e.target.value);\n          }}\n          size={setTextFieldSize()}\n          variant=\"outlined\"\n          color=\"secondary\"\n          autoComplete=\"off\"\n          placeholder=\"Type your message here ...\"\n          id={`chat-message-input-${props.channelThreadId}`}\n          label={'Crackle your message here ...'}\n          // fullWidth\n          InputProps={{\n            classes: {\n              input: classes.messageInput,\n            },\n          }}\n          InputLabelProps={{\n            className: classes.messageInput,\n          }}\n        />\n\n        <Button\n          id={`chat-message-button-${props.channelThreadId}`}\n          size={setButtonSize()}\n          variant=\"contained\"\n          endIcon={<Icon>send</Icon>}\n          className={classes.messageButton}\n          type=\"submit\"\n        >\n          Send\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default ThreadMessageInput;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Grid, List } from '@material-ui/core';\nimport { Box } from '@material-ui/core';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useRecoilState } from 'recoil';\nimport { currentChannelState } from '../../../atom';\nimport {\n  useWatchChannelThreadMessagesSubscription,\n  useGetChannelThreadQuery,\n} from '../../../api/generated/graphql';\nimport ThreadMessageList from './ThreadMessageList';\nimport Loader from '../../shared/Loader';\nimport { Alert } from '@material-ui/lab';\nimport { ThreadMessage } from '../../../interfaces/message.interface';\nimport { ThreadParams } from '../../../interfaces/param.interface';\nimport MenuBar from '../../shared/MenuBar';\nimport ThreadMessageInput from './ThreadMessageInput';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    overflowY: 'scroll',\n    height: '80vh',\n    maxHeight: '80vh',\n    marginTop: theme.spacing(5),\n    padding: theme.spacing(3),\n  },\n  messageContainer: {\n    [theme.breakpoints.up('lg')]: {\n      padding: theme.spacing(10),\n      paddingTop: theme.spacing(5),\n      paddingBottom: theme.spacing(0),\n    },\n    [theme.breakpoints.down('md')]: {\n      padding: theme.spacing(3),\n      paddingTop: theme.spacing(3),\n      paddingBottom: theme.spacing(0),\n    },\n    [theme.breakpoints.down('sm')]: {\n      padding: theme.spacing(0),\n      paddingTop: theme.spacing(0),\n      paddingBottom: theme.spacing(0),\n    },\n  },\n}));\n\nconst Thread: React.FC = () => {\n  const classes = useStyles();\n  const [limit, setLimit] = useState(20);\n  const { user, error: auth0Error } = useAuth0();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const [currentChannel, setCurrentChannel] = useRecoilState<any>(\n    currentChannelState,\n  );\n  let history = useHistory();\n\n  const { messageId, channel } = useParams<ThreadParams>();\n\n  const { data, loading, error } = useWatchChannelThreadMessagesSubscription({\n    variables: {\n      limit,\n      message_id: parseInt(messageId),\n    },\n    fetchPolicy: 'network-only',\n  });\n\n  const {\n    data: getChannelThreadData,\n    loading: getChannelThreadLoading,\n    error: getChannelThreadError,\n  } = useGetChannelThreadQuery({\n    variables: {\n      message_id: parseInt(messageId),\n    },\n  });\n\n  const handleIncreaseLimit = () => {\n    setLimit(limit + 20);\n  };\n\n  const scrollToBottom = () => {\n    if (typeof messagesEndRef === 'object') {\n      messagesEndRef?.current?.scrollIntoView();\n    }\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [data]);\n\n  useEffect(() => {\n    if (currentChannel?.id === undefined) history.push(`/channel/${channel}`);\n  }, []);\n\n  if (loading || getChannelThreadLoading) return <Loader />;\n\n  if (error || getChannelThreadError) {\n    console.log('error', error);\n    return <Alert severity=\"error\">Thread Error</Alert>;\n  }\n\n  return (\n    <>\n      <div className={classes.root}>\n        <Grid container>\n          <Grid item xs={12} className={classes.messageContainer}>\n            <List id=\"message-list\">\n              <ThreadMessageList\n                messages={data?.channel_thread_message as ThreadMessage[]}\n                user={user}\n                channelThread={getChannelThreadData?.channel_thread[0]}\n                currentChannel={currentChannel}\n              />\n            </List>\n            <div ref={messagesEndRef} />\n          </Grid>\n          <Box maxWidth=\"xl\" component=\"nav\">\n            <MenuBar channelId={currentChannel?.id}>\n              <ThreadMessageInput\n                channelId={currentChannel?.id}\n                channelThreadId={getChannelThreadData?.channel_thread[0]?.id}\n              />\n            </MenuBar>\n          </Box>\n        </Grid>\n      </div>\n    </>\n  );\n};\n\nexport default Thread;\n","import React, { useState } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport {\n  TextField,\n  Button,\n  Box,\n  Chip,\n  Container,\n  Grid,\n} from '@material-ui/core';\nimport { theme } from '../../../theme/theme';\nimport Icon from '@material-ui/core/Icon';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport {\n  useInsertChannelThreadMessageMutation,\n  useSendTypingEventMutation,\n} from '../../../api/generated/graphql';\nimport { useRecoilState } from 'recoil';\nimport { giphyState, deletedMessageState } from '../../../atom';\nimport { IGif } from '@giphy/js-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GiphyCarousel from '../../shared/GiphyCarousel';\nimport AddGif from '@material-ui/icons/Gif';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  rootSingleChip: {\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1,\n  },\n  giphyVisible: {\n    marginTop: theme.spacing(2),\n  },\n  giphyHidden: {\n    display: 'none',\n    marginTop: theme.spacing(2),\n  },\n  giphyImage: {\n    marginTop: theme.spacing(2),\n  },\n  form: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n  },\n  messageInput: {\n    floatingLabelFocusStyle: {\n      color: theme.palette.secondary.dark,\n    },\n  },\n  messageButton: {\n    [theme.breakpoints.down('md')]: {\n      display: 'none',\n    },\n    [theme.breakpoints.up('md')]: {\n      size: 'large',\n      width: '25%',\n    },\n    marginTop: theme.spacing(2),\n    marginLeft: theme.spacing(0),\n    backgroundColor: theme.palette.primary.dark,\n  },\n  image: {\n    maxHeight: 55,\n    paddingRight: theme.spacing(1),\n  },\n  toolbar: {\n    [theme.breakpoints.up('md')]: {\n      paddingTop: theme.spacing(5),\n      paddingBottom: theme.spacing(5),\n    },\n    [theme.breakpoints.down('md')]: {\n      paddingLeft: theme.spacing(1),\n      paddingRight: theme.spacing(1),\n      paddingTop: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n    },\n    borderTop: 1,\n    borderTopStyle: 'solid',\n    borderTopColor: theme.palette.primary.dark,\n  },\n}));\n\ninterface ThreadListInputContainerProps {\n  channelId: number;\n  channelThreadId: number | undefined;\n}\n\nconst ThreadListInputContainer: React.FC<ThreadListInputContainerProps> = (\n  props,\n) => {\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n\n  const setTextFieldSize = () => {\n    switch (matches) {\n      case true:\n        return 'medium';\n      case false:\n        return 'small';\n\n      default:\n        return 'small';\n    }\n  };\n\n  const setButtonSize = () => {\n    switch (matches) {\n      case true:\n        return 'large';\n      case false:\n        return 'small';\n\n      default:\n        return 'small';\n    }\n  };\n\n  const { user } = useAuth0();\n  const [text, setText] = useState('');\n  const [gif, setGif] = useRecoilState<IGif | null>(giphyState);\n  const [deletedMessage, setdeletedMessage] = useRecoilState<boolean>(\n    deletedMessageState,\n  );\n\n  const [showGiphyCarousel, setShowGiphyCarousel] = React.useState(false);\n\n  const channelId = props.channelId;\n\n  const [\n    sendTypingEventMutation,\n    { data, loading, error },\n  ] = useSendTypingEventMutation({\n    variables: {\n      user_id: user.sub,\n      channel_id: channelId,\n    },\n  });\n\n  const handleTyping = (text: string) => {\n    const textLength = text.length;\n    if ((textLength !== 0 && textLength % 5 === 0) || textLength === 1) {\n      sendTypingEventMutation();\n    }\n    setText(text);\n  };\n\n  const [\n    sendMessage,\n    { data: sendUpdateMessageData },\n  ] = useInsertChannelThreadMessageMutation();\n\n  const handleSubmit = async (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    if (text === '' && gif === null) {\n      return;\n    }\n\n    if (text.length > 2000) {\n      alert('Your text limit has reached the limit of 2000 characters');\n      return;\n    }\n\n    if (props.channelThreadId === undefined) {\n      return;\n    }\n\n    await sendMessage({\n      variables: {\n        channel_thread_id: props.channelThreadId,\n        message: text,\n        image: gif?.images?.fixed_width_small?.url,\n        user_id: user.sub,\n      },\n    });\n\n    setText('');\n    setGif(null);\n    setdeletedMessage(false);\n  };\n\n  const handleGiphyClick = () => {\n    setShowGiphyCarousel(!showGiphyCarousel);\n  };\n\n  const hideGiphyCarousel = () => {\n    setShowGiphyCarousel(false);\n  };\n\n  return (\n    <>\n      <li>\n        <Container maxWidth=\"lg\">\n          <Grid item xs={12}>\n            <Chip\n              variant=\"outlined\"\n              color=\"primary\"\n              size=\"small\"\n              icon={<AddGif />}\n              label=\"+Gif\"\n              onClick={handleGiphyClick}\n            />\n          </Grid>\n          <Grid item xs={12} className={gif ? classes.giphyImage : ''}>\n            {gif && (\n              <img\n                className={classes.image}\n                alt={gif?.bitly_url}\n                src={gif?.images?.fixed_width_small?.url}\n                onClick={() => setGif(null)}\n              />\n            )}\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            className={\n              showGiphyCarousel ? classes.giphyVisible : classes.giphyHidden\n            }\n          >\n            <GiphyCarousel hideGiphyCarousel={() => hideGiphyCarousel()} />\n          </Grid>\n          <Grid item xs={12}>\n            <form\n              noValidate\n              autoComplete=\"off\"\n              className={classes.form}\n              onSubmit={handleSubmit}\n            >\n              <TextField\n                value={text}\n                autoFocus={false}\n                onChange={(e) => {\n                  handleTyping(e.target.value);\n                }}\n                size={setTextFieldSize()}\n                variant=\"outlined\"\n                color=\"secondary\"\n                autoComplete=\"off\"\n                placeholder=\"Type your message here ...\"\n                id={`chat-message-input-${props.channelThreadId}`}\n                label={'Crackle your message here ...'}\n                // fullWidth\n                InputProps={{\n                  classes: {\n                    input: classes.messageInput,\n                  },\n                }}\n                InputLabelProps={{\n                  className: classes.messageInput,\n                }}\n              />\n\n              <Button\n                id={`chat-message-button-${props.channelThreadId}`}\n                size={setButtonSize()}\n                variant=\"contained\"\n                endIcon={<Icon>send</Icon>}\n                className={classes.messageButton}\n                type=\"submit\"\n              >\n                Send\n              </Button>\n            </form>\n          </Grid>\n        </Container>\n      </li>\n    </>\n  );\n};\n\nexport default ThreadListInputContainer;\n","import React, { useState } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useWatchChannelThreadMessagesSubscription } from '../../../api/generated/graphql';\nimport ThreadMessageList from './ThreadMessageList';\nimport { Alert } from '@material-ui/lab';\nimport { ThreadMessage } from '../../../interfaces/message.interface';\nimport ThreadListInputContainer from './ThreadListInputContainer';\nimport { List } from '@material-ui/core';\n\ninterface ThreadListProps {\n  channelThread: any;\n}\n\nconst ThreadList: React.FC<ThreadListProps> = ({ channelThread }) => {\n  const [limit, setLimit] = useState(20);\n\n  const { user, error: auth0Error } = useAuth0();\n\n  const { data, error } = useWatchChannelThreadMessagesSubscription({\n    variables: {\n      limit,\n      message_id: channelThread.message_id,\n    },\n  });\n\n  if (error || auth0Error) {\n    console.log('error', error);\n    return <Alert severity=\"error\">Thread Error</Alert>;\n  }\n\n  const handleIncreaseLimit = () => {\n    setLimit(limit + 20);\n  };\n\n  return (\n    <>\n      <List>\n        <ThreadMessageList\n          messages={data?.channel_thread_message as ThreadMessage[]}\n          user={user}\n          channelThread={channelThread}\n          currentChannel={channelThread.message.channel}\n        />\n        <ThreadListInputContainer\n          channelId={channelThread.message?.id}\n          channelThreadId={channelThread.id}\n        />\n      </List>\n    </>\n  );\n};\n\nexport default ThreadList;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { theme } from '../../../theme/theme';\nimport { AppBar, Box, Container, Chip, Grid, Toolbar } from '@material-ui/core';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MenuBarDrawer from '../../shared/MenuBarDrawer';\n\nconst drawerWidth = '100%';\n\nconst useStyles = makeStyles((theme) => ({\n  toolbar: {\n    [theme.breakpoints.up('md')]: {\n      paddingTop: theme.spacing(3),\n      paddingBottom: theme.spacing(3),\n    },\n    [theme.breakpoints.down('md')]: {\n      paddingLeft: theme.spacing(1),\n      paddingRight: theme.spacing(1),\n      paddingTop: theme.spacing(3),\n      paddingBottom: theme.spacing(3),\n    },\n    borderTop: 1,\n    borderTopStyle: 'solid',\n    borderTopColor: theme.palette.primary.dark,\n  },\n  appBar: {\n    backgroundColor: theme.palette.background.default,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n}));\n\ninterface ThreadMenuBarProps {\n  channelThreadId?: number | undefined;\n}\n\nconst ThreadMenuBar: React.FC<ThreadMenuBarProps> = ({ channelThreadId }) => {\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <AppBar\n      elevation={0}\n      position=\"fixed\"\n      className={clsx(classes.appBar, open && classes.appBarShift)}\n    >\n      <Toolbar className={classes.toolbar}>\n        <Container maxWidth=\"xl\" disableGutters>\n          <Grid container>\n            <Grid item style={{ flex: 1 }}>\n              {matches === false && (\n                <Box\n                  order={1}\n                  display=\"flex\"\n                  flex=\"1\"\n                  justifyContent=\"flex-end\"\n                  alignItems=\"flex-end\"\n                >\n                  <Chip\n                    variant=\"default\"\n                    aria-label=\"open drawer\"\n                    onClick={handleDrawerOpen}\n                    label=\"Menu\"\n                    clickable\n                    size=\"small\"\n                    color=\"secondary\"\n                    icon={<ExpandLess />}\n                  />\n                </Box>\n              )}\n            </Grid>\n          </Grid>\n        </Container>\n      </Toolbar>\n      <MenuBarDrawer open={open} handleDrawerClose={handleDrawerClose} />\n    </AppBar>\n  );\n};\n\nexport default ThreadMenuBar;\n","import React from 'react';\nimport { useWatchThreadsSubscription } from '../../../api/generated/graphql';\nimport ThreadList from './ThreadList';\nimport { Alert } from '@material-ui/lab';\nimport { Box, Grid, makeStyles } from '@material-ui/core';\nimport ThreadMenuBar from './ThreadMenuBar';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    overflowY: 'scroll',\n    height: '90vh',\n    marginTop: theme.spacing(5),\n    marginBottom: theme.spacing(5),\n  },\n  end: {\n    marginBottom: '2rem',\n  },\n  messageContainer: {\n    [theme.breakpoints.up('lg')]: {\n      padding: theme.spacing(10),\n      paddingTop: theme.spacing(5),\n      paddingBottom: theme.spacing(0),\n    },\n    [theme.breakpoints.down('md')]: {\n      padding: theme.spacing(3),\n      paddingTop: theme.spacing(3),\n      paddingBottom: theme.spacing(0),\n    },\n    [theme.breakpoints.down('sm')]: {\n      padding: theme.spacing(1),\n    },\n  },\n}));\n\nconst ThreadListContainer: React.FC = () => {\n  const { data, error } = useWatchThreadsSubscription();\n  const classes = useStyles();\n\n  if (error) {\n    console.log('error', error);\n    return <Alert severity=\"error\">Thread Error</Alert>;\n  }\n\n  return (\n    <>\n      <div className={classes.root}>\n        <Grid container>\n          {data?.channel_thread?.map((channelThread, index) => {\n            if (channelThread.channel_thread_messages.length)\n              return (\n                <Grid\n                  key={index}\n                  item\n                  xs={12}\n                  className={classes.messageContainer}\n                >\n                  <ThreadList channelThread={channelThread} />\n                </Grid>\n              );\n          })}\n          <Box className={classes.end}>&nbsp;</Box>\n          <Box maxWidth=\"xl\" component=\"nav\">\n            <ThreadMenuBar />\n          </Box>\n        </Grid>\n      </div>\n    </>\n  );\n};\n\nexport default ThreadListContainer;\n","import React from 'react';\nimport { Grid, Container, useMediaQuery } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SideBar from '../../shared/SideBar';\nimport { theme } from '../../../theme/theme';\nimport Thread from './Thread';\nimport ThreadListContainer from './ThreadListContainer';\nimport { useParams } from 'react-router';\nimport { ThreadParams } from '../../../interfaces/param.interface';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    margin: 0,\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    overflowX: 'hidden',\n    overflowY: 'hidden',\n  },\n  sidebar: {\n    height: '100vh',\n    maxHeight: '100vh',\n    display: 'flex',\n    alignItems: 'flex-start',\n    paddingTop: theme.spacing(5),\n    borderRightWidth: 1,\n    borderRightStyle: 'solid',\n    borderRightColor: theme.palette.primary.dark,\n  },\n}));\n\nconst ThreadContainer: React.FC = () => {\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n  const { channel } = useParams<ThreadParams>();\n\n  return (\n    <>\n      <Container\n        component=\"main\"\n        maxWidth=\"xl\"\n        disableGutters\n        className={classes.container}\n      >\n        {matches === true && (\n          <Grid item xs={5} className={classes.sidebar}>\n            <SideBar />\n          </Grid>\n        )}\n        <Grid item xs={12}>\n          {channel ? <Thread /> : <ThreadListContainer />}\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default ThreadContainer;\n","import React, { useEffect } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Container } from '@material-ui/core';\nimport { useSetUserOnlineMutation } from '../../api/generated/graphql';\nimport ThreadContainer from '../chat/threads/ThreadContainer';\n\nconst ChatBoard: React.FC = () => {\n  const { user } = useAuth0();\n\n  const user_id = user.sub;\n\n  const [sendUserIsOnline] = useSetUserOnlineMutation({\n    variables: { user_id },\n  });\n\n  useEffect(() => {\n    setInterval(() => {\n      if (user.sub !== undefined) {\n        sendUserIsOnline();\n      }\n    }, 9000);\n  }, []);\n\n  return (\n    <Container maxWidth=\"xl\" disableGutters>\n      <ThreadContainer />\n    </Container>\n  );\n};\n\nexport default ChatBoard;\n","import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport ReplyIcon from '@material-ui/icons/Reply';\nimport { useHistory } from 'react-router';\nimport { useInsertChannelThreadMutation } from '../../../api/generated/graphql';\nimport { Alert } from '@material-ui/lab';\nimport { Message } from '../../../interfaces/message.interface';\n\ninterface ThreadReplyProps {\n  channelName: string;\n  message: Message;\n}\n\nconst ThreadReply: React.FC<ThreadReplyProps> = (props) => {\n  const history = useHistory();\n\n  const [\n    insertChannelThreadMutation,\n    { data, loading, error },\n  ] = useInsertChannelThreadMutation({\n    variables: {\n      message_id: props.message?.id,\n    },\n  });\n\n  const navigateToThreadChannel = () => {\n    history.push(`/channel/${props.channelName}/thread/${props.message?.id}`);\n  };\n\n  const handleClick = async () => {\n    await insertChannelThreadMutation();\n    navigateToThreadChannel();\n  };\n\n  if (error) return <Alert>Error in Thread Reply</Alert>;\n\n  if (props.message?.channel_threads?.length) {\n    return (\n      <div>\n        <IconButton onClick={() => navigateToThreadChannel()}>\n          <ReplyIcon\n            color=\"primary\"\n            fontSize=\"small\"\n            style={{ transform: 'scaleX(-1)' }}\n          />\n        </IconButton>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <IconButton onClick={handleClick}>\n        <ReplyIcon\n          color=\"primary\"\n          fontSize=\"small\"\n          style={{ transform: 'scaleX(-1)' }}\n        />\n      </IconButton>\n    </div>\n  );\n};\n\nexport default ThreadReply;\n","import React, { useState, useEffect } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { TextField, Button, Icon } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { useSetRecoilState } from 'recoil';\nimport { Message } from '../../interfaces/message.interface';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useUpdateMessageMutation } from '../../api/generated/graphql';\nimport Loader from '../shared/Loader';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  form: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n  },\n  messageButton: {\n    [theme.breakpoints.down('md')]: {\n      width: '100%',\n      size: 'small',\n    },\n    [theme.breakpoints.up('md')]: {\n      size: 'large',\n      width: '25%',\n    },\n    marginTop: theme.spacing(2),\n    marginLeft: theme.spacing(0),\n    backgroundColor: theme.palette.primary.dark,\n  },\n}));\n\ninterface UpdateMessageProps {\n  message: Message;\n}\n\nconst UpdateMessage: React.FC<UpdateMessageProps> = ({ message }) => {\n  const classes = useStyles();\n  const { user } = useAuth0();\n  const [text, setText] = useState<string>('');\n\n  useEffect(() => {\n    setText(message.text);\n  }, [message]);\n\n  const [\n    updateMessageMutation,\n    { data, loading, error },\n  ] = useUpdateMessageMutation();\n\n  const handleUpdate = async (e: React.SyntheticEvent) => {\n    e.preventDefault();\n    if (text === '') return;\n    await updateMessageMutation({\n      variables: {\n        _eq: message.id,\n        text,\n      },\n    });\n  };\n\n  const handleTyping = (text: string) => {\n    setText(text);\n  };\n\n  if (loading) {\n    return (\n      <>\n        <p>hello</p>\n        <Loader />\n      </>\n    );\n  }\n\n  if (\n    error ||\n    (data?.update_message?.affected_rows !== undefined &&\n      data?.update_message?.affected_rows === 0)\n  ) {\n    return <Alert severity=\"error\">Message could not get deleted...</Alert>;\n  }\n\n  return (\n    <div className={classes.root}>\n      <form noValidate autoComplete=\"off\" className={classes.form}>\n        <TextField\n          value={text}\n          autoFocus={true}\n          onChange={(e) => {\n            handleTyping(e.target.value);\n          }}\n          variant=\"outlined\"\n          color=\"secondary\"\n          autoComplete=\"off\"\n          placeholder=\"Type your message here ...\"\n          id=\"update-chat-message-input\"\n          label={'Update message...'}\n        />\n\n        <Button\n          id=\"update-chat-message-button\"\n          variant=\"contained\"\n          endIcon={<Icon>send</Icon>}\n          className={classes.messageButton}\n          onClick={(e) => handleUpdate(e)}\n          type=\"button\"\n        >\n          Save\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default UpdateMessage;\n","import React, { useEffect, useRef, useState } from 'react';\nimport moment from 'moment';\nimport { Message } from '../../interfaces/message.interface';\nimport ThreadReply from './threads/ThreadReply';\nimport ThreadReplyIn from './threads/ThreadReplyIn';\nimport DeleteMessage from './DeleteMessage';\nimport UpdateMessage from './UpdateMessage';\nimport ReplaceMessage from './ReplaceMessage';\nimport {\n  Avatar,\n  Badge,\n  Box,\n  Divider,\n  ListItem,\n  ListItemAvatar,\n  ListItemIcon,\n  Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useRecoilValue } from 'recoil';\nimport { deletedMessageState } from '../../atom';\nimport { useParams } from 'react-router';\nimport { ChatParams } from '../../interfaces/param.interface';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    padding: theme.spacing(2),\n\n    [theme.breakpoints.down('md')]: {\n      paddingTop: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      paddingLeft: theme.spacing(2),\n      paddingBottom: theme.spacing(0),\n    },\n  },\n  [theme.breakpoints.up('md')]: {\n    messageText: {\n      paddingBottom: '1rem',\n    },\n  },\n  [theme.breakpoints.down('md')]: {\n    messageText: {\n      // fontSize: 14,\n      paddingBottom: '.3rem',\n    },\n  },\n  [theme.breakpoints.down('sm')]: {\n    messageText: {\n      // fontSize: 24,\n      // paddingBottom: '1rem',\n    },\n  },\n  vspace: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(1),\n\n    [theme.breakpoints.down('sm')]: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(0),\n    },\n  },\n  image: {\n    paddingBottom: '0.5rem',\n  },\n  giphy: {\n    [theme.breakpoints.down('sm')]: {\n      width: '100%',\n    },\n    [theme.breakpoints.up('md')]: {\n      width: '25%',\n    },\n  },\n  avatar: {\n    backgroundColor: '#0a0b1a',\n    color: '#F57C00',\n    fontSize: 12,\n  },\n}));\n\ninterface MessageProps {\n  messages: Message[];\n  lastMessage: any;\n  preLastMessageId: number;\n  user: any;\n}\n\nconst MessageList: React.FC<MessageProps> = ({\n  messages,\n  lastMessage,\n  preLastMessageId,\n  user,\n}) => {\n  const classes = useStyles();\n  const [showUpdate, setShowUpdate] = useState<boolean>(false);\n  const [showUpdateMessageId, setShowUpdateMessageId] = useState<number | null>(\n    null,\n  );\n\n  const { channel: channelName } = useParams<ChatParams>();\n\n  const deletedMessage = useRecoilValue<boolean>(deletedMessageState);\n\n  const handleShowUpdate = (message: Message) => {\n    if (message.user.auth0_user_id !== user.sub) return;\n    setShowUpdateMessageId(message.id);\n    setShowUpdate(!showUpdate);\n  };\n\n  const renderMessage = (message: Message) => {\n    return (\n      <ListItem key={message.id} className={classes.root}>\n        <ListItemAvatar>\n          <ListItemIcon>\n            <Badge variant=\"dot\">\n              {!message.deleted ? (\n                <Avatar className={classes.avatar}>\n                  {message.user.username.substring(0, 2).toUpperCase()}\n                </Avatar>\n              ) : (\n                <Avatar\n                  alt=\"Message has been removed\"\n                  src={`${window.location.origin}/deleted.png`}\n                />\n              )}\n            </Badge>\n          </ListItemIcon>\n        </ListItemAvatar>\n\n        <Box component=\"div\" display=\"flex\" flexDirection=\"column\" flex=\"1\">\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"flex-start\"\n          >\n            <Box\n              display=\"flex\"\n              justifyContent=\"flex-start\"\n              alignItems=\"flex-start\"\n            >\n              <Typography variant=\"caption\">\n                {!message.deleted ? (\n                  <>\n                    <strong>{message.user.username} </strong>\n                    <i>{moment(message.timestamp).fromNow()}</i>\n                  </>\n                ) : (\n                  <strong>Oh sorry it seems...</strong>\n                )}\n              </Typography>\n            </Box>\n            <Box>\n              <Box\n                display=\"flex\"\n                justifyContent=\"flex-start\"\n                alignItems=\"flex-start\"\n              >\n                <Typography variant=\"caption\">\n                  <ThreadReply message={message} channelName={channelName} />\n                </Typography>\n                {/* {!message.deleted ? (\n                  <React.Fragment>\n                    {user.sub === message.user.auth0_user_id && (\n                      <Typography variant=\"caption\">\n                        {!(\n                          showUpdate && showUpdateMessageId === message.id\n                        ) && (\n                          <>\n                            {message.channel_threads.length ? (\n                              <ReplaceMessage messageId={message.id} />\n                            ) : (\n                              <DeleteMessage messageId={message.id} />\n                            )}\n                          </>\n                        )}\n                      </Typography>\n                    )}\n                  </>\n                ) : (\n                  ''\n                )} */}\n              </Box>\n            </Box>\n          </Box>\n\n          <Typography\n            component=\"div\"\n            className={classes.messageText}\n            onClick={() => handleShowUpdate(message)}\n          >\n            {showUpdate &&\n            showUpdateMessageId === message.id &&\n            user.sub === message.user.auth0_user_id &&\n            message.deleted === false ? (\n              <UpdateMessage message={message} />\n            ) : (\n              message.text\n            )}\n          </Typography>\n          {message?.image ? (\n            <Box className={classes.image}>\n              <img src={message.image} className={classes.giphy} />\n            </Box>\n          ) : (\n            ''\n          )}\n          {/* {message?.channel_threads?.length &&\n          message?.channel_threads[0]?.channel_thread_messages_aggregate\n            .aggregate.count >= 1 ? (\n            <Box>\n              <ThreadReplyIn message={message} channelName={channelName} />\n            </Box>\n          ) : (\n            ''\n          )} */}\n          <Divider className={classes.vspace} />\n        </Box>\n      </ListItem>\n    );\n  };\n\n  return (\n    <>\n      {[...messages]?.reverse()?.map((message, i) => renderMessage(message))}\n\n      {!deletedMessage &&\n      lastMessage &&\n      preLastMessageId !== 0 &&\n      preLastMessageId < lastMessage.id\n        ? renderMessage(lastMessage)\n        : ''}\n    </>\n  );\n};\n\nexport default MessageList;\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Box } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { useGetUserIsTypingSubscription } from '../../api/generated/graphql';\nimport { useRecoilState } from 'recoil';\nimport { currentChannelState } from '../../atom';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  indicator: {\n    color: '#f9cd8b',\n    fontSize: '10px',\n    fontWeight: 700,\n  },\n}));\n\nconst TypingIndicator: React.FC = () => {\n  const classes = useStyles();\n  const { user } = useAuth0();\n  const [currentChannel, setCurrentChannel] = useRecoilState<any>(\n    currentChannelState,\n  );\n  const { data, loading, error } = useGetUserIsTypingSubscription({\n    variables: {\n      self_id: user.sub,\n      channel_id: currentChannel.id,\n    },\n  });\n\n  if (error) {\n    return <Alert severity=\"error\">Typing Indicator Error...</Alert>;\n  }\n\n  return (\n    <>\n      {!loading && data?.user_typing[0]?.username\n        ? `${data.user_typing[0].username} is typing ...`\n        : 'Type your message here ...'}\n    </>\n  );\n};\n\nexport default TypingIndicator;\n","import React, { useState, useRef } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { TextField, Button, Box } from '@material-ui/core';\nimport { theme } from '../../theme/theme';\nimport Icon from '@material-ui/core/Icon';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport {\n  useInsertMessageMutation,\n  useSendTypingEventMutation,\n} from '../../api/generated/graphql';\nimport TypingIndicator from '../shared/TypingIndicator';\nimport { useRecoilState } from 'recoil';\nimport { giphyState, deletedMessageState } from '../../atom';\nimport { IGif } from '@giphy/js-types';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  giphyImage: {\n    marginTop: theme.spacing(0),\n  },\n  form: {\n    display: 'flex',\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(8),\n    flexDirection: 'column',\n    flexGrow: 1,\n    [theme.breakpoints.down('md')]: {\n      marginTop: theme.spacing(0.2),\n    },\n    [theme.breakpoints.up('md')]: {\n      marginTop: theme.spacing(0),\n    },\n  },\n  messageInput: {\n    [theme.breakpoints.down('md')]: {\n      fontSize: '.9rem',\n    },\n  },\n  messageButton: {\n    [theme.breakpoints.down('sm')]: {\n      display: 'none',\n    },\n    [theme.breakpoints.up('md')]: {\n      size: 'large',\n      width: '25%',\n    },\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(0),\n    backgroundColor: theme.palette.primary.dark,\n  },\n  image: {\n    [theme.breakpoints.up('md')]: {\n      maxHeight: 55,\n    },\n    [theme.breakpoints.down('md')]: {\n      maxHeight: 40,\n    },\n    paddingRight: theme.spacing(1),\n  },\n}));\n\ninterface ChatInputProps {\n  channelId: number;\n  handleSetLastMessage: Function;\n  preLastMessageId: number;\n}\n\nconst ChatInput: React.FC<ChatInputProps> = (props) => {\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n\n  const setTextFieldSize = () => {\n    switch (matches) {\n      case true:\n        return 'medium';\n\n      case false:\n        return 'small';\n\n      default:\n        return 'small';\n    }\n  };\n\n  const setButtonSize = () => {\n    switch (matches) {\n      case true:\n        return 'large';\n      case false:\n        return 'small';\n\n      default:\n        return 'small';\n    }\n  };\n\n  const { user } = useAuth0();\n  const [text, setText] = useState('');\n  const [gif, setGif] = useRecoilState<IGif | null>(giphyState);\n  const [deletedMessage, setdeletedMessage] = useRecoilState<boolean>(\n    deletedMessageState,\n  );\n\n  const channelId = props.channelId;\n\n  const [\n    sendTypingEventMutation,\n    { data, loading, error },\n  ] = useSendTypingEventMutation({\n    variables: {\n      user_id: user.sub,\n      channel_id: channelId,\n    },\n  });\n\n  const handleTyping = (text: string) => {\n    const textLength = text.length;\n    if ((textLength !== 0 && textLength % 5 === 0) || textLength === 1) {\n      sendTypingEventMutation();\n    }\n    setText(text);\n  };\n\n  const [\n    sendMessage,\n    { data: sendUpdateMessageData },\n  ] = useInsertMessageMutation();\n\n  const handleSubmit = async (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    if (text === '' && gif === null) {\n      return;\n    }\n\n    if (text.length > 2000) {\n      alert('Your text limit has reached the limit of 2000 characters');\n      return;\n    }\n\n    props.handleSetLastMessage({\n      id: props.preLastMessageId + 1,\n      user: {\n        username: user.nickname,\n      },\n      user_id: user.sub,\n      text: text,\n      image: gif?.images?.fixed_width_small?.url,\n      channel_id: channelId,\n    });\n\n    await sendMessage({\n      variables: {\n        message: {\n          user_id: user.sub,\n          text: text,\n          image: gif?.images?.fixed_width_small?.url,\n          channel_id: channelId,\n        },\n      },\n    });\n\n    setText('');\n    setGif(null);\n    setdeletedMessage(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Box className={classes.giphyImage}>\n        {gif && (\n          <img\n            className={classes.image}\n            alt=\"Giphy\"\n            src={gif?.images?.fixed_width_small?.url}\n            onClick={() => setGif(null)}\n          />\n        )}\n      </Box>\n      <form\n        noValidate\n        autoComplete=\"off\"\n        className={classes.form}\n        onSubmit={handleSubmit}\n      >\n        <TextField\n          value={text}\n          autoFocus={false}\n          onChange={(e) => {\n            handleTyping(e.target.value);\n          }}\n          focused\n          size={setTextFieldSize()}\n          variant=\"outlined\"\n          color=\"secondary\"\n          autoComplete=\"off\"\n          placeholder=\"...\"\n          id=\"chat-message-input\"\n          label={<TypingIndicator />}\n          InputProps={{\n            classes: {\n              input: classes.messageInput,\n            },\n          }}\n          InputLabelProps={{\n            className: classes.messageInput,\n          }}\n        />\n\n        <Button\n          id=\"chat-message-button\"\n          size={setButtonSize()}\n          variant=\"contained\"\n          endIcon={<Icon>send</Icon>}\n          className={classes.messageButton}\n          type=\"submit\"\n        >\n          Send\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default ChatInput;\n","import React, { useState, useEffect, useRef } from 'react';\nimport {\n  Box,\n  Button,\n  Divider,\n  Grid,\n  List,\n  Typography,\n} from '@material-ui/core';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport { Message } from '../../interfaces/message.interface';\nimport {\n  useWatchMessagesSubscription,\n  Channel_Type_Enum,\n  useUpsertMessageCursorMutation,\n} from '../../api/generated/graphql';\n\nimport Alert from '@material-ui/lab/Alert';\nimport MenuBar from '../shared/MenuBar';\nimport Logo from '../shared/Logo';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { useHistory } from 'react-router-dom';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    overflowY: 'scroll',\n    maxHeight: '81vh',\n    marginTop: theme.spacing(5),\n  },\n  messageContainer: {\n    [theme.breakpoints.up('lg')]: {\n      padding: theme.spacing(10),\n      paddingTop: theme.spacing(5),\n      paddingBottom: theme.spacing(3),\n    },\n    [theme.breakpoints.down('md')]: {\n      padding: theme.spacing(3),\n      paddingTop: theme.spacing(3),\n      paddingBottom: theme.spacing(0),\n    },\n    [theme.breakpoints.down('sm')]: {\n      padding: theme.spacing(0),\n      paddingTop: theme.spacing(0),\n      paddingBottom: theme.spacing(6),\n    },\n  },\n  polling: {\n    position: 'fixed',\n    overflow: 'hidden',\n    flex: 1,\n  },\n}));\n\ninterface ChatProps {\n  channelId: number;\n  isPrivate: boolean;\n  channelType: Channel_Type_Enum;\n}\n\nconst Chat: React.FC<ChatProps> = ({ channelId, isPrivate, channelType }) => {\n  const classes = useStyles();\n  const [limit, setLimit] = useState(20);\n  const [lastMessage, setLastMessage] = useState({});\n  const { user, error: auth0Error } = useAuth0();\n  let history = useHistory();\n\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  let preLastMessageId = 0;\n\n  const { data, loading, error } = useWatchMessagesSubscription({\n    variables: {\n      channelId: channelId,\n      limit: limit,\n    },\n    fetchPolicy: 'network-only',\n  });\n\n  const [\n    upsertMessageCursorMutation,\n    {\n      data: upsertMessageData,\n      loading: upsertMessageLoading,\n      error: upsertMessageError,\n    },\n  ] = useUpsertMessageCursorMutation();\n\n  const scrollToBottom = () => {\n    if (typeof messagesEndRef === 'object') {\n      messagesEndRef?.current?.scrollIntoView();\n    }\n  };\n\n  useEffect(() => {\n    if (data?.messages[0]?.id)\n      upsertMessageCursorMutation({\n        variables: {\n          channel_id: channelId,\n          message_id: data?.messages[0]?.id,\n          user_id: user.sub,\n        },\n      });\n    scrollToBottom();\n  }, [data]);\n\n  if (error) {\n    return <Alert severity=\"error\">Messages could not be loaded.</Alert>;\n  }\n\n  if (loading) {\n    return (\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        flexDirection=\"column\"\n        style={{ height: '100vh' }}\n      >\n        <Logo />\n        <LinearProgress color=\"secondary\" />\n      </Box>\n    );\n  }\n\n  if (data) {\n    preLastMessageId = data?.messages[0]?.id;\n  }\n\n  const handleIncreaseLimit = () => {\n    setLimit(limit + 20);\n  };\n\n  const handleSetLastMessage = (lastMessage: Message) => {\n    setLastMessage(lastMessage);\n  };\n\n  const navigateToAddChannelMembers = () => {\n    history.push(`/addChannelMembers`);\n  };\n\n  return (\n    <>\n      <Box className={classes.root}>\n        <Grid container>\n          <Grid item xs={12} className={classes.messageContainer}>\n            {isPrivate && channelType !== Channel_Type_Enum.DirectMessage && (\n              <Box\n                display=\"flex\"\n                justifyContent=\"center\"\n                style={{ marginBottom: '20px' }}\n              >\n                <Button\n                  color=\"secondary\"\n                  variant=\"contained\"\n                  type=\"button\"\n                  onClick={navigateToAddChannelMembers}\n                >\n                  Add users to channel\n                </Button>\n              </Box>\n            )}\n            <List id=\"message-list\">\n              <MessageList\n                messages={data?.messages as Message[]}\n                lastMessage={lastMessage}\n                preLastMessageId={preLastMessageId}\n                user={user}\n              />\n            </List>\n            <div ref={messagesEndRef} />\n          </Grid>\n          <Box maxWidth=\"xl\" component=\"nav\">\n            <MenuBar channelId={channelId}>\n              <MessageInput\n                channelId={channelId}\n                handleSetLastMessage={handleSetLastMessage}\n                preLastMessageId={preLastMessageId}\n              />\n            </MenuBar>\n          </Box>\n        </Grid>\n      </Box>\n    </>\n  );\n};\n\nexport default Chat;\n","import React from 'react';\nimport { useParams } from 'react-router';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useRecoilState } from 'recoil';\nimport { useGetChannelByNameQuery } from '../../api/generated/graphql';\nimport { currentChannelState } from '../../atom';\nimport Chat from './Chat';\nimport Loader from '../shared/Loader';\nimport { ChatParams } from '../../interfaces/param.interface';\n\nconst ChatApp: React.FC = () => {\n  const [currentChannel, setCurrentChannel] = useRecoilState<any>(\n    currentChannelState,\n  );\n\n  const { isAuthenticated, isLoading: isLoadingAuth0, error } = useAuth0();\n  const { channel: channelName } = useParams<ChatParams>();\n\n  const {\n    data,\n    loading: channelLoading,\n    error: channelError,\n  } = useGetChannelByNameQuery({\n    variables: {\n      name: channelName,\n    },\n  });\n\n  if (isLoadingAuth0 || channelLoading) {\n    return <Loader />;\n  }\n\n  if (\n    !currentChannel ||\n    (currentChannel && currentChannel.name !== channelName)\n  ) {\n    setCurrentChannel(data?.channel[0]);\n  }\n\n  if (error || channelError) {\n    return <React.Fragment>Error: {error}</React.Fragment>;\n  }\n\n  return (\n    <>\n      {isAuthenticated && (\n        <Chat\n          channelId={currentChannel?.id}\n          isPrivate={currentChannel?.is_private}\n          channelType={currentChannel?.channel_type}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ChatApp;\n","import React from 'react';\nimport { theme } from '../../theme/theme';\nimport { Container, Grid } from '@material-ui/core/';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport SideBar from '../shared/SideBar';\nimport ChatApp from './ChatApp';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    margin: 0,\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    overflowX: 'hidden',\n    overflowY: 'hidden',\n  },\n  sidebar: {\n    height: '100vh',\n    maxHeight: '85vh',\n    display: 'flex',\n    alignItems: 'flex-start',\n    paddingTop: theme.spacing(5),\n    borderRightWidth: 1,\n    borderRightStyle: 'solid',\n    borderRightColor: theme.palette.primary.dark,\n  },\n}));\n\nconst ChatContainer: React.FC = () => {\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n\n  return (\n    <Container\n      component=\"main\"\n      maxWidth=\"xl\"\n      disableGutters\n      className={classes.container}\n    >\n      {matches === true && (\n        <Grid item xs={5} className={classes.sidebar}>\n          <SideBar />\n        </Grid>\n      )}\n      <Grid item xs={12}>\n        <ChatApp />\n      </Grid>\n    </Container>\n  );\n};\n\nexport default ChatContainer;\n","import React, { useEffect } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport ChatContainer from '../chat/ChatContainer';\nimport { Container } from '@material-ui/core';\nimport { useSetUserOnlineMutation } from '../../api/generated/graphql';\n\nconst ChatBoard: React.FC = () => {\n  const { user } = useAuth0();\n\n  const user_id = user.sub;\n\n  const [sendUserIsOnline] = useSetUserOnlineMutation({\n    variables: { user_id },\n  });\n\n  useEffect(() => {\n    setInterval(() => {\n      if (user.sub !== undefined) {\n        sendUserIsOnline();\n      }\n    }, 9000);\n  }, [sendUserIsOnline, user.sub]);\n\n  return (\n    <Container maxWidth=\"xl\" disableGutters>\n      <ChatContainer />\n    </Container>\n  );\n};\n\nexport default ChatBoard;\n","import React from 'react';\nimport { Link as Linky } from 'react-router-dom';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport {\n  Box,\n  Divider,\n  Grid,\n  List,\n  ListSubheader,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport PeopleOutlineIcon from '@material-ui/icons/PeopleOutline';\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\nimport UserStatus from '../shared/UserStatus';\nimport Logout from '../Logout';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    [theme.breakpoints.up('sm')]: {\n      marginRight: theme.spacing(5),\n      marginLeft: theme.spacing(5),\n      marginTop: theme.spacing(0),\n      marginBottom: theme.spacing(5),\n    },\n    [theme.breakpoints.down('md')]: {\n      padding: theme.spacing(2),\n      margin: theme.spacing(0),\n      paddingTop: theme.spacing(2),\n    },\n    [theme.breakpoints.down('sm')]: {\n      padding: theme.spacing(0),\n      margin: theme.spacing(0),\n      paddingTop: theme.spacing(2),\n    },\n  },\n  treeView: {\n    overflowY: 'hidden',\n    maxHeight: '50vh',\n    marginRight: theme.spacing(0),\n    marginLeft: theme.spacing(0),\n    paddingRight: theme.spacing(0),\n  },\n  branding: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n}));\n\nconst AdminSidebar: React.FC<any> = () => {\n  const classes = useStyles();\n  const { user } = useAuth0();\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        flex=\"1\"\n        className={classes.root}\n      >\n        <Grid container>\n          <Grid item xs={12}>\n            <UserStatus user_id={user.sub} />\n          </Grid>\n          <Grid item xs={12} className={classes.branding}>\n            <img\n              alt=\"The Great Chicken Fest\"\n              src=\"/the-great-chicken-fest.svg\"\n              width=\"300\"\n            />\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Box className={classes.treeView}>\n            <Divider />\n            <List\n              component=\"nav\"\n              aria-labelledby=\"nested-list-subheader\"\n              subheader={\n                <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n                  Administration\n                </ListSubheader>\n              }\n              className={classes.root}\n            >\n              <ListItem button>\n                <ListItemIcon>\n                  <PeopleOutlineIcon />\n                </ListItemIcon>\n                <ListItemText>\n                  <Linky to={'/dashboard/users'}>\n                    <Typography variant=\"h6\" color=\"secondary\">\n                      Users\n                    </Typography>\n                  </Linky>\n                </ListItemText>\n              </ListItem>\n              <ListItem button>\n                <ListItemIcon>\n                  <HowToVoteIcon />\n                </ListItemIcon>\n                <ListItemText>\n                  <Linky to={'/dashboard/pollings'}>\n                    <Typography variant=\"h6\" color=\"secondary\">\n                      Pollings\n                    </Typography>\n                  </Linky>\n                </ListItemText>\n              </ListItem>\n            </List>\n            <Divider />\n            <Logout />\n          </Box>\n        </Grid>\n      </Box>\n    </>\n  );\n};\n\nexport default AdminSidebar;\n","import React from 'react';\nimport {\n  Avatar,\n  Box,\n  Paper,\n  Table,\n  TableBody,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableCell,\n  Typography,\n  CircularProgress,\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { useGetUserListQuery } from '../../api/generated/graphql';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n}));\n\nconst AdminUserList: React.FC = () => {\n  const classes = useStyles();\n  const { data, loading, error } = useGetUserListQuery({\n    variables: {},\n  });\n\n  if (loading) {\n    return <CircularProgress />;\n  }\n\n  if (error) {\n    return <Alert severity=\"error\">Users could not be loaded.</Alert>;\n  }\n\n  return (\n    <Box className={classes.root}>\n      <h2>Userlist</h2>\n      <p>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Tempore, quos\n        sunt magni natus suscipit nesciunt. Nostrum voluptatum suscipit\n        assumenda officia in! Incidunt similique a adipisci facere neque, cum\n        nesciunt reprehenderit.\n      </p>\n      {data && (\n        <TableContainer component={Paper}>\n          <Table aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Avatar</TableCell>\n                <TableCell>Username</TableCell>\n                <TableCell align=\"right\">UserId</TableCell>\n                <TableCell align=\"left\">Auth0</TableCell>\n                <TableCell align=\"left\">Last seen</TableCell>\n              </TableRow>\n            </TableHead>\n            {data.users.map((user) => (\n              <TableBody>\n                <TableRow key={user.id}>\n                  <TableCell>\n                    <Avatar\n                      alt={user.username}\n                      src=\"https://api.adorable.io/avatars/173/abott@adorable.png\"\n                    />\n                  </TableCell>\n                  <TableCell component=\"th\" scope=\"row\">\n                    <Typography variant=\"body2\">{user.username}</Typography>\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    <Typography variant=\"caption\">{user.id}</Typography>\n                  </TableCell>\n                  <TableCell align=\"left\">\n                    <Typography variant=\"body2\">\n                      {user.auth0_user_id}\n                    </Typography>\n                  </TableCell>\n                  <TableCell align=\"left\">\n                    {user.last_seen ? user.last_seen : 'Has not logged in yet.'}\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            ))}\n          </Table>\n        </TableContainer>\n      )}\n    </Box>\n  );\n};\n\nexport default AdminUserList;\n","import React, { useEffect } from 'react';\nimport { useDeletePollQuestionMutation } from '../../api/generated/graphql';\nimport { Button } from '@material-ui/core';\n\ninterface DeleteAnswerProps {\n  questionId: number;\n  setActiveState: boolean;\n  channelPollState?: Array<any>;\n}\n\nconst DeleteQuestion: React.FC<DeleteAnswerProps> = ({\n  questionId,\n  setActiveState,\n  channelPollState,\n}) => {\n  const [tobeDeleted, setToBeDeleted] = React.useState(setActiveState);\n  const [deleteQuestion, { error }] = useDeletePollQuestionMutation({\n    variables: {\n      pollQuestionId: questionId,\n    },\n  });\n\n  useEffect(() => {}, [tobeDeleted]);\n\n  const handleQuestionDelete = async (questionId: number) => {\n    if (!questionId) return;\n\n    await deleteQuestion({\n      variables: {\n        pollQuestionId: questionId,\n      },\n    });\n  };\n\n  if (error) {\n    console.log(`Error on delete question ${questionId}`);\n  }\n\n  return (\n    <>\n      {tobeDeleted ? (\n        <Button variant=\"outlined\" size=\"small\" color=\"secondary\" disabled>\n          Active poll\n        </Button>\n      ) : (\n        <Button\n          variant=\"contained\"\n          size=\"small\"\n          color=\"secondary\"\n          onClick={() => {\n            handleQuestionDelete(questionId);\n          }}\n        >\n          Delete\n        </Button>\n      )}\n    </>\n  );\n};\n\nexport default DeleteQuestion;\n","import React, { useEffect } from 'react';\nimport { Chip, ListItemIcon } from '@material-ui/core';\nimport LockIcon from '@material-ui/icons/Lock';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  locked: {\n    color: theme.palette.error.main,\n  },\n  unlocked: {\n    color: theme.palette.success.main,\n  },\n}));\n\ninterface ShowPollQuestionLockStateProps {\n  setActiveState: boolean;\n}\n\nconst ShowPollQuestionLockState: React.FC<ShowPollQuestionLockStateProps> = ({\n  setActiveState,\n}) => {\n  const classes = useStyles();\n\n  useEffect(() => {}, []);\n\n  return (\n    <>\n      <Chip\n        size=\"small\"\n        variant=\"outlined\"\n        color=\"primary\"\n        icon={\n          setActiveState ? (\n            <LockIcon className={classes.locked} />\n          ) : (\n            <LockOpenIcon className={classes.unlocked} />\n          )\n        }\n        label={setActiveState ? 'locked' : 'unlocked'}\n      />\n    </>\n  );\n};\n\nexport default ShowPollQuestionLockState;\n","import React, { useState, useEffect } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { getPollQuestionAnswers } from '../../atom';\nimport {\n  useWatchGetChannelsSubscription,\n  useWatchChannelPollActiveStateSubscription,\n  useAddPublishPollQuestionToChannelMutation,\n  useDeletePollQuestionFromChannelMutation,\n} from '../../api/generated/graphql';\nimport { Box, Chip, Typography } from '@material-ui/core';\nimport Loader from '../../components/shared/Loader';\n\ninterface GetChannelsProps {\n  questionId: number;\n}\n\nconst GetChannels: React.FC<GetChannelsProps> = ({ questionId }) => {\n  const [questionIdState, setQuestionIdState] = React.useState(questionId);\n  const getPollQuestionId = useRecoilValue<number>(getPollQuestionAnswers);\n  const [channelId, setChannelID] = useState<string>('');\n  const { data, loading, error } = useWatchGetChannelsSubscription();\n  const {\n    data: checkActiveChannelState,\n  } = useWatchChannelPollActiveStateSubscription({\n    variables: {},\n  });\n\n  console.log('GETPOLLQUESTIONID', getPollQuestionId, questionId);\n\n  const [pollQuestionToChannel] = useAddPublishPollQuestionToChannelMutation();\n  const [\n    deletePollQuestionFromChannelMutation,\n    { error: deleteError },\n  ] = useDeletePollQuestionFromChannelMutation({\n    variables: {\n      pollQuestionId: getPollQuestionId,\n      channelId: parseInt(channelId),\n    },\n  });\n\n  useEffect(() => {\n    setQuestionIdState(questionId);\n  }, [questionId, questionIdState]);\n\n  if (loading) {\n    return (\n      <Box\n        width=\"100%\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <Loader />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return <p>Error loading.</p>;\n  }\n\n  const handlePublishOnChannel = async (kanalId: number) => {\n    await pollQuestionToChannel({\n      variables: {\n        channelID: kanalId,\n        pollQuestionID: getPollQuestionId,\n      },\n    });\n  };\n\n  const handleDeleteQuestionFromChannel = async (kanalId: number) => {\n    if (kanalId === undefined) return;\n\n    await deletePollQuestionFromChannelMutation({\n      variables: {\n        pollQuestionId: getPollQuestionId,\n        channelId: kanalId,\n      },\n    });\n\n    if (deleteError) {\n      console.log('error on delete question from channel');\n    }\n  };\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        justifyContent=\"flex-start\"\n        alignItems=\"flex-start\"\n        flexDirection=\"column\"\n        pb={1}\n      >\n        <Typography variant=\"h3\">Channels with active polls:</Typography>\n        <Typography variant=\"caption\">\n          Click on chip to set actual question to channel:\n        </Typography>\n        {data?.channel\n          .sort((a, b) => a.id - b.id)\n          .map((chn, index) => (\n            <Box\n              key={index}\n              display=\"flex\"\n              justifyContent=\"flex-start\"\n              alignItems=\"flex-start\"\n            >\n              <Chip\n                disabled={\n                  chn.channel_polls[0]?.poll_question?.id !== questionIdState &&\n                  chn.channel_polls[0]?.poll_question?.id !== undefined\n                    ? true\n                    : false\n                }\n                onClick={() => handlePublishOnChannel(chn.id)}\n                onDelete={() => handleDeleteQuestionFromChannel(chn.id)}\n                style={{ marginTop: 8, marginRight: 8 }}\n                variant=\"outlined\"\n                size=\"small\"\n                color={\n                  chn.channel_polls[0]?.channel_id === chn.id\n                    ? 'secondary'\n                    : 'primary'\n                }\n                label={chn.name}\n              />\n              <Chip\n                variant={\n                  chn.channel_polls[0]?.poll_question?.text\n                    ? 'default'\n                    : 'outlined'\n                }\n                color={\n                  chn.channel_polls[0]?.poll_question?.text\n                    ? 'secondary'\n                    : 'primary'\n                }\n                label={\n                  chn.channel_polls[0]?.poll_question?.text\n                    ? chn.channel_polls[0]?.poll_question?.text\n                    : 'No poll set.'\n                }\n                style={{ marginTop: 8, marginRight: 8 }}\n                size=\"small\"\n              />\n            </Box>\n          ))}\n      </Box>\n    </>\n  );\n};\n\nexport default GetChannels;\n","import React, { useEffect } from 'react';\nimport moment from 'moment';\nimport clsx from 'clsx';\nimport { Link } from 'react-router-dom';\nimport { useRecoilState } from 'recoil';\nimport {\n  Accordion,\n  AccordionActions,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Button,\n  Chip,\n  Divider,\n  Typography,\n} from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport NotFound from '../shared/NotFound';\nimport { useWatchGetPollQuestionsSubscription } from '../../api/generated/graphql';\nimport { getPollQuestionAnswers } from '../../atom';\nimport DeleteQuestion from './DeleteQuestion';\nimport ShowPollQuestionLockState from './ShowPollQuestionLockState';\nimport GetChannels from './GetChannels';\nimport Loader from '../shared/Loader';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  play: {\n    color: theme.palette.error.main,\n  },\n  stop: {\n    color: theme.palette.success.main,\n  },\n\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n\n  details: {\n    alignItems: 'flex-start',\n  },\n  column: {\n    flexBasis: '100%',\n  },\n  helper: {\n    borderLeft: `2px solid ${theme.palette.divider}`,\n    padding: theme.spacing(1, 2),\n  },\n}));\n\nconst GetPollQuestions: React.FC = () => {\n  const classes = useStyles();\n  const { data, loading, error } = useWatchGetPollQuestionsSubscription({\n    variables: {},\n  });\n  const [pollQuestion, setPollQuestion] = useRecoilState<any>(\n    getPollQuestionAnswers,\n  );\n\n  const handleClick = (questionId: number) => {\n    setPollQuestion(questionId);\n  };\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  if (error) {\n    return <NotFound />;\n  }\n\n  return (\n    <>\n      <div className={classes.root}>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Typography variant=\"h3\">Poll list overview:</Typography>\n          <Chip\n            variant=\"outlined\"\n            size=\"small\"\n            color=\"primary\"\n            label={'Total polls: ' + data?.questions.length}\n          />\n        </Box>\n\n        {data?.questions.length === 0 ? (\n          <Alert severity=\"info\">Please add a new question.</Alert>\n        ) : (\n          data?.questions\n            .sort((a, b) => a.id + b.id)\n            .map((question) => (\n              <Accordion key={question.id} defaultExpanded={false}>\n                <AccordionSummary\n                  expandIcon={<ExpandMoreIcon />}\n                  aria-controls={question.text}\n                  id={question.text}\n                >\n                  <Box\n                    display=\"flex\"\n                    justifyContent=\"flex-start\"\n                    alignItems=\"center\"\n                    className={classes.column}\n                  >\n                    <Chip\n                      variant=\"outlined\"\n                      size=\"small\"\n                      color=\"primary\"\n                      label={question.id}\n                    />\n                    {question?.channel_polls.length > 0 ? (\n                      <HowToVoteIcon color=\"secondary\" />\n                    ) : (\n                      <HowToVoteIcon />\n                    )}\n\n                    <Link\n                      onClick={() => {\n                        handleClick(question.id);\n                      }}\n                      to={{\n                        pathname:\n                          '/dashboard/pollings/edit/question/' + question.id,\n                        state: { fromDashboard: true },\n                      }}\n                    >\n                      <Typography\n                        style={{ marginLeft: 16 }}\n                        className={classes.heading}\n                      >\n                        {question.text}\n                      </Typography>\n                    </Link>\n                  </Box>\n                  <Box\n                    display=\"flex\"\n                    justifyContent=\"flex-end\"\n                    alignItems=\"center\"\n                    className={classes.column}\n                  >\n                    <ShowPollQuestionLockState\n                      setActiveState={question.is_active}\n                    />\n                    <Chip\n                      variant=\"outlined\"\n                      color=\"primary\"\n                      size=\"small\"\n                      label={`Created at | ${moment(question.created_at).format(\n                        'DD-MM-YYYY | hh:mm:ss',\n                      )}`}\n                    />\n                  </Box>\n                </AccordionSummary>\n                <AccordionDetails className={classes.details}>\n                  <div className={classes.column}>\n                    <Typography\n                      variant=\"caption\"\n                      style={{ display: 'flex', width: '100%' }}\n                    >\n                      This poll is published on:\n                    </Typography>\n                    {question?.channel_polls.map((chn, index) => (\n                      <Chip\n                        key={chn.channel.name + index}\n                        style={{ marginTop: 8, marginRight: 8 }}\n                        variant=\"outlined\"\n                        size=\"small\"\n                        color=\"secondary\"\n                        label={chn.channel.name}\n                      />\n                    ))}\n                  </div>\n                  <div\n                    className={clsx(classes.column, classes.helper)}\n                    onMouseEnter={() => {\n                      handleClick(question.id);\n                    }}\n                  >\n                    <Typography variant=\"caption\">\n                      Where you want to publish this poll? Orange colored\n                      channels has an active poll.\n                    </Typography>\n                    <GetChannels questionId={question.id} />\n                  </div>\n                </AccordionDetails>\n                <Divider />\n                <AccordionActions>\n                  <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    href={`/dashboard/pollings/edit/question/${question.id}`}\n                  >\n                    Edit\n                  </Button>\n\n                  <DeleteQuestion\n                    questionId={question.id}\n                    setActiveState={question.is_active}\n                  />\n                </AccordionActions>\n              </Accordion>\n            ))\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default GetPollQuestions;\n","import React, { useEffect } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useAddPollQuestionMutation } from '../../api/generated/graphql';\nimport {\n  Box,\n  Button,\n  FormGroup,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  form: {},\n  messageInput: {\n    floatingLabelFocusStyle: {\n      color: theme.palette.secondary.dark,\n    },\n  },\n  messageButton: {\n    [theme.breakpoints.down('md')]: {\n      width: '100%',\n      size: 'small',\n    },\n    [theme.breakpoints.up('md')]: {\n      size: 'large',\n      width: '25%',\n    },\n    marginTop: theme.spacing(2),\n    marginLeft: theme.spacing(0),\n    backgroundColor: theme.palette.primary.dark,\n  },\n}));\n\nconst AddPollQuestion: React.FC = () => {\n  const classes = useStyles();\n  const { user: userAuth0 } = useAuth0();\n  const [addPollQuestionMutation] = useAddPollQuestionMutation();\n  const [pollTitle, setPollTitle] = React.useState<{ title: string }>({\n    title: '',\n  });\n\n  const handleChange = (e: any) => {\n    setPollTitle({ ...pollTitle, [e.target.id]: e.target.value });\n  };\n\n  const handleAddTitle = async (e: any) => {\n    e.preventDefault();\n\n    if (pollTitle.title === '') return;\n\n    await addPollQuestionMutation({\n      variables: {\n        text: pollTitle.title,\n        owner_id: userAuth0.sub,\n      },\n    });\n\n    setPollTitle({ title: '' });\n  };\n\n  useEffect(() => {}, [pollTitle]);\n\n  return (\n    <>\n      <Box className={classes.root} mt={5} mb={3}>\n        <Typography variant=\"h2\">Add a new poll</Typography>\n      </Box>\n      <form\n        className={classes.form}\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={handleAddTitle}\n      >\n        <FormGroup>\n          <TextField\n            id=\"title\"\n            required\n            value={pollTitle.title}\n            onChange={handleChange}\n            size=\"medium\"\n            variant=\"outlined\"\n            color=\"secondary\"\n            autoComplete=\"off\"\n            placeholder=\"Type your question here ...\"\n            label=\"Add a meaningful question\"\n            fullWidth\n            data-testid=\"pollquestion_title\"\n            InputProps={{\n              classes: {\n                input: classes.messageInput,\n              },\n            }}\n            InputLabelProps={{\n              className: classes.messageInput,\n            }}\n          />\n          <Button\n            type=\"submit\"\n            value=\"Add poll title\"\n            size=\"medium\"\n            variant=\"contained\"\n            endIcon={<HowToVoteIcon />}\n            className={classes.messageButton}\n          >\n            Add poll\n          </Button>\n        </FormGroup>\n      </form>\n    </>\n  );\n};\n\nexport default AddPollQuestion;\n","import React from 'react';\nimport { Divider, Grid } from '@material-ui/core';\n\nimport GetPollQuestions from './GetPollQuestions';\nimport AddPollQuestion from './AddPollQuestion';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  divider: {\n    marginTop: theme.spacing(5),\n    marginBottom: theme.spacing(5),\n  },\n}));\n\nconst PollingDashBoard: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Grid item xs={12}>\n        <AddPollQuestion />\n        <Divider className={classes.divider} />\n      </Grid>\n      <Grid item xs={12}>\n        <GetPollQuestions />\n      </Grid>\n    </>\n  );\n};\n\nexport default PollingDashBoard;\n","import React, { useEffect } from 'react';\nimport { Chip } from '@material-ui/core';\n\ninterface GetPollAnswerIdProps {\n  pollQuestionId: number;\n}\n\nconst GetPollAnswerId: React.FC<GetPollAnswerIdProps> = ({\n  pollQuestionId,\n}) => {\n  useEffect(() => {}, [pollQuestionId]);\n\n  return (\n    <>\n      <Chip\n        color=\"secondary\"\n        size=\"small\"\n        variant=\"outlined\"\n        label={'Poll question id: ' + pollQuestionId}\n      />\n    </>\n  );\n};\n\nexport default GetPollAnswerId;\n","import React, { useEffect } from 'react';\nimport { useDeletePollAnswerIdMutation } from '../../api/generated/graphql';\nimport { Button } from '@material-ui/core';\n\ninterface DeleteAnswerProps {\n  answerId: number;\n  setActiveState: boolean;\n}\n\nconst DeleteAnswer: React.FC<DeleteAnswerProps> = ({\n  answerId,\n  setActiveState,\n}) => {\n  const [deletePollAnswerIdMutation] = useDeletePollAnswerIdMutation({\n    variables: {\n      pollAnswerId: answerId,\n    },\n  });\n\n  useEffect(() => {}, [answerId, setActiveState]);\n\n  const handleDeleteAnswer = async (answerId: number) => {\n    await deletePollAnswerIdMutation({\n      variables: {\n        pollAnswerId: answerId,\n      },\n    });\n  };\n\n  return (\n    <>\n      <Button\n        style={{\n          marginTop: '8px',\n          marginLeft: '8px',\n          maxWidth: '100px',\n        }}\n        variant=\"outlined\"\n        size=\"large\"\n        color=\"secondary\"\n        disabled={setActiveState}\n        onClick={() => {\n          handleDeleteAnswer(answerId);\n        }}\n      >\n        Delete\n      </Button>\n    </>\n  );\n};\n\nexport default DeleteAnswer;\n","import React from 'react';\nimport {\n  useWatchGetPollAnswersSubscription,\n  useUpdatePollAnswerTextMutation,\n  useWatchGetPollQuestionSubscription,\n} from '../../api/generated/graphql';\nimport {\n  Box,\n  Button,\n  Chip,\n  FormGroup,\n  Grid,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport DeleteAnswer from './DeleteAnswer';\nimport Loader from '../shared/Loader';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  messageInput: {\n    floatingLabelFocusStyle: {\n      color: theme.palette.secondary.dark,\n    },\n  },\n}));\n\ninterface PollAnswerListProps {\n  pollQuestionId: number;\n}\n\nconst PollAnswerList: React.FC<PollAnswerListProps> = ({ pollQuestionId }) => {\n  const classes = useStyles();\n  const [updateEnabled, setUpdateEnabled] = React.useState(true);\n  const [answerTextUpdateId, setAnswerTextUpdateId] = React.useState<number>(0);\n  const [answerText, setAnswerText] = React.useState({\n    text: '',\n  });\n  const getPollQuestion = useWatchGetPollQuestionSubscription({\n    variables: {\n      pollQuestionId: pollQuestionId,\n    },\n  });\n  const { data, loading } = useWatchGetPollAnswersSubscription({\n    variables: {\n      pollQuestionId: pollQuestionId,\n    },\n  });\n  const [updatePollAnswerTextMutation] = useUpdatePollAnswerTextMutation({\n    variables: {\n      text: answerText.text,\n      pollAnswerId: answerTextUpdateId,\n    },\n  });\n\n  const handleAnswerChange = (index?: number, e?: any) => {\n    setAnswerText({ text: e.target.value });\n    setUpdateEnabled(false);\n  };\n\n  const handleUpdateAnswerText = async (answerId: number) => {\n    setAnswerTextUpdateId(answerId);\n\n    if (answerId === undefined || answerText.text === '') {\n      setUpdateEnabled(true);\n      return;\n    }\n\n    await updatePollAnswerTextMutation({\n      variables: {\n        text: Object.values(answerText)[0],\n        pollAnswerId: answerId,\n      },\n    });\n    answerText.text = '';\n    setUpdateEnabled(true);\n  };\n\n  if (getPollQuestion.loading || loading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      <Box display=\"flex\" justifyContent=\"flex-start\" alignItems=\"center\">\n        <Typography variant=\"h3\">Answers to these question</Typography>\n        <Chip\n          variant=\"outlined\"\n          size=\"small\"\n          color=\"primary\"\n          label={'Total answers: ' + data?.poll_answers.length}\n          style={{ marginLeft: '16px' }}\n        />\n      </Box>\n      {data?.poll_answers.length === 0 ? (\n        <Alert severity=\"info\">Please add an answer to the poll.</Alert>\n      ) : (\n        data?.poll_answers\n          .sort((a, b) => a.id - b.id)\n          .map((answer) => (\n            <FormGroup row key={answer.id}>\n              <Grid item xs={8}>\n                <TextField\n                  key={answer.id}\n                  name={answer.text + answer.id}\n                  required\n                  disabled={getPollQuestion?.data?.poll_question[0].is_active}\n                  onChange={(e) => {\n                    handleAnswerChange(answer?.id, e);\n                    setAnswerTextUpdateId(answer.id);\n                  }}\n                  size=\"medium\"\n                  variant=\"outlined\"\n                  color=\"secondary\"\n                  autoComplete=\"off\"\n                  placeholder=\"Type your answers here ...\"\n                  label={answer.text}\n                  fullWidth\n                  margin=\"dense\"\n                  InputProps={{\n                    classes: {\n                      input: classes.messageInput,\n                    },\n                  }}\n                  inputProps={{\n                    maxLength: 80,\n                  }}\n                  InputLabelProps={{\n                    className: classes.messageInput,\n                  }}\n                />\n              </Grid>\n              <Grid item xs={4}>\n                <Box\n                  display=\"flex\"\n                  justifyContent=\"flex-end\"\n                  alignItems=\"center\"\n                >\n                  <Button\n                    style={{\n                      marginTop: '8px',\n                      marginLeft: '8px',\n                      maxWidth: '100px',\n                    }}\n                    key={answer.id}\n                    variant=\"contained\"\n                    size=\"large\"\n                    color=\"secondary\"\n                    disabled={\n                      answer.id !== answerTextUpdateId\n                        ? true\n                        : false || updateEnabled === true\n                    }\n                    onClick={() => {\n                      handleUpdateAnswerText(answer.id);\n                    }}\n                  >\n                    Update\n                  </Button>\n                  <DeleteAnswer\n                    answerId={answer.id}\n                    setActiveState={\n                      getPollQuestion?.data?.poll_question[0]?.is_active\n                        ? true\n                        : false\n                    }\n                  />\n                  <Button\n                    style={{\n                      marginTop: '8px',\n                      marginLeft: '8px',\n                      whiteSpace: 'nowrap',\n                      maxWidth: '100px',\n                      minWidth: '100px',\n                    }}\n                    variant=\"outlined\"\n                    size=\"large\"\n                    color=\"secondary\"\n                    disabled={answer.votes !== undefined}\n                  >\n                    {answer.votes ? answer.votes : 'no votes'}\n                  </Button>\n                </Box>\n              </Grid>\n            </FormGroup>\n          ))\n      )}\n    </>\n  );\n};\n\nexport default PollAnswerList;\n","import React, { useEffect } from 'react';\nimport { Button } from '@material-ui/core';\nimport {\n  useWatchGetPollAnswersSubscription,\n  useSetPublishPollQuestionStateMutation,\n} from '../../api/generated/graphql';\nimport Loader from '../shared/Loader';\nimport LockIcon from '@material-ui/icons/Lock';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  lock: {\n    color: theme.palette.error.main,\n  },\n  unlock: {\n    color: theme.palette.success.main,\n  },\n}));\n\ninterface SetPollQuestionLockStateProps {\n  pollQuestionId: number;\n  setActiveState: boolean;\n}\n\nconst SetPollQuestionLockState: React.FC<SetPollQuestionLockStateProps> = ({\n  pollQuestionId,\n  setActiveState,\n}) => {\n  const classes = useStyles();\n  const [readyToPublish, setReadyToPublish] = React.useState<boolean>(\n    setActiveState,\n  );\n  const [setPollQuestionState] = useSetPublishPollQuestionStateMutation({\n    variables: {\n      pollQuestionId: pollQuestionId,\n      is_active: setActiveState,\n    },\n  });\n  const { data, loading } = useWatchGetPollAnswersSubscription({\n    variables: {\n      pollQuestionId: pollQuestionId,\n    },\n  });\n\n  useEffect(() => {\n    const totalAnswers = data?.poll_answers?.length;\n    if (totalAnswers && totalAnswers > 1) {\n      setReadyToPublish(false);\n    } else {\n      setReadyToPublish(true);\n    }\n  }, [readyToPublish, data]);\n\n  const handleSetPollQuestionPublishState = async () => {\n    await setPollQuestionState({\n      variables: {\n        pollQuestionId: pollQuestionId,\n        is_active: !setActiveState,\n      },\n    });\n  };\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      <Button\n        variant={readyToPublish ? 'outlined' : 'contained'}\n        color=\"secondary\"\n        disabled={readyToPublish}\n        endIcon={\n          setActiveState ? (\n            <LockIcon className={classes.lock} />\n          ) : (\n            <LockOpenIcon className={classes.unlock} />\n          )\n        }\n        onClick={handleSetPollQuestionPublishState}\n      >\n        {setActiveState ? 'locked' : 'unlocked'}\n      </Button>\n    </>\n  );\n};\n\nexport default SetPollQuestionLockState;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  Box,\n  Button,\n  Divider,\n  FormGroup,\n  Grid,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\nimport {\n  useWatchGetPollQuestionSubscription,\n  useAddAnswerToQuestionMutation,\n} from '../../api/generated/graphql';\nimport GetChannels from './GetChannels';\nimport GetPollAnswerId from './GetPollAnswerId';\nimport PollAnswerList from './PollAnswerList';\nimport SetPollQuestionLockState from './SetPollQuestionLockState';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  divider: {\n    marginTop: theme.spacing(5),\n    marginBottom: theme.spacing(5),\n  },\n  form: {},\n  messageInput: {\n    floatingLabelFocusStyle: {\n      color: theme.palette.secondary.dark,\n    },\n  },\n  messageButton: {\n    [theme.breakpoints.down('md')]: {\n      width: '100%',\n      size: 'small',\n    },\n    [theme.breakpoints.up('md')]: {\n      size: 'large',\n      width: '25%',\n    },\n    marginTop: theme.spacing(2),\n    marginLeft: theme.spacing(0),\n    backgroundColor: theme.palette.primary.dark,\n  },\n}));\n\ninterface ParamType {\n  question: string;\n}\n\nconst PollAnswers: React.FC = () => {\n  const classes = useStyles();\n  const [answerNewText, setAnswerNewText] = React.useState({\n    text: '',\n  });\n  const [answerText, setAnswerText] = React.useState({\n    text: '',\n  });\n  const [answerTextUpdateId, setAnswerTextUpdateId] = React.useState<number>(0);\n  const [currentAnswerId, setCurrentAnswerId] = React.useState<number>(0);\n  const { question: pollQuestionId } = useParams<ParamType>();\n  const [pollQuestionActiveState] = React.useState<boolean>();\n\n  const getPollQuestion = useWatchGetPollQuestionSubscription({\n    variables: {\n      pollQuestionId: parseInt(pollQuestionId),\n    },\n  });\n\n  const [addPollQuestionMutation] = useAddAnswerToQuestionMutation();\n\n  const handleNewAnswerChange = (index?: number, e?: any) => {\n    setAnswerNewText({ text: e.target.value });\n    setCurrentAnswerId(e.target.id);\n  };\n\n  const handleAddAnswer = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (answerNewText.text === '') return;\n    await addPollQuestionMutation({\n      variables: {\n        text: answerNewText.text,\n        pollQuestionId: parseInt(pollQuestionId),\n      },\n    });\n\n    setAnswerNewText({ text: '' });\n  };\n\n  return (\n    <>\n      <Grid item xs={12}>\n        <Box mt={3} p={0}>\n          <GetPollAnswerId pollQuestionId={parseInt(pollQuestionId)} />\n        </Box>\n\n        <Box\n          display=\"flex\"\n          justifyContent=\"space-between\"\n          alignItems=\"flex-end\"\n          mb={3}\n          mt={0}\n        >\n          <Typography variant=\"h2\">\n            {getPollQuestion?.data?.poll_question[0]?.text\n              ? getPollQuestion?.data?.poll_question[0]?.text\n              : 'no value'}\n          </Typography>\n\n          <SetPollQuestionLockState\n            pollQuestionId={parseInt(pollQuestionId)}\n            setActiveState={\n              getPollQuestion?.data?.poll_question[0]?.is_active ? true : false\n            }\n          />\n        </Box>\n        <form\n          className={classes.form}\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleAddAnswer}\n        >\n          <FormGroup row>\n            <TextField\n              key={getPollQuestion?.data?.poll_question[0]?.id}\n              name=\"poll_answer\"\n              value={answerNewText.text}\n              required\n              disabled={getPollQuestion?.data?.poll_question[0]?.is_active}\n              onChange={(e) =>\n                handleNewAnswerChange(\n                  getPollQuestion?.data?.poll_question[0]?.id,\n                  e,\n                )\n              }\n              size=\"medium\"\n              variant=\"outlined\"\n              color=\"secondary\"\n              autoComplete=\"off\"\n              placeholder=\"Type your answers here ...\"\n              label=\"Add an answer to these question\"\n              fullWidth\n              InputProps={{\n                classes: {\n                  input: classes.messageInput,\n                },\n              }}\n              inputProps={{\n                maxLength: 100,\n              }}\n              InputLabelProps={{\n                className: classes.messageInput,\n              }}\n            />\n            <Button\n              type=\"submit\"\n              value=\"Add poll title\"\n              size=\"medium\"\n              variant=\"contained\"\n              endIcon={<HowToVoteIcon />}\n              className={classes.messageButton}\n            >\n              Add answer\n            </Button>\n          </FormGroup>\n        </form>\n        <Divider className={classes.divider} />\n      </Grid>\n      <Grid item xs={12}>\n        <PollAnswerList pollQuestionId={parseInt(pollQuestionId)} />\n        <Divider className={classes.divider} />\n        <GetChannels questionId={currentAnswerId} />\n      </Grid>\n    </>\n  );\n};\n\nexport default PollAnswers;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { theme } from '../../theme/theme';\nimport { Container, Divider, Grid, Typography } from '@material-ui/core/';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport AdminSidebar from './AdminSidebar';\nimport AdminUserList from './AdminUserList';\nimport PollingDashBoard from '../adminPollings/PollingDashBoard';\nimport PollAnswers from '../adminPollings/PollAnswers';\nimport NotFound from '../shared/NotFound';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    alignItems: 'flex-start',\n    flexGrow: 1,\n    height: '100vh',\n    marginTop: theme.spacing(0),\n    paddingBottom: theme.spacing(0),\n  },\n  container: {\n    margin: theme.spacing(5),\n    marginTop: theme.spacing(5),\n  },\n  sidebar: {\n    height: '100vh',\n    maxHeight: '100vh',\n    display: 'flex',\n    alignItems: 'flex-start',\n    marginTop: theme.spacing(0),\n    paddingTop: theme.spacing(5),\n    borderRightWidth: 1,\n    borderRightStyle: 'solid',\n    borderRightColor: theme.palette.primary.dark,\n  },\n}));\n\nconst AdminContainer: React.FC = () => {\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\n  return (\n    <Container\n      component=\"main\"\n      maxWidth=\"xl\"\n      disableGutters\n      className={classes.root}\n    >\n      {matches === true && (\n        <Grid item xs={4} className={classes.sidebar}>\n          <AdminSidebar />\n        </Grid>\n      )}\n      <Grid item xs={12} md={8} className={classes.container}>\n        <Typography color=\"primary\" variant=\"h1\">\n          Admin Dashboard\n        </Typography>\n        <Divider />\n        <Switch>\n          <Route exact path=\"/dashboard/users\" component={AdminUserList} />\n          <Route exact path=\"/dashboard\" component={PollingDashBoard} />\n          <Route\n            exact\n            path=\"/dashboard/pollings\"\n            component={PollingDashBoard}\n          />\n          <Route\n            exact\n            path=\"/dashboard/pollings/edit/question/:question\"\n            component={PollAnswers}\n          />\n          <Route component={NotFound} />\n        </Switch>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default AdminContainer;\n","import React from 'react';\nimport AdminContainer from '../admin/AdminContainer';\nimport { Container } from '@material-ui/core';\n\nconst AdminBoard: React.FC = () => {\n  return (\n    <Container maxWidth=\"xl\">\n      <AdminContainer />\n    </Container>\n  );\n};\n\nexport default AdminBoard;\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { theme } from './theme/theme';\nimport { Box } from '@material-ui/core';\nimport SignIn from './components/shared/SignIn';\nimport Loader from './components/shared/Loader';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport NotFound from './components/shared/NotFound';\nimport PrivateRoute from './components/PrivateRoute';\nimport AddChannelMembers from './components/chat/AddChannelMembers';\nimport AddDirectMessageChannel from './components/chat/AddDirectMessageChannel';\nimport ThreadBoard from './components/layout/ThreadBoard';\nimport ChatBoard from './components/layout/ChatBoard';\nimport AdminBoard from './components/layout/AdminBoard';\nimport Logo from './components/shared/Logo';\n\nconst App: React.FC = () => {\n  const { isAuthenticated, user, isLoading } = useAuth0();\n\n  if (isLoading) {\n    return (\n      <>\n        <Box\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          flexDirection=\"column\"\n          style={{\n            height: '100vh',\n            backgroundColor: theme.palette.error.dark,\n          }}\n        >\n          <Box>\n            <Logo />\n            <LinearProgress color=\"primary\" style={{ marginTop: '16px' }} />\n          </Box>\n        </Box>\n      </>\n    );\n  }\n\n  if (isAuthenticated) {\n    console.log('user.id', user.sub);\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className=\"app\">\n        {isAuthenticated ? (\n          <Switch>\n            <Redirect exact from=\"/\" to=\"/channel/general\" />\n            <Redirect exact from=\"/channel\" to=\"/channel/general\" />\n\n            <PrivateRoute\n              path=\"/channel/:channel/thread/:messageId\"\n              component={ThreadBoard}\n            />\n            <PrivateRoute path=\"/channel/threads\" component={ThreadBoard} />\n            <PrivateRoute path=\"/channel/:channel\" component={ChatBoard} />\n\n            <PrivateRoute path=\"/add-user-to-channel\" component={ChatBoard} />\n            <PrivateRoute\n              path=\"/addChannelMembers\"\n              component={AddChannelMembers}\n            />\n            <PrivateRoute\n              path=\"/addDirectMessageChannelMembers\"\n              component={AddDirectMessageChannel}\n            />\n\n            <PrivateRoute path=\"/dashboard\" component={AdminBoard} />\n            <Route exact path=\"/404-not-found\" component={NotFound} />\n            <Redirect to=\"/404-not-found\" />\n          </Switch>\n        ) : (\n          <Switch>\n            <Redirect exact from=\"/\" to=\"/channel/general\" />\n            <Route path=\"/home\" component={SignIn} />\n            <PrivateRoute\n              path=\"/channel/:channel/thread/:messageId\"\n              component={ThreadBoard}\n            />\n            <PrivateRoute path=\"/channel/threads\" component={ThreadBoard} />\n            <PrivateRoute path=\"/channel/:channel\" component={ChatBoard} />\n\n            <PrivateRoute path=\"/dashboard\" component={AdminBoard} />\n            <Route exact path=\"/404-not-found\" component={NotFound} />\n            <Redirect to=\"/404-not-found\" />\n          </Switch>\n        )}\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Auth0Provider } from '@auth0/auth0-react';\nimport ApolloWrapper from './components/ApolloWrapper';\nimport './index.css';\nimport App from './App';\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = (appState: any) => {\n  window.history.replaceState(\n    {},\n    document.title,\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname,\n  );\n};\n\nconst domain: string = process.env.REACT_APP_AUTH0_DOMAIN || '';\nconst clientId: string = process.env.REACT_APP_AUTH0_CLIENT_ID || '';\nconst redirectUri: string = process.env.REACT_APP_AUTH0_REDIRECT_URI || '';\nconst audience: string = process.env.REACT_APP_AUTH0_AUDIENCE || '';\n\nReactDOM.render(\n  <Auth0Provider\n    domain={domain}\n    clientId={clientId}\n    redirectUri={redirectUri}\n    onRedirectCallback={onRedirectCallback}\n    audience={audience}\n  >\n    <BrowserRouter>\n      <RecoilRoot>\n        <ApolloWrapper>\n          <React.Fragment>\n            <App />\n          </React.Fragment>\n        </ApolloWrapper>\n      </RecoilRoot>\n    </BrowserRouter>\n  </Auth0Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}