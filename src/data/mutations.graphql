mutation insertMessage($message: message_insert_input!) {
  insert_message(objects: [$message]) {
    returning {
      id
      timestamp
      text
      user {
        username
      }
      channel {
        name
      }
    }
  }
}

mutation setUserOnline($user_id: String!) {
  update_user(
    _set: { last_seen: "now()" }
    where: { auth0_user_id: { _eq: $user_id } }
  ) {
    affected_rows
  }
}

mutation addChannel($name: String, $owner_id: String, $is_private: Boolean) {
  insert_channel(
    objects: {
      name: $name
      owner_id: $owner_id
      is_private: $is_private
      channel_type: CHAT_MESSAGE
    }
  ) {
    returning {
      id
      name
      owner_id
      is_private
    }
  }
}

mutation validateAndAddDirectMessageChannel(
  $name: String!
  $user_id1: String!
  $user_id2: String!
) {
  validateAndAddDirectMessageChannel(
    name: $name
    user_id1: $user_id1
    user_id2: $user_id2
  ) {
    id
    name
  }
}

mutation addChannelUser($channel_id: Int!, $user_id: String!) {
  addChannelUser(user_id: $user_id, channel_id: $channel_id) {
    affected_rows
  }
}

mutation sendTypingEvent($user_id: String!, $channel_id: Int!) {
  update_user(
    _set: { last_typed: "now()", last_typed_channel: $channel_id }
    where: { auth0_user_id: { _eq: $user_id } }
  ) {
    affected_rows
  }
}

mutation upsertMessageCursor(
  $channel_id: Int!
  $message_id: Int!
  $user_id: String!
) {
  insert_message_cursor(
    objects: {
      channel_id: $channel_id
      message_id: $message_id
      user_id: $user_id
    }
    on_conflict: {
      constraint: message_cursor_channel_id_user_id_key
      update_columns: message_id
    }
  ) {
    returning {
      channel_id
      message_id
      user_id
    }
  }
}

mutation addPollQuestion($text: String, $owner_id: String) {
  insert_poll_questions(objects: { text: $text, owner_id: $owner_id }) {
    affected_rows
  }
}

mutation addAnswerToQuestion($text: String!, $pollQuestionId: Int!) {
  insert_poll_anwers(objects: { question_id: $pollQuestionId, text: $text }) {
    affected_rows
  }
}

mutation addPublishPollQuestionToChannel(
  $channelID: Int!
  $pollQuestionID: Int!
) {
  channelPoll: insert_channel_poll(
    objects: {
      channel_id: $channelID
      poll_questions: $pollQuestionID
      id: $channelID
    }
    on_conflict: {
      constraint: channel_poll_pkey
      update_columns: poll_questions
      where: { id: { _eq: $channelID } }
    }
  ) {
    affected_rows
    returning {
      channel_id
      id
      poll_questions
    }
  }
}

mutation setPollAnswerVote($pollAnswerId: Int!, $newVote: Int!) {
  updatePollAnswer: update_poll_anwers(
    where: { id: { _eq: $pollAnswerId } }
    _set: { votes: $newVote }
  ) {
    affected_rows
    returning {
      votes
    }
  }
}

mutation setPublishPollQuestionState(
  $pollQuestionId: Int!
  $is_active: Boolean = false
) {
  setPollQuestionState: update_poll_questions(
    where: { id: { _eq: $pollQuestionId } }
    _set: { is_active: $is_active }
  ) {
    affected_rows
    returning {
      is_active
    }
  }
}
